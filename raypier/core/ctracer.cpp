/* Generated by Cython 0.29.30 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "raypier.core.ctracer",
        "sources": [
            "raypier/core\\ctracer.pyx"
        ]
    },
    "module_name": "raypier.core.ctracer"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_30"
#define CYTHON_HEX_VERSION 0x001D1EF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__raypier__core__ctracer
#define __PYX_HAVE_API__raypier__core__ctracer
/* Early includes */
#include "float.h"
#include <string.h>
#include <stdlib.h>
#include "math.h"
#include "stdlib.h"
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "stringsource",
  "raypier\\core\\ctracer.pyx",
  "raypier\\core\\ctracer.pxd",
  "__init__.pxd",
  "type.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* None.proto */
#if defined(__GNUC__)
#define __Pyx_PACKED __attribute__((__packed__))
#else
#define __Pyx_PACKED
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);


/*--- Type declarations ---*/
struct __pyx_obj_7raypier_4core_7ctracer_Transform;
struct __pyx_obj_7raypier_4core_7ctracer_Ray;
struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay;
struct __pyx_obj_7raypier_4core_7ctracer_Gausslet;
struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView;
struct __pyx_obj_7raypier_4core_7ctracer_RayCollection;
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection;
struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView;
struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator;
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator;
struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial;
struct __pyx_obj_7raypier_4core_7ctracer_Distortion;
struct __pyx_obj_7raypier_4core_7ctracer_Shape;
struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface;
struct __pyx_obj_7raypier_4core_7ctracer_Face;
struct __pyx_obj_7raypier_4core_7ctracer_FaceList;
struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_7raypier_4core_7ctracer_vector_t;
struct __pyx_t_7raypier_4core_7ctracer_orientation_t;
struct __pyx_t_7raypier_4core_7ctracer_ray_t;
struct __pyx_t_7raypier_4core_7ctracer_para_t;
struct __pyx_t_7raypier_4core_7ctracer_gausslet_t;
struct __pyx_t_7raypier_4core_7ctracer_transform_t;
struct __pyx_t_7raypier_4core_7ctracer_ray_pair_t;
struct __pyx_t_7raypier_4core_7ctracer_intersect_t;

/* "raypier/core/ctracer.pxd":19
 * ############################################
 * 
 * cdef struct vector_t:             # <<<<<<<<<<<<<<
 *     double x,y,z
 * 
 */
struct __pyx_t_7raypier_4core_7ctracer_vector_t {
  double x;
  double y;
  double z;
};

/* "raypier/core/ctracer.pxd":22
 *     double x,y,z
 * 
 * cdef struct orientation_t:             # <<<<<<<<<<<<<<
 *     vector_t normal, tangent
 * 
 */
struct __pyx_t_7raypier_4core_7ctracer_orientation_t {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t tangent;
};

/* "raypier/core/ctracer.pxd":40
 * 
 * 
 * cdef packed struct ray_t:             # <<<<<<<<<<<<<<
 *     #vectors
 *     vector_t origin, direction, normal, E_vector
 */
#if defined(__SUNPRO_C)
  #pragma pack(1)
#elif !defined(__GNUC__)
  #pragma pack(push, 1)
#endif
struct __Pyx_PACKED __pyx_t_7raypier_4core_7ctracer_ray_t {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t origin;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t direction;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t E_vector;
  __pyx_t_double_complex refractive_index;
  __pyx_t_double_complex E1_amp;
  __pyx_t_double_complex E2_amp;
  double length;
  double phase;
  double accumulated_path;
  unsigned int wavelength_idx;
  unsigned int parent_idx;
  unsigned int end_face_idx;
  unsigned int ray_ident;
  unsigned int ray_type_id;
};
#if defined(__SUNPRO_C)
  #pragma pack()
#elif !defined(__GNUC__)
  #pragma pack(pop)
#endif

/* "raypier/core/ctracer.pxd":54
 * 
 * ### Structure for parabasal rays. These only carry geometric information.
 * cdef packed struct para_t:             # <<<<<<<<<<<<<<
 *     #vectors
 *     vector_t origin, direction, normal
 */
#if defined(__SUNPRO_C)
  #pragma pack(1)
#elif !defined(__GNUC__)
  #pragma pack(push, 1)
#endif
struct __Pyx_PACKED __pyx_t_7raypier_4core_7ctracer_para_t {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t origin;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t direction;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t normal;
  double length;
};
#if defined(__SUNPRO_C)
  #pragma pack()
#elif !defined(__GNUC__)
  #pragma pack(pop)
#endif

/* "raypier/core/ctracer.pxd":62
 * 
 * ### A Gausslet combines a base-ray with 6 parabasal rays
 * cdef packed struct gausslet_t:             # <<<<<<<<<<<<<<
 *     ray_t base_ray
 *     para_t para[6]
 */
#if defined(__SUNPRO_C)
  #pragma pack(1)
#elif !defined(__GNUC__)
  #pragma pack(push, 1)
#endif
struct __Pyx_PACKED __pyx_t_7raypier_4core_7ctracer_gausslet_t {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t base_ray;
  struct __pyx_t_7raypier_4core_7ctracer_para_t para[6];
};
#if defined(__SUNPRO_C)
  #pragma pack()
#elif !defined(__GNUC__)
  #pragma pack(pop)
#endif

/* "raypier/core/ctracer.pxd":67
 * 
 * 
 * cdef struct transform_t:             # <<<<<<<<<<<<<<
 *     double m00, m01, m02, m10, m11, m12, m20, m21, m22
 *     double tx, ty, tz
 */
struct __pyx_t_7raypier_4core_7ctracer_transform_t {
  double m00;
  double m01;
  double m02;
  double m10;
  double m11;
  double m12;
  double m20;
  double m21;
  double m22;
  double tx;
  double ty;
  double tz;
};

/* "raypier/core/ctracer.pxd":71
 *     double tx, ty, tz
 * 
 * cdef struct ray_pair_t:             # <<<<<<<<<<<<<<
 *     ray_t trans, refln
 * 
 */
struct __pyx_t_7raypier_4core_7ctracer_ray_pair_t {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t trans;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t refln;
};

/* "raypier/core/ctracer.pxd":74
 *     ray_t trans, refln
 * 
 * cdef struct intersect_t:             # <<<<<<<<<<<<<<
 *     double dist
 *     int face_idx
 */
struct __pyx_t_7raypier_4core_7ctracer_intersect_t {
  double dist;
  int face_idx;
  int piece_idx;
};

/* "raypier/core/ctracer.pxd":106
 * ##################################
 * 
 * cdef class Transform:             # <<<<<<<<<<<<<<
 *     cdef transform_t trans
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_Transform {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_transform_t trans;
};


/* "raypier/core/ctracer.pxd":110
 * 
 * 
 * cdef class Ray:             # <<<<<<<<<<<<<<
 *     cdef:
 *         ray_t ray
 */
struct __pyx_obj_7raypier_4core_7ctracer_Ray {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_ray_t ray;
  double max_length;
};


/* "raypier/core/ctracer.pxd":116
 * 
 * 
 * cdef class ParabasalRay:             # <<<<<<<<<<<<<<
 *     cdef:
 *         para_t ray
 */
struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_para_t ray;
  double max_length;
};


/* "raypier/core/ctracer.pxd":122
 * 
 * 
 * cdef class Gausslet:             # <<<<<<<<<<<<<<
 *     cdef gausslet_t gausslet
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_Gausslet {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t gausslet;
};


/* "raypier/core/ctracer.pxd":126
 * 
 * 
 * cdef class RayArrayView:             # <<<<<<<<<<<<<<
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray)
 *     cdef ray_t get_ray_c(self, unsigned long i)
 */
struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *__pyx_vtab;
};


/* "raypier/core/ctracer.pxd":132
 * 
 * 
 * cdef class RayCollection(RayArrayView):             # <<<<<<<<<<<<<<
 *     cdef:
 *         ray_t *rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_RayCollection {
  struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView __pyx_base;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *rays;
  unsigned long n_rays;
  unsigned long max_size;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *_parent;
  __Pyx_memviewslice _wavelengths;
  __Pyx_memviewslice _neighbours;
  double _mtime;
};


/* "raypier/core/ctracer.pxd":150
 * 
 * 
 * cdef class GaussletCollection:             # <<<<<<<<<<<<<<
 *     cdef:
 *         gausslet_t *rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *__pyx_vtab;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *rays;
  unsigned long n_rays;
  unsigned long max_size;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *_parent;
  __Pyx_memviewslice _wavelengths;
};


/* "raypier/core/ctracer.pxd":162
 * 
 * 
 * cdef class GaussletBaseRayView(RayArrayView):             # <<<<<<<<<<<<<<
 *     cdef:
 *         GaussletCollection owner
 */
struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView {
  struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView __pyx_base;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *owner;
};


/* "raypier/core/ctracer.pxd":167
 * 
 * 
 * cdef class RayCollectionIterator:             # <<<<<<<<<<<<<<
 *     cdef:
 *         RayCollection rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator {
  PyObject_HEAD
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *rays;
  unsigned int counter;
};


/* "raypier/core/ctracer.pxd":173
 * 
 * 
 * cdef class GaussletCollectionIterator:             # <<<<<<<<<<<<<<
 *     cdef:
 *         GaussletCollection rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator {
  PyObject_HEAD
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *rays;
  unsigned int counter;
};


/* "raypier/core/ctracer.pxd":179
 * 
 * 
 * cdef class InterfaceMaterial(object):             # <<<<<<<<<<<<<<
 *     """Abstract base class for objects describing
 *     the materials characterics of a Face
 */
struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_vtab;
  __Pyx_memviewslice _wavelengths;
};


/* "raypier/core/ctracer.pxd":203
 * 
 * 
 * cdef class Distortion:             # <<<<<<<<<<<<<<
 *     cdef vector_t z_offset_and_gradient_c(self, double x, double y) nogil
 *     cdef double z_offset_c(self, double x, double y) nogil
 */
struct __pyx_obj_7raypier_4core_7ctracer_Distortion {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *__pyx_vtab;
};


/* "raypier/core/ctracer.pxd":208
 * 
 * 
 * cdef class Shape:             # <<<<<<<<<<<<<<
 *     cdef bint point_inside_c(self, double x, double y)
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_Shape {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *__pyx_vtab;
};


/* "raypier/core/ctracer.pxd":212
 * 
 * 
 * cdef class ImplicitSurface:             # <<<<<<<<<<<<<<
 *     cdef double evaluate_c(self, vector_t p) nogil
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface *__pyx_vtab;
};


/* "raypier/core/ctracer.pxd":216
 * 
 * 
 * cdef class Face(object):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object owner
 */
struct __pyx_obj_7raypier_4core_7ctracer_Face {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *__pyx_vtab;
  PyObject *owner;
  char *name;
  double tolerance;
  int idx;
  double max_length;
  struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *material;
  short invert_normal;
  unsigned int count;
};


/* "raypier/core/ctracer.pxd":233
 * 
 * 
 * cdef class FaceList(object):             # <<<<<<<<<<<<<<
 *     """A group of faces which share a transform"""
 *     cdef transform_t trans
 */
struct __pyx_obj_7raypier_4core_7ctracer_FaceList {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *__pyx_vtab;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t trans;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t inv_trans;
  PyObject *faces;
  PyObject *owner;
};


/* "raypier/core/ctracer.pyx":698
 *                 tuple out
 * 
 *             out = tuple(ParabasalRay() for i in range(6))             # <<<<<<<<<<<<<<
 *             for i in range(6):
 *                 p = out[i]
 */
struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr {
  PyObject_HEAD
  long __pyx_v_i;
  long __pyx_t_0;
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "raypier/core/ctracer.pyx":709
 * 
 * 
 * cdef class RayArrayView:             # <<<<<<<<<<<<<<
 *     """An abstract class to provide the API for ray_t member access from python / numpy"""
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView {
  void (*set_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long, struct __pyx_t_7raypier_4core_7ctracer_ray_t);
  struct __pyx_t_7raypier_4core_7ctracer_ray_t (*get_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long);
  unsigned long (*get_n_rays)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *__pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView;


/* "raypier/core/ctracer.pyx":965
 * 
 * 
 * cdef class RayCollection(RayArrayView):             # <<<<<<<<<<<<<<
 *     """A list-like collection of ray_t objects.
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView __pyx_base;
  PyObject *(*add_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, struct __pyx_t_7raypier_4core_7ctracer_ray_t);
  void (*reset_length_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, double);
  double (*get_mtime)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, unsigned long);
  void (*_eval_neighbours)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, __Pyx_memviewslice);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *__pyx_vtabptr_7raypier_4core_7ctracer_RayCollection;


/* "raypier/core/ctracer.pyx":1177
 * 
 * 
 * cdef class GaussletCollection:             # <<<<<<<<<<<<<<
 *     """A list-like collection of ray_t objects.
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection {
  PyObject *(*add_gausslet_c)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_t_7raypier_4core_7ctracer_gausslet_t);
  void (*extend_c)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *);
  void (*reset_length_c)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, double);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *__pyx_vtabptr_7raypier_4core_7ctracer_GaussletCollection;


/* "raypier/core/ctracer.pyx":1149
 * 
 * 
 * cdef class GaussletBaseRayView(RayArrayView):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, GaussletCollection owner):
 *         self.owner = owner
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletBaseRayView {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_vtabptr_7raypier_4core_7ctracer_GaussletBaseRayView;


/* "raypier/core/ctracer.pyx":1565
 * 
 * 
 * cdef class InterfaceMaterial(object):             # <<<<<<<<<<<<<<
 *     """Abstract base class for objects describing
 *     the materials characterics of a Face
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial {
  void (*eval_child_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, unsigned int, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_orientation_t, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *);
  struct __pyx_t_7raypier_4core_7ctracer_para_t (*eval_parabasal_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_orientation_t, unsigned int);
  void (*eval_decomposed_rays_c)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *);
  PyObject *(*on_set_wavelengths)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_vtabptr_7raypier_4core_7ctracer_InterfaceMaterial;


/* "raypier/core/ctracer.pyx":1674
 * 
 * 
 * cdef class Distortion:             # <<<<<<<<<<<<<<
 *     """A abstract base class to represents distortions on a face, a z-offset
 *     as a function of (x,y).
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t (*z_offset_and_gradient_c)(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *, double, double);
  double (*z_offset_c)(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *, double, double);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *__pyx_vtabptr_7raypier_4core_7ctracer_Distortion;


/* "raypier/core/ctracer.pyx":1651
 * 
 * 
 * cdef class Shape:             # <<<<<<<<<<<<<<
 *     cdef bint point_inside_c(self, double x, double y):
 *         return 1
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape {
  int (*point_inside_c)(struct __pyx_obj_7raypier_4core_7ctracer_Shape *, double, double);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *__pyx_vtabptr_7raypier_4core_7ctracer_Shape;


/* "raypier/core/ctracer.pyx":1659
 * 
 * 
 * cdef class ImplicitSurface:             # <<<<<<<<<<<<<<
 *     """Positions 'outside' the surface evaluate > 0.0
 *     """
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface {
  double (*evaluate_c)(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *, struct __pyx_t_7raypier_4core_7ctracer_vector_t);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface *__pyx_vtabptr_7raypier_4core_7ctracer_ImplicitSurface;


/* "raypier/core/ctracer.pyx":1724
 * 
 * 
 * cdef class Face(object):             # <<<<<<<<<<<<<<
 * 
 *     params = []
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face {
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*intersect_c)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
  struct __pyx_t_7raypier_4core_7ctracer_vector_t (*compute_normal_c)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
  struct __pyx_t_7raypier_4core_7ctracer_vector_t (*compute_tangent_c)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *__pyx_vtabptr_7raypier_4core_7ctracer_Face;


/* "raypier/core/ctracer.pyx":1801
 * 
 * 
 * cdef class FaceList(object):             # <<<<<<<<<<<<<<
 *     """A group of faces which share a transform"""
 *     def __cinit__(self, owner=None):
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList {
  void (*sync_transforms)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, int __pyx_skip_dispatch);
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*intersect_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t);
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*intersect_one_face_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
  int (*intersect_para_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_para_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_obj_7raypier_4core_7ctracer_Face *);
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t (*compute_orientation_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *__pyx_vtabptr_7raypier_4core_7ctracer_FaceList;


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_unsigned_long(unsigned long value, Py_ssize_t width, char padding_char, char format_char);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_int(PyObject *, int writable_flag);

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj);

struct __pyx_t_7raypier_4core_7ctracer_vector_t;
static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(struct __pyx_t_7raypier_4core_7ctracer_vector_t s);
/* ToPy.proto */
#define __pyx_PyComplex_FromComplex(z)\
        PyComplex_FromDoubles((double)__Pyx_CREAL(z),\
                              (double)__Pyx_CIMAG(z))

struct __pyx_t_7raypier_4core_7ctracer_ray_t;
static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_ray_t(struct __pyx_t_7raypier_4core_7ctracer_ray_t s);
struct __pyx_t_7raypier_4core_7ctracer_para_t;
static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(struct __pyx_t_7raypier_4core_7ctracer_para_t s);
struct __pyx_t_7raypier_4core_7ctracer_gausslet_t;
static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_gausslet_t(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t s);
/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(PyObject *, int writable_flag);

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrExport.proto */
static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_7raypier_4core_7ctracer_12RayArrayView_set_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, CYTHON_UNUSED unsigned long __pyx_v_i, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_f_7raypier_4core_7ctracer_12RayArrayView_get_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, CYTHON_UNUSED unsigned long __pyx_v_i); /* proto*/
static unsigned long __pyx_f_7raypier_4core_7ctracer_12RayArrayView_get_n_rays(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_f_7raypier_4core_7ctracer_13RayCollection_get_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, unsigned long __pyx_v_i); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_13RayCollection_set_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, unsigned long __pyx_v_i, struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray); /* proto*/
static unsigned long __pyx_f_7raypier_4core_7ctracer_13RayCollection_get_n_rays(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7raypier_4core_7ctracer_13RayCollection_add_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_r); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_13RayCollection_reset_length_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, double __pyx_v_max_length); /* proto*/
static double __pyx_f_7raypier_4core_7ctracer_13RayCollection_get_mtime(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, unsigned long __pyx_v_guard); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_13RayCollection__eval_neighbours(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, __Pyx_memviewslice __pyx_v_pnb); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_set_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, unsigned long __pyx_v_i, struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_get_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, unsigned long __pyx_v_i); /* proto*/
static unsigned long __pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_get_n_rays(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7raypier_4core_7ctracer_18GaussletCollection_add_gausslet_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_gausslet_t __pyx_v_r); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_18GaussletCollection_reset_length_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, double __pyx_v_max_length); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_18GaussletCollection_extend_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gc); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_child_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_old_ray, CYTHON_UNUSED unsigned int __pyx_v_ray_idx, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient, CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_new_rays); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_parabasal_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_base_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_direction, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point, struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient, unsigned int __pyx_v_ray_type_id); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_decomposed_rays_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_child_rays); /* proto*/
static PyObject *__pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_on_set_wavelengths(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self); /* proto*/
static int __pyx_f_7raypier_4core_7ctracer_5Shape_point_inside_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_7ctracer_15ImplicitSurface_evaluate_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_10Distortion_z_offset_and_gradient_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_7ctracer_10Distortion_z_offset_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_7ctracer_4Face_intersect_c(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, CYTHON_UNUSED int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_4Face_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_4Face_compute_tangent_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static void __pyx_f_7raypier_4core_7ctracer_8FaceList_sync_transforms(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_one_face_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ray_end, int __pyx_v_face_idx); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ray_end); /* proto*/
static int __pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_para_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ray_end, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_f_7raypier_4core_7ctracer_8FaceList_compute_orientation_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point, int __pyx_v_piece); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'raypier.core.ctracer' */
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Transform = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Ray = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_ParabasalRay = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Gausslet = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_RayArrayView = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_RayCollection = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_GaussletBaseRayView = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_RayCollectionIterator = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_GaussletCollectionIterator = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Distortion = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Shape = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Face = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_FaceList = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer___pyx_scope_struct__genexpr = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static double __pyx_v_7raypier_4core_7ctracer_INF;
static int __pyx_v_7raypier_4core_7ctracer_NPARA;
__PYX_EXTERN_C DL_EXPORT(unsigned int) REFL_RAY;
__PYX_EXTERN_C DL_EXPORT(unsigned int) GAUSSLET;
__PYX_EXTERN_C DL_EXPORT(unsigned int) PARABASAL;
static double __pyx_v_7raypier_4core_7ctracer_root2;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_transform_c(struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_rotate_c(struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_set_v(PyObject *); /*proto*/
static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_sep_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_multvv_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_multvs_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, double); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_addvv_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_addvs_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, double); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_subvv_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_subvs_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, double); /*proto*/
static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_dotprod_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_cross_(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_norm_(struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_mag_(struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_mag_sq_(struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_invert_(struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_f_7raypier_4core_7ctracer_trace_segment_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, PyObject *, PyObject *, PyObject *, float); /*proto*/
static struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_f_7raypier_4core_7ctracer_trace_one_face_segment_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, int, PyObject *, PyObject *, float); /*proto*/
static struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_f_7raypier_4core_7ctracer_trace_gausslet_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, PyObject *, PyObject *, PyObject *, double); /*proto*/
static struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_f_7raypier_4core_7ctracer_trace_one_face_gausslet_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, int, PyObject *, PyObject *, double); /*proto*/
static double __pyx_f_7raypier_4core_7ctracer_ray_power_(struct __pyx_t_7raypier_4core_7ctracer_ray_t); /*proto*/
static void __pyx_f_7raypier_4core_7ctracer_trace_parabasal_rays(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, double, int); /*proto*/
static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_RayArrayView__set_state(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, PyObject *); /*proto*/
static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Shape__set_state(struct __pyx_obj_7raypier_4core_7ctracer_Shape *, PyObject *); /*proto*/
static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_ImplicitSurface__set_state(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *, PyObject *); /*proto*/
static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Distortion__set_state(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *, PyObject *); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(PyObject *); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(struct __pyx_t_7raypier_4core_7ctracer_para_t *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t(struct __pyx_t_7raypier_4core_7ctracer_para_t *, Py_ssize_t); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
#define __Pyx_MODULE_NAME "raypier.core.ctracer"
extern int __pyx_module_is_main_raypier__core__ctracer;
int __pyx_module_is_main_raypier__core__ctracer = 0;

/* Implementation of 'raypier.core.ctracer' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = ", d=";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v_";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__9[] = ")";
static const char __pyx_k_fs[] = "fs";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_p1[] = "p1";
static const char __pyx_k_p2[] = "p2";
static const char __pyx_k_rc[] = "rc";
static const char __pyx_k_INF[] = "INF";
static const char __pyx_k_Ray[] = "Ray";
static const char __pyx_k_a_2[] = "a_";
static const char __pyx_k_b_2[] = "b_";
static const char __pyx_k_c_2[] = "c_";
static const char __pyx_k_d_2[] = "d";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_mag[] = "mag";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_ray[] = "ray";
static const char __pyx_k_sep[] = "sep";
static const char __pyx_k_v_2[] = "v";
static const char __pyx_k_Face[] = "Face";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_face[] = "face";
static const char __pyx_k_full[] = "full";
static const char __pyx_k_imag[] = "imag";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_para[] = "para";
static const char __pyx_k_rays[] = "rays";
static const char __pyx_k_real[] = "real";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_NPARA[] = "NPARA";
static const char __pyx_k_Ray_o[] = "Ray(o=";
static const char __pyx_k_Shape[] = "Shape";
static const char __pyx_k_addvs[] = "addvs";
static const char __pyx_k_addvv[] = "addvv";
static const char __pyx_k_array[] = " array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cross[] = "cross";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_owner[] = "owner";
static const char __pyx_k_phase[] = "phase";
static const char __pyx_k_piece[] = "piece";
static const char __pyx_k_point[] = "point";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_subvs[] = "subvs";
static const char __pyx_k_subvv[] = "subvv";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_E1_amp[] = "E1_amp";
static const char __pyx_k_E2_amp[] = "E2_amp";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_invert[] = "invert";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_mag_sq[] = "mag_sq";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_multvs[] = "multvs";
static const char __pyx_k_multvv[] = "multvv";
static const char __pyx_k_n_rays[] = "n_rays";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_normal[] = "normal";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_rc_out[] = "rc_out";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_array_2[] = "array";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_dotprod[] = "dotprod";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_inverse[] = "inverse";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_old_ray[] = "old_ray";
static const char __pyx_k_ray_idx[] = "ray_idx";
static const char __pyx_k_reduced[] = "reduced";
static const char __pyx_k_reflect[] = "reflect";
static const char __pyx_k_tangent[] = "tangent";
static const char __pyx_k_wl_list[] = "wl_list";
static const char __pyx_k_E_vector[] = "E_vector";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_FaceList[] = "FaceList";
static const char __pyx_k_GAUSSLET[] = "GAUSSLET";
static const char __pyx_k_Gausslet[] = "Gausslet";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_NO_OWNER[] = "NO OWNER";
static const char __pyx_k_REFL_RAY[] = "REFL_RAY";
static const char __pyx_k_base_ray[] = "base_ray";
static const char __pyx_k_face_idx[] = "face_idx";
static const char __pyx_k_face_set[] = "face_set";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_material[] = "material";
static const char __pyx_k_max_size[] = "max_size";
static const char __pyx_k_new_rays[] = "new_rays";
static const char __pyx_k_py_set_v[] = "py_set_v";
static const char __pyx_k_pyx_capi[] = "__pyx_capi__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_rotation[] = "rotation";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_PARABASAL[] = "PARABASAL";
static const char __pyx_k_Transform[] = "Transform";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_ray_c[] = "add_ray_c";
static const char __pyx_k_all_faces[] = "all_faces";
static const char __pyx_k_amplitude[] = "amplitude";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_face_sets[] = "face_sets";
static const char __pyx_k_from_rays[] = "from_rays";
static const char __pyx_k_monotonic[] = "monotonic";
static const char __pyx_k_para_rays[] = "para_rays";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_ray_dtype[] = "ray_dtype";
static const char __pyx_k_ray_ident[] = "ray_ident";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_tolerance[] = "tolerance";
static const char __pyx_k_transform[] = "transform";
static const char __pyx_k_wl_offset[] = "wl_offset";
static const char __pyx_k_Distortion[] = "Distortion";
static const char __pyx_k_GAUSSLET_2[] = "GAUSSLET_";
static const char __pyx_k_Gausslet_o[] = "Gausslet(o=";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_cmaterials[] = "cmaterials";
static const char __pyx_k_complex128[] = "complex128";
static const char __pyx_k_from_array[] = "from_array";
static const char __pyx_k_max_length[] = "max_length";
static const char __pyx_k_neighbours[] = "neighbours";
static const char __pyx_k_para_dtype[] = "para_dtype";
static const char __pyx_k_parent_idx[] = "parent_idx";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PARABASAL_2[] = "PARABASAL_";
static const char __pyx_k_PECMaterial[] = "PECMaterial";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_from_a_size[] = " from a size ";
static const char __pyx_k_get_element[] = "get_element";
static const char __pyx_k_is_base_ray[] = "is_base_ray";
static const char __pyx_k_ray_type_id[] = "ray_type_id";
static const char __pyx_k_translation[] = "translation";
static const char __pyx_k_wavelengths[] = "wavelengths";
static const char __pyx_k_ParabasalRay[] = "ParabasalRay";
static const char __pyx_k_RayArrayView[] = "RayArrayView";
static const char __pyx_k_decomp_faces[] = "decomp_faces";
static const char __pyx_k_end_face_idx[] = "end_face_idx";
static const char __pyx_k_get_ray_size[] = "get_ray_size";
static const char __pyx_k_jones_vector[] = "jones_vector";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_ray_col_list[] = "ray_col_list";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_working_dist[] = "working_dist";
static const char __pyx_k_RayCollection[] = "RayCollection";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_invert_normal[] = "invert_normal";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_trace_segment[] = "trace_segment";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_gausslet_dtype[] = "gausslet_dtype";
static const char __pyx_k_linear_inverse[] = "linear_inverse";
static const char __pyx_k_return_inverse[] = "return_inverse";
static const char __pyx_k_trace_gausslet[] = "trace_gausslet";
static const char __pyx_k_wavelength_idx[] = "wavelength_idx";
static const char __pyx_k_ImplicitSurface[] = "ImplicitSurface";
static const char __pyx_k_Parabasal_Ray_o[] = "Parabasal Ray(o=";
static const char __pyx_k_Requested_index[] = "Requested index ";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_sync_transforms[] = "sync_transforms";
static const char __pyx_k_wavelength_list[] = "wavelength_list";
static const char __pyx_k_accumulated_path[] = "accumulated_path";
static const char __pyx_k_refractive_index[] = "refractive_index";
static const char __pyx_k_InterfaceMaterial[] = "InterfaceMaterial";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_inverse_transform[] = "inverse_transform";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_GaussletCollection[] = "GaussletCollection";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pyx_unpickle_Shape[] = "__pyx_unpickle_Shape";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_GaussletBaseRayView[] = "GaussletBaseRayView";
static const char __pyx_k_raypier_core_ctracer[] = "raypier.core.ctracer";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_RayCollectionIterator[] = "RayCollectionIterator";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_trace_one_face_segment[] = "trace_one_face_segment";
static const char __pyx_k_Attempting_to_set_index[] = "Attempting to set index ";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_pyx_unpickle_Distortion[] = "__pyx_unpickle_Distortion";
static const char __pyx_k_trace_one_face_gausslet[] = "trace_one_face_gausslet";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_raypier_core_ctracer_pyx[] = "raypier\\core\\ctracer.pyx";
static const char __pyx_k_select_ray_intersections[] = "select_ray_intersections";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_pyx_unpickle_RayArrayView[] = "__pyx_unpickle_RayArrayView";
static const char __pyx_k_GaussletCollectionIterator[] = "GaussletCollectionIterator";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_pyx_unpickle_ImplicitSurface[] = "__pyx_unpickle_ImplicitSurface";
static const char __pyx_k_select_gausslet_intersections[] = "select_gausslet_intersections";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Both_x_and_y_must_have_the_same[] = "Both x and y must have the same length";
static const char __pyx_k_Gausslet___get___locals_genexpr[] = "Gausslet.__get__.<locals>.genexpr";
static const char __pyx_k_Pickling_of_struct_members_such[] = "Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Array_must_have_gausslet_dtype_d[] = "Array must have gausslet_dtype dtype";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'x'";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_ray_list_contains_non_Gausslet_i[] = "ray list contains non-Gausslet instance at index %d";
static const char __pyx_k_ray_list_contains_non_Ray_instan[] = "ray list contains non-Ray instance at index %d";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'y'";
static const char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 'z'";
static const char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'origin'";
static const char __pyx_k_No_value_specified_for_struct_at_5[] = "No value specified for struct attribute 'direction'";
static const char __pyx_k_No_value_specified_for_struct_at_6[] = "No value specified for struct attribute 'normal'";
static const char __pyx_k_No_value_specified_for_struct_at_7[] = "No value specified for struct attribute 'length'";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_u_Array_must_have_gausslet_dtype_d;
static PyObject *__pyx_kp_u_Attempting_to_set_index;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_u_Both_x_and_y_must_have_the_same;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Distortion;
static PyObject *__pyx_n_s_E1_amp;
static PyObject *__pyx_n_u_E1_amp;
static PyObject *__pyx_n_s_E2_amp;
static PyObject *__pyx_n_u_E2_amp;
static PyObject *__pyx_n_s_E_vector;
static PyObject *__pyx_n_u_E_vector;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Face;
static PyObject *__pyx_n_s_FaceList;
static PyObject *__pyx_n_s_GAUSSLET;
static PyObject *__pyx_n_s_GAUSSLET_2;
static PyObject *__pyx_n_s_Gausslet;
static PyObject *__pyx_n_s_GaussletBaseRayView;
static PyObject *__pyx_n_s_GaussletCollection;
static PyObject *__pyx_n_s_GaussletCollectionIterator;
static PyObject *__pyx_n_s_Gausslet___get___locals_genexpr;
static PyObject *__pyx_kp_u_Gausslet_o;
static PyObject *__pyx_n_s_INF;
static PyObject *__pyx_n_s_ImplicitSurface;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_n_s_InterfaceMaterial;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_u_NO_OWNER;
static PyObject *__pyx_n_s_NPARA;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_3;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_4;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_5;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_6;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_7;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PARABASAL;
static PyObject *__pyx_n_s_PARABASAL_2;
static PyObject *__pyx_n_s_PECMaterial;
static PyObject *__pyx_n_s_ParabasalRay;
static PyObject *__pyx_kp_u_Parabasal_Ray_o;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Pickling_of_struct_members_such;
static PyObject *__pyx_n_s_REFL_RAY;
static PyObject *__pyx_n_s_Ray;
static PyObject *__pyx_n_s_RayArrayView;
static PyObject *__pyx_n_s_RayCollection;
static PyObject *__pyx_n_s_RayCollectionIterator;
static PyObject *__pyx_kp_u_Ray_o;
static PyObject *__pyx_kp_u_Requested_index;
static PyObject *__pyx_n_s_Shape;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_Transform;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_a_2;
static PyObject *__pyx_n_s_accumulated_path;
static PyObject *__pyx_n_u_accumulated_path;
static PyObject *__pyx_n_s_add_ray_c;
static PyObject *__pyx_n_s_addvs;
static PyObject *__pyx_n_s_addvv;
static PyObject *__pyx_n_s_all_faces;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_amplitude;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_u_array;
static PyObject *__pyx_n_s_array_2;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_ascontiguousarray;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_b_2;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_base_ray;
static PyObject *__pyx_n_u_base_ray;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_c_2;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cmaterials;
static PyObject *__pyx_n_s_complex128;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_cross;
static PyObject *__pyx_kp_u_d;
static PyObject *__pyx_n_u_d_2;
static PyObject *__pyx_n_s_decomp_faces;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_direction;
static PyObject *__pyx_n_u_direction;
static PyObject *__pyx_n_s_dotprod;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end_face_idx;
static PyObject *__pyx_n_u_end_face_idx;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_face;
static PyObject *__pyx_n_s_face_idx;
static PyObject *__pyx_n_s_face_set;
static PyObject *__pyx_n_s_face_sets;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_kp_u_from_a_size;
static PyObject *__pyx_n_s_from_array;
static PyObject *__pyx_n_s_from_rays;
static PyObject *__pyx_n_s_fs;
static PyObject *__pyx_n_s_full;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_gausslet_dtype;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_element;
static PyObject *__pyx_n_s_get_ray_size;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_imag;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_inverse;
static PyObject *__pyx_n_s_inverse_transform;
static PyObject *__pyx_n_s_invert;
static PyObject *__pyx_n_u_invert_normal;
static PyObject *__pyx_n_s_is_base_ray;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_jones_vector;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_u_length;
static PyObject *__pyx_n_s_linear_inverse;
static PyObject *__pyx_n_s_mag;
static PyObject *__pyx_n_s_mag_sq;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_material;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_max_length;
static PyObject *__pyx_n_s_max_size;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_monotonic;
static PyObject *__pyx_n_s_multvs;
static PyObject *__pyx_n_s_multvv;
static PyObject *__pyx_n_s_n_rays;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_neighbours;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_new_rays;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_normal;
static PyObject *__pyx_n_u_normal;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_old_ray;
static PyObject *__pyx_n_s_origin;
static PyObject *__pyx_n_u_origin;
static PyObject *__pyx_n_s_owner;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_p1;
static PyObject *__pyx_n_s_p2;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_para;
static PyObject *__pyx_n_s_para_dtype;
static PyObject *__pyx_n_u_para_rays;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_parent_idx;
static PyObject *__pyx_n_u_parent_idx;
static PyObject *__pyx_n_s_phase;
static PyObject *__pyx_n_u_phase;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_piece;
static PyObject *__pyx_n_s_point;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_set_v;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_capi;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Distortion;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_unpickle_ImplicitSurface;
static PyObject *__pyx_n_s_pyx_unpickle_RayArrayView;
static PyObject *__pyx_n_s_pyx_unpickle_Shape;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ray;
static PyObject *__pyx_n_s_ray_col_list;
static PyObject *__pyx_n_s_ray_dtype;
static PyObject *__pyx_n_s_ray_ident;
static PyObject *__pyx_n_u_ray_ident;
static PyObject *__pyx_n_s_ray_idx;
static PyObject *__pyx_kp_u_ray_list_contains_non_Gausslet_i;
static PyObject *__pyx_kp_u_ray_list_contains_non_Ray_instan;
static PyObject *__pyx_n_s_ray_type_id;
static PyObject *__pyx_n_u_ray_type_id;
static PyObject *__pyx_n_s_raypier_core_ctracer;
static PyObject *__pyx_kp_s_raypier_core_ctracer_pyx;
static PyObject *__pyx_n_s_rays;
static PyObject *__pyx_n_s_rc;
static PyObject *__pyx_n_s_rc_out;
static PyObject *__pyx_n_s_real;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reduced;
static PyObject *__pyx_n_s_reflect;
static PyObject *__pyx_n_s_refractive_index;
static PyObject *__pyx_n_u_refractive_index;
static PyObject *__pyx_n_s_return_inverse;
static PyObject *__pyx_n_s_rotation;
static PyObject *__pyx_n_s_select_gausslet_intersections;
static PyObject *__pyx_n_s_select_ray_intersections;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_subvs;
static PyObject *__pyx_n_s_subvv;
static PyObject *__pyx_n_s_sync_transforms;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tangent;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_tolerance;
static PyObject *__pyx_n_s_trace_gausslet;
static PyObject *__pyx_n_s_trace_one_face_gausslet;
static PyObject *__pyx_n_s_trace_one_face_segment;
static PyObject *__pyx_n_s_trace_segment;
static PyObject *__pyx_n_s_transform;
static PyObject *__pyx_n_s_translation;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_v_2;
static PyObject *__pyx_n_s_wavelength_idx;
static PyObject *__pyx_n_u_wavelength_idx;
static PyObject *__pyx_n_s_wavelength_list;
static PyObject *__pyx_n_s_wavelengths;
static PyObject *__pyx_n_s_wl_list;
static PyObject *__pyx_n_s_wl_offset;
static PyObject *__pyx_n_s_working_dist;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_pf_7raypier_4core_7ctracer_py_set_v(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_O); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_2sep(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4invert(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_6multvv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8multvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_10addvv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12addvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_14subvv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_16subvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18mag(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_20mag_sq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_22dotprod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_24cross(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_26norm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_9Transform___init__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, PyObject *__pyx_v_rotation, PyObject *__pyx_v_translation); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_9Transform_8rotation___set__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, PyObject *__pyx_v_rot); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_8rotation_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_9Transform_11translation___set__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, PyObject *__pyx_v_dt); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_11translation_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_2__iter__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_4__next__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_2__iter__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_4__next__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_2__repr__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6origin_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_9direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_9direction_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6normal_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6length___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6length_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_11termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_2__repr__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6origin_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_9direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_9direction_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6normal_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_8E_vector___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_8E_vector_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6length___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6length_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_5phase___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_5phase_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_16accumulated_path___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_16accumulated_path_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_14wavelength_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_14wavelength_idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_11termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_16refractive_index___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_16refractive_index_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6E1_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6E1_amp_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6E2_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6E2_amp_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_10parent_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_10parent_idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_12end_face_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_12end_face_idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_9ray_ident___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_9ray_ident_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_11ray_type_id___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_3Ray_11ray_type_id_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_5power___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_9amplitude___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_12jones_vector___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6E_left___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_7E_right___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_11ellipticity___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_16major_minor_axes___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_4project_E(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8Gausslet___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_2__repr__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_8base_ray___get__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8Gausslet_8base_ray_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___genexpr(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, PyObject *__pyx_v_paras); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView___getitem__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, size_t __pyx_v_idx); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_2__setitem__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, size_t __pyx_v_idx, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_4get_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_9direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_8E_vector___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_16refractive_index___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6E1_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6E2_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6length___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_5phase___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_16accumulated_path___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_14wavelength_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_10parent_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_12end_face_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_9ray_ident___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_11ray_type_id___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_11termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_8__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, size_t __pyx_v_max_size); /* proto */
static void __pyx_pf_7raypier_4core_7ctracer_13RayCollection_2__dealloc__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7raypier_4core_7ctracer_13RayCollection_4__len__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_6reset_length(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, double __pyx_v_max_length); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_8add_ray(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_10add_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, PyObject *__pyx_v_rays); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_12clear_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_14__iter__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_16copy_as_array(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_9base_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_11wavelengths___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection_11wavelengths_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, PyObject *__pyx_v_wl_list); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_10neighbours___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection_10neighbours_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, __Pyx_memviewslice __pyx_v_nb); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_6parent___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection_6parent_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rc); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_18from_array(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyArrayObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_6n_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_8max_size___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_owner); /* proto */
static Py_ssize_t __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_2__len__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_4copy_as_array(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, size_t __pyx_v_max_size); /* proto */
static void __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_2__dealloc__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_4__len__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6parent___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6parent_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gc); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6add_gausslet(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_8add_gausslet_list(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, PyObject *__pyx_v_rays); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_10reset_length(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, double __pyx_v_max_length); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_12clear_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_14get_gausslet_list(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_16__getitem__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, size_t __pyx_v_idx); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_18__setitem__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, size_t __pyx_v_idx, struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_20__iter__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_22copy_as_array(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_24extend(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gc); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_26from_array(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyArrayObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_28from_rays(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyArrayObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_18lagrange_invariant___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_30project_to_plane(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_direction); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_32scale_amplitude(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, __pyx_t_double_complex __pyx_v_scale); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_34config_parabasal_rays(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, __Pyx_memviewslice __pyx_v_wavelength_list, double __pyx_v_radius, double __pyx_v_working_dist); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_9base_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11total_power___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, PyObject *__pyx_v_wl_list); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11para_origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_14para_direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11para_normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_16para_termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6n_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_8max_size___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_2is_decomp_material(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_4eval_child_ray(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_old_ray, PyObject *__pyx_v_ray_idx, PyObject *__pyx_v_point, PyObject *__pyx_v_normal, PyObject *__pyx_v_tangent, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_new_rays); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_6eval_parabasal_ray(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_base_ray, PyObject *__pyx_v_direction, PyObject *__pyx_v_point, PyObject *__pyx_v_normal, PyObject *__pyx_v_tangent, PyObject *__pyx_v_reflect); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths___set__(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, __Pyx_memviewslice __pyx_v_wavelengths); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_5Shape_point_inside(struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_5Shape_2__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_5Shape_4__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_evaluate(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_2__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_4__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_z_offset_and_gradient(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_2z_offset(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_4__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_6__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_owner, PyObject *__pyx_v_tolerance, PyObject *__pyx_v_max_length, PyObject *__pyx_v_material, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_2update(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_4intersect(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_p1, PyObject *__pyx_v_p2, int __pyx_v_is_base_ray); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_6compute_normal(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_8compute_tangent(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_5owner___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_5owner_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_5owner_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_4name___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_4name_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_9tolerance___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_9tolerance_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_3idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_3idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_10max_length___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_10max_length_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_8material___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_8material_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_8material_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_13invert_normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_13invert_normal_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_5count___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_4Face_5count_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8FaceList___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_owner); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_2sync_transforms(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_9transform___set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_9transform_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_17inverse_transform___set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_17inverse_transform_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_4__getitem__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_intidx); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_6intersect(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_8intersect_para(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_r, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_10compute_orientation(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face, PyObject *__pyx_v_point, int __pyx_v_piece); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces___get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner___get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_28select_ray_intersections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, PyObject *__pyx_v_ray_col_list); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_30select_gausslet_intersections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, PyObject *__pyx_v_ray_col_list); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_32trace_segment(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays, PyObject *__pyx_v_face_sets, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_34trace_one_face_segment(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, int __pyx_v_face_idx, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_36trace_gausslet(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays, PyObject *__pyx_v_face_sets, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_38trace_one_face_gausslet(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, int __pyx_v_face_idx, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_40transform(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_42get_ray_size(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_44__pyx_unpickle_RayArrayView(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_46__pyx_unpickle_Shape(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_48__pyx_unpickle_ImplicitSurface(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_7ctracer_50__pyx_unpickle_Distortion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Transform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Ray(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_ParabasalRay(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Gausslet(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_RayArrayView(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_RayCollection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_GaussletCollection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_GaussletBaseRayView(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_RayCollectionIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_GaussletCollectionIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_InterfaceMaterial(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Distortion(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Shape(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_ImplicitSurface(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Face(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_FaceList(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_7ctracer___pyx_scope_struct__genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static PyObject *__pyx_float_0_0001;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_int_228825662;
static PyObject *__pyx_int_238750788;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k_;
static PyObject *__pyx_k__2;
static double __pyx_k__16;
static double __pyx_k__21;
static PyObject *__pyx_k__32;
static PyObject *__pyx_k__33;
static PyObject *__pyx_k__34;
static PyObject *__pyx_k__35;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_slice__61;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__80;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__98;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__124;
/* Late includes */
unsigned int REFL_RAY;
unsigned int GAUSSLET;
unsigned int PARABASAL;

/* "raypier/core/ctracer.pyx":75
 * ##############################
 * 
 * cdef inline vector_t transform_c(transform_t t, vector_t p) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02 + t.tx
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_transform_c(struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_v_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":77
 * cdef inline vector_t transform_c(transform_t t, vector_t p) nogil:
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02 + t.tx             # <<<<<<<<<<<<<<
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12 + t.ty
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22 + t.tz
 */
  __pyx_v_out.x = ((((__pyx_v_p.x * __pyx_v_t.m00) + (__pyx_v_p.y * __pyx_v_t.m01)) + (__pyx_v_p.z * __pyx_v_t.m02)) + __pyx_v_t.tx);

  /* "raypier/core/ctracer.pyx":78
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02 + t.tx
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12 + t.ty             # <<<<<<<<<<<<<<
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22 + t.tz
 *     return out
 */
  __pyx_v_out.y = ((((__pyx_v_p.x * __pyx_v_t.m10) + (__pyx_v_p.y * __pyx_v_t.m11)) + (__pyx_v_p.z * __pyx_v_t.m12)) + __pyx_v_t.ty);

  /* "raypier/core/ctracer.pyx":79
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02 + t.tx
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12 + t.ty
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22 + t.tz             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = ((((__pyx_v_p.x * __pyx_v_t.m20) + (__pyx_v_p.y * __pyx_v_t.m21)) + (__pyx_v_p.z * __pyx_v_t.m22)) + __pyx_v_t.tz);

  /* "raypier/core/ctracer.pyx":80
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12 + t.ty
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22 + t.tz
 *     return out             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t rotate_c(transform_t t, vector_t p) nogil:
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":75
 * ##############################
 * 
 * cdef inline vector_t transform_c(transform_t t, vector_t p) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02 + t.tx
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":82
 *     return out
 * 
 * cdef inline vector_t rotate_c(transform_t t, vector_t p) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_rotate_c(struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_v_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":84
 * cdef inline vector_t rotate_c(transform_t t, vector_t p) nogil:
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02             # <<<<<<<<<<<<<<
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22
 */
  __pyx_v_out.x = (((__pyx_v_p.x * __pyx_v_t.m00) + (__pyx_v_p.y * __pyx_v_t.m01)) + (__pyx_v_p.z * __pyx_v_t.m02));

  /* "raypier/core/ctracer.pyx":85
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12             # <<<<<<<<<<<<<<
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22
 *     return out
 */
  __pyx_v_out.y = (((__pyx_v_p.x * __pyx_v_t.m10) + (__pyx_v_p.y * __pyx_v_t.m11)) + (__pyx_v_p.z * __pyx_v_t.m12));

  /* "raypier/core/ctracer.pyx":86
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = (((__pyx_v_p.x * __pyx_v_t.m20) + (__pyx_v_p.y * __pyx_v_t.m21)) + (__pyx_v_p.z * __pyx_v_t.m22));

  /* "raypier/core/ctracer.pyx":87
 *     out.y = p.x*t.m10 + p.y*t.m11 + p.z*t.m12
 *     out.z = p.x*t.m20 + p.y*t.m21 + p.z*t.m22
 *     return out             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t set_v(object O):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":82
 *     return out
 * 
 * cdef inline vector_t rotate_c(transform_t t, vector_t p) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = p.x*t.m00 + p.y*t.m01 + p.z*t.m02
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":89
 *     return out
 * 
 * cdef inline vector_t set_v(object O):             # <<<<<<<<<<<<<<
 *     cdef vector_t v
 *     v.x = O[0]
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_set_v(PyObject *__pyx_v_O) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_v", 0);

  /* "raypier/core/ctracer.pyx":91
 * cdef inline vector_t set_v(object O):
 *     cdef vector_t v
 *     v.x = O[0]             # <<<<<<<<<<<<<<
 *     v.y = O[1]
 *     v.z = O[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_O, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 91, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_v.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":92
 *     cdef vector_t v
 *     v.x = O[0]
 *     v.y = O[1]             # <<<<<<<<<<<<<<
 *     v.z = O[2]
 *     return v
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_O, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_v.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":93
 *     v.x = O[0]
 *     v.y = O[1]
 *     v.z = O[2]             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_O, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_v.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":94
 *     v.y = O[1]
 *     v.z = O[2]
 *     return v             # <<<<<<<<<<<<<<
 * 
 * def py_set_v(O):
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":89
 *     return out
 * 
 * cdef inline vector_t set_v(object O):             # <<<<<<<<<<<<<<
 *     cdef vector_t v
 *     v.x = O[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("raypier.core.ctracer.set_v", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":96
 *     return v
 * 
 * def py_set_v(O):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_
 *     v_ = set_v(O)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_1py_set_v(PyObject *__pyx_self, PyObject *__pyx_v_O); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_1py_set_v = {"py_set_v", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_1py_set_v, METH_O, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_1py_set_v(PyObject *__pyx_self, PyObject *__pyx_v_O) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_set_v (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_py_set_v(__pyx_self, ((PyObject *)__pyx_v_O));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_py_set_v(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_O) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_set_v", 0);

  /* "raypier/core/ctracer.pyx":98
 * def py_set_v(O):
 *     cdef vector_t v_
 *     v_ = set_v(O)             # <<<<<<<<<<<<<<
 *     return (v_.x, v_.y, v_.z)
 * 
 */
  __pyx_v_v_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_O);

  /* "raypier/core/ctracer.pyx":99
 *     cdef vector_t v_
 *     v_ = set_v(O)
 *     return (v_.x, v_.y, v_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double sep_(vector_t p1, vector_t p2) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_v_.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_v_.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_v_.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":96
 *     return v
 * 
 * def py_set_v(O):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_
 *     v_ = set_v(O)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.py_set_v", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":101
 *     return (v_.x, v_.y, v_.z)
 * 
 * cdef inline double sep_(vector_t p1, vector_t p2) nogil:             # <<<<<<<<<<<<<<
 *     cdef double a,b
 *     a = (p2.x-p1.x)
 */

static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_sep_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2) {
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_c;
  double __pyx_r;

  /* "raypier/core/ctracer.pyx":103
 * cdef inline double sep_(vector_t p1, vector_t p2) nogil:
 *     cdef double a,b
 *     a = (p2.x-p1.x)             # <<<<<<<<<<<<<<
 *     b = (p2.y-p1.y)
 *     c = (p2.z-p1.z)
 */
  __pyx_v_a = (__pyx_v_p2.x - __pyx_v_p1.x);

  /* "raypier/core/ctracer.pyx":104
 *     cdef double a,b
 *     a = (p2.x-p1.x)
 *     b = (p2.y-p1.y)             # <<<<<<<<<<<<<<
 *     c = (p2.z-p1.z)
 *     return sqrt((a*a) + (b*b) + (c*c))
 */
  __pyx_v_b = (__pyx_v_p2.y - __pyx_v_p1.y);

  /* "raypier/core/ctracer.pyx":105
 *     a = (p2.x-p1.x)
 *     b = (p2.y-p1.y)
 *     c = (p2.z-p1.z)             # <<<<<<<<<<<<<<
 *     return sqrt((a*a) + (b*b) + (c*c))
 * 
 */
  __pyx_v_c = (__pyx_v_p2.z - __pyx_v_p1.z);

  /* "raypier/core/ctracer.pyx":106
 *     b = (p2.y-p1.y)
 *     c = (p2.z-p1.z)
 *     return sqrt((a*a) + (b*b) + (c*c))             # <<<<<<<<<<<<<<
 * 
 * def sep(a, b):
 */
  __pyx_r = sqrt((((__pyx_v_a * __pyx_v_a) + (__pyx_v_b * __pyx_v_b)) + (__pyx_v_c * __pyx_v_c)));
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":101
 *     return (v_.x, v_.y, v_.z)
 * 
 * cdef inline double sep_(vector_t p1, vector_t p2) nogil:             # <<<<<<<<<<<<<<
 *     cdef double a,b
 *     a = (p2.x-p1.x)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":108
 *     return sqrt((a*a) + (b*b) + (c*c))
 * 
 * def sep(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_ = set_v(a), b_ = set_v(b)
 *     return sep_(a_, b_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3sep(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_3sep = {"sep", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_3sep, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3sep(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sep (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sep", 1, 2, 2, 1); __PYX_ERR(1, 108, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sep") < 0)) __PYX_ERR(1, 108, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sep", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 108, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.sep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_2sep(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_2sep(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sep", 0);

  /* "raypier/core/ctracer.pyx":109
 * 
 * def sep(a, b):
 *     cdef vector_t a_ = set_v(a), b_ = set_v(b)             # <<<<<<<<<<<<<<
 *     return sep_(a_, b_)
 * 
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);
  __pyx_v_b_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_b);

  /* "raypier/core/ctracer.pyx":110
 * def sep(a, b):
 *     cdef vector_t a_ = set_v(a), b_ = set_v(b)
 *     return sep_(a_, b_)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t invert_(vector_t v) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_a_, __pyx_v_b_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":108
 *     return sqrt((a*a) + (b*b) + (c*c))
 * 
 * def sep(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_ = set_v(a), b_ = set_v(b)
 *     return sep_(a_, b_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.sep", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":112
 *     return sep_(a_, b_)
 * 
 * cdef inline vector_t invert_(vector_t v) nogil:             # <<<<<<<<<<<<<<
 *     v.x = -v.x
 *     v.y = -v.y
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_invert_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":113
 * 
 * cdef inline vector_t invert_(vector_t v) nogil:
 *     v.x = -v.x             # <<<<<<<<<<<<<<
 *     v.y = -v.y
 *     v.z = -v.z
 */
  __pyx_v_v.x = (-__pyx_v_v.x);

  /* "raypier/core/ctracer.pyx":114
 * cdef inline vector_t invert_(vector_t v) nogil:
 *     v.x = -v.x
 *     v.y = -v.y             # <<<<<<<<<<<<<<
 *     v.z = -v.z
 *     return v
 */
  __pyx_v_v.y = (-__pyx_v_v.y);

  /* "raypier/core/ctracer.pyx":115
 *     v.x = -v.x
 *     v.y = -v.y
 *     v.z = -v.z             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
  __pyx_v_v.z = (-__pyx_v_v.z);

  /* "raypier/core/ctracer.pyx":116
 *     v.y = -v.y
 *     v.z = -v.z
 *     return v             # <<<<<<<<<<<<<<
 * 
 * def invert(v):
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":112
 *     return sep_(a_, b_)
 * 
 * cdef inline vector_t invert_(vector_t v) nogil:             # <<<<<<<<<<<<<<
 *     v.x = -v.x
 *     v.y = -v.y
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":118
 *     return v
 * 
 * def invert(v):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_ = set_v(v)
 *     v_ = invert_(v_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5invert(PyObject *__pyx_self, PyObject *__pyx_v_v); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_5invert = {"invert", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_5invert, METH_O, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5invert(PyObject *__pyx_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("invert (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4invert(__pyx_self, ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4invert(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_v) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("invert", 0);

  /* "raypier/core/ctracer.pyx":119
 * 
 * def invert(v):
 *     cdef vector_t v_ = set_v(v)             # <<<<<<<<<<<<<<
 *     v_ = invert_(v_)
 *     return (v_.x, v_.y, v_.z)
 */
  __pyx_v_v_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_v);

  /* "raypier/core/ctracer.pyx":120
 * def invert(v):
 *     cdef vector_t v_ = set_v(v)
 *     v_ = invert_(v_)             # <<<<<<<<<<<<<<
 *     return (v_.x, v_.y, v_.z)
 * 
 */
  __pyx_v_v_ = __pyx_f_7raypier_4core_7ctracer_invert_(__pyx_v_v_);

  /* "raypier/core/ctracer.pyx":121
 *     cdef vector_t v_ = set_v(v)
 *     v_ = invert_(v_)
 *     return (v_.x, v_.y, v_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t multvv_(vector_t a, vector_t b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_v_.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_v_.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_v_.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":118
 *     return v
 * 
 * def invert(v):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_ = set_v(v)
 *     v_ = invert_(v_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.invert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":123
 *     return (v_.x, v_.y, v_.z)
 * 
 * cdef inline vector_t multvv_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x*b.x
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_multvv_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":125
 * cdef inline vector_t multvv_(vector_t a, vector_t b) nogil:
 *     cdef vector_t out
 *     out.x = a.x*b.x             # <<<<<<<<<<<<<<
 *     out.y = a.y*b.y
 *     out.z = a.z*b.z
 */
  __pyx_v_out.x = (__pyx_v_a.x * __pyx_v_b.x);

  /* "raypier/core/ctracer.pyx":126
 *     cdef vector_t out
 *     out.x = a.x*b.x
 *     out.y = a.y*b.y             # <<<<<<<<<<<<<<
 *     out.z = a.z*b.z
 *     return out
 */
  __pyx_v_out.y = (__pyx_v_a.y * __pyx_v_b.y);

  /* "raypier/core/ctracer.pyx":127
 *     out.x = a.x*b.x
 *     out.y = a.y*b.y
 *     out.z = a.z*b.z             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = (__pyx_v_a.z * __pyx_v_b.z);

  /* "raypier/core/ctracer.pyx":128
 *     out.y = a.y*b.y
 *     out.z = a.z*b.z
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def multvv(a, b):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":123
 *     return (v_.x, v_.y, v_.z)
 * 
 * cdef inline vector_t multvv_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x*b.x
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":130
 *     return out
 * 
 * def multvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_7multvv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_7multvv = {"multvv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_7multvv, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_7multvv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("multvv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("multvv", 1, 2, 2, 1); __PYX_ERR(1, 130, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "multvv") < 0)) __PYX_ERR(1, 130, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("multvv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.multvv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_6multvv(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_6multvv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("multvv", 0);

  /* "raypier/core/ctracer.pyx":132
 * def multvv(a, b):
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     b_ = set_v(b)
 *     c_ = multvv_(a_, b_)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":133
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 *     b_ = set_v(b)             # <<<<<<<<<<<<<<
 *     c_ = multvv_(a_, b_)
 *     return (c_.x, c_.y, c_.z)
 */
  __pyx_v_b_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_b);

  /* "raypier/core/ctracer.pyx":134
 *     a_ = set_v(a)
 *     b_ = set_v(b)
 *     c_ = multvv_(a_, b_)             # <<<<<<<<<<<<<<
 *     return (c_.x, c_.y, c_.z)
 * 
 */
  __pyx_v_c_ = __pyx_f_7raypier_4core_7ctracer_multvv_(__pyx_v_a_, __pyx_v_b_);

  /* "raypier/core/ctracer.pyx":135
 *     b_ = set_v(b)
 *     c_ = multvv_(a_, b_)
 *     return (c_.x, c_.y, c_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t multvs_(vector_t a, double b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_c_.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_c_.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":130
 *     return out
 * 
 * def multvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.multvv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":137
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t multvs_(vector_t a, double b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x*b
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_multvs_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, double __pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":139
 * cdef inline vector_t multvs_(vector_t a, double b) nogil:
 *     cdef vector_t out
 *     out.x = a.x*b             # <<<<<<<<<<<<<<
 *     out.y = a.y*b
 *     out.z = a.z*b
 */
  __pyx_v_out.x = (__pyx_v_a.x * __pyx_v_b);

  /* "raypier/core/ctracer.pyx":140
 *     cdef vector_t out
 *     out.x = a.x*b
 *     out.y = a.y*b             # <<<<<<<<<<<<<<
 *     out.z = a.z*b
 *     return out
 */
  __pyx_v_out.y = (__pyx_v_a.y * __pyx_v_b);

  /* "raypier/core/ctracer.pyx":141
 *     out.x = a.x*b
 *     out.y = a.y*b
 *     out.z = a.z*b             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = (__pyx_v_a.z * __pyx_v_b);

  /* "raypier/core/ctracer.pyx":142
 *     out.y = a.y*b
 *     out.z = a.z*b
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def multvs(a, b):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":137
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t multvs_(vector_t a, double b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x*b
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":144
 *     return out
 * 
 * def multvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9multvs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_9multvs = {"multvs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_9multvs, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9multvs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("multvs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("multvs", 1, 2, 2, 1); __PYX_ERR(1, 144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "multvs") < 0)) __PYX_ERR(1, 144, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("multvs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.multvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8multvs(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8multvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("multvs", 0);

  /* "raypier/core/ctracer.pyx":146
 * def multvs(a, b):
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     c_ = multvs_(a_, b)
 *     return (c_.x, c_.y, c_.z)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":147
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 *     c_ = multvs_(a_, b)             # <<<<<<<<<<<<<<
 *     return (c_.x, c_.y, c_.z)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_v_c_ = __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_a_, __pyx_t_1);

  /* "raypier/core/ctracer.pyx":148
 *     a_ = set_v(a)
 *     c_ = multvs_(a_, b)
 *     return (c_.x, c_.y, c_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t addvv_(vector_t a, vector_t b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_c_.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_c_.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":144
 *     return out
 * 
 * def multvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.multvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":150
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t addvv_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x+b.x
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_addvv_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":152
 * cdef inline vector_t addvv_(vector_t a, vector_t b) nogil:
 *     cdef vector_t out
 *     out.x = a.x+b.x             # <<<<<<<<<<<<<<
 *     out.y = a.y+b.y
 *     out.z = a.z+b.z
 */
  __pyx_v_out.x = (__pyx_v_a.x + __pyx_v_b.x);

  /* "raypier/core/ctracer.pyx":153
 *     cdef vector_t out
 *     out.x = a.x+b.x
 *     out.y = a.y+b.y             # <<<<<<<<<<<<<<
 *     out.z = a.z+b.z
 *     return out
 */
  __pyx_v_out.y = (__pyx_v_a.y + __pyx_v_b.y);

  /* "raypier/core/ctracer.pyx":154
 *     out.x = a.x+b.x
 *     out.y = a.y+b.y
 *     out.z = a.z+b.z             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = (__pyx_v_a.z + __pyx_v_b.z);

  /* "raypier/core/ctracer.pyx":155
 *     out.y = a.y+b.y
 *     out.z = a.z+b.z
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def addvv(a, b):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":150
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t addvv_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x+b.x
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":157
 *     return out
 * 
 * def addvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_11addvv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_11addvv = {"addvv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_11addvv, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_11addvv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addvv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addvv", 1, 2, 2, 1); __PYX_ERR(1, 157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addvv") < 0)) __PYX_ERR(1, 157, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addvv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.addvv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_10addvv(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_10addvv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addvv", 0);

  /* "raypier/core/ctracer.pyx":159
 * def addvv(a, b):
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     b_ = set_v(b)
 *     c_ = addvv_(a_, b_)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":160
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 *     b_ = set_v(b)             # <<<<<<<<<<<<<<
 *     c_ = addvv_(a_, b_)
 *     return (c_.x, c_.y, c_.z)
 */
  __pyx_v_b_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_b);

  /* "raypier/core/ctracer.pyx":161
 *     a_ = set_v(a)
 *     b_ = set_v(b)
 *     c_ = addvv_(a_, b_)             # <<<<<<<<<<<<<<
 *     return (c_.x, c_.y, c_.z)
 * 
 */
  __pyx_v_c_ = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_a_, __pyx_v_b_);

  /* "raypier/core/ctracer.pyx":162
 *     b_ = set_v(b)
 *     c_ = addvv_(a_, b_)
 *     return (c_.x, c_.y, c_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t addvs_(vector_t a, double b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_c_.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_c_.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":157
 *     return out
 * 
 * def addvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.addvv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":164
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t addvs_(vector_t a, double b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x+b
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_addvs_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, double __pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":166
 * cdef inline vector_t addvs_(vector_t a, double b) nogil:
 *     cdef vector_t out
 *     out.x = a.x+b             # <<<<<<<<<<<<<<
 *     out.y = a.y+b
 *     out.z = a.z+b
 */
  __pyx_v_out.x = (__pyx_v_a.x + __pyx_v_b);

  /* "raypier/core/ctracer.pyx":167
 *     cdef vector_t out
 *     out.x = a.x+b
 *     out.y = a.y+b             # <<<<<<<<<<<<<<
 *     out.z = a.z+b
 *     return out
 */
  __pyx_v_out.y = (__pyx_v_a.y + __pyx_v_b);

  /* "raypier/core/ctracer.pyx":168
 *     out.x = a.x+b
 *     out.y = a.y+b
 *     out.z = a.z+b             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = (__pyx_v_a.z + __pyx_v_b);

  /* "raypier/core/ctracer.pyx":169
 *     out.y = a.y+b
 *     out.z = a.z+b
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def addvs(a, b):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":164
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t addvs_(vector_t a, double b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x+b
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":171
 *     return out
 * 
 * def addvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13addvs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_13addvs = {"addvs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_13addvs, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13addvs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addvs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addvs", 1, 2, 2, 1); __PYX_ERR(1, 171, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addvs") < 0)) __PYX_ERR(1, 171, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addvs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 171, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.addvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12addvs(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12addvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addvs", 0);

  /* "raypier/core/ctracer.pyx":173
 * def addvs(a, b):
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     c_ = addvs_(a_, b)
 *     return (c_.x, c_.y, c_.z)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":174
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 *     c_ = addvs_(a_, b)             # <<<<<<<<<<<<<<
 *     return (c_.x, c_.y, c_.z)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 174, __pyx_L1_error)
  __pyx_v_c_ = __pyx_f_7raypier_4core_7ctracer_addvs_(__pyx_v_a_, __pyx_t_1);

  /* "raypier/core/ctracer.pyx":175
 *     a_ = set_v(a)
 *     c_ = addvs_(a_, b)
 *     return (c_.x, c_.y, c_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t subvv_(vector_t a, vector_t b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_c_.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_c_.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":171
 *     return out
 * 
 * def addvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.addvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":177
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t subvv_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x-b.x
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_subvv_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":179
 * cdef inline vector_t subvv_(vector_t a, vector_t b) nogil:
 *     cdef vector_t out
 *     out.x = a.x-b.x             # <<<<<<<<<<<<<<
 *     out.y = a.y-b.y
 *     out.z = a.z-b.z
 */
  __pyx_v_out.x = (__pyx_v_a.x - __pyx_v_b.x);

  /* "raypier/core/ctracer.pyx":180
 *     cdef vector_t out
 *     out.x = a.x-b.x
 *     out.y = a.y-b.y             # <<<<<<<<<<<<<<
 *     out.z = a.z-b.z
 *     return out
 */
  __pyx_v_out.y = (__pyx_v_a.y - __pyx_v_b.y);

  /* "raypier/core/ctracer.pyx":181
 *     out.x = a.x-b.x
 *     out.y = a.y-b.y
 *     out.z = a.z-b.z             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = (__pyx_v_a.z - __pyx_v_b.z);

  /* "raypier/core/ctracer.pyx":182
 *     out.y = a.y-b.y
 *     out.z = a.z-b.z
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def subvv(a, b):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":177
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t subvv_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x-b.x
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":184
 *     return out
 * 
 * def subvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15subvv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_15subvv = {"subvv", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_15subvv, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15subvv(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subvv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("subvv", 1, 2, 2, 1); __PYX_ERR(1, 184, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "subvv") < 0)) __PYX_ERR(1, 184, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subvv", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 184, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.subvv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_14subvv(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_14subvv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subvv", 0);

  /* "raypier/core/ctracer.pyx":186
 * def subvv(a, b):
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     b_ = set_v(b)
 *     c_ = subvv_(a_, b_)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":187
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 *     b_ = set_v(b)             # <<<<<<<<<<<<<<
 *     c_ = subvv_(a_, b_)
 *     return (c_.x, c_.y, c_.z)
 */
  __pyx_v_b_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_b);

  /* "raypier/core/ctracer.pyx":188
 *     a_ = set_v(a)
 *     b_ = set_v(b)
 *     c_ = subvv_(a_, b_)             # <<<<<<<<<<<<<<
 *     return (c_.x, c_.y, c_.z)
 * 
 */
  __pyx_v_c_ = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_a_, __pyx_v_b_);

  /* "raypier/core/ctracer.pyx":189
 *     b_ = set_v(b)
 *     c_ = subvv_(a_, b_)
 *     return (c_.x, c_.y, c_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t subvs_(vector_t a, double b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_c_.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_c_.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":184
 *     return out
 * 
 * def subvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.subvv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":191
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t subvs_(vector_t a, double b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x-b
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_subvs_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, double __pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":193
 * cdef inline vector_t subvs_(vector_t a, double b) nogil:
 *     cdef vector_t out
 *     out.x = a.x-b             # <<<<<<<<<<<<<<
 *     out.y = a.y-b
 *     out.z = a.z-b
 */
  __pyx_v_out.x = (__pyx_v_a.x - __pyx_v_b);

  /* "raypier/core/ctracer.pyx":194
 *     cdef vector_t out
 *     out.x = a.x-b
 *     out.y = a.y-b             # <<<<<<<<<<<<<<
 *     out.z = a.z-b
 *     return out
 */
  __pyx_v_out.y = (__pyx_v_a.y - __pyx_v_b);

  /* "raypier/core/ctracer.pyx":195
 *     out.x = a.x-b
 *     out.y = a.y-b
 *     out.z = a.z-b             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out.z = (__pyx_v_a.z - __pyx_v_b);

  /* "raypier/core/ctracer.pyx":196
 *     out.y = a.y-b
 *     out.z = a.z-b
 *     return out             # <<<<<<<<<<<<<<
 * 
 * def subvs(a, b):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":191
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline vector_t subvs_(vector_t a, double b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t out
 *     out.x = a.x-b
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":198
 *     return out
 * 
 * def subvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17subvs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_17subvs = {"subvs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_17subvs, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17subvs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("subvs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("subvs", 1, 2, 2, 1); __PYX_ERR(1, 198, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "subvs") < 0)) __PYX_ERR(1, 198, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("subvs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 198, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.subvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_16subvs(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_16subvs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("subvs", 0);

  /* "raypier/core/ctracer.pyx":200
 * def subvs(a, b):
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     c_ = subvs_(a_, b)
 *     return (c_.x, c_.y, c_.z)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":201
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 *     c_ = subvs_(a_, b)             # <<<<<<<<<<<<<<
 *     return (c_.x, c_.y, c_.z)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 201, __pyx_L1_error)
  __pyx_v_c_ = __pyx_f_7raypier_4core_7ctracer_subvs_(__pyx_v_a_, __pyx_t_1);

  /* "raypier/core/ctracer.pyx":202
 *     a_ = set_v(a)
 *     c_ = subvs_(a_, b)
 *     return (c_.x, c_.y, c_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double mag_(vector_t a) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_c_.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_c_.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":198
 *     return out
 * 
 * def subvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.subvs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":204
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline double mag_(vector_t a) nogil:             # <<<<<<<<<<<<<<
 *     return sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 * 
 */

static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_mag_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a) {
  double __pyx_r;

  /* "raypier/core/ctracer.pyx":205
 * 
 * cdef inline double mag_(vector_t a) nogil:
 *     return sqrt(a.x*a.x + a.y*a.y + a.z*a.z)             # <<<<<<<<<<<<<<
 * 
 * def mag(a):
 */
  __pyx_r = sqrt((((__pyx_v_a.x * __pyx_v_a.x) + (__pyx_v_a.y * __pyx_v_a.y)) + (__pyx_v_a.z * __pyx_v_a.z)));
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":204
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef inline double mag_(vector_t a) nogil:             # <<<<<<<<<<<<<<
 *     return sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":207
 *     return sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 * 
 * def mag(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19mag(PyObject *__pyx_self, PyObject *__pyx_v_a); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_19mag = {"mag", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_19mag, METH_O, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19mag(PyObject *__pyx_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mag (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18mag(__pyx_self, ((PyObject *)__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18mag(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mag", 0);

  /* "raypier/core/ctracer.pyx":209
 * def mag(a):
 *     cdef vector_t a_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     return mag_(a_)
 * 
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":210
 *     cdef vector_t a_
 *     a_ = set_v(a)
 *     return mag_(a_)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double mag_sq_(vector_t a) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_7raypier_4core_7ctracer_mag_(__pyx_v_a_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":207
 *     return sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 * 
 * def mag(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.mag", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":212
 *     return mag_(a_)
 * 
 * cdef inline double mag_sq_(vector_t a) nogil:             # <<<<<<<<<<<<<<
 *     return a.x*a.x + a.y*a.y + a.z*a.z
 * 
 */

static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_mag_sq_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a) {
  double __pyx_r;

  /* "raypier/core/ctracer.pyx":213
 * 
 * cdef inline double mag_sq_(vector_t a) nogil:
 *     return a.x*a.x + a.y*a.y + a.z*a.z             # <<<<<<<<<<<<<<
 * 
 * def mag_sq(a):
 */
  __pyx_r = (((__pyx_v_a.x * __pyx_v_a.x) + (__pyx_v_a.y * __pyx_v_a.y)) + (__pyx_v_a.z * __pyx_v_a.z));
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":212
 *     return mag_(a_)
 * 
 * cdef inline double mag_sq_(vector_t a) nogil:             # <<<<<<<<<<<<<<
 *     return a.x*a.x + a.y*a.y + a.z*a.z
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":215
 *     return a.x*a.x + a.y*a.y + a.z*a.z
 * 
 * def mag_sq(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21mag_sq(PyObject *__pyx_self, PyObject *__pyx_v_a); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_21mag_sq = {"mag_sq", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_21mag_sq, METH_O, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21mag_sq(PyObject *__pyx_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mag_sq (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_20mag_sq(__pyx_self, ((PyObject *)__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_20mag_sq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mag_sq", 0);

  /* "raypier/core/ctracer.pyx":217
 * def mag_sq(a):
 *     cdef vector_t a_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     return mag_sq_(a_)
 * 
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":218
 *     cdef vector_t a_
 *     a_ = set_v(a)
 *     return mag_sq_(a_)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double dotprod_(vector_t a, vector_t b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_7raypier_4core_7ctracer_mag_sq_(__pyx_v_a_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":215
 *     return a.x*a.x + a.y*a.y + a.z*a.z
 * 
 * def mag_sq(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.mag_sq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":220
 *     return mag_sq_(a_)
 * 
 * cdef inline double dotprod_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     return a.x*b.x + a.y*b.y + a.z*b.z
 * 
 */

static CYTHON_INLINE double __pyx_f_7raypier_4core_7ctracer_dotprod_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b) {
  double __pyx_r;

  /* "raypier/core/ctracer.pyx":221
 * 
 * cdef inline double dotprod_(vector_t a, vector_t b) nogil:
 *     return a.x*b.x + a.y*b.y + a.z*b.z             # <<<<<<<<<<<<<<
 * 
 * def dotprod(a, b):
 */
  __pyx_r = (((__pyx_v_a.x * __pyx_v_b.x) + (__pyx_v_a.y * __pyx_v_b.y)) + (__pyx_v_a.z * __pyx_v_b.z));
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":220
 *     return mag_sq_(a_)
 * 
 * cdef inline double dotprod_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     return a.x*b.x + a.y*b.y + a.z*b.z
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":223
 *     return a.x*b.x + a.y*b.y + a.z*b.z
 * 
 * def dotprod(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_23dotprod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_23dotprod = {"dotprod", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_23dotprod, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_23dotprod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dotprod (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dotprod", 1, 2, 2, 1); __PYX_ERR(1, 223, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dotprod") < 0)) __PYX_ERR(1, 223, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dotprod", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.dotprod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_22dotprod(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_22dotprod(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dotprod", 0);

  /* "raypier/core/ctracer.pyx":225
 * def dotprod(a, b):
 *     cdef vector_t a_, b_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     b_ = set_v(b)
 *     return dotprod_(a_,b_)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":226
 *     cdef vector_t a_, b_
 *     a_ = set_v(a)
 *     b_ = set_v(b)             # <<<<<<<<<<<<<<
 *     return dotprod_(a_,b_)
 * 
 */
  __pyx_v_b_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_b);

  /* "raypier/core/ctracer.pyx":227
 *     a_ = set_v(a)
 *     b_ = set_v(b)
 *     return dotprod_(a_,b_)             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector_t cross_(vector_t a, vector_t b) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_a_, __pyx_v_b_)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":223
 *     return a.x*b.x + a.y*b.y + a.z*b.z
 * 
 * def dotprod(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.dotprod", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":229
 *     return dotprod_(a_,b_)
 * 
 * cdef inline vector_t cross_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t c
 *     c.x = a.y*b.z - a.z*b.y
 */

static CYTHON_INLINE struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_cross_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":231
 * cdef inline vector_t cross_(vector_t a, vector_t b) nogil:
 *     cdef vector_t c
 *     c.x = a.y*b.z - a.z*b.y             # <<<<<<<<<<<<<<
 *     c.y = a.z*b.x - a.x*b.z
 *     c.z = a.x*b.y - a.y*b.x
 */
  __pyx_v_c.x = ((__pyx_v_a.y * __pyx_v_b.z) - (__pyx_v_a.z * __pyx_v_b.y));

  /* "raypier/core/ctracer.pyx":232
 *     cdef vector_t c
 *     c.x = a.y*b.z - a.z*b.y
 *     c.y = a.z*b.x - a.x*b.z             # <<<<<<<<<<<<<<
 *     c.z = a.x*b.y - a.y*b.x
 *     return c
 */
  __pyx_v_c.y = ((__pyx_v_a.z * __pyx_v_b.x) - (__pyx_v_a.x * __pyx_v_b.z));

  /* "raypier/core/ctracer.pyx":233
 *     c.x = a.y*b.z - a.z*b.y
 *     c.y = a.z*b.x - a.x*b.z
 *     c.z = a.x*b.y - a.y*b.x             # <<<<<<<<<<<<<<
 *     return c
 * 
 */
  __pyx_v_c.z = ((__pyx_v_a.x * __pyx_v_b.y) - (__pyx_v_a.y * __pyx_v_b.x));

  /* "raypier/core/ctracer.pyx":234
 *     c.y = a.z*b.x - a.x*b.z
 *     c.z = a.x*b.y - a.y*b.x
 *     return c             # <<<<<<<<<<<<<<
 * 
 * def cross(a, b):
 */
  __pyx_r = __pyx_v_c;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":229
 *     return dotprod_(a_,b_)
 * 
 * cdef inline vector_t cross_(vector_t a, vector_t b) nogil:             # <<<<<<<<<<<<<<
 *     cdef vector_t c
 *     c.x = a.y*b.z - a.z*b.y
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":236
 *     return c
 * 
 * def cross(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_25cross(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_25cross = {"cross", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_25cross, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_25cross(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cross (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cross", 1, 2, 2, 1); __PYX_ERR(1, 236, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cross") < 0)) __PYX_ERR(1, 236, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cross", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.cross", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_24cross(__pyx_self, __pyx_v_a, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_24cross(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_b_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_c_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cross", 0);

  /* "raypier/core/ctracer.pyx":238
 * def cross(a, b):
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     b_ = set_v(b)
 *     c_ = cross_(a_, b_)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":239
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 *     b_ = set_v(b)             # <<<<<<<<<<<<<<
 *     c_ = cross_(a_, b_)
 *     return (c_.x, c_.y, c_.z)
 */
  __pyx_v_b_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_b);

  /* "raypier/core/ctracer.pyx":240
 *     a_ = set_v(a)
 *     b_ = set_v(b)
 *     c_ = cross_(a_, b_)             # <<<<<<<<<<<<<<
 *     return (c_.x, c_.y, c_.z)
 * 
 */
  __pyx_v_c_ = __pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_a_, __pyx_v_b_);

  /* "raypier/core/ctracer.pyx":241
 *     b_ = set_v(b)
 *     c_ = cross_(a_, b_)
 *     return (c_.x, c_.y, c_.z)             # <<<<<<<<<<<<<<
 * 
 * cdef vector_t norm_(vector_t a) nogil:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_c_.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_c_.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_c_.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":236
 *     return c
 * 
 * def cross(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.cross", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":243
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef vector_t norm_(vector_t a) nogil:             # <<<<<<<<<<<<<<
 *     cdef double mag=sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 *     a.x /= mag
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_norm_(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a) {
  double __pyx_v_mag;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":244
 * 
 * cdef vector_t norm_(vector_t a) nogil:
 *     cdef double mag=sqrt(a.x*a.x + a.y*a.y + a.z*a.z)             # <<<<<<<<<<<<<<
 *     a.x /= mag
 *     a.y /= mag
 */
  __pyx_v_mag = sqrt((((__pyx_v_a.x * __pyx_v_a.x) + (__pyx_v_a.y * __pyx_v_a.y)) + (__pyx_v_a.z * __pyx_v_a.z)));

  /* "raypier/core/ctracer.pyx":245
 * cdef vector_t norm_(vector_t a) nogil:
 *     cdef double mag=sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 *     a.x /= mag             # <<<<<<<<<<<<<<
 *     a.y /= mag
 *     a.z /= mag
 */
  __pyx_v_a.x = (__pyx_v_a.x / __pyx_v_mag);

  /* "raypier/core/ctracer.pyx":246
 *     cdef double mag=sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 *     a.x /= mag
 *     a.y /= mag             # <<<<<<<<<<<<<<
 *     a.z /= mag
 *     return a
 */
  __pyx_v_a.y = (__pyx_v_a.y / __pyx_v_mag);

  /* "raypier/core/ctracer.pyx":247
 *     a.x /= mag
 *     a.y /= mag
 *     a.z /= mag             # <<<<<<<<<<<<<<
 *     return a
 * 
 */
  __pyx_v_a.z = (__pyx_v_a.z / __pyx_v_mag);

  /* "raypier/core/ctracer.pyx":248
 *     a.y /= mag
 *     a.z /= mag
 *     return a             # <<<<<<<<<<<<<<
 * 
 * def norm(a):
 */
  __pyx_r = __pyx_v_a;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":243
 *     return (c_.x, c_.y, c_.z)
 * 
 * cdef vector_t norm_(vector_t a) nogil:             # <<<<<<<<<<<<<<
 *     cdef double mag=sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 *     a.x /= mag
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":250
 *     return a
 * 
 * def norm(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_27norm(PyObject *__pyx_self, PyObject *__pyx_v_a); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_27norm = {"norm", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_27norm, METH_O, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_27norm(PyObject *__pyx_self, PyObject *__pyx_v_a) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_26norm(__pyx_self, ((PyObject *)__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_26norm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a_;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("norm", 0);

  /* "raypier/core/ctracer.pyx":252
 * def norm(a):
 *     cdef vector_t a_
 *     a_ = set_v(a)             # <<<<<<<<<<<<<<
 *     a_ = norm_(a_)
 *     return (a_.x, a_.y, a_.z)
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_a);

  /* "raypier/core/ctracer.pyx":253
 *     cdef vector_t a_
 *     a_ = set_v(a)
 *     a_ = norm_(a_)             # <<<<<<<<<<<<<<
 *     return (a_.x, a_.y, a_.z)
 * 
 */
  __pyx_v_a_ = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_a_);

  /* "raypier/core/ctracer.pyx":254
 *     a_ = set_v(a)
 *     a_ = norm_(a_)
 *     return (a_.x, a_.y, a_.z)             # <<<<<<<<<<<<<<
 * 
 * ##################################
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_a_.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_a_.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_a_.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":250
 *     return a
 * 
 * def norm(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":262
 * cdef class Transform:
 * 
 *     def __init__(self, rotation=[[1,0,0],[0,1,0],[0,0,1]],             # <<<<<<<<<<<<<<
 *                         translation=[0,0,0]):
 *         self.rotation = rotation
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_9Transform_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_9Transform_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rotation = 0;
  PyObject *__pyx_v_translation = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rotation,&__pyx_n_s_translation,0};
    PyObject* values[2] = {0,0};
    values[0] = __pyx_k_;
    values[1] = __pyx_k__2;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rotation);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_translation);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 262, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rotation = values[0];
    __pyx_v_translation = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_9Transform___init__(((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_self), __pyx_v_rotation, __pyx_v_translation);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_9Transform___init__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, PyObject *__pyx_v_rotation, PyObject *__pyx_v_translation) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "raypier/core/ctracer.pyx":264
 *     def __init__(self, rotation=[[1,0,0],[0,1,0],[0,0,1]],
 *                         translation=[0,0,0]):
 *         self.rotation = rotation             # <<<<<<<<<<<<<<
 *         self.translation = translation
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rotation, __pyx_v_rotation) < 0) __PYX_ERR(1, 264, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":265
 *                         translation=[0,0,0]):
 *         self.rotation = rotation
 *         self.translation = translation             # <<<<<<<<<<<<<<
 * 
 *     property rotation:
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_translation, __pyx_v_translation) < 0) __PYX_ERR(1, 265, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":262
 * cdef class Transform:
 * 
 *     def __init__(self, rotation=[[1,0,0],[0,1,0],[0,0,1]],             # <<<<<<<<<<<<<<
 *                         translation=[0,0,0]):
 *         self.rotation = rotation
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":268
 * 
 *     property rotation:
 *         def __set__(self, rot):             # <<<<<<<<<<<<<<
 *             cdef transform_t t
 *             t.m00, t.m01, t.m02 = rot[0]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_9Transform_8rotation_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rot); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_9Transform_8rotation_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rot) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_9Transform_8rotation___set__(((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_self), ((PyObject *)__pyx_v_rot));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_9Transform_8rotation___set__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, PyObject *__pyx_v_rot) {
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_v_t;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":270
 *         def __set__(self, rot):
 *             cdef transform_t t
 *             t.m00, t.m01, t.m02 = rot[0]             # <<<<<<<<<<<<<<
 *             t.m10, t.m11, t.m12 = rot[1]
 *             t.m20, t.m21, t.m22 = rot[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rot, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 270, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(1, 270, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 270, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_t.m00 = __pyx_t_7;
  __pyx_v_t.m01 = __pyx_t_8;
  __pyx_v_t.m02 = __pyx_t_9;

  /* "raypier/core/ctracer.pyx":271
 *             cdef transform_t t
 *             t.m00, t.m01, t.m02 = rot[0]
 *             t.m10, t.m11, t.m12 = rot[1]             # <<<<<<<<<<<<<<
 *             t.m20, t.m21, t.m22 = rot[2]
 *             self.trans = t
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rot, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 271, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(1, 271, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 271, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t.m10 = __pyx_t_9;
  __pyx_v_t.m11 = __pyx_t_8;
  __pyx_v_t.m12 = __pyx_t_7;

  /* "raypier/core/ctracer.pyx":272
 *             t.m00, t.m01, t.m02 = rot[0]
 *             t.m10, t.m11, t.m12 = rot[1]
 *             t.m20, t.m21, t.m22 = rot[2]             # <<<<<<<<<<<<<<
 *             self.trans = t
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rot, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 272, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(1, 272, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L8_unpacking_done;
    __pyx_L7_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 272, __pyx_L1_error)
    __pyx_L8_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_t.m20 = __pyx_t_7;
  __pyx_v_t.m21 = __pyx_t_8;
  __pyx_v_t.m22 = __pyx_t_9;

  /* "raypier/core/ctracer.pyx":273
 *             t.m10, t.m11, t.m12 = rot[1]
 *             t.m20, t.m21, t.m22 = rot[2]
 *             self.trans = t             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  __pyx_v_self->trans = __pyx_v_t;

  /* "raypier/core/ctracer.pyx":268
 * 
 *     property rotation:
 *         def __set__(self, rot):             # <<<<<<<<<<<<<<
 *             cdef transform_t t
 *             t.m00, t.m01, t.m02 = rot[0]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.rotation.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":275
 *             self.trans = t
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef transform_t t
 *             t = self.trans
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_8rotation_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_8rotation_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_9Transform_8rotation_2__get__(((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_8rotation_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self) {
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_v_t;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":277
 *         def __get__(self):
 *             cdef transform_t t
 *             t = self.trans             # <<<<<<<<<<<<<<
 *             return [[t.m00, t.m01, t.m02],
 *                     [t.m10, t.m11, t.m12],
 */
  __pyx_t_1 = __pyx_v_self->trans;
  __pyx_v_t = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":278
 *             cdef transform_t t
 *             t = self.trans
 *             return [[t.m00, t.m01, t.m02],             # <<<<<<<<<<<<<<
 *                     [t.m10, t.m11, t.m12],
 *                     [t.m20, t.m21, t.m22]]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t.m00); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t.m01); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_t.m02); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":279
 *             t = self.trans
 *             return [[t.m00, t.m01, t.m02],
 *                     [t.m10, t.m11, t.m12],             # <<<<<<<<<<<<<<
 *                     [t.m20, t.m21, t.m22]]
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_t.m10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t.m11); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t.m12); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":280
 *             return [[t.m00, t.m01, t.m02],
 *                     [t.m10, t.m11, t.m12],
 *                     [t.m20, t.m21, t.m22]]             # <<<<<<<<<<<<<<
 * 
 *     property translation:
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t.m20); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_t.m21); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_t.m22); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":278
 *             cdef transform_t t
 *             t = self.trans
 *             return [[t.m00, t.m01, t.m02],             # <<<<<<<<<<<<<<
 *                     [t.m10, t.m11, t.m12],
 *                     [t.m20, t.m21, t.m22]]
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":275
 *             self.trans = t
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef transform_t t
 *             t = self.trans
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.rotation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":283
 * 
 *     property translation:
 *         def __set__(self, dt):             # <<<<<<<<<<<<<<
 *             self.trans.tx, self.trans.ty, self.trans.tz = dt
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_9Transform_11translation_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dt); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_9Transform_11translation_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dt) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_9Transform_11translation___set__(((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_self), ((PyObject *)__pyx_v_dt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_9Transform_11translation___set__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, PyObject *__pyx_v_dt) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":284
 *     property translation:
 *         def __set__(self, dt):
 *             self.trans.tx, self.trans.ty, self.trans.tz = dt             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_dt))) || (PyList_CheckExact(__pyx_v_dt))) {
    PyObject* sequence = __pyx_v_dt;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 284, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(1, 284, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 284, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->trans.tx = __pyx_t_6;
  __pyx_v_self->trans.ty = __pyx_t_7;
  __pyx_v_self->trans.tz = __pyx_t_8;

  /* "raypier/core/ctracer.pyx":283
 * 
 *     property translation:
 *         def __set__(self, dt):             # <<<<<<<<<<<<<<
 *             self.trans.tx, self.trans.ty, self.trans.tz = dt
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.translation.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":286
 *             self.trans.tx, self.trans.ty, self.trans.tz = dt
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.trans.tx, self.trans.ty, self.trans.tz)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_11translation_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_11translation_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_9Transform_11translation_2__get__(((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_11translation_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":287
 * 
 *         def __get__(self):
 *             return (self.trans.tx, self.trans.ty, self.trans.tz)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->trans.tx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->trans.ty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->trans.tz); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":286
 *             self.trans.tx, self.trans.ty, self.trans.tz = dt
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.trans.tx, self.trans.ty, self.trans.tz)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.translation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_9Transform_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_9Transform_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_9Transform_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_9Transform_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Transform.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":291
 * 
 * cdef class RayCollectionIterator:
 *     def __cinit__(self, RayCollection rays):             # <<<<<<<<<<<<<<
 *         self.rays = rays
 *         self.counter = 0
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rays,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rays)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 291, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 291, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollectionIterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), __pyx_ptype_7raypier_4core_7ctracer_RayCollection, 1, "rays", 0))) __PYX_ERR(1, 291, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)__pyx_v_self), __pyx_v_rays);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":292
 * cdef class RayCollectionIterator:
 *     def __cinit__(self, RayCollection rays):
 *         self.rays = rays             # <<<<<<<<<<<<<<
 *         self.counter = 0
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_rays));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rays));
  __Pyx_GOTREF(__pyx_v_self->rays);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rays));
  __pyx_v_self->rays = __pyx_v_rays;

  /* "raypier/core/ctracer.pyx":293
 *     def __cinit__(self, RayCollection rays):
 *         self.rays = rays
 *         self.counter = 0             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->counter = 0;

  /* "raypier/core/ctracer.pyx":291
 * 
 * cdef class RayCollectionIterator:
 *     def __cinit__(self, RayCollection rays):             # <<<<<<<<<<<<<<
 *         self.rays = rays
 *         self.counter = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":295
 *         self.counter = 0
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_2__iter__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_2__iter__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "raypier/core/ctracer.pyx":296
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":295
 *         self.counter = 0
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":298
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Ray ray=Ray.__new__(Ray)
 *         if self.counter >= self.rays.n_rays:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_4__next__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_4__next__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_ray = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "raypier/core/ctracer.pyx":299
 * 
 *     def __next__(self):
 *         cdef Ray ray=Ray.__new__(Ray)             # <<<<<<<<<<<<<<
 *         if self.counter >= self.rays.n_rays:
 *             raise StopIteration
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7raypier_4core_7ctracer_Ray(((PyTypeObject *)__pyx_ptype_7raypier_4core_7ctracer_Ray), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 299, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ray = ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":300
 *     def __next__(self):
 *         cdef Ray ray=Ray.__new__(Ray)
 *         if self.counter >= self.rays.n_rays:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         ray.ray = self.rays.rays[self.counter]
 */
  __pyx_t_2 = ((__pyx_v_self->counter >= __pyx_v_self->rays->n_rays) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "raypier/core/ctracer.pyx":301
 *         cdef Ray ray=Ray.__new__(Ray)
 *         if self.counter >= self.rays.n_rays:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         ray.ray = self.rays.rays[self.counter]
 *         self.counter += 1
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(1, 301, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":300
 *     def __next__(self):
 *         cdef Ray ray=Ray.__new__(Ray)
 *         if self.counter >= self.rays.n_rays:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         ray.ray = self.rays.rays[self.counter]
 */
  }

  /* "raypier/core/ctracer.pyx":302
 *         if self.counter >= self.rays.n_rays:
 *             raise StopIteration
 *         ray.ray = self.rays.rays[self.counter]             # <<<<<<<<<<<<<<
 *         self.counter += 1
 *         return ray
 */
  __pyx_v_ray->ray = (__pyx_v_self->rays->rays[__pyx_v_self->counter]);

  /* "raypier/core/ctracer.pyx":303
 *             raise StopIteration
 *         ray.ray = self.rays.rays[self.counter]
 *         self.counter += 1             # <<<<<<<<<<<<<<
 *         return ray
 * 
 */
  __pyx_v_self->counter = (__pyx_v_self->counter + 1);

  /* "raypier/core/ctracer.pyx":304
 *         ray.ray = self.rays.rays[self.counter]
 *         self.counter += 1
 *         return ray             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ray));
  __pyx_r = ((PyObject *)__pyx_v_ray);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":298
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Ray ray=Ray.__new__(Ray)
 *         if self.counter >= self.rays.n_rays:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollectionIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ray);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_6__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollectionIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_8__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_21RayCollectionIterator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollectionIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":308
 * 
 * cdef class GaussletCollectionIterator:
 *     def __cinit__(self, GaussletCollection rays):             # <<<<<<<<<<<<<<
 *         self.rays = rays
 *         self.counter = 0
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rays,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rays)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 308, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 308, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollectionIterator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, 1, "rays", 0))) __PYX_ERR(1, 308, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)__pyx_v_self), __pyx_v_rays);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":309
 * cdef class GaussletCollectionIterator:
 *     def __cinit__(self, GaussletCollection rays):
 *         self.rays = rays             # <<<<<<<<<<<<<<
 *         self.counter = 0
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_rays));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rays));
  __Pyx_GOTREF(__pyx_v_self->rays);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->rays));
  __pyx_v_self->rays = __pyx_v_rays;

  /* "raypier/core/ctracer.pyx":310
 *     def __cinit__(self, GaussletCollection rays):
 *         self.rays = rays
 *         self.counter = 0             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->counter = 0;

  /* "raypier/core/ctracer.pyx":308
 * 
 * cdef class GaussletCollectionIterator:
 *     def __cinit__(self, GaussletCollection rays):             # <<<<<<<<<<<<<<
 *         self.rays = rays
 *         self.counter = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":312
 *         self.counter = 0
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_2__iter__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_2__iter__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "raypier/core/ctracer.pyx":313
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":312
 *         self.counter = 0
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":315
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Gausslet ray=Gausslet.__new__(Gausslet)
 *         if self.counter >= self.rays.n_rays:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_4__next__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_4__next__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_ray = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "raypier/core/ctracer.pyx":316
 * 
 *     def __next__(self):
 *         cdef Gausslet ray=Gausslet.__new__(Gausslet)             # <<<<<<<<<<<<<<
 *         if self.counter >= self.rays.n_rays:
 *             raise StopIteration
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7raypier_4core_7ctracer_Gausslet(((PyTypeObject *)__pyx_ptype_7raypier_4core_7ctracer_Gausslet), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 316, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_ray = ((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":317
 *     def __next__(self):
 *         cdef Gausslet ray=Gausslet.__new__(Gausslet)
 *         if self.counter >= self.rays.n_rays:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         ray.gausslet = self.rays.rays[self.counter]
 */
  __pyx_t_2 = ((__pyx_v_self->counter >= __pyx_v_self->rays->n_rays) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "raypier/core/ctracer.pyx":318
 *         cdef Gausslet ray=Gausslet.__new__(Gausslet)
 *         if self.counter >= self.rays.n_rays:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         ray.gausslet = self.rays.rays[self.counter]
 *         self.counter += 1
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(1, 318, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":317
 *     def __next__(self):
 *         cdef Gausslet ray=Gausslet.__new__(Gausslet)
 *         if self.counter >= self.rays.n_rays:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         ray.gausslet = self.rays.rays[self.counter]
 */
  }

  /* "raypier/core/ctracer.pyx":319
 *         if self.counter >= self.rays.n_rays:
 *             raise StopIteration
 *         ray.gausslet = self.rays.rays[self.counter]             # <<<<<<<<<<<<<<
 *         self.counter += 1
 *         return ray
 */
  __pyx_v_ray->gausslet = (__pyx_v_self->rays->rays[__pyx_v_self->counter]);

  /* "raypier/core/ctracer.pyx":320
 *             raise StopIteration
 *         ray.gausslet = self.rays.rays[self.counter]
 *         self.counter += 1             # <<<<<<<<<<<<<<
 *         return ray
 * 
 */
  __pyx_v_self->counter = (__pyx_v_self->counter + 1);

  /* "raypier/core/ctracer.pyx":321
 *         ray.gausslet = self.rays.rays[self.counter]
 *         self.counter += 1
 *         return ray             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ray));
  __pyx_r = ((PyObject *)__pyx_v_ray);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":315
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef Gausslet ray=Gausslet.__new__(Gausslet)
 *         if self.counter >= self.rays.n_rays:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollectionIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ray);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_6__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollectionIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_8__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_26GaussletCollectionIterator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollectionIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":325
 * 
 * cdef class ParabasalRay:
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.max_length = 1000.0
 *         for k in kwds:
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":326
 * cdef class ParabasalRay:
 *     def __cinit__(self, **kwds):
 *         self.max_length = 1000.0             # <<<<<<<<<<<<<<
 *         for k in kwds:
 *             setattr(self, k, kwds[k])
 */
  __pyx_v_self->max_length = 1000.0;

  /* "raypier/core/ctracer.pyx":327
 *     def __cinit__(self, **kwds):
 *         self.max_length = 1000.0
 *         for k in kwds:             # <<<<<<<<<<<<<<
 *             setattr(self, k, kwds[k])
 * 
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_kwds, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":328
 *         self.max_length = 1000.0
 *         for k in kwds:
 *             setattr(self, k, kwds[k])             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_t_5); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":325
 * 
 * cdef class ParabasalRay:
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.max_length = 1000.0
 *         for k in kwds:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":330
 *             setattr(self, k, kwds[k])
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Parabasal Ray(o=%s, d=%s)"%(str(self.origin),
 *                                             str(self.direction))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_2__repr__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_2__repr__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "raypier/core/ctracer.pyx":331
 * 
 *     def __repr__(self):
 *         return "Parabasal Ray(o=%s, d=%s)"%(str(self.origin),             # <<<<<<<<<<<<<<
 *                                             str(self.direction))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Parabasal_Ray_o);
  __pyx_t_2 += 16;
  __Pyx_GIVEREF(__pyx_kp_u_Parabasal_Ray_o);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Parabasal_Ray_o);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_origin); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_d);
  __pyx_t_2 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_d);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_d);

  /* "raypier/core/ctracer.pyx":332
 *     def __repr__(self):
 *         return "Parabasal Ray(o=%s, d=%s)"%(str(self.origin),
 *                                             str(self.direction))             # <<<<<<<<<<<<<<
 * 
 *     property origin:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_direction); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__9);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__9);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__9);

  /* "raypier/core/ctracer.pyx":331
 * 
 *     def __repr__(self):
 *         return "Parabasal Ray(o=%s, d=%s)"%(str(self.origin),             # <<<<<<<<<<<<<<
 *                                             str(self.direction))
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":330
 *             setattr(self, k, kwds[k])
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Parabasal Ray(o=%s, d=%s)"%(str(self.origin),
 *                                             str(self.direction))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":336
 *     property origin:
 *         """Origin coordinates of the ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6origin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6origin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6origin___get__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":337
 *         """Origin coordinates of the ray"""
 *         def __get__(self):
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.origin.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ray.origin.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->ray.origin.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":336
 *     property origin:
 *         """Origin coordinates of the ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.origin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":339
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6origin_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6origin_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":340
 * 
 *         def __set__(self, v):
 *             self.ray.origin.x = v[0]             # <<<<<<<<<<<<<<
 *             self.ray.origin.y = v[1]
 *             self.ray.origin.z = v[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.origin.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":341
 *         def __set__(self, v):
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]             # <<<<<<<<<<<<<<
 *             self.ray.origin.z = v[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.origin.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":342
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]
 *             self.ray.origin.z = v[2]             # <<<<<<<<<<<<<<
 * 
 *     property direction:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.origin.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":339
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.origin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":346
 *     property direction:
 *         """direction of the ray, normalised to a unit vector"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_9direction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_9direction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_9direction___get__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_9direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":347
 *         """direction of the ray, normalised to a unit vector"""
 *         def __get__(self):
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.direction.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ray.direction.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->ray.direction.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":346
 *     property direction:
 *         """direction of the ray, normalised to a unit vector"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.direction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":349
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_9direction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_9direction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_9direction_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_9direction_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":350
 * 
 *         def __set__(self, v):
 *             self.ray.direction.x = v[0]             # <<<<<<<<<<<<<<
 *             self.ray.direction.y = v[1]
 *             self.ray.direction.z = v[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.direction.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":351
 *         def __set__(self, v):
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]             # <<<<<<<<<<<<<<
 *             self.ray.direction.z = v[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.direction.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":352
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]
 *             self.ray.direction.z = v[2]             # <<<<<<<<<<<<<<
 * 
 *     property normal:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 352, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.direction.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":349
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.direction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":356
 *     property normal:
 *         """normal vector for the face which created this ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6normal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6normal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6normal___get__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":357
 *         """normal vector for the face which created this ray"""
 *         def __get__(self):
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.normal.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ray.normal.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->ray.normal.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":356
 *     property normal:
 *         """normal vector for the face which created this ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.normal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":359
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6normal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6normal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6normal_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6normal_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":360
 * 
 *         def __set__(self, v):
 *             self.ray.normal.x = v[0]             # <<<<<<<<<<<<<<
 *             self.ray.normal.y = v[1]
 *             self.ray.normal.z = v[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.normal.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":361
 *         def __set__(self, v):
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]             # <<<<<<<<<<<<<<
 *             self.ray.normal.z = v[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.normal.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":362
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]
 *             self.ray.normal.z = v[2]             # <<<<<<<<<<<<<<
 * 
 *     property length:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.normal.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":359
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.normal.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":367
 *         """The length of the ray. This is infinite in
 *         unterminated rays"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.length
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6length___get__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6length___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":368
 *         unterminated rays"""
 *         def __get__(self):
 *             return self.ray.length             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":367
 *         """The length of the ray. This is infinite in
 *         unterminated rays"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.length
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":370
 *             return self.ray.length
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.length = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 370, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.length.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6length_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6length_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":371
 * 
 *         def __set__(self, double v):
 *             self.ray.length = v             # <<<<<<<<<<<<<<
 * 
 *     property termination:
 */
  __pyx_v_self->ray.length = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":370
 *             return self.ray.length
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.length = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":376
 *         """the end-point of the ray (read only)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector_t end
 *             cdef float length
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_11termination_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_11termination_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_11termination___get__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_11termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_end;
  float __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":379
 *             cdef vector_t end
 *             cdef float length
 *             if self.ray.length > self.max_length:             # <<<<<<<<<<<<<<
 *                 length = self.max_length
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->ray.length > __pyx_v_self->max_length) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/ctracer.pyx":380
 *             cdef float length
 *             if self.ray.length > self.max_length:
 *                 length = self.max_length             # <<<<<<<<<<<<<<
 *             else:
 *                 length = self.ray.length
 */
    __pyx_t_2 = __pyx_v_self->max_length;
    __pyx_v_length = __pyx_t_2;

    /* "raypier/core/ctracer.pyx":379
 *             cdef vector_t end
 *             cdef float length
 *             if self.ray.length > self.max_length:             # <<<<<<<<<<<<<<
 *                 length = self.max_length
 *             else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/ctracer.pyx":382
 *                 length = self.max_length
 *             else:
 *                 length = self.ray.length             # <<<<<<<<<<<<<<
 *             end = addvv_(self.ray.origin, multvs_(self.ray.direction,
 *                                     length))
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->ray.length;
    __pyx_v_length = __pyx_t_2;
  }
  __pyx_L3:;

  /* "raypier/core/ctracer.pyx":383
 *             else:
 *                 length = self.ray.length
 *             end = addvv_(self.ray.origin, multvs_(self.ray.direction,             # <<<<<<<<<<<<<<
 *                                     length))
 *             return (end.x, end.y, end.z)
 */
  __pyx_v_end = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_self->ray.origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_self->ray.direction, __pyx_v_length));

  /* "raypier/core/ctracer.pyx":385
 *             end = addvv_(self.ray.origin, multvs_(self.ray.direction,
 *                                     length))
 *             return (end.x, end.y, end.z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_end.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_end.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_end.z); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":376
 *         """the end-point of the ray (read only)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector_t end
 *             cdef float length
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.termination.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_4__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12ParabasalRay_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ParabasalRay.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":396
 *     """
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.max_length = 1000.0
 *         for k in kwds:
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":397
 * 
 *     def __cinit__(self, **kwds):
 *         self.max_length = 1000.0             # <<<<<<<<<<<<<<
 *         for k in kwds:
 *             setattr(self, k, kwds[k])
 */
  __pyx_v_self->max_length = 1000.0;

  /* "raypier/core/ctracer.pyx":398
 *     def __cinit__(self, **kwds):
 *         self.max_length = 1000.0
 *         for k in kwds:             # <<<<<<<<<<<<<<
 *             setattr(self, k, kwds[k])
 * 
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_kwds, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":399
 *         self.max_length = 1000.0
 *         for k in kwds:
 *             setattr(self, k, kwds[k])             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_t_5); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":396
 *     """
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.max_length = 1000.0
 *         for k in kwds:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":401
 *             setattr(self, k, kwds[k])
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Ray(o=%s, d=%s)"%(str(self.origin),
 *                                             str(self.direction))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_2__repr__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_2__repr__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "raypier/core/ctracer.pyx":402
 * 
 *     def __repr__(self):
 *         return "Ray(o=%s, d=%s)"%(str(self.origin),             # <<<<<<<<<<<<<<
 *                                             str(self.direction))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Ray_o);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Ray_o);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Ray_o);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_origin); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u_d);
  __pyx_t_2 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_d);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_d);

  /* "raypier/core/ctracer.pyx":403
 *     def __repr__(self):
 *         return "Ray(o=%s, d=%s)"%(str(self.origin),
 *                                             str(self.direction))             # <<<<<<<<<<<<<<
 * 
 *     property origin:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_direction); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__9);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__9);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__9);

  /* "raypier/core/ctracer.pyx":402
 * 
 *     def __repr__(self):
 *         return "Ray(o=%s, d=%s)"%(str(self.origin),             # <<<<<<<<<<<<<<
 *                                             str(self.direction))
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":401
 *             setattr(self, k, kwds[k])
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Ray(o=%s, d=%s)"%(str(self.origin),
 *                                             str(self.direction))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":407
 *     property origin:
 *         """Origin coordinates of the ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6origin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6origin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6origin___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":408
 *         """Origin coordinates of the ray"""
 *         def __get__(self):
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.origin.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ray.origin.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->ray.origin.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":407
 *     property origin:
 *         """Origin coordinates of the ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.origin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":410
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6origin_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6origin_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6origin_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":411
 * 
 *         def __set__(self, v):
 *             self.ray.origin.x = v[0]             # <<<<<<<<<<<<<<
 *             self.ray.origin.y = v[1]
 *             self.ray.origin.z = v[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.origin.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":412
 *         def __set__(self, v):
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]             # <<<<<<<<<<<<<<
 *             self.ray.origin.z = v[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.origin.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":413
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]
 *             self.ray.origin.z = v[2]             # <<<<<<<<<<<<<<
 * 
 *     property direction:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.origin.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":410
 *             return (self.ray.origin.x,self.ray.origin.y,self.ray.origin.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.origin.x = v[0]
 *             self.ray.origin.y = v[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.origin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":417
 *     property direction:
 *         """direction of the ray, normalised to a unit vector"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9direction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9direction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_9direction___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_9direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":418
 *         """direction of the ray, normalised to a unit vector"""
 *         def __get__(self):
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.direction.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ray.direction.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->ray.direction.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":417
 *     property direction:
 *         """direction of the ray, normalised to a unit vector"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.direction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":420
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_9direction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_9direction_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_9direction_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_9direction_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":421
 * 
 *         def __set__(self, v):
 *             self.ray.direction.x = v[0]             # <<<<<<<<<<<<<<
 *             self.ray.direction.y = v[1]
 *             self.ray.direction.z = v[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.direction.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":422
 *         def __set__(self, v):
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]             # <<<<<<<<<<<<<<
 *             self.ray.direction.z = v[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.direction.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":423
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]
 *             self.ray.direction.z = v[2]             # <<<<<<<<<<<<<<
 * 
 *     property normal:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.direction.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":420
 *             return (self.ray.direction.x,self.ray.direction.y,self.ray.direction.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.direction.x = v[0]
 *             self.ray.direction.y = v[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.direction.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":427
 *     property normal:
 *         """normal vector for the face which created this ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6normal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6normal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6normal___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":428
 *         """normal vector for the face which created this ray"""
 *         def __get__(self):
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.normal.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ray.normal.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->ray.normal.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":427
 *     property normal:
 *         """normal vector for the face which created this ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.normal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":430
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6normal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6normal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6normal_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6normal_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":431
 * 
 *         def __set__(self, v):
 *             self.ray.normal.x = v[0]             # <<<<<<<<<<<<<<
 *             self.ray.normal.y = v[1]
 *             self.ray.normal.z = v[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.normal.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":432
 *         def __set__(self, v):
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]             # <<<<<<<<<<<<<<
 *             self.ray.normal.z = v[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.normal.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":433
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]
 *             self.ray.normal.z = v[2]             # <<<<<<<<<<<<<<
 * 
 *     property E_vector:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.normal.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":430
 *             return (self.ray.normal.x,self.ray.normal.y,self.ray.normal.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.normal.x = v[0]
 *             self.ray.normal.y = v[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.normal.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":438
 *         """Unit vector, perpendicular to the ray direction,
 *         which gives the direction of E-field polarisation"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.E_vector.x,self.ray.E_vector.y,self.ray.E_vector.z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_8E_vector_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_8E_vector_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_8E_vector___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_8E_vector___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":439
 *         which gives the direction of E-field polarisation"""
 *         def __get__(self):
 *             return (self.ray.E_vector.x,self.ray.E_vector.y,self.ray.E_vector.z)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.E_vector.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->ray.E_vector.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->ray.E_vector.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":438
 *         """Unit vector, perpendicular to the ray direction,
 *         which gives the direction of E-field polarisation"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (self.ray.E_vector.x,self.ray.E_vector.y,self.ray.E_vector.z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E_vector.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":441
 *             return (self.ray.E_vector.x,self.ray.E_vector.y,self.ray.E_vector.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.E_vector.x = v[0]
 *             self.ray.E_vector.y = v[1]
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_8E_vector_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_8E_vector_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_8E_vector_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_8E_vector_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":442
 * 
 *         def __set__(self, v):
 *             self.ray.E_vector.x = v[0]             # <<<<<<<<<<<<<<
 *             self.ray.E_vector.y = v[1]
 *             self.ray.E_vector.z = v[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.E_vector.x = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":443
 *         def __set__(self, v):
 *             self.ray.E_vector.x = v[0]
 *             self.ray.E_vector.y = v[1]             # <<<<<<<<<<<<<<
 *             self.ray.E_vector.z = v[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.E_vector.y = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":444
 *             self.ray.E_vector.x = v[0]
 *             self.ray.E_vector.y = v[1]
 *             self.ray.E_vector.z = v[2]             # <<<<<<<<<<<<<<
 * 
 *     property length:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->ray.E_vector.z = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":441
 *             return (self.ray.E_vector.x,self.ray.E_vector.y,self.ray.E_vector.z)
 * 
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.E_vector.x = v[0]
 *             self.ray.E_vector.y = v[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E_vector.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":449
 *         """The length of the ray. This is infinite in
 *         unterminated rays"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.length
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6length___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6length___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":450
 *         unterminated rays"""
 *         def __get__(self):
 *             return self.ray.length             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":449
 *         """The length of the ray. This is infinite in
 *         unterminated rays"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.length
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":452
 *             return self.ray.length
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.length = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 452, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.length.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6length_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6length_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":453
 * 
 *         def __set__(self, double v):
 *             self.ray.length = v             # <<<<<<<<<<<<<<
 * 
 *     property phase:
 */
  __pyx_v_self->ray.length = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":452
 *             return self.ray.length
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.length = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":458
 *         """An additional phase-factor for the ray. At present, this handles the 'grating phase' factor
 *         generated by diffraction gratings. All other material surfaces leave this unchanged"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.phase
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_5phase_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_5phase_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_5phase___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_5phase___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":459
 *         generated by diffraction gratings. All other material surfaces leave this unchanged"""
 *         def __get__(self):
 *             return self.ray.phase             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.phase); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":458
 *         """An additional phase-factor for the ray. At present, this handles the 'grating phase' factor
 *         generated by diffraction gratings. All other material surfaces leave this unchanged"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.phase
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.phase.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":461
 *             return self.ray.phase
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.phase = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_5phase_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_5phase_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 461, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.phase.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_5phase_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_5phase_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":462
 * 
 *         def __set__(self, double v):
 *             self.ray.phase = v             # <<<<<<<<<<<<<<
 * 
 *     property accumulated_path:
 */
  __pyx_v_self->ray.phase = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":461
 *             return self.ray.phase
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.phase = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":466
 *     property accumulated_path:
 *         """The total *optical* path up to the start-point of this ray."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.accumulated_path
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_16accumulated_path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_16accumulated_path_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_16accumulated_path___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_16accumulated_path___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":467
 *         """The total *optical* path up to the start-point of this ray."""
 *         def __get__(self):
 *             return self.ray.accumulated_path             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ray.accumulated_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":466
 *     property accumulated_path:
 *         """The total *optical* path up to the start-point of this ray."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.accumulated_path
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.accumulated_path.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":469
 *             return self.ray.accumulated_path
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.accumulated_path = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_16accumulated_path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_16accumulated_path_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 469, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.accumulated_path.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_16accumulated_path_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_16accumulated_path_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":470
 * 
 *         def __set__(self, double v):
 *             self.ray.accumulated_path = v             # <<<<<<<<<<<<<<
 * 
 *     property wavelength_idx:
 */
  __pyx_v_self->ray.accumulated_path = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":469
 *             return self.ray.accumulated_path
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ray.accumulated_path = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":474
 *     property wavelength_idx:
 *         """The wavelength of the ray in vacuum, in microns"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.wavelength_idx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_14wavelength_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_14wavelength_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_14wavelength_idx___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_14wavelength_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":475
 *         """The wavelength of the ray in vacuum, in microns"""
 *         def __get__(self):
 *             return self.ray.wavelength_idx             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, unsigned int v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->ray.wavelength_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":474
 *     property wavelength_idx:
 *         """The wavelength of the ray in vacuum, in microns"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.wavelength_idx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.wavelength_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":477
 *             return self.ray.wavelength_idx
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.wavelength_idx = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_14wavelength_idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_14wavelength_idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  unsigned int __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __Pyx_PyInt_As_unsigned_int(__pyx_arg_v); if (unlikely((__pyx_v_v == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 477, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.wavelength_idx.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_14wavelength_idx_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((unsigned int)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_14wavelength_idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":478
 * 
 *         def __set__(self, unsigned int v):
 *             self.ray.wavelength_idx = v             # <<<<<<<<<<<<<<
 * 
 *     property termination:
 */
  __pyx_v_self->ray.wavelength_idx = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":477
 *             return self.ray.wavelength_idx
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.wavelength_idx = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":483
 *         """the end-point of the ray (read only)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector_t end
 *             cdef float length
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_11termination_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_11termination_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_11termination___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_11termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_end;
  float __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":486
 *             cdef vector_t end
 *             cdef float length
 *             if self.ray.length > self.max_length:             # <<<<<<<<<<<<<<
 *                 length = self.max_length
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->ray.length > __pyx_v_self->max_length) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/ctracer.pyx":487
 *             cdef float length
 *             if self.ray.length > self.max_length:
 *                 length = self.max_length             # <<<<<<<<<<<<<<
 *             else:
 *                 length = self.ray.length
 */
    __pyx_t_2 = __pyx_v_self->max_length;
    __pyx_v_length = __pyx_t_2;

    /* "raypier/core/ctracer.pyx":486
 *             cdef vector_t end
 *             cdef float length
 *             if self.ray.length > self.max_length:             # <<<<<<<<<<<<<<
 *                 length = self.max_length
 *             else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/ctracer.pyx":489
 *                 length = self.max_length
 *             else:
 *                 length = self.ray.length             # <<<<<<<<<<<<<<
 *             end = addvv_(self.ray.origin, multvs_(self.ray.direction,
 *                                     length))
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_self->ray.length;
    __pyx_v_length = __pyx_t_2;
  }
  __pyx_L3:;

  /* "raypier/core/ctracer.pyx":490
 *             else:
 *                 length = self.ray.length
 *             end = addvv_(self.ray.origin, multvs_(self.ray.direction,             # <<<<<<<<<<<<<<
 *                                     length))
 *             return (end.x, end.y, end.z)
 */
  __pyx_v_end = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_self->ray.origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_self->ray.direction, __pyx_v_length));

  /* "raypier/core/ctracer.pyx":492
 *             end = addvv_(self.ray.origin, multvs_(self.ray.direction,
 *                                     length))
 *             return (end.x, end.y, end.z)             # <<<<<<<<<<<<<<
 * 
 *     property refractive_index:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_end.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_end.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_end.z); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":483
 *         """the end-point of the ray (read only)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector_t end
 *             cdef float length
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.termination.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":497
 *         """complex refractive index through which
 *         this ray is propagating"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return complex(self.ray.refractive_index.real,
 *                             self.ray.refractive_index.imag)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_16refractive_index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_16refractive_index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_16refractive_index___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_16refractive_index___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":498
 *         this ray is propagating"""
 *         def __get__(self):
 *             return complex(self.ray.refractive_index.real,             # <<<<<<<<<<<<<<
 *                             self.ray.refractive_index.imag)
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CREAL(__pyx_v_self->ray.refractive_index)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "raypier/core/ctracer.pyx":499
 *         def __get__(self):
 *             return complex(self.ray.refractive_index.real,
 *                             self.ray.refractive_index.imag)             # <<<<<<<<<<<<<<
 *         def __set__(self, v):
 *             self.ray.refractive_index.real = v.real
 */
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CIMAG(__pyx_v_self->ray.refractive_index)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "raypier/core/ctracer.pyx":498
 *         this ray is propagating"""
 *         def __get__(self):
 *             return complex(self.ray.refractive_index.real,             # <<<<<<<<<<<<<<
 *                             self.ray.refractive_index.imag)
 *         def __set__(self, v):
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyComplex_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":497
 *         """complex refractive index through which
 *         this ray is propagating"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return complex(self.ray.refractive_index.real,
 *                             self.ray.refractive_index.imag)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.refractive_index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":500
 *             return complex(self.ray.refractive_index.real,
 *                             self.ray.refractive_index.imag)
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.refractive_index.real = v.real
 *             self.ray.refractive_index.imag = v.imag
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_16refractive_index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_16refractive_index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_16refractive_index_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_16refractive_index_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":501
 *                             self.ray.refractive_index.imag)
 *         def __set__(self, v):
 *             self.ray.refractive_index.real = v.real             # <<<<<<<<<<<<<<
 *             self.ray.refractive_index.imag = v.imag
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_real); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_SET_CREAL(__pyx_v_self->ray.refractive_index, __pyx_t_2);

  /* "raypier/core/ctracer.pyx":502
 *         def __set__(self, v):
 *             self.ray.refractive_index.real = v.real
 *             self.ray.refractive_index.imag = v.imag             # <<<<<<<<<<<<<<
 * 
 *     property E1_amp:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_imag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_SET_CIMAG(__pyx_v_self->ray.refractive_index, __pyx_t_2);

  /* "raypier/core/ctracer.pyx":500
 *             return complex(self.ray.refractive_index.real,
 *                             self.ray.refractive_index.imag)
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.refractive_index.real = v.real
 *             self.ray.refractive_index.imag = v.imag
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.refractive_index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":507
 *         """Complex amplitude of the electric field polarised
 *         parallel to the E_vection."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return complex(self.ray.E1_amp.real,
 *                             self.ray.E1_amp.imag)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6E1_amp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6E1_amp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6E1_amp___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6E1_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":508
 *         parallel to the E_vection."""
 *         def __get__(self):
 *             return complex(self.ray.E1_amp.real,             # <<<<<<<<<<<<<<
 *                             self.ray.E1_amp.imag)
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CREAL(__pyx_v_self->ray.E1_amp)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "raypier/core/ctracer.pyx":509
 *         def __get__(self):
 *             return complex(self.ray.E1_amp.real,
 *                             self.ray.E1_amp.imag)             # <<<<<<<<<<<<<<
 *         def __set__(self, v):
 *             self.ray.E1_amp.real = v.real
 */
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CIMAG(__pyx_v_self->ray.E1_amp)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "raypier/core/ctracer.pyx":508
 *         parallel to the E_vection."""
 *         def __get__(self):
 *             return complex(self.ray.E1_amp.real,             # <<<<<<<<<<<<<<
 *                             self.ray.E1_amp.imag)
 *         def __set__(self, v):
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyComplex_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":507
 *         """Complex amplitude of the electric field polarised
 *         parallel to the E_vection."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return complex(self.ray.E1_amp.real,
 *                             self.ray.E1_amp.imag)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E1_amp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":510
 *             return complex(self.ray.E1_amp.real,
 *                             self.ray.E1_amp.imag)
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.E1_amp.real = v.real
 *             self.ray.E1_amp.imag = v.imag
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6E1_amp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6E1_amp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6E1_amp_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6E1_amp_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":511
 *                             self.ray.E1_amp.imag)
 *         def __set__(self, v):
 *             self.ray.E1_amp.real = v.real             # <<<<<<<<<<<<<<
 *             self.ray.E1_amp.imag = v.imag
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_real); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_SET_CREAL(__pyx_v_self->ray.E1_amp, __pyx_t_2);

  /* "raypier/core/ctracer.pyx":512
 *         def __set__(self, v):
 *             self.ray.E1_amp.real = v.real
 *             self.ray.E1_amp.imag = v.imag             # <<<<<<<<<<<<<<
 * 
 *     property E2_amp:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_imag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_SET_CIMAG(__pyx_v_self->ray.E1_amp, __pyx_t_2);

  /* "raypier/core/ctracer.pyx":510
 *             return complex(self.ray.E1_amp.real,
 *                             self.ray.E1_amp.imag)
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.E1_amp.real = v.real
 *             self.ray.E1_amp.imag = v.imag
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E1_amp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":517
 *         """Complex amplitude of the electric field polarised
 *         perpendicular to the E_vection"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return complex(self.ray.E2_amp.real,
 *                             self.ray.E2_amp.imag)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6E2_amp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6E2_amp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6E2_amp___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6E2_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":518
 *         perpendicular to the E_vection"""
 *         def __get__(self):
 *             return complex(self.ray.E2_amp.real,             # <<<<<<<<<<<<<<
 *                             self.ray.E2_amp.imag)
 *         def __set__(self, v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__Pyx_CREAL(__pyx_v_self->ray.E2_amp)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "raypier/core/ctracer.pyx":519
 *         def __get__(self):
 *             return complex(self.ray.E2_amp.real,
 *                             self.ray.E2_amp.imag)             # <<<<<<<<<<<<<<
 *         def __set__(self, v):
 *             self.ray.E2_amp.real = v.real
 */
  __pyx_t_2 = PyFloat_FromDouble(__Pyx_CIMAG(__pyx_v_self->ray.E2_amp)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "raypier/core/ctracer.pyx":518
 *         perpendicular to the E_vection"""
 *         def __get__(self):
 *             return complex(self.ray.E2_amp.real,             # <<<<<<<<<<<<<<
 *                             self.ray.E2_amp.imag)
 *         def __set__(self, v):
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyComplex_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":517
 *         """Complex amplitude of the electric field polarised
 *         perpendicular to the E_vection"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return complex(self.ray.E2_amp.real,
 *                             self.ray.E2_amp.imag)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E2_amp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":520
 *             return complex(self.ray.E2_amp.real,
 *                             self.ray.E2_amp.imag)
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.E2_amp.real = v.real
 *             self.ray.E2_amp.imag = v.imag
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6E2_amp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_6E2_amp_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6E2_amp_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_6E2_amp_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":521
 *                             self.ray.E2_amp.imag)
 *         def __set__(self, v):
 *             self.ray.E2_amp.real = v.real             # <<<<<<<<<<<<<<
 *             self.ray.E2_amp.imag = v.imag
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_real); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_SET_CREAL(__pyx_v_self->ray.E2_amp, __pyx_t_2);

  /* "raypier/core/ctracer.pyx":522
 *         def __set__(self, v):
 *             self.ray.E2_amp.real = v.real
 *             self.ray.E2_amp.imag = v.imag             # <<<<<<<<<<<<<<
 * 
 *     property parent_idx:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_v, __pyx_n_s_imag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_SET_CIMAG(__pyx_v_self->ray.E2_amp, __pyx_t_2);

  /* "raypier/core/ctracer.pyx":520
 *             return complex(self.ray.E2_amp.real,
 *                             self.ray.E2_amp.imag)
 *         def __set__(self, v):             # <<<<<<<<<<<<<<
 *             self.ray.E2_amp.real = v.real
 *             self.ray.E2_amp.imag = v.imag
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E2_amp.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":527
 *         """Index of the parent ray in parent RayCollection
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.parent_idx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_10parent_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_10parent_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_10parent_idx___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_10parent_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":528
 *         """
 *         def __get__(self):
 *             return self.ray.parent_idx             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, unsigned int v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->ray.parent_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":527
 *         """Index of the parent ray in parent RayCollection
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.parent_idx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.parent_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":530
 *             return self.ray.parent_idx
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.parent_idx = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_10parent_idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_10parent_idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  unsigned int __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __Pyx_PyInt_As_unsigned_int(__pyx_arg_v); if (unlikely((__pyx_v_v == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 530, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.parent_idx.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_10parent_idx_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((unsigned int)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_10parent_idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":531
 * 
 *         def __set__(self, unsigned int v):
 *             self.ray.parent_idx = v             # <<<<<<<<<<<<<<
 * 
 *     property end_face_idx:
 */
  __pyx_v_self->ray.parent_idx = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":530
 *             return self.ray.parent_idx
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.parent_idx = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":537
 *         face list (created for each tracing operation)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.end_face_idx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_12end_face_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_12end_face_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_12end_face_idx___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_12end_face_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":538
 *         """
 *         def __get__(self):
 *             return self.ray.end_face_idx             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, unsigned int v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->ray.end_face_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":537
 *         face list (created for each tracing operation)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.end_face_idx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.end_face_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":540
 *             return self.ray.end_face_idx
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.end_face_idx = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_12end_face_idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_12end_face_idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  unsigned int __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __Pyx_PyInt_As_unsigned_int(__pyx_arg_v); if (unlikely((__pyx_v_v == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 540, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.end_face_idx.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_12end_face_idx_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((unsigned int)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_12end_face_idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":541
 * 
 *         def __set__(self, unsigned int v):
 *             self.ray.end_face_idx = v             # <<<<<<<<<<<<<<
 * 
 *     property ray_ident:
 */
  __pyx_v_self->ray.end_face_idx = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":540
 *             return self.ray.end_face_idx
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.end_face_idx = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":546
 *         """An arbitrary identifier inherited from it's parent ray
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.ray_ident
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9ray_ident_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9ray_ident_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_9ray_ident___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_9ray_ident___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":547
 *         """
 *         def __get__(self):
 *             return self.ray.ray_ident             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, unsigned int v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->ray.ray_ident); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":546
 *         """An arbitrary identifier inherited from it's parent ray
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.ray_ident
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.ray_ident.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":549
 *             return self.ray.ray_ident
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.ray_ident = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_9ray_ident_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_9ray_ident_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  unsigned int __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __Pyx_PyInt_As_unsigned_int(__pyx_arg_v); if (unlikely((__pyx_v_v == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 549, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.ray_ident.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_9ray_ident_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((unsigned int)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_9ray_ident_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":550
 * 
 *         def __set__(self, unsigned int v):
 *             self.ray.ray_ident = v             # <<<<<<<<<<<<<<
 * 
 *     property ray_type_id:
 */
  __pyx_v_self->ray.ray_ident = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":549
 *             return self.ray.ray_ident
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.ray_ident = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":555
 *         """Used to distinguish rays created by reflection vs transmission or some other mechanism.
 *         Transmission->0, Reflection->1"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.ray_type_id
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_11ray_type_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_11ray_type_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_11ray_type_id___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_11ray_type_id___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":556
 *         Transmission->0, Reflection->1"""
 *         def __get__(self):
 *             return self.ray.ray_type_id             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, unsigned int v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->ray.ray_type_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":555
 *         """Used to distinguish rays created by reflection vs transmission or some other mechanism.
 *         Transmission->0, Reflection->1"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ray.ray_type_id
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.ray_type_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":558
 *             return self.ray.ray_type_id
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.ray_type_id = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_11ray_type_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_3Ray_11ray_type_id_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  unsigned int __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __Pyx_PyInt_As_unsigned_int(__pyx_arg_v); if (unlikely((__pyx_v_v == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 558, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.ray_type_id.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_11ray_type_id_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((unsigned int)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_3Ray_11ray_type_id_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, unsigned int __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":559
 * 
 *         def __set__(self, unsigned int v):
 *             self.ray.ray_type_id = v             # <<<<<<<<<<<<<<
 * 
 *     property power:
 */
  __pyx_v_self->ray.ray_type_id = __pyx_v_v;

  /* "raypier/core/ctracer.pyx":558
 *             return self.ray.ray_type_id
 * 
 *         def __set__(self, unsigned int v):             # <<<<<<<<<<<<<<
 *             self.ray.ray_type_id = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":563
 *     property power:
 *         """Optical power for the ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return ray_power_(self.ray)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_5power_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_5power_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_5power___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_5power___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":564
 *         """Optical power for the ray"""
 *         def __get__(self):
 *             return ray_power_(self.ray)             # <<<<<<<<<<<<<<
 * 
 *     property amplitude:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_7raypier_4core_7ctracer_ray_power_(__pyx_v_self->ray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":563
 *     property power:
 *         """Optical power for the ray"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return ray_power_(self.ray)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.power.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":568
 *     property amplitude:
 *         """E field amplitude"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef ray_t ray=self.ray
 *             return sqrt(ray.E1_amp.real**2 + ray.E1_amp.imag**2 +\
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9amplitude_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9amplitude_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_9amplitude___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_9amplitude___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":569
 *         """E field amplitude"""
 *         def __get__(self):
 *             cdef ray_t ray=self.ray             # <<<<<<<<<<<<<<
 *             return sqrt(ray.E1_amp.real**2 + ray.E1_amp.imag**2 +\
 *                         ray.E2_amp.real**2 + ray.E2_amp.imag**2)
 */
  __pyx_t_1 = __pyx_v_self->ray;
  __pyx_v_ray = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":570
 *         def __get__(self):
 *             cdef ray_t ray=self.ray
 *             return sqrt(ray.E1_amp.real**2 + ray.E1_amp.imag**2 +\             # <<<<<<<<<<<<<<
 *                         ray.E2_amp.real**2 + ray.E2_amp.imag**2)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "raypier/core/ctracer.pyx":571
 *             cdef ray_t ray=self.ray
 *             return sqrt(ray.E1_amp.real**2 + ray.E1_amp.imag**2 +\
 *                         ray.E2_amp.real**2 + ray.E2_amp.imag**2)             # <<<<<<<<<<<<<<
 * 
 *     property jones_vector:
 */
  __pyx_t_2 = PyFloat_FromDouble(sqrt((((pow(__Pyx_CREAL(__pyx_v_ray.E1_amp), 2.0) + pow(__Pyx_CIMAG(__pyx_v_ray.E1_amp), 2.0)) + pow(__Pyx_CREAL(__pyx_v_ray.E2_amp), 2.0)) + pow(__Pyx_CIMAG(__pyx_v_ray.E2_amp), 2.0)))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":568
 *     property amplitude:
 *         """E field amplitude"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef ray_t ray=self.ray
 *             return sqrt(ray.E1_amp.real**2 + ray.E1_amp.imag**2 +\
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.amplitude.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":576
 *         """Jones polarisation vector expressed as a tuple (alpha, beta)
 *         where alpha and beta are complex"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double amp = self.amplitude
 *             return (self.E1_amp/amp, self.E2_amp/amp)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_12jones_vector_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_12jones_vector_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_12jones_vector___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_12jones_vector___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  double __pyx_v_amp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":577
 *         where alpha and beta are complex"""
 *         def __get__(self):
 *             cdef double amp = self.amplitude             # <<<<<<<<<<<<<<
 *             return (self.E1_amp/amp, self.E2_amp/amp)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_amplitude); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_amp = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":578
 *         def __get__(self):
 *             cdef double amp = self.amplitude
 *             return (self.E1_amp/amp, self.E2_amp/amp)             # <<<<<<<<<<<<<<
 * 
 *     property E_left:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_E1_amp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_amp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_E2_amp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_amp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":576
 *         """Jones polarisation vector expressed as a tuple (alpha, beta)
 *         where alpha and beta are complex"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double amp = self.amplitude
 *             return (self.E1_amp/amp, self.E2_amp/amp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.jones_vector.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":581
 * 
 *     property E_left:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6E_left_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_6E_left_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6E_left___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6E_left___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_v_E1_amp = NULL;
  PyObject *__pyx_v_E2_amp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":582
 *     property E_left:
 *         def __get__(self):
 *             E1_amp = self.E1_amp             # <<<<<<<<<<<<<<
 *             E2_amp = self.E2_amp
 *             return (E1_amp + 1.0j*E2_amp)/sqrt(2)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_E1_amp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_E1_amp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":583
 *         def __get__(self):
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp             # <<<<<<<<<<<<<<
 *             return (E1_amp + 1.0j*E2_amp)/sqrt(2)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_E2_amp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_E2_amp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":584
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp
 *             return (E1_amp + 1.0j*E2_amp)/sqrt(2)             # <<<<<<<<<<<<<<
 * 
 *     property E_right:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyComplex_FromDoubles(0.0, 1.0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_E2_amp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_v_E1_amp, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(sqrt(2.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":581
 * 
 *     property E_left:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E_left.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_E1_amp);
  __Pyx_XDECREF(__pyx_v_E2_amp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":587
 * 
 *     property E_right:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_7E_right_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_7E_right_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_7E_right___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_7E_right___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_v_E1_amp = NULL;
  PyObject *__pyx_v_E2_amp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":588
 *     property E_right:
 *         def __get__(self):
 *             E1_amp = self.E1_amp             # <<<<<<<<<<<<<<
 *             E2_amp = self.E2_amp
 *             return (E1_amp - 1.0j*E2_amp)/sqrt(2)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_E1_amp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_E1_amp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":589
 *         def __get__(self):
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp             # <<<<<<<<<<<<<<
 *             return (E1_amp - 1.0j*E2_amp)/sqrt(2)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_E2_amp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_E2_amp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":590
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp
 *             return (E1_amp - 1.0j*E2_amp)/sqrt(2)             # <<<<<<<<<<<<<<
 * 
 *     property ellipticity:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyComplex_FromDoubles(0.0, 1.0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_E2_amp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_E1_amp, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(sqrt(2.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":587
 * 
 *     property E_right:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             E1_amp = self.E1_amp
 *             E2_amp = self.E2_amp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.E_right.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_E1_amp);
  __Pyx_XDECREF(__pyx_v_E2_amp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":597
 *         linear polarisation. +1 indicate RH polarisation, -1 is
 *         LH polarisation. Or maybe the other way round."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             alpha, beta = self.jones_vector
 *             R = (alpha - 1j*beta)/root2
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_11ellipticity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_11ellipticity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_11ellipticity___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_11ellipticity___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_v_alpha = NULL;
  PyObject *__pyx_v_beta = NULL;
  PyObject *__pyx_v_R = NULL;
  PyObject *__pyx_v_L = NULL;
  PyObject *__pyx_v_PR = NULL;
  PyObject *__pyx_v_PL = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":598
 *         LH polarisation. Or maybe the other way round."""
 *         def __get__(self):
 *             alpha, beta = self.jones_vector             # <<<<<<<<<<<<<<
 *             R = (alpha - 1j*beta)/root2
 *             L = (alpha + 1j*beta)/root2
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_jones_vector); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 598, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(1, 598, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 598, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_alpha = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_beta = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":599
 *         def __get__(self):
 *             alpha, beta = self.jones_vector
 *             R = (alpha - 1j*beta)/root2             # <<<<<<<<<<<<<<
 *             L = (alpha + 1j*beta)/root2
 *             PR = R.real**2 + R.imag**2
 */
  __pyx_t_1 = PyComplex_FromDoubles(0.0, 1.0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_beta); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_alpha, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_7raypier_4core_7ctracer_root2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_R = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":600
 *             alpha, beta = self.jones_vector
 *             R = (alpha - 1j*beta)/root2
 *             L = (alpha + 1j*beta)/root2             # <<<<<<<<<<<<<<
 *             PR = R.real**2 + R.imag**2
 *             PL = L.real**2 + L.imag**2
 */
  __pyx_t_2 = PyComplex_FromDoubles(0.0, 1.0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_beta); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_v_alpha, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_7raypier_4core_7ctracer_root2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":601
 *             R = (alpha - 1j*beta)/root2
 *             L = (alpha + 1j*beta)/root2
 *             PR = R.real**2 + R.imag**2             # <<<<<<<<<<<<<<
 *             PL = L.real**2 + L.imag**2
 *             return (PR - PL)/(PR + PL)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_R, __pyx_n_s_real); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Power(__pyx_t_1, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_R, __pyx_n_s_imag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Power(__pyx_t_1, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_PR = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":602
 *             L = (alpha + 1j*beta)/root2
 *             PR = R.real**2 + R.imag**2
 *             PL = L.real**2 + L.imag**2             # <<<<<<<<<<<<<<
 *             return (PR - PL)/(PR + PL)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_L, __pyx_n_s_real); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Power(__pyx_t_1, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_L, __pyx_n_s_imag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Power(__pyx_t_1, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_PL = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":603
 *             PR = R.real**2 + R.imag**2
 *             PL = L.real**2 + L.imag**2
 *             return (PR - PL)/(PR + PL)             # <<<<<<<<<<<<<<
 * 
 *     property major_minor_axes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_PR, __pyx_v_PL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Add(__pyx_v_PR, __pyx_v_PL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":597
 *         linear polarisation. +1 indicate RH polarisation, -1 is
 *         LH polarisation. Or maybe the other way round."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             alpha, beta = self.jones_vector
 *             R = (alpha - 1j*beta)/root2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.ellipticity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XDECREF(__pyx_v_beta);
  __Pyx_XDECREF(__pyx_v_R);
  __Pyx_XDECREF(__pyx_v_L);
  __Pyx_XDECREF(__pyx_v_PR);
  __Pyx_XDECREF(__pyx_v_PL);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":609
 *         For fully circularly polarised light, the current E_vector will be
 *         returned"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 vector_t E1_vector, E2_vector
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_16major_minor_axes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_16major_minor_axes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_16major_minor_axes___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_16major_minor_axes___get__(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_E1_vector;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_E2_vector;
  double __pyx_v_E1;
  double __pyx_v_E2;
  double __pyx_v_phi1;
  double __pyx_v_phi2;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_mag;
  double __pyx_v_t1;
  double __pyx_v_t2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_axis1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_axis2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":613
 *                 vector_t E1_vector, E2_vector
 * 
 *             E2_vector = norm_(cross_(self.ray.direction, self.ray.E_vector))             # <<<<<<<<<<<<<<
 *             E1_vector = norm_(cross_(E2_vector, self.ray.direction))
 * 
 */
  __pyx_v_E2_vector = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_self->ray.direction, __pyx_v_self->ray.E_vector));

  /* "raypier/core/ctracer.pyx":614
 * 
 *             E2_vector = norm_(cross_(self.ray.direction, self.ray.E_vector))
 *             E1_vector = norm_(cross_(E2_vector, self.ray.direction))             # <<<<<<<<<<<<<<
 * 
 *             E1 = sqrt(self.ray.E1_amp.real**2 + self.ray.E1_amp.imag**2)
 */
  __pyx_v_E1_vector = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_E2_vector, __pyx_v_self->ray.direction));

  /* "raypier/core/ctracer.pyx":616
 *             E1_vector = norm_(cross_(E2_vector, self.ray.direction))
 * 
 *             E1 = sqrt(self.ray.E1_amp.real**2 + self.ray.E1_amp.imag**2)             # <<<<<<<<<<<<<<
 *             E2 = sqrt(self.ray.E2_amp.real**2 + self.ray.E2_amp.imag**2)
 *             phi1 = atan2(self.ray.E1_amp.imag, self.ray.E1_amp.real)
 */
  __pyx_v_E1 = sqrt((pow(__Pyx_CREAL(__pyx_v_self->ray.E1_amp), 2.0) + pow(__Pyx_CIMAG(__pyx_v_self->ray.E1_amp), 2.0)));

  /* "raypier/core/ctracer.pyx":617
 * 
 *             E1 = sqrt(self.ray.E1_amp.real**2 + self.ray.E1_amp.imag**2)
 *             E2 = sqrt(self.ray.E2_amp.real**2 + self.ray.E2_amp.imag**2)             # <<<<<<<<<<<<<<
 *             phi1 = atan2(self.ray.E1_amp.imag, self.ray.E1_amp.real)
 *             phi2 = atan2(self.ray.E2_amp.imag, self.ray.E2_amp.real)
 */
  __pyx_v_E2 = sqrt((pow(__Pyx_CREAL(__pyx_v_self->ray.E2_amp), 2.0) + pow(__Pyx_CIMAG(__pyx_v_self->ray.E2_amp), 2.0)));

  /* "raypier/core/ctracer.pyx":618
 *             E1 = sqrt(self.ray.E1_amp.real**2 + self.ray.E1_amp.imag**2)
 *             E2 = sqrt(self.ray.E2_amp.real**2 + self.ray.E2_amp.imag**2)
 *             phi1 = atan2(self.ray.E1_amp.imag, self.ray.E1_amp.real)             # <<<<<<<<<<<<<<
 *             phi2 = atan2(self.ray.E2_amp.imag, self.ray.E2_amp.real)
 * 
 */
  __pyx_v_phi1 = atan2(__Pyx_CIMAG(__pyx_v_self->ray.E1_amp), __Pyx_CREAL(__pyx_v_self->ray.E1_amp));

  /* "raypier/core/ctracer.pyx":619
 *             E2 = sqrt(self.ray.E2_amp.real**2 + self.ray.E2_amp.imag**2)
 *             phi1 = atan2(self.ray.E1_amp.imag, self.ray.E1_amp.real)
 *             phi2 = atan2(self.ray.E2_amp.imag, self.ray.E2_amp.real)             # <<<<<<<<<<<<<<
 * 
 *             A = E1*E1*sin(2*phi1) + E2*E2*sin(2*phi2)
 */
  __pyx_v_phi2 = atan2(__Pyx_CIMAG(__pyx_v_self->ray.E2_amp), __Pyx_CREAL(__pyx_v_self->ray.E2_amp));

  /* "raypier/core/ctracer.pyx":621
 *             phi2 = atan2(self.ray.E2_amp.imag, self.ray.E2_amp.real)
 * 
 *             A = E1*E1*sin(2*phi1) + E2*E2*sin(2*phi2)             # <<<<<<<<<<<<<<
 *             B = E1*E1*cos(2*phi1) + E2*E2*cos(2*phi2)
 * 
 */
  __pyx_v_A = (((__pyx_v_E1 * __pyx_v_E1) * sin((2.0 * __pyx_v_phi1))) + ((__pyx_v_E2 * __pyx_v_E2) * sin((2.0 * __pyx_v_phi2))));

  /* "raypier/core/ctracer.pyx":622
 * 
 *             A = E1*E1*sin(2*phi1) + E2*E2*sin(2*phi2)
 *             B = E1*E1*cos(2*phi1) + E2*E2*cos(2*phi2)             # <<<<<<<<<<<<<<
 * 
 *             mag = sqrt(A*A + B*B)
 */
  __pyx_v_B = (((__pyx_v_E1 * __pyx_v_E1) * cos((2.0 * __pyx_v_phi1))) + ((__pyx_v_E2 * __pyx_v_E2) * cos((2.0 * __pyx_v_phi2))));

  /* "raypier/core/ctracer.pyx":624
 *             B = E1*E1*cos(2*phi1) + E2*E2*cos(2*phi2)
 * 
 *             mag = sqrt(A*A + B*B)             # <<<<<<<<<<<<<<
 *             t1 = atan( (B - mag)/A )
 *             t2 = atan( (B + mag)/A )
 */
  __pyx_v_mag = sqrt(((__pyx_v_A * __pyx_v_A) + (__pyx_v_B * __pyx_v_B)));

  /* "raypier/core/ctracer.pyx":625
 * 
 *             mag = sqrt(A*A + B*B)
 *             t1 = atan( (B - mag)/A )             # <<<<<<<<<<<<<<
 *             t2 = atan( (B + mag)/A )
 * 
 */
  __pyx_v_t1 = atan(((__pyx_v_B - __pyx_v_mag) / __pyx_v_A));

  /* "raypier/core/ctracer.pyx":626
 *             mag = sqrt(A*A + B*B)
 *             t1 = atan( (B - mag)/A )
 *             t2 = atan( (B + mag)/A )             # <<<<<<<<<<<<<<
 * 
 *             axis1 = addvv_(multvs_(E1_vector, E1*cos(phi1+t1)),
 */
  __pyx_v_t2 = atan(((__pyx_v_B + __pyx_v_mag) / __pyx_v_A));

  /* "raypier/core/ctracer.pyx":628
 *             t2 = atan( (B + mag)/A )
 * 
 *             axis1 = addvv_(multvs_(E1_vector, E1*cos(phi1+t1)),             # <<<<<<<<<<<<<<
 *                            multvs_(E2_vector, E2*cos(phi2+t1)))
 * 
 */
  __pyx_v_axis1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_E1_vector, (__pyx_v_E1 * cos((__pyx_v_phi1 + __pyx_v_t1)))), __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_E2_vector, (__pyx_v_E2 * cos((__pyx_v_phi2 + __pyx_v_t1)))));

  /* "raypier/core/ctracer.pyx":631
 *                            multvs_(E2_vector, E2*cos(phi2+t1)))
 * 
 *             axis2 = addvv_(multvs_(E1_vector, E1*cos(phi1+t2)),             # <<<<<<<<<<<<<<
 *                            multvs_(E2_vector, E2*cos(phi2+t2)))
 * 
 */
  __pyx_v_axis2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_E1_vector, (__pyx_v_E1 * cos((__pyx_v_phi1 + __pyx_v_t2)))), __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_E2_vector, (__pyx_v_E2 * cos((__pyx_v_phi2 + __pyx_v_t2)))));

  /* "raypier/core/ctracer.pyx":634
 *                            multvs_(E2_vector, E2*cos(phi2+t2)))
 * 
 *             return ( (axis1.x, axis1.y, axis1.z),             # <<<<<<<<<<<<<<
 *                      (axis2.x, axis2.y, axis2.z) )
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_axis1.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_axis1.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_axis1.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":635
 * 
 *             return ( (axis1.x, axis1.y, axis1.z),
 *                      (axis2.x, axis2.y, axis2.z) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_axis2.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_axis2.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_axis2.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":634
 *                            multvs_(E2_vector, E2*cos(phi2+t2)))
 * 
 *             return ( (axis1.x, axis1.y, axis1.z),             # <<<<<<<<<<<<<<
 *                      (axis2.x, axis2.y, axis2.z) )
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":609
 *         For fully circularly polarised light, the current E_vector will be
 *         returned"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 vector_t E1_vector, E2_vector
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.major_minor_axes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":638
 * 
 * 
 *     def project_E(self, *axis):             # <<<<<<<<<<<<<<
 *         """Rotate the E_vector onto the given axis, projecting
 *         E1_amp and E2_amp as necessary."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_5project_E(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_3Ray_4project_E[] = "Rotate the E_vector onto the given axis, projecting\n        E1_amp and E2_amp as necessary.";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_5project_E(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project_E (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "project_E", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_axis = __pyx_args;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_4project_E(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), __pyx_v_axis);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_axis);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_4project_E(struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, PyObject *__pyx_v_axis) {
  __pyx_t_double_complex __pyx_v_E1;
  __pyx_t_double_complex __pyx_v_E2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_E_vector;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_E_vector2bar;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_E_vector2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_direction;
  double __pyx_v_A;
  double __pyx_v_B;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_2;
  __Pyx_RefNannySetupContext("project_E", 0);

  /* "raypier/core/ctracer.pyx":643
 *         cdef:
 *             complex_t E1, E2
 *             vector_t v=set_v(axis)             # <<<<<<<<<<<<<<
 *             vector_t E_vector, E_vector2bar, E_vector2, direction
 *             double A, B
 */
  __pyx_v_v = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_axis);

  /* "raypier/core/ctracer.pyx":647
 *             double A, B
 * 
 *         E1 = self.ray.E1_amp             # <<<<<<<<<<<<<<
 *         E2 = self.ray.E2_amp
 *         direction = self.ray.direction
 */
  __pyx_t_1 = __pyx_v_self->ray.E1_amp;
  __pyx_v_E1 = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":648
 * 
 *         E1 = self.ray.E1_amp
 *         E2 = self.ray.E2_amp             # <<<<<<<<<<<<<<
 *         direction = self.ray.direction
 * 
 */
  __pyx_t_1 = __pyx_v_self->ray.E2_amp;
  __pyx_v_E2 = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":649
 *         E1 = self.ray.E1_amp
 *         E2 = self.ray.E2_amp
 *         direction = self.ray.direction             # <<<<<<<<<<<<<<
 * 
 *         #initial E_vector
 */
  __pyx_t_2 = __pyx_v_self->ray.direction;
  __pyx_v_direction = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":652
 * 
 *         #initial E_vector
 *         E_vector = norm_(cross_(cross_(direction, self.ray.E_vector), direction))             # <<<<<<<<<<<<<<
 *         #new E_vector
 *         E_vector2bar = norm_(cross_(direction, v))
 */
  __pyx_v_E_vector = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_direction, __pyx_v_self->ray.E_vector), __pyx_v_direction));

  /* "raypier/core/ctracer.pyx":654
 *         E_vector = norm_(cross_(cross_(direction, self.ray.E_vector), direction))
 *         #new E_vector
 *         E_vector2bar = norm_(cross_(direction, v))             # <<<<<<<<<<<<<<
 *         E_vector2 = norm_(cross_(E_vector2bar, direction))
 * 
 */
  __pyx_v_E_vector2bar = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_direction, __pyx_v_v));

  /* "raypier/core/ctracer.pyx":655
 *         #new E_vector
 *         E_vector2bar = norm_(cross_(direction, v))
 *         E_vector2 = norm_(cross_(E_vector2bar, direction))             # <<<<<<<<<<<<<<
 * 
 *         A = dotprod_(E_vector, E_vector2)
 */
  __pyx_v_E_vector2 = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_E_vector2bar, __pyx_v_direction));

  /* "raypier/core/ctracer.pyx":657
 *         E_vector2 = norm_(cross_(E_vector2bar, direction))
 * 
 *         A = dotprod_(E_vector, E_vector2)             # <<<<<<<<<<<<<<
 *         B = dotprod_(E_vector, E_vector2bar)
 * 
 */
  __pyx_v_A = __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_E_vector, __pyx_v_E_vector2);

  /* "raypier/core/ctracer.pyx":658
 * 
 *         A = dotprod_(E_vector, E_vector2)
 *         B = dotprod_(E_vector, E_vector2bar)             # <<<<<<<<<<<<<<
 * 
 *         #print "A,B,AB^2:", A, B, A**2 + B**2
 */
  __pyx_v_B = __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_E_vector, __pyx_v_E_vector2bar);

  /* "raypier/core/ctracer.pyx":662
 *         #print "A,B,AB^2:", A, B, A**2 + B**2
 * 
 *         self.ray.E1_amp.real = -(E2.real*B - E1.real*A)             # <<<<<<<<<<<<<<
 *         self.ray.E2_amp.real = (E2.real*A + E1.real*B)
 * 
 */
  __Pyx_SET_CREAL(__pyx_v_self->ray.E1_amp, (-((__Pyx_CREAL(__pyx_v_E2) * __pyx_v_B) - (__Pyx_CREAL(__pyx_v_E1) * __pyx_v_A))));

  /* "raypier/core/ctracer.pyx":663
 * 
 *         self.ray.E1_amp.real = -(E2.real*B - E1.real*A)
 *         self.ray.E2_amp.real = (E2.real*A + E1.real*B)             # <<<<<<<<<<<<<<
 * 
 *         self.ray.E1_amp.imag = -(E2.imag*B - E1.imag*A)
 */
  __Pyx_SET_CREAL(__pyx_v_self->ray.E2_amp, ((__Pyx_CREAL(__pyx_v_E2) * __pyx_v_A) + (__Pyx_CREAL(__pyx_v_E1) * __pyx_v_B)));

  /* "raypier/core/ctracer.pyx":665
 *         self.ray.E2_amp.real = (E2.real*A + E1.real*B)
 * 
 *         self.ray.E1_amp.imag = -(E2.imag*B - E1.imag*A)             # <<<<<<<<<<<<<<
 *         self.ray.E2_amp.imag = E2.imag*A + E1.imag*B
 * 
 */
  __Pyx_SET_CIMAG(__pyx_v_self->ray.E1_amp, (-((__Pyx_CIMAG(__pyx_v_E2) * __pyx_v_B) - (__Pyx_CIMAG(__pyx_v_E1) * __pyx_v_A))));

  /* "raypier/core/ctracer.pyx":666
 * 
 *         self.ray.E1_amp.imag = -(E2.imag*B - E1.imag*A)
 *         self.ray.E2_amp.imag = E2.imag*A + E1.imag*B             # <<<<<<<<<<<<<<
 * 
 *         self.ray.E_vector = E_vector2
 */
  __Pyx_SET_CIMAG(__pyx_v_self->ray.E2_amp, ((__Pyx_CIMAG(__pyx_v_E2) * __pyx_v_A) + (__Pyx_CIMAG(__pyx_v_E1) * __pyx_v_B)));

  /* "raypier/core/ctracer.pyx":668
 *         self.ray.E2_amp.imag = E2.imag*A + E1.imag*B
 * 
 *         self.ray.E_vector = E_vector2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->ray.E_vector = __pyx_v_E_vector2;

  /* "raypier/core/ctracer.pyx":638
 * 
 * 
 *     def project_E(self, *axis):             # <<<<<<<<<<<<<<
 *         """Rotate the E_vector onto the given axis, projecting
 *         E1_amp and E2_amp as necessary."""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_6__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_3Ray_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_3Ray_8__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_3Ray_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Ray.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":672
 * 
 * cdef class Gausslet:
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         for k in kwds:
 *             setattr(self, k, kwds[k])
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8Gausslet_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8Gausslet_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8Gausslet___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_k = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":673
 * cdef class Gausslet:
 *     def __cinit__(self, **kwds):
 *         for k in kwds:             # <<<<<<<<<<<<<<
 *             setattr(self, k, kwds[k])
 * 
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_kwds, 1, ((PyObject *)NULL), (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, NULL, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 673, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":674
 *     def __cinit__(self, **kwds):
 *         for k in kwds:
 *             setattr(self, k, kwds[k])             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
    __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_k, __pyx_t_5); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 674, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":672
 * 
 * cdef class Gausslet:
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         for k in kwds:
 *             setattr(self, k, kwds[k])
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":676
 *             setattr(self, k, kwds[k])
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Gausslet(o=%s, d=%s)"%(str(self.base_ray.origin),
 *                                             str(self.base_ray.direction))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_2__repr__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_2__repr__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "raypier/core/ctracer.pyx":677
 * 
 *     def __repr__(self):
 *         return "Gausslet(o=%s, d=%s)"%(str(self.base_ray.origin),             # <<<<<<<<<<<<<<
 *                                             str(self.base_ray.direction))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Gausslet_o);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_Gausslet_o);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Gausslet_o);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_ray); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_origin); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_d);
  __pyx_t_2 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_d);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_d);

  /* "raypier/core/ctracer.pyx":678
 *     def __repr__(self):
 *         return "Gausslet(o=%s, d=%s)"%(str(self.base_ray.origin),
 *                                             str(self.base_ray.direction))             # <<<<<<<<<<<<<<
 * 
 *     property base_ray:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_ray); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_direction); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__9);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__9);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__9);

  /* "raypier/core/ctracer.pyx":677
 * 
 *     def __repr__(self):
 *         return "Gausslet(o=%s, d=%s)"%(str(self.base_ray.origin),             # <<<<<<<<<<<<<<
 *                                             str(self.base_ray.direction))
 * 
 */
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":676
 *             setattr(self, k, kwds[k])
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "Gausslet(o=%s, d=%s)"%(str(self.base_ray.origin),
 *                                             str(self.base_ray.direction))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":681
 * 
 *     property base_ray:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 Ray out = Ray()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_8base_ray_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_8base_ray_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_8base_ray___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_8base_ray___get__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_out = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":683
 *         def __get__(self):
 *             cdef:
 *                 Ray out = Ray()             # <<<<<<<<<<<<<<
 * 
 *             out.ray = self.gausslet.base_ray
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Ray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":685
 *                 Ray out = Ray()
 * 
 *             out.ray = self.gausslet.base_ray             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
  __pyx_t_2 = __pyx_v_self->gausslet.base_ray;
  __pyx_v_out->ray = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":686
 * 
 *             out.ray = self.gausslet.base_ray
 *             return out             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, Ray r):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":681
 * 
 *     property base_ray:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 Ray out = Ray()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.base_ray.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":688
 *             return out
 * 
 *         def __set__(self, Ray r):             # <<<<<<<<<<<<<<
 *             self.gausslet.base_ray = r.ray
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8Gausslet_8base_ray_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_r); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8Gausslet_8base_ray_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_r) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7raypier_4core_7ctracer_Ray, 1, "r", 0))) __PYX_ERR(1, 688, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_8base_ray_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_r));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8Gausslet_8base_ray_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":689
 * 
 *         def __set__(self, Ray r):
 *             self.gausslet.base_ray = r.ray             # <<<<<<<<<<<<<<
 * 
 *     property parabasal_rays:
 */
  __pyx_t_1 = __pyx_v_r->ray;
  __pyx_v_self->gausslet.base_ray = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":688
 *             return out
 * 
 *         def __set__(self, Ray r):             # <<<<<<<<<<<<<<
 *             self.gausslet.base_ray = r.ray
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":692
 * 
 *     property parabasal_rays:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 ParabasalRay p
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "raypier/core/ctracer.pyx":698
 *                 tuple out
 * 
 *             out = tuple(ParabasalRay() for i in range(6))             # <<<<<<<<<<<<<<
 *             for i in range(6):
 *                 p = out[i]
 */

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___genexpr(CYTHON_UNUSED PyObject *__pyx_self) {
  struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr *)__pyx_tp_new_7raypier_4core_7ctracer___pyx_scope_struct__genexpr(__pyx_ptype_7raypier_4core_7ctracer___pyx_scope_struct__genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 698, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Gausslet___get___locals_genexpr, __pyx_n_s_raypier_core_ctracer); if (unlikely(!gen)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.parabasal_rays.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr *__pyx_cur_scope = ((struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 698, __pyx_L1_error)
  for (__pyx_t_1 = 0; __pyx_t_1 < 6; __pyx_t_1+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_1;
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_ParabasalRay)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 698, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":692
 * 
 *     property parabasal_rays:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 ParabasalRay p
 */

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_p = 0;
  int __pyx_v_i;
  PyObject *__pyx_v_out = 0;
  PyObject *__pyx_gb_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":698
 *                 tuple out
 * 
 *             out = tuple(ParabasalRay() for i in range(6))             # <<<<<<<<<<<<<<
 *             for i in range(6):
 *                 p = out[i]
 */
  __pyx_t_1 = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___genexpr(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":699
 * 
 *             out = tuple(ParabasalRay() for i in range(6))
 *             for i in range(6):             # <<<<<<<<<<<<<<
 *                 p = out[i]
 *                 p.ray = self.gausslet.para[i]
 */
  for (__pyx_t_3 = 0; __pyx_t_3 < 6; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":700
 *             out = tuple(ParabasalRay() for i in range(6))
 *             for i in range(6):
 *                 p = out[i]             # <<<<<<<<<<<<<<
 *                 p.ray = self.gausslet.para[i]
 *             return out
 */
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_out, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7raypier_4core_7ctracer_ParabasalRay))))) __PYX_ERR(1, 700, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "raypier/core/ctracer.pyx":701
 *             for i in range(6):
 *                 p = out[i]
 *                 p.ray = self.gausslet.para[i]             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_p->ray = (__pyx_v_self->gausslet.para[__pyx_v_i]);
  }

  /* "raypier/core/ctracer.pyx":702
 *                 p = out[i]
 *                 p.ray = self.gausslet.para[i]
 *             return out             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, tuple paras):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_out);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":692
 * 
 *     property parabasal_rays:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 ParabasalRay p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.parabasal_rays.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_out);
  __Pyx_XDECREF(__pyx_gb_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_7__get___2generator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":704
 *             return out
 * 
 *         def __set__(self, tuple paras):             # <<<<<<<<<<<<<<
 *             for i in range(6):
 *                 self.gausslet.para[i] = paras[i].ray
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_paras); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_paras) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_paras), (&PyTuple_Type), 1, "paras", 1))) __PYX_ERR(1, 704, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self), ((PyObject*)__pyx_v_paras));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, PyObject *__pyx_v_paras) {
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":705
 * 
 *         def __set__(self, tuple paras):
 *             for i in range(6):             # <<<<<<<<<<<<<<
 *                 self.gausslet.para[i] = paras[i].ray
 * 
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 6; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "raypier/core/ctracer.pyx":706
 *         def __set__(self, tuple paras):
 *             for i in range(6):
 *                 self.gausslet.para[i] = paras[i].ray             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (unlikely(__pyx_v_paras == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 706, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_paras, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 706, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_self->gausslet.para[__pyx_v_i]) = __pyx_t_4;
  }

  /* "raypier/core/ctracer.pyx":704
 *             return out
 * 
 *         def __set__(self, tuple paras):             # <<<<<<<<<<<<<<
 *             for i in range(6):
 *                 self.gausslet.para[i] = paras[i].ray
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.parabasal_rays.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_4__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8Gausslet_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8Gausslet_6__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8Gausslet_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Gausslet.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":711
 * cdef class RayArrayView:
 *     """An abstract class to provide the API for ray_t member access from python / numpy"""
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):             # <<<<<<<<<<<<<<
 *         return
 * 
 */

static void __pyx_f_7raypier_4core_7ctracer_12RayArrayView_set_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, CYTHON_UNUSED unsigned long __pyx_v_i, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ray_c", 0);

  /* "raypier/core/ctracer.pyx":712
 *     """An abstract class to provide the API for ray_t member access from python / numpy"""
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):
 */
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":711
 * cdef class RayArrayView:
 *     """An abstract class to provide the API for ray_t member access from python / numpy"""
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):             # <<<<<<<<<<<<<<
 *         return
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":714
 *         return
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ray_t r
 */

static struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_f_7raypier_4core_7ctracer_12RayArrayView_get_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, CYTHON_UNUSED unsigned long __pyx_v_i) {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_r;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ray_c", 0);

  /* "raypier/core/ctracer.pyx":717
 *         cdef:
 *             ray_t r
 *         return r             # <<<<<<<<<<<<<<
 * 
 *     cdef unsigned long get_n_rays(self):
 */
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":714
 *         return
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ray_t r
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":719
 *         return r
 * 
 *     cdef unsigned long get_n_rays(self):             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

static unsigned long __pyx_f_7raypier_4core_7ctracer_12RayArrayView_get_n_rays(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_rays", 0);

  /* "raypier/core/ctracer.pyx":720
 * 
 *     cdef unsigned long get_n_rays(self):
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, size_t idx):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":719
 *         return r
 * 
 *     cdef unsigned long get_n_rays(self):             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":722
 *         return 0
 * 
 *     def __getitem__(self, size_t idx):             # <<<<<<<<<<<<<<
 *         cdef Ray r
 *         if idx >= self.get_n_rays():
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_1__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  size_t __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_size_t(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 722, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView___getitem__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self), ((size_t)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView___getitem__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, size_t __pyx_v_idx) {
  struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "raypier/core/ctracer.pyx":724
 *     def __getitem__(self, size_t idx):
 *         cdef Ray r
 *         if idx >= self.get_n_rays():             # <<<<<<<<<<<<<<
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Ray()
 */
  __pyx_t_1 = ((__pyx_v_idx >= ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "raypier/core/ctracer.pyx":725
 *         cdef Ray r
 *         if idx >= self.get_n_rays():
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))             # <<<<<<<<<<<<<<
 *         r = Ray()
 *         r.ray = self.get_ray_c(idx)
 */
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Requested_index);
    __pyx_t_3 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_Requested_index);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Requested_index);
    __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_from_a_size);
    __pyx_t_3 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_from_a_size);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_from_a_size);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_rays); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_5), __pyx_n_u_d_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_array);
    __pyx_t_3 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_array);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_array);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 725, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":724
 *     def __getitem__(self, size_t idx):
 *         cdef Ray r
 *         if idx >= self.get_n_rays():             # <<<<<<<<<<<<<<
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Ray()
 */
  }

  /* "raypier/core/ctracer.pyx":726
 *         if idx >= self.get_n_rays():
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Ray()             # <<<<<<<<<<<<<<
 *         r.ray = self.get_ray_c(idx)
 *         return r
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Ray)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_r = ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":727
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Ray()
 *         r.ray = self.get_ray_c(idx)             # <<<<<<<<<<<<<<
 *         return r
 * 
 */
  __pyx_v_r->ray = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_idx);

  /* "raypier/core/ctracer.pyx":728
 *         r = Ray()
 *         r.ray = self.get_ray_c(idx)
 *         return r             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, size_t idx, Ray r):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":722
 *         return 0
 * 
 *     def __getitem__(self, size_t idx):             # <<<<<<<<<<<<<<
 *         cdef Ray r
 *         if idx >= self.get_n_rays():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":730
 *         return r
 * 
 *     def __setitem__(self, size_t idx, Ray r):             # <<<<<<<<<<<<<<
 *         if idx >= self.get_n_rays():
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_3__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx, PyObject *__pyx_v_r); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_3__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx, PyObject *__pyx_v_r) {
  size_t __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_size_t(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 730, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7raypier_4core_7ctracer_Ray, 1, "r", 0))) __PYX_ERR(1, 730, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_2__setitem__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self), ((size_t)__pyx_v_idx), ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_r));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_2__setitem__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, size_t __pyx_v_idx, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "raypier/core/ctracer.pyx":731
 * 
 *     def __setitem__(self, size_t idx, Ray r):
 *         if idx >= self.get_n_rays():             # <<<<<<<<<<<<<<
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 *         self.set_ray_c(idx, r.ray)
 */
  __pyx_t_1 = ((__pyx_v_idx >= ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "raypier/core/ctracer.pyx":732
 *     def __setitem__(self, size_t idx, Ray r):
 *         if idx >= self.get_n_rays():
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))             # <<<<<<<<<<<<<<
 *         self.set_ray_c(idx, r.ray)
 * 
 */
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Attempting_to_set_index);
    __pyx_t_3 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_Attempting_to_set_index);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Attempting_to_set_index);
    __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_from_a_size);
    __pyx_t_3 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_from_a_size);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_from_a_size);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_rays); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_5), __pyx_n_u_d_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_array);
    __pyx_t_3 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_array);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_array);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 732, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":731
 * 
 *     def __setitem__(self, size_t idx, Ray r):
 *         if idx >= self.get_n_rays():             # <<<<<<<<<<<<<<
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 *         self.set_ray_c(idx, r.ray)
 */
  }

  /* "raypier/core/ctracer.pyx":733
 *         if idx >= self.get_n_rays():
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 *         self.set_ray_c(idx, r.ray)             # <<<<<<<<<<<<<<
 * 
 *     def get_ray_list(self):
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->set_ray_c(__pyx_v_self, __pyx_v_idx, __pyx_v_r->ray);

  /* "raypier/core/ctracer.pyx":730
 *         return r
 * 
 *     def __setitem__(self, size_t idx, Ray r):             # <<<<<<<<<<<<<<
 *         if idx >= self.get_n_rays():
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":735
 *         self.set_ray_c(idx, r.ray)
 * 
 *     def get_ray_list(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a list of Rays
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_5get_ray_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_12RayArrayView_4get_ray_list[] = "Returns the contents of this RayCollection as a list of Rays\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_5get_ray_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ray_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_4get_ray_list(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_4get_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_ray_list = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  unsigned long __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ray_list", 0);

  /* "raypier/core/ctracer.pyx":739
 *         """
 *         cdef size_t i
 *         cdef list ray_list = []             # <<<<<<<<<<<<<<
 *         cdef Ray r
 *         for i in range(self.get_n_rays()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ray_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":741
 *         cdef list ray_list = []
 *         cdef Ray r
 *         for i in range(self.get_n_rays()):             # <<<<<<<<<<<<<<
 *             r = Ray()
 *             r.ray = self.get_ray_c(i)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "raypier/core/ctracer.pyx":742
 *         cdef Ray r
 *         for i in range(self.get_n_rays()):
 *             r = Ray()             # <<<<<<<<<<<<<<
 *             r.ray = self.get_ray_c(i)
 *             ray_list.append(r)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Ray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_r, ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "raypier/core/ctracer.pyx":743
 *         for i in range(self.get_n_rays()):
 *             r = Ray()
 *             r.ray = self.get_ray_c(i)             # <<<<<<<<<<<<<<
 *             ray_list.append(r)
 *         return ray_list
 */
    __pyx_v_r->ray = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i);

    /* "raypier/core/ctracer.pyx":744
 *             r = Ray()
 *             r.ray = self.get_ray_c(i)
 *             ray_list.append(r)             # <<<<<<<<<<<<<<
 *         return ray_list
 * 
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_ray_list, ((PyObject *)__pyx_v_r)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 744, __pyx_L1_error)
  }

  /* "raypier/core/ctracer.pyx":745
 *             r.ray = self.get_ray_c(i)
 *             ray_list.append(r)
 *         return ray_list             # <<<<<<<<<<<<<<
 * 
 *     property origin:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ray_list);
  __pyx_r = __pyx_v_ray_list;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":735
 *         self.set_ray_c(idx, r.ray)
 * 
 *     def get_ray_list(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a list of Rays
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.get_ray_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ray_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":748
 * 
 *     property origin:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6origin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6origin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6origin___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_n;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":750
 *         def __get__(self):
 *             cdef:
 *                 unsigned long n=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty((n,3), dtype='d')
 *                 size_t i
 */
  __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":751
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 *                 np_.ndarray out = np.empty((n,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 751, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 751, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":754
 *                 size_t i
 *                 vector_t v
 *             for i in xrange(n):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).origin
 *                 out[i,0] = v.x
 */
  __pyx_t_5 = __pyx_v_n;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":755
 *                 vector_t v
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).origin             # <<<<<<<<<<<<<<
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).origin;
    __pyx_v_v = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":756
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).origin
 *                 out[i,0] = v.x             # <<<<<<<<<<<<<<
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 756, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":757
 *                 v = self.get_ray_c(i).origin
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y             # <<<<<<<<<<<<<<
 *                 out[i,2] = v.z
 *             return out
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":758
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 758, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":759
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property direction:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":748
 * 
 *     property origin:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.origin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":762
 * 
 *     property direction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9direction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9direction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_9direction___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_9direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_n;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":764
 *         def __get__(self):
 *             cdef:
 *                 unsigned long n=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty((n,3), dtype='d')
 *                 size_t i
 */
  __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":765
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 *                 np_.ndarray out = np.empty((n,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 765, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 765, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":768
 *                 size_t i
 *                 vector_t v
 *             for i in xrange(n):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).direction
 *                 out[i,0] = v.x
 */
  __pyx_t_5 = __pyx_v_n;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":769
 *                 vector_t v
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).direction             # <<<<<<<<<<<<<<
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).direction;
    __pyx_v_v = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":770
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).direction
 *                 out[i,0] = v.x             # <<<<<<<<<<<<<<
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":771
 *                 v = self.get_ray_c(i).direction
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y             # <<<<<<<<<<<<<<
 *                 out[i,2] = v.z
 *             return out
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 771, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":772
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 772, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":773
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property normal:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":762
 * 
 *     property direction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.direction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":776
 * 
 *     property normal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6normal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6normal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6normal___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_n;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":778
 *         def __get__(self):
 *             cdef:
 *                 unsigned long n=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty((n,3), dtype='d')
 *                 size_t i
 */
  __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":779
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 *                 np_.ndarray out = np.empty((n,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 779, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 779, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":782
 *                 size_t i
 *                 vector_t v
 *             for i in xrange(n):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).normal
 *                 out[i,0] = v.x
 */
  __pyx_t_5 = __pyx_v_n;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":783
 *                 vector_t v
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).normal             # <<<<<<<<<<<<<<
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).normal;
    __pyx_v_v = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":784
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).normal
 *                 out[i,0] = v.x             # <<<<<<<<<<<<<<
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":785
 *                 v = self.get_ray_c(i).normal
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y             # <<<<<<<<<<<<<<
 *                 out[i,2] = v.z
 *             return out
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 785, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":786
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 786, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":787
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property E_vector:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":776
 * 
 *     property normal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.normal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":790
 * 
 *     property E_vector:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_8E_vector_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_8E_vector_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_8E_vector___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_8E_vector___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_n;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":792
 *         def __get__(self):
 *             cdef:
 *                 unsigned long n=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty((n,3), dtype='d')
 *                 size_t i
 */
  __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":793
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 *                 np_.ndarray out = np.empty((n,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 793, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 793, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":796
 *                 size_t i
 *                 vector_t v
 *             for i in xrange(n):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).E_vector
 *                 out[i,0] = v.x
 */
  __pyx_t_5 = __pyx_v_n;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":797
 *                 vector_t v
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).E_vector             # <<<<<<<<<<<<<<
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).E_vector;
    __pyx_v_v = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":798
 *             for i in xrange(n):
 *                 v = self.get_ray_c(i).E_vector
 *                 out[i,0] = v.x             # <<<<<<<<<<<<<<
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":799
 *                 v = self.get_ray_c(i).E_vector
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y             # <<<<<<<<<<<<<<
 *                 out[i,2] = v.z
 *             return out
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":800
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 800, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":801
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property refractive_index:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":790
 * 
 *     property E_vector:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long n=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.E_vector.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":804
 * 
 *     property refractive_index:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_16refractive_index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_16refractive_index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_16refractive_index___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_16refractive_index___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  PyArrayObject *__pyx_v_rr = 0;
  PyArrayObject *__pyx_v_ii = 0;
  size_t __pyx_v_i;
  __pyx_t_double_complex __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  __pyx_t_double_complex __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":806
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.complex128)
 *                 np_.ndarray rr,ii
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":807
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.complex128)             # <<<<<<<<<<<<<<
 *                 np_.ndarray rr,ii
 *                 size_t i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_complex128); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 807, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":811
 *                 size_t i
 *                 complex_t n
 *             rr = out.real             # <<<<<<<<<<<<<<
 *             ii = out.imag
 *             for i in xrange(N):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_real); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 811, __pyx_L1_error)
  __pyx_v_rr = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":812
 *                 complex_t n
 *             rr = out.real
 *             ii = out.imag             # <<<<<<<<<<<<<<
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).refractive_index
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_imag); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 812, __pyx_L1_error)
  __pyx_v_ii = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":813
 *             rr = out.real
 *             ii = out.imag
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 n = self.get_ray_c(i).refractive_index
 *                 rr[i] = n.real
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":814
 *             ii = out.imag
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).refractive_index             # <<<<<<<<<<<<<<
 *                 rr[i] = n.real
 *                 ii[i] = n.imag
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).refractive_index;
    __pyx_v_n = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":815
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).refractive_index
 *                 rr[i] = n.real             # <<<<<<<<<<<<<<
 *                 ii[i] = n.imag
 *             return out
 */
    __pyx_t_5 = PyFloat_FromDouble(__Pyx_CREAL(__pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_rr), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 815, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":816
 *                 n = self.get_ray_c(i).refractive_index
 *                 rr[i] = n.real
 *                 ii[i] = n.imag             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble(__Pyx_CIMAG(__pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_ii), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 816, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":817
 *                 rr[i] = n.real
 *                 ii[i] = n.imag
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property E1_amp:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":804
 * 
 *     property refractive_index:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.refractive_index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XDECREF((PyObject *)__pyx_v_rr);
  __Pyx_XDECREF((PyObject *)__pyx_v_ii);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":820
 * 
 *     property E1_amp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6E1_amp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6E1_amp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6E1_amp___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6E1_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  PyArrayObject *__pyx_v_rr = 0;
  PyArrayObject *__pyx_v_ii = 0;
  size_t __pyx_v_i;
  __pyx_t_double_complex __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  __pyx_t_double_complex __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":822
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.complex128)
 *                 np_.ndarray rr,ii
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":823
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.complex128)             # <<<<<<<<<<<<<<
 *                 np_.ndarray rr,ii
 *                 size_t i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_complex128); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 823, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":827
 *                 size_t i
 *                 complex_t n
 *             rr = out.real             # <<<<<<<<<<<<<<
 *             ii = out.imag
 *             for i in xrange(N):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_real); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 827, __pyx_L1_error)
  __pyx_v_rr = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":828
 *                 complex_t n
 *             rr = out.real
 *             ii = out.imag             # <<<<<<<<<<<<<<
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).E1_amp
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_imag); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 828, __pyx_L1_error)
  __pyx_v_ii = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":829
 *             rr = out.real
 *             ii = out.imag
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 n = self.get_ray_c(i).E1_amp
 *                 rr[i] = n.real
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":830
 *             ii = out.imag
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).E1_amp             # <<<<<<<<<<<<<<
 *                 rr[i] = n.real
 *                 ii[i] = n.imag
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).E1_amp;
    __pyx_v_n = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":831
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).E1_amp
 *                 rr[i] = n.real             # <<<<<<<<<<<<<<
 *                 ii[i] = n.imag
 *             return out
 */
    __pyx_t_5 = PyFloat_FromDouble(__Pyx_CREAL(__pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_rr), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":832
 *                 n = self.get_ray_c(i).E1_amp
 *                 rr[i] = n.real
 *                 ii[i] = n.imag             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble(__Pyx_CIMAG(__pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_ii), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":833
 *                 rr[i] = n.real
 *                 ii[i] = n.imag
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property E2_amp:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":820
 * 
 *     property E1_amp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.E1_amp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XDECREF((PyObject *)__pyx_v_rr);
  __Pyx_XDECREF((PyObject *)__pyx_v_ii);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":836
 * 
 *     property E2_amp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6E2_amp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6E2_amp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6E2_amp___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6E2_amp___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  PyArrayObject *__pyx_v_rr = 0;
  PyArrayObject *__pyx_v_ii = 0;
  size_t __pyx_v_i;
  __pyx_t_double_complex __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  __pyx_t_double_complex __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":838
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.complex128)
 *                 np_.ndarray rr,ii
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":839
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.complex128)             # <<<<<<<<<<<<<<
 *                 np_.ndarray rr,ii
 *                 size_t i
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_complex128); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 839, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":843
 *                 size_t i
 *                 complex_t n
 *             rr = out.real             # <<<<<<<<<<<<<<
 *             ii = out.imag
 *             for i in xrange(N):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_real); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 843, __pyx_L1_error)
  __pyx_v_rr = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":844
 *                 complex_t n
 *             rr = out.real
 *             ii = out.imag             # <<<<<<<<<<<<<<
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).E2_amp
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_out), __pyx_n_s_imag); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 844, __pyx_L1_error)
  __pyx_v_ii = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":845
 *             rr = out.real
 *             ii = out.imag
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 n = self.get_ray_c(i).E2_amp
 *                 rr[i] = n.real
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":846
 *             ii = out.imag
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).E2_amp             # <<<<<<<<<<<<<<
 *                 rr[i] = n.real
 *                 ii[i] = n.imag
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).E2_amp;
    __pyx_v_n = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":847
 *             for i in xrange(N):
 *                 n = self.get_ray_c(i).E2_amp
 *                 rr[i] = n.real             # <<<<<<<<<<<<<<
 *                 ii[i] = n.imag
 *             return out
 */
    __pyx_t_5 = PyFloat_FromDouble(__Pyx_CREAL(__pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_rr), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":848
 *                 n = self.get_ray_c(i).E2_amp
 *                 rr[i] = n.real
 *                 ii[i] = n.imag             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble(__Pyx_CIMAG(__pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_ii), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":849
 *                 rr[i] = n.real
 *                 ii[i] = n.imag
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property length:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":836
 * 
 *     property E2_amp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.E2_amp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XDECREF((PyObject *)__pyx_v_rr);
  __Pyx_XDECREF((PyObject *)__pyx_v_ii);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":852
 * 
 *     property length:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6length___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6length___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  double __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":854
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype='d')
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":855
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 double v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 855, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 855, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":858
 *                 size_t i
 *                 double v
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).length
 *                 out[i] = v
 */
  __pyx_t_5 = __pyx_v_N;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":859
 *                 double v
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).length             # <<<<<<<<<<<<<<
 *                 out[i] = v
 *             return out
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).length;
    __pyx_v_v = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":860
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).length
 *                 out[i] = v             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 860, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":861
 *                 v = self.get_ray_c(i).length
 *                 out[i] = v
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property phase:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":852
 * 
 *     property length:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":864
 * 
 *     property phase:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_5phase_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_5phase_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_5phase___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_5phase___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  double __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":866
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype='d')
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":867
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 double v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 867, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 867, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":870
 *                 size_t i
 *                 double v
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).phase
 *                 out[i] = v
 */
  __pyx_t_5 = __pyx_v_N;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":871
 *                 double v
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).phase             # <<<<<<<<<<<<<<
 *                 out[i] = v
 *             return out
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).phase;
    __pyx_v_v = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":872
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).phase
 *                 out[i] = v             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 872, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":873
 *                 v = self.get_ray_c(i).phase
 *                 out[i] = v
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property accumulated_path:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":864
 * 
 *     property phase:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.phase.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":876
 * 
 *     property accumulated_path:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_16accumulated_path_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_16accumulated_path_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_16accumulated_path___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_16accumulated_path___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":878
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty((N,), dtype='d' )
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":879
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty((N,), dtype='d' )             # <<<<<<<<<<<<<<
 *                 size_t i
 *             for i in xrange(N):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 879, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 879, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":881
 *                 np_.ndarray out = np.empty((N,), dtype='d' )
 *                 size_t i
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 out[i] = self.get_ray_c(i).accumulated_path
 *             return out
 */
  __pyx_t_5 = __pyx_v_N;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":882
 *                 size_t i
 *             for i in xrange(N):
 *                 out[i] = self.get_ray_c(i).accumulated_path             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).accumulated_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_4, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 882, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":883
 *             for i in xrange(N):
 *                 out[i] = self.get_ray_c(i).accumulated_path
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property wavelength_idx:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":876
 * 
 *     property accumulated_path:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.accumulated_path.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":886
 * 
 *     property wavelength_idx:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_14wavelength_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_14wavelength_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_14wavelength_idx___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_14wavelength_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  double __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":888
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":889
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 double v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 889, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":892
 *                 size_t i
 *                 double v
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).wavelength_idx
 *                 out[i] = v
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":893
 *                 double v
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).wavelength_idx             # <<<<<<<<<<<<<<
 *                 out[i] = v
 *             return out
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).wavelength_idx;
    __pyx_v_v = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":894
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).wavelength_idx
 *                 out[i] = v             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 894, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":895
 *                 v = self.get_ray_c(i).wavelength_idx
 *                 out[i] = v
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property parent_idx:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":886
 * 
 *     property wavelength_idx:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.wavelength_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":898
 * 
 *     property parent_idx:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_10parent_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_10parent_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_10parent_idx___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_10parent_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  unsigned int __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":900
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":901
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 unsigned int v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 901, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":904
 *                 size_t i
 *                 unsigned int v
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).parent_idx
 *                 out[i] = v
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":905
 *                 unsigned int v
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).parent_idx             # <<<<<<<<<<<<<<
 *                 out[i] = v
 *             return out
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).parent_idx;
    __pyx_v_v = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":906
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).parent_idx
 *                 out[i] = v             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 906, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 906, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":907
 *                 v = self.get_ray_c(i).parent_idx
 *                 out[i] = v
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property end_face_idx:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":898
 * 
 *     property parent_idx:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.parent_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":910
 * 
 *     property end_face_idx:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_12end_face_idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_12end_face_idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_12end_face_idx___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_12end_face_idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  unsigned int __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":912
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":913
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 unsigned int v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 913, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":916
 *                 size_t i
 *                 unsigned int v
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).end_face_idx
 *                 out[i] = v
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":917
 *                 unsigned int v
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).end_face_idx             # <<<<<<<<<<<<<<
 *                 out[i] = v
 *             return out
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).end_face_idx;
    __pyx_v_v = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":918
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).end_face_idx
 *                 out[i] = v             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 918, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 918, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":919
 *                 v = self.get_ray_c(i).end_face_idx
 *                 out[i] = v
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property ray_ident:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":910
 * 
 *     property end_face_idx:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.end_face_idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":922
 * 
 *     property ray_ident:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9ray_ident_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9ray_ident_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_9ray_ident___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_9ray_ident___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  unsigned int __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":924
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":925
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 unsigned int v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 925, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":928
 *                 size_t i
 *                 unsigned int v
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).ray_ident
 *                 out[i] = v
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":929
 *                 unsigned int v
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).ray_ident             # <<<<<<<<<<<<<<
 *                 out[i] = v
 *             return out
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).ray_ident;
    __pyx_v_v = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":930
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).ray_ident
 *                 out[i] = v             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 930, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":931
 *                 v = self.get_ray_c(i).ray_ident
 *                 out[i] = v
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property ray_type_id:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":922
 * 
 *     property ray_ident:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.ray_ident.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":934
 * 
 *     property ray_type_id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_11ray_type_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_11ray_type_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_11ray_type_id___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_11ray_type_id___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  unsigned int __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":936
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":937
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty(N, dtype=np.uint32)             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 unsigned int v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 937, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":940
 *                 size_t i
 *                 unsigned int v
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 v = self.get_ray_c(i).ray_type_id
 *                 out[i] = v
 */
  __pyx_t_6 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":941
 *                 unsigned int v
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).ray_type_id             # <<<<<<<<<<<<<<
 *                 out[i] = v
 *             return out
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i).ray_type_id;
    __pyx_v_v = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":942
 *             for i in xrange(N):
 *                 v = self.get_ray_c(i).ray_type_id
 *                 out[i] = v             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_v); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_out), __pyx_v_i, __pyx_t_5, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 0) < 0)) __PYX_ERR(1, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "raypier/core/ctracer.pyx":943
 *                 v = self.get_ray_c(i).ray_type_id
 *                 out[i] = v
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property termination:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":934
 * 
 *     property ray_type_id:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.ray_type_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":946
 * 
 *     property termination:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_11termination_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_11termination_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_11termination___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_11termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_r;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":948
 *         def __get__(self):
 *             cdef:
 *                 unsigned long N=self.get_n_rays()             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty((N,3), dtype='d')
 *                 size_t i
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_n_rays(__pyx_v_self);

  /* "raypier/core/ctracer.pyx":949
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 *                 np_.ndarray out = np.empty((N,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 949, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 949, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":953
 *                 vector_t v
 *                 ray_t r
 *             for i in xrange(N):             # <<<<<<<<<<<<<<
 *                 r = self.get_ray_c(i)
 *                 v = addvv_(r.origin,
 */
  __pyx_t_5 = __pyx_v_N;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":954
 *                 ray_t r
 *             for i in xrange(N):
 *                 r = self.get_ray_c(i)             # <<<<<<<<<<<<<<
 *                 v = addvv_(r.origin,
 *                            multvs_(r.direction,
 */
    __pyx_v_r = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self->__pyx_vtab)->get_ray_c(__pyx_v_self, __pyx_v_i);

    /* "raypier/core/ctracer.pyx":955
 *             for i in xrange(N):
 *                 r = self.get_ray_c(i)
 *                 v = addvv_(r.origin,             # <<<<<<<<<<<<<<
 *                            multvs_(r.direction,
 *                                     r.length))
 */
    __pyx_v_v = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r.origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_r.direction, __pyx_v_r.length));

    /* "raypier/core/ctracer.pyx":958
 *                            multvs_(r.direction,
 *                                     r.length))
 *                 out[i,0] = v.x             # <<<<<<<<<<<<<<
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 958, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":959
 *                                     r.length))
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y             # <<<<<<<<<<<<<<
 *                 out[i,2] = v.z
 *             return out
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1);
    __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 959, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":960
 *                 out[i,0] = v.x
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
    __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 960, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":961
 *                 out[i,1] = v.y
 *                 out[i,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":946
 * 
 *     property termination:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long N=self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.termination.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_6__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_RayArrayView); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RayArrayView__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_RayArrayView); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RayArrayView__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_12RayArrayView_8__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_12RayArrayView_8__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RayArrayView__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_RayArrayView__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RayArrayView, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RayArrayView__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayArrayView.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":975
 *     """
 * 
 *     def __cinit__(self, size_t max_size):             # <<<<<<<<<<<<<<
 *         self.rays = <ray_t*>malloc(max_size*sizeof(ray_t))
 *         self.n_rays = 0
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_max_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_size,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 975, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_size = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_max_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 975, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 975, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), __pyx_v_max_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, size_t __pyx_v_max_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":976
 * 
 *     def __cinit__(self, size_t max_size):
 *         self.rays = <ray_t*>malloc(max_size*sizeof(ray_t))             # <<<<<<<<<<<<<<
 *         self.n_rays = 0
 *         self.max_size = max_size
 */
  __pyx_v_self->rays = ((struct __pyx_t_7raypier_4core_7ctracer_ray_t *)malloc((__pyx_v_max_size * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_ray_t)))));

  /* "raypier/core/ctracer.pyx":977
 *     def __cinit__(self, size_t max_size):
 *         self.rays = <ray_t*>malloc(max_size*sizeof(ray_t))
 *         self.n_rays = 0             # <<<<<<<<<<<<<<
 *         self.max_size = max_size
 *         self._mtime = 0.0
 */
  __pyx_v_self->n_rays = 0;

  /* "raypier/core/ctracer.pyx":978
 *         self.rays = <ray_t*>malloc(max_size*sizeof(ray_t))
 *         self.n_rays = 0
 *         self.max_size = max_size             # <<<<<<<<<<<<<<
 *         self._mtime = 0.0
 * 
 */
  __pyx_v_self->max_size = __pyx_v_max_size;

  /* "raypier/core/ctracer.pyx":979
 *         self.n_rays = 0
 *         self.max_size = max_size
 *         self._mtime = 0.0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_mtime = 0.0;

  /* "raypier/core/ctracer.pyx":975
 *     """
 * 
 *     def __cinit__(self, size_t max_size):             # <<<<<<<<<<<<<<
 *         self.rays = <ray_t*>malloc(max_size*sizeof(ray_t))
 *         self.n_rays = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":981
 *         self._mtime = 0.0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.rays)
 * 
 */

/* Python wrapper */
static void __pyx_pw_7raypier_4core_7ctracer_13RayCollection_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7raypier_4core_7ctracer_13RayCollection_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7raypier_4core_7ctracer_13RayCollection_2__dealloc__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7raypier_4core_7ctracer_13RayCollection_2__dealloc__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "raypier/core/ctracer.pyx":982
 * 
 *     def __dealloc__(self):
 *         free(self.rays)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  free(__pyx_v_self->rays);

  /* "raypier/core/ctracer.pyx":981
 *         self._mtime = 0.0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.rays)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":984
 *         free(self.rays)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.n_rays
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7raypier_4core_7ctracer_13RayCollection_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7raypier_4core_7ctracer_13RayCollection_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_4__len__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7raypier_4core_7ctracer_13RayCollection_4__len__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "raypier/core/ctracer.pyx":985
 * 
 *     def __len__(self):
 *         return self.n_rays             # <<<<<<<<<<<<<<
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):
 */
  __pyx_r = __pyx_v_self->n_rays;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":984
 *         free(self.rays)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.n_rays
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":987
 *         return self.n_rays
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):             # <<<<<<<<<<<<<<
 *         return self.rays[i]
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_f_7raypier_4core_7ctracer_13RayCollection_get_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, unsigned long __pyx_v_i) {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ray_c", 0);

  /* "raypier/core/ctracer.pyx":988
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):
 *         return self.rays[i]             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):
 */
  __pyx_r = (__pyx_v_self->rays[__pyx_v_i]);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":987
 *         return self.n_rays
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):             # <<<<<<<<<<<<<<
 *         return self.rays[i]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":990
 *         return self.rays[i]
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):             # <<<<<<<<<<<<<<
 *         self.rays[i] = ray
 * 
 */

static void __pyx_f_7raypier_4core_7ctracer_13RayCollection_set_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, unsigned long __pyx_v_i, struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ray_c", 0);

  /* "raypier/core/ctracer.pyx":991
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):
 *         self.rays[i] = ray             # <<<<<<<<<<<<<<
 * 
 *     cdef unsigned long get_n_rays(self):
 */
  (__pyx_v_self->rays[__pyx_v_i]) = __pyx_v_ray;

  /* "raypier/core/ctracer.pyx":990
 *         return self.rays[i]
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):             # <<<<<<<<<<<<<<
 *         self.rays[i] = ray
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":993
 *         self.rays[i] = ray
 * 
 *     cdef unsigned long get_n_rays(self):             # <<<<<<<<<<<<<<
 *         return self.n_rays
 * 
 */

static unsigned long __pyx_f_7raypier_4core_7ctracer_13RayCollection_get_n_rays(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  unsigned long __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_rays", 0);

  /* "raypier/core/ctracer.pyx":994
 * 
 *     cdef unsigned long get_n_rays(self):
 *         return self.n_rays             # <<<<<<<<<<<<<<
 * 
 *     cdef add_ray_c(self, ray_t r):
 */
  __pyx_r = __pyx_v_self->n_rays;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":993
 *         self.rays[i] = ray
 * 
 *     cdef unsigned long get_n_rays(self):             # <<<<<<<<<<<<<<
 *         return self.n_rays
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":996
 *         return self.n_rays
 * 
 *     cdef add_ray_c(self, ray_t r):             # <<<<<<<<<<<<<<
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:
 */

static PyObject *__pyx_f_7raypier_4core_7ctracer_13RayCollection_add_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_ray_c", 0);

  /* "raypier/core/ctracer.pyx":997
 * 
 *     cdef add_ray_c(self, ray_t r):
 *         if self.n_rays == self.max_size:             # <<<<<<<<<<<<<<
 *             if self.max_size == 0:
 *                 self.max_size = 1
 */
  __pyx_t_1 = ((__pyx_v_self->n_rays == __pyx_v_self->max_size) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/ctracer.pyx":998
 *     cdef add_ray_c(self, ray_t r):
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:             # <<<<<<<<<<<<<<
 *                 self.max_size = 1
 *             else:
 */
    __pyx_t_1 = ((__pyx_v_self->max_size == 0) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/ctracer.pyx":999
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:
 *                 self.max_size = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 self.max_size *= 2
 */
      __pyx_v_self->max_size = 1;

      /* "raypier/core/ctracer.pyx":998
 *     cdef add_ray_c(self, ray_t r):
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:             # <<<<<<<<<<<<<<
 *                 self.max_size = 1
 *             else:
 */
      goto __pyx_L4;
    }

    /* "raypier/core/ctracer.pyx":1001
 *                 self.max_size = 1
 *             else:
 *                 self.max_size *= 2             # <<<<<<<<<<<<<<
 *             self.rays = <ray_t*>realloc(self.rays, self.max_size*sizeof(ray_t))
 *         self.rays[self.n_rays] = r
 */
    /*else*/ {
      __pyx_v_self->max_size = (__pyx_v_self->max_size * 2);
    }
    __pyx_L4:;

    /* "raypier/core/ctracer.pyx":1002
 *             else:
 *                 self.max_size *= 2
 *             self.rays = <ray_t*>realloc(self.rays, self.max_size*sizeof(ray_t))             # <<<<<<<<<<<<<<
 *         self.rays[self.n_rays] = r
 *         self.n_rays += 1
 */
    __pyx_v_self->rays = ((struct __pyx_t_7raypier_4core_7ctracer_ray_t *)realloc(__pyx_v_self->rays, (__pyx_v_self->max_size * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_ray_t)))));

    /* "raypier/core/ctracer.pyx":997
 * 
 *     cdef add_ray_c(self, ray_t r):
 *         if self.n_rays == self.max_size:             # <<<<<<<<<<<<<<
 *             if self.max_size == 0:
 *                 self.max_size = 1
 */
  }

  /* "raypier/core/ctracer.pyx":1003
 *                 self.max_size *= 2
 *             self.rays = <ray_t*>realloc(self.rays, self.max_size*sizeof(ray_t))
 *         self.rays[self.n_rays] = r             # <<<<<<<<<<<<<<
 *         self.n_rays += 1
 * 
 */
  (__pyx_v_self->rays[__pyx_v_self->n_rays]) = __pyx_v_r;

  /* "raypier/core/ctracer.pyx":1004
 *             self.rays = <ray_t*>realloc(self.rays, self.max_size*sizeof(ray_t))
 *         self.rays[self.n_rays] = r
 *         self.n_rays += 1             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset_length_c(self, double max_length):
 */
  __pyx_v_self->n_rays = (__pyx_v_self->n_rays + 1);

  /* "raypier/core/ctracer.pyx":996
 *         return self.n_rays
 * 
 *     cdef add_ray_c(self, ray_t r):             # <<<<<<<<<<<<<<
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1006
 *         self.n_rays += 1
 * 
 *     cdef void reset_length_c(self, double max_length):             # <<<<<<<<<<<<<<
 *         cdef:
 *             size_t i
 */

static void __pyx_f_7raypier_4core_7ctracer_13RayCollection_reset_length_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, double __pyx_v_max_length) {
  size_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  unsigned long __pyx_t_2;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("reset_length_c", 0);

  /* "raypier/core/ctracer.pyx":1009
 *         cdef:
 *             size_t i
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             self.rays[i].length = max_length
 * 
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1010
 *             size_t i
 *         for i in range(self.n_rays):
 *             self.rays[i].length = max_length             # <<<<<<<<<<<<<<
 * 
 *     def reset_length(self, double max_length=INF):
 */
    (__pyx_v_self->rays[__pyx_v_i]).length = __pyx_v_max_length;
  }

  /* "raypier/core/ctracer.pyx":1006
 *         self.n_rays += 1
 * 
 *     cdef void reset_length_c(self, double max_length):             # <<<<<<<<<<<<<<
 *         cdef:
 *             size_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1012
 *             self.rays[i].length = max_length
 * 
 *     def reset_length(self, double max_length=INF):             # <<<<<<<<<<<<<<
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_7reset_length(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_13RayCollection_6reset_length[] = "Sets the length of all rays in this RayCollection to Infinity\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_7reset_length(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_max_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_length (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_length,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_length);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset_length") < 0)) __PYX_ERR(1, 1012, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_length = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_max_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1012, __pyx_L3_error)
    } else {
      __pyx_v_max_length = __pyx_k__16;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_length", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1012, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.reset_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_6reset_length(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), __pyx_v_max_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_6reset_length(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, double __pyx_v_max_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_length", 0);

  /* "raypier/core/ctracer.pyx":1015
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 *         self.reset_length_c(max_length)             # <<<<<<<<<<<<<<
 * 
 *     def add_ray(self, Ray r):
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self->__pyx_base.__pyx_vtab)->reset_length_c(__pyx_v_self, __pyx_v_max_length);

  /* "raypier/core/ctracer.pyx":1012
 *             self.rays[i].length = max_length
 * 
 *     def reset_length(self, double max_length=INF):             # <<<<<<<<<<<<<<
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1017
 *         self.reset_length_c(max_length)
 * 
 *     def add_ray(self, Ray r):             # <<<<<<<<<<<<<<
 *         """Adds the given Ray instance to this collection
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_9add_ray(PyObject *__pyx_v_self, PyObject *__pyx_v_r); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_13RayCollection_8add_ray[] = "Adds the given Ray instance to this collection\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_9add_ray(PyObject *__pyx_v_self, PyObject *__pyx_v_r) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_ray (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7raypier_4core_7ctracer_Ray, 1, "r", 0))) __PYX_ERR(1, 1017, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_8add_ray(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_r));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_8add_ray(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_ray", 0);

  /* "raypier/core/ctracer.pyx":1020
 *         """Adds the given Ray instance to this collection
 *         """
 *         self.add_ray_c(r.ray)             # <<<<<<<<<<<<<<
 * 
 *     def add_ray_list(self, list rays):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_ray_c(__pyx_v_self, __pyx_v_r->ray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1017
 *         self.reset_length_c(max_length)
 * 
 *     def add_ray(self, Ray r):             # <<<<<<<<<<<<<<
 *         """Adds the given Ray instance to this collection
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.add_ray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1022
 *         self.add_ray_c(r.ray)
 * 
 *     def add_ray_list(self, list rays):             # <<<<<<<<<<<<<<
 *         """Adds the given list of Rays to this collection
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_11add_ray_list(PyObject *__pyx_v_self, PyObject *__pyx_v_rays); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_13RayCollection_10add_ray_list[] = "Adds the given list of Rays to this collection\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_11add_ray_list(PyObject *__pyx_v_self, PyObject *__pyx_v_rays) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_ray_list (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), (&PyList_Type), 1, "rays", 1))) __PYX_ERR(1, 1022, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_10add_ray_list(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), ((PyObject*)__pyx_v_rays));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_10add_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, PyObject *__pyx_v_rays) {
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_ray_list", 0);

  /* "raypier/core/ctracer.pyx":1026
 *         """
 *         cdef long int i
 *         for i in range(len(rays)):             # <<<<<<<<<<<<<<
 *             if not isinstance(rays[i], Ray):
 *                 raise TypeError("ray list contains non-Ray instance at index %d"%i)
 */
  if (unlikely(__pyx_v_rays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1026, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_rays); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1026, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1027
 *         cdef long int i
 *         for i in range(len(rays)):
 *             if not isinstance(rays[i], Ray):             # <<<<<<<<<<<<<<
 *                 raise TypeError("ray list contains non-Ray instance at index %d"%i)
 *         for i in range(len(rays)):
 */
    if (unlikely(__pyx_v_rays == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1027, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_rays, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_7raypier_4core_7ctracer_Ray); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "raypier/core/ctracer.pyx":1028
 *         for i in range(len(rays)):
 *             if not isinstance(rays[i], Ray):
 *                 raise TypeError("ray list contains non-Ray instance at index %d"%i)             # <<<<<<<<<<<<<<
 *         for i in range(len(rays)):
 *             self.add_ray_c((<Ray>rays[i]).ray)
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_ray_list_contains_non_Ray_instan, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 1028, __pyx_L1_error)

      /* "raypier/core/ctracer.pyx":1027
 *         cdef long int i
 *         for i in range(len(rays)):
 *             if not isinstance(rays[i], Ray):             # <<<<<<<<<<<<<<
 *                 raise TypeError("ray list contains non-Ray instance at index %d"%i)
 *         for i in range(len(rays)):
 */
    }
  }

  /* "raypier/core/ctracer.pyx":1029
 *             if not isinstance(rays[i], Ray):
 *                 raise TypeError("ray list contains non-Ray instance at index %d"%i)
 *         for i in range(len(rays)):             # <<<<<<<<<<<<<<
 *             self.add_ray_c((<Ray>rays[i]).ray)
 * 
 */
  if (unlikely(__pyx_v_rays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1029, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_rays); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1029, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1030
 *                 raise TypeError("ray list contains non-Ray instance at index %d"%i)
 *         for i in range(len(rays)):
 *             self.add_ray_c((<Ray>rays[i]).ray)             # <<<<<<<<<<<<<<
 * 
 *     def clear_ray_list(self):
 */
    if (unlikely(__pyx_v_rays == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1030, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_rays, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self->__pyx_base.__pyx_vtab)->add_ray_c(__pyx_v_self, ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_t_4)->ray); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "raypier/core/ctracer.pyx":1022
 *         self.add_ray_c(r.ray)
 * 
 *     def add_ray_list(self, list rays):             # <<<<<<<<<<<<<<
 *         """Adds the given list of Rays to this collection
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.add_ray_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1032
 *             self.add_ray_c((<Ray>rays[i]).ray)
 * 
 *     def clear_ray_list(self):             # <<<<<<<<<<<<<<
 *         """Empties this RayCollection (by setting the count to zero)
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_13clear_ray_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_13RayCollection_12clear_ray_list[] = "Empties this RayCollection (by setting the count to zero)\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_13clear_ray_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_ray_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_12clear_ray_list(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_12clear_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_ray_list", 0);

  /* "raypier/core/ctracer.pyx":1035
 *         """Empties this RayCollection (by setting the count to zero)
 *         """
 *         self.n_rays = 0             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->n_rays = 0;

  /* "raypier/core/ctracer.pyx":1032
 *             self.add_ray_c((<Ray>rays[i]).ray)
 * 
 *     def clear_ray_list(self):             # <<<<<<<<<<<<<<
 *         """Empties this RayCollection (by setting the count to zero)
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1037
 *         self.n_rays = 0
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return RayCollectionIterator(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_15__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_15__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_14__iter__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_14__iter__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "raypier/core/ctracer.pyx":1038
 * 
 *     def __iter__(self):
 *         return RayCollectionIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     def copy_as_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollectionIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1037
 *         self.n_rays = 0
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return RayCollectionIterator(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1040
 *         return RayCollectionIterator(self)
 * 
 *     def copy_as_array(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a numpy array
 *         (the data is always copied).
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_17copy_as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_13RayCollection_16copy_as_array[] = "Returns the contents of this RayCollection as a numpy array\n        (the data is always copied).\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_17copy_as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_16copy_as_array(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_16copy_as_array(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyArrayObject *__pyx_v_out = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_as_array", 0);

  /* "raypier/core/ctracer.pyx":1044
 *         (the data is always copied).
 *         """
 *         cdef np_.ndarray out = np.empty(self.n_rays, dtype=ray_dtype)             # <<<<<<<<<<<<<<
 *         memcpy(<np_.float64_t *>out.data, self.rays, self.n_rays*sizeof(ray_t))
 *         return out
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ray_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1044, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":1045
 *         """
 *         cdef np_.ndarray out = np.empty(self.n_rays, dtype=ray_dtype)
 *         memcpy(<np_.float64_t *>out.data, self.rays, self.n_rays*sizeof(ray_t))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  (void)(memcpy(((__pyx_t_5numpy_float64_t *)__pyx_v_out->data), __pyx_v_self->rays, (__pyx_v_self->n_rays * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_ray_t)))));

  /* "raypier/core/ctracer.pyx":1046
 *         cdef np_.ndarray out = np.empty(self.n_rays, dtype=ray_dtype)
 *         memcpy(<np_.float64_t *>out.data, self.rays, self.n_rays*sizeof(ray_t))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     ### A convenience property so one can use the same api as the GaussletCollection
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1040
 *         return RayCollectionIterator(self)
 * 
 *     def copy_as_array(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a numpy array
 *         (the data is always copied).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.copy_as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1050
 *     ### A convenience property so one can use the same api as the GaussletCollection
 *     property base_rays:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_9base_rays_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_9base_rays_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_9base_rays___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_9base_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1051
 *     property base_rays:
 *         def __get__(self):
 *             return self             # <<<<<<<<<<<<<<
 * 
 *     property wavelengths:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1050
 *     ### A convenience property so one can use the same api as the GaussletCollection
 *     property base_rays:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1054
 * 
 *     property wavelengths:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.asarray(self._wavelengths)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_11wavelengths_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_11wavelengths_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_11wavelengths___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_11wavelengths___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1055
 *     property wavelengths:
 *         def __get__(self):
 *             return np.asarray(self._wavelengths)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, wl_list):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_v_self->_wavelengths.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1055, __pyx_L1_error)}
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_self->_wavelengths, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1054
 * 
 *     property wavelengths:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.asarray(self._wavelengths)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.wavelengths.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1057
 *             return np.asarray(self._wavelengths)
 * 
 *         def __set__(self, wl_list):             # <<<<<<<<<<<<<<
 *             self._wavelengths = np.ascontiguousarray(wl_list, dtype=np.double)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_11wavelengths_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_wl_list); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_11wavelengths_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_wl_list) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_11wavelengths_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), ((PyObject *)__pyx_v_wl_list));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection_11wavelengths_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, PyObject *__pyx_v_wl_list) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1058
 * 
 *         def __set__(self, wl_list):
 *             self._wavelengths = np.ascontiguousarray(wl_list, dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     cdef double get_mtime(self, unsigned long guard):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_wl_list);
  __Pyx_GIVEREF(__pyx_v_wl_list);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_wl_list);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_wavelengths, 0);
  __pyx_v_self->_wavelengths = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "raypier/core/ctracer.pyx":1057
 *             return np.asarray(self._wavelengths)
 * 
 *         def __set__(self, wl_list):             # <<<<<<<<<<<<<<
 *             self._wavelengths = np.ascontiguousarray(wl_list, dtype=np.double)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.wavelengths.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1060
 *             self._wavelengths = np.ascontiguousarray(wl_list, dtype=np.double)
 * 
 *     cdef double get_mtime(self, unsigned long guard):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double pmtime
 */

static double __pyx_f_7raypier_4core_7ctracer_13RayCollection_get_mtime(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, unsigned long __pyx_v_guard) {
  double __pyx_v_pmtime;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mtime", 0);

  /* "raypier/core/ctracer.pyx":1064
 *             double pmtime
 * 
 *         if self._parent is None:             # <<<<<<<<<<<<<<
 *             return self._mtime
 *         if guard == id(self):
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->_parent) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "raypier/core/ctracer.pyx":1065
 * 
 *         if self._parent is None:
 *             return self._mtime             # <<<<<<<<<<<<<<
 *         if guard == id(self):
 *             return self._mtime
 */
    __pyx_r = __pyx_v_self->_mtime;
    goto __pyx_L0;

    /* "raypier/core/ctracer.pyx":1064
 *             double pmtime
 * 
 *         if self._parent is None:             # <<<<<<<<<<<<<<
 *             return self._mtime
 *         if guard == id(self):
 */
  }

  /* "raypier/core/ctracer.pyx":1066
 *         if self._parent is None:
 *             return self._mtime
 *         if guard == id(self):             # <<<<<<<<<<<<<<
 *             return self._mtime
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_guard); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {

    /* "raypier/core/ctracer.pyx":1067
 *             return self._mtime
 *         if guard == id(self):
 *             return self._mtime             # <<<<<<<<<<<<<<
 * 
 *         pmtime = self._parent.get_mtime(guard)
 */
    __pyx_r = __pyx_v_self->_mtime;
    goto __pyx_L0;

    /* "raypier/core/ctracer.pyx":1066
 *         if self._parent is None:
 *             return self._mtime
 *         if guard == id(self):             # <<<<<<<<<<<<<<
 *             return self._mtime
 * 
 */
  }

  /* "raypier/core/ctracer.pyx":1069
 *             return self._mtime
 * 
 *         pmtime = self._parent.get_mtime(guard)             # <<<<<<<<<<<<<<
 *         if pmtime > self._mtime:
 *             self._neighbours = None
 */
  __pyx_v_pmtime = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self->_parent->__pyx_base.__pyx_vtab)->get_mtime(__pyx_v_self->_parent, __pyx_v_guard);

  /* "raypier/core/ctracer.pyx":1070
 * 
 *         pmtime = self._parent.get_mtime(guard)
 *         if pmtime > self._mtime:             # <<<<<<<<<<<<<<
 *             self._neighbours = None
 *             return pmtime
 */
  __pyx_t_2 = ((__pyx_v_pmtime > __pyx_v_self->_mtime) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/ctracer.pyx":1071
 *         pmtime = self._parent.get_mtime(guard)
 *         if pmtime > self._mtime:
 *             self._neighbours = None             # <<<<<<<<<<<<<<
 *             return pmtime
 *         else:
 */
    __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(Py_None, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 1071, __pyx_L1_error)
    __PYX_XDEC_MEMVIEW(&__pyx_v_self->_neighbours, 0);
    __pyx_v_self->_neighbours = __pyx_t_6;
    __pyx_t_6.memview = NULL;
    __pyx_t_6.data = NULL;

    /* "raypier/core/ctracer.pyx":1072
 *         if pmtime > self._mtime:
 *             self._neighbours = None
 *             return pmtime             # <<<<<<<<<<<<<<
 *         else:
 *             return self._mtime
 */
    __pyx_r = __pyx_v_pmtime;
    goto __pyx_L0;

    /* "raypier/core/ctracer.pyx":1070
 * 
 *         pmtime = self._parent.get_mtime(guard)
 *         if pmtime > self._mtime:             # <<<<<<<<<<<<<<
 *             self._neighbours = None
 *             return pmtime
 */
  }

  /* "raypier/core/ctracer.pyx":1074
 *             return pmtime
 *         else:
 *             return self._mtime             # <<<<<<<<<<<<<<
 * 
 *     cdef void _eval_neighbours(self, int[:,:] pnb):
 */
  /*else*/ {
    __pyx_r = __pyx_v_self->_mtime;
    goto __pyx_L0;
  }

  /* "raypier/core/ctracer.pyx":1060
 *             self._wavelengths = np.ascontiguousarray(wl_list, dtype=np.double)
 * 
 *     cdef double get_mtime(self, unsigned long guard):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double pmtime
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_WriteUnraisable("raypier.core.ctracer.RayCollection.get_mtime", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1076
 *             return self._mtime
 * 
 *     cdef void _eval_neighbours(self, int[:,:] pnb):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned long i
 */

static void __pyx_f_7raypier_4core_7ctracer_13RayCollection__eval_neighbours(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, __Pyx_memviewslice __pyx_v_pnb) {
  unsigned long __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_pidx;
  int __pyx_v_child_nb;
  int __pyx_v_rtype;
  __Pyx_memviewslice __pyx_v_rmap = { 0, 0, { 0 }, { 0 }, { 0 } };
  unsigned int __pyx_v_nparent;
  PyObject *__pyx_v_nb = NULL;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  unsigned long __pyx_t_9;
  unsigned long __pyx_t_10;
  unsigned int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_eval_neighbours", 0);

  /* "raypier/core/ctracer.pyx":1081
 *             int j, pidx, child_nb, rtype
 *             int[:,:] rmap
 *             unsigned int nparent=self._parent.n_rays             # <<<<<<<<<<<<<<
 * 
 *         if pnb is None:
 */
  __pyx_t_1 = __pyx_v_self->_parent->n_rays;
  __pyx_v_nparent = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1083
 *             unsigned int nparent=self._parent.n_rays
 * 
 *         if pnb is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_2 = ((((PyObject *) __pyx_v_pnb.memview) == Py_None) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/ctracer.pyx":1084
 * 
 *         if pnb is None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         rmap = np.full( (nparent, 2), -1 ,dtype=np.int32)
 */
    goto __pyx_L0;

    /* "raypier/core/ctracer.pyx":1083
 *             unsigned int nparent=self._parent.n_rays
 * 
 *         if pnb is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "raypier/core/ctracer.pyx":1086
 *             return
 * 
 *         rmap = np.full( (nparent, 2), -1 ,dtype=np.int32)             # <<<<<<<<<<<<<<
 *         nb = np.full( (self.n_rays, pnb.shape[1]), -1, dtype=np.int32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_full); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_v_nparent); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_2);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_neg_1);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int32); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(__pyx_t_7, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_rmap = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "raypier/core/ctracer.pyx":1087
 * 
 *         rmap = np.full( (nparent, 2), -1 ,dtype=np.int32)
 *         nb = np.full( (self.n_rays, pnb.shape[1]), -1, dtype=np.int32)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_rays):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_full); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_pnb.shape[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_7 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_neg_1);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_nb = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "raypier/core/ctracer.pyx":1089
 *         nb = np.full( (self.n_rays, pnb.shape[1]), -1, dtype=np.int32)
 * 
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             rtype = self.rays[i].ray_type_id & REFL_RAY
 *             pidx = self.rays[i].parent_idx
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_t_9 = __pyx_t_1;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "raypier/core/ctracer.pyx":1090
 * 
 *         for i in range(self.n_rays):
 *             rtype = self.rays[i].ray_type_id & REFL_RAY             # <<<<<<<<<<<<<<
 *             pidx = self.rays[i].parent_idx
 *             rmap[pidx, rtype] = i
 */
    __pyx_v_rtype = ((__pyx_v_self->rays[__pyx_v_i]).ray_type_id & REFL_RAY);

    /* "raypier/core/ctracer.pyx":1091
 *         for i in range(self.n_rays):
 *             rtype = self.rays[i].ray_type_id & REFL_RAY
 *             pidx = self.rays[i].parent_idx             # <<<<<<<<<<<<<<
 *             rmap[pidx, rtype] = i
 * 
 */
    __pyx_t_11 = (__pyx_v_self->rays[__pyx_v_i]).parent_idx;
    __pyx_v_pidx = __pyx_t_11;

    /* "raypier/core/ctracer.pyx":1092
 *             rtype = self.rays[i].ray_type_id & REFL_RAY
 *             pidx = self.rays[i].parent_idx
 *             rmap[pidx, rtype] = i             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_rays):
 */
    __pyx_t_12 = __pyx_v_pidx;
    __pyx_t_13 = __pyx_v_rtype;
    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_rmap.shape[0];
    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_rmap.shape[1];
    *((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rmap.data + __pyx_t_12 * __pyx_v_rmap.strides[0]) ) + __pyx_t_13 * __pyx_v_rmap.strides[1]) )) = __pyx_v_i;
  }

  /* "raypier/core/ctracer.pyx":1094
 *             rmap[pidx, rtype] = i
 * 
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             rtype = self.rays[i].ray_type_id & REFL_RAY
 *             pidx = self.rays[i].parent_idx
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_t_9 = __pyx_t_1;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "raypier/core/ctracer.pyx":1095
 * 
 *         for i in range(self.n_rays):
 *             rtype = self.rays[i].ray_type_id & REFL_RAY             # <<<<<<<<<<<<<<
 *             pidx = self.rays[i].parent_idx
 *             for j in range(pnb.shape[1]):
 */
    __pyx_v_rtype = ((__pyx_v_self->rays[__pyx_v_i]).ray_type_id & REFL_RAY);

    /* "raypier/core/ctracer.pyx":1096
 *         for i in range(self.n_rays):
 *             rtype = self.rays[i].ray_type_id & REFL_RAY
 *             pidx = self.rays[i].parent_idx             # <<<<<<<<<<<<<<
 *             for j in range(pnb.shape[1]):
 *                 child_nb = pnb[pidx,j]
 */
    __pyx_t_11 = (__pyx_v_self->rays[__pyx_v_i]).parent_idx;
    __pyx_v_pidx = __pyx_t_11;

    /* "raypier/core/ctracer.pyx":1097
 *             rtype = self.rays[i].ray_type_id & REFL_RAY
 *             pidx = self.rays[i].parent_idx
 *             for j in range(pnb.shape[1]):             # <<<<<<<<<<<<<<
 *                 child_nb = pnb[pidx,j]
 *                 if child_nb >= 0:
 */
    __pyx_t_14 = (__pyx_v_pnb.shape[1]);
    __pyx_t_15 = __pyx_t_14;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_j = __pyx_t_16;

      /* "raypier/core/ctracer.pyx":1098
 *             pidx = self.rays[i].parent_idx
 *             for j in range(pnb.shape[1]):
 *                 child_nb = pnb[pidx,j]             # <<<<<<<<<<<<<<
 *                 if child_nb >= 0:
 *                     nb[i,j] = rmap[child_nb,rtype]
 */
      __pyx_t_13 = __pyx_v_pidx;
      __pyx_t_12 = __pyx_v_j;
      if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_pnb.shape[0];
      if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_pnb.shape[1];
      __pyx_v_child_nb = (*((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_pnb.data + __pyx_t_13 * __pyx_v_pnb.strides[0]) ) + __pyx_t_12 * __pyx_v_pnb.strides[1]) )));

      /* "raypier/core/ctracer.pyx":1099
 *             for j in range(pnb.shape[1]):
 *                 child_nb = pnb[pidx,j]
 *                 if child_nb >= 0:             # <<<<<<<<<<<<<<
 *                     nb[i,j] = rmap[child_nb,rtype]
 * 
 */
      __pyx_t_2 = ((__pyx_v_child_nb >= 0) != 0);
      if (__pyx_t_2) {

        /* "raypier/core/ctracer.pyx":1100
 *                 child_nb = pnb[pidx,j]
 *                 if child_nb >= 0:
 *                     nb[i,j] = rmap[child_nb,rtype]             # <<<<<<<<<<<<<<
 * 
 *         self._neighbours = nb
 */
        __pyx_t_12 = __pyx_v_child_nb;
        __pyx_t_13 = __pyx_v_rtype;
        if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_rmap.shape[0];
        if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_rmap.shape[1];
        __pyx_t_6 = __Pyx_PyInt_From_int((*((int *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rmap.data + __pyx_t_12 * __pyx_v_rmap.strides[0]) ) + __pyx_t_13 * __pyx_v_rmap.strides[1]) )))); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyInt_From_unsigned_long(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
        __pyx_t_4 = 0;
        __pyx_t_3 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_nb, __pyx_t_5, __pyx_t_6) < 0)) __PYX_ERR(1, 1100, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "raypier/core/ctracer.pyx":1099
 *             for j in range(pnb.shape[1]):
 *                 child_nb = pnb[pidx,j]
 *                 if child_nb >= 0:             # <<<<<<<<<<<<<<
 *                     nb[i,j] = rmap[child_nb,rtype]
 * 
 */
      }
    }
  }

  /* "raypier/core/ctracer.pyx":1102
 *                     nb[i,j] = rmap[child_nb,rtype]
 * 
 *         self._neighbours = nb             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(__pyx_v_nb, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1102, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_neighbours, 0);
  __pyx_v_self->_neighbours = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "raypier/core/ctracer.pyx":1076
 *             return self._mtime
 * 
 *     cdef void _eval_neighbours(self, int[:,:] pnb):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned long i
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_WriteUnraisable("raypier.core.ctracer.RayCollection._eval_neighbours", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_rmap, 1);
  __Pyx_XDECREF(__pyx_v_nb);
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1106
 * 
 *     property neighbours:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._parent is None:
 *                 if self._neighbours is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_10neighbours_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_10neighbours_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_10neighbours___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_10neighbours___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  double __pyx_v_pmtime;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned long __pyx_t_7;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1107
 *     property neighbours:
 *         def __get__(self):
 *             if self._parent is None:             # <<<<<<<<<<<<<<
 *                 if self._neighbours is None:
 *                     return None
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->_parent) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "raypier/core/ctracer.pyx":1108
 *         def __get__(self):
 *             if self._parent is None:
 *                 if self._neighbours is None:             # <<<<<<<<<<<<<<
 *                     return None
 *                 else:
 */
    if (unlikely(!__pyx_v_self->_neighbours.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1108, __pyx_L1_error)}
    __pyx_t_2 = ((((PyObject *) __pyx_v_self->_neighbours.memview) == Py_None) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/ctracer.pyx":1109
 *             if self._parent is None:
 *                 if self._neighbours is None:
 *                     return None             # <<<<<<<<<<<<<<
 *                 else:
 *                     return np.asarray(self._neighbours)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "raypier/core/ctracer.pyx":1108
 *         def __get__(self):
 *             if self._parent is None:
 *                 if self._neighbours is None:             # <<<<<<<<<<<<<<
 *                     return None
 *                 else:
 */
    }

    /* "raypier/core/ctracer.pyx":1111
 *                     return None
 *                 else:
 *                     return np.asarray(self._neighbours)             # <<<<<<<<<<<<<<
 *             else:
 *                 pmtime = self._parent.get_mtime(id(self))
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_v_self->_neighbours.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1111, __pyx_L1_error)}
      __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_self->_neighbours, 2, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;
    }

    /* "raypier/core/ctracer.pyx":1107
 *     property neighbours:
 *         def __get__(self):
 *             if self._parent is None:             # <<<<<<<<<<<<<<
 *                 if self._neighbours is None:
 *                     return None
 */
  }

  /* "raypier/core/ctracer.pyx":1113
 *                     return np.asarray(self._neighbours)
 *             else:
 *                 pmtime = self._parent.get_mtime(id(self))             # <<<<<<<<<<<<<<
 *                 if self._mtime >= pmtime:
 *                     if self._neighbours is not None:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_long(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_pmtime = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self->_parent->__pyx_base.__pyx_vtab)->get_mtime(__pyx_v_self->_parent, __pyx_t_7);

    /* "raypier/core/ctracer.pyx":1114
 *             else:
 *                 pmtime = self._parent.get_mtime(id(self))
 *                 if self._mtime >= pmtime:             # <<<<<<<<<<<<<<
 *                     if self._neighbours is not None:
 *                         return np.asarray(self._neighbours)
 */
    __pyx_t_2 = ((__pyx_v_self->_mtime >= __pyx_v_pmtime) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/ctracer.pyx":1115
 *                 pmtime = self._parent.get_mtime(id(self))
 *                 if self._mtime >= pmtime:
 *                     if self._neighbours is not None:             # <<<<<<<<<<<<<<
 *                         return np.asarray(self._neighbours)
 *                 self._eval_neighbours(self._parent.neighbours)
 */
      if (unlikely(!__pyx_v_self->_neighbours.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1115, __pyx_L1_error)}
      __pyx_t_2 = ((((PyObject *) __pyx_v_self->_neighbours.memview) != Py_None) != 0);
      if (__pyx_t_2) {

        /* "raypier/core/ctracer.pyx":1116
 *                 if self._mtime >= pmtime:
 *                     if self._neighbours is not None:
 *                         return np.asarray(self._neighbours)             # <<<<<<<<<<<<<<
 *                 self._eval_neighbours(self._parent.neighbours)
 *                 self._mtime = time.monotonic()
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_v_self->_neighbours.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1116, __pyx_L1_error)}
        __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_self->_neighbours, 2, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1116, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L0;

        /* "raypier/core/ctracer.pyx":1115
 *                 pmtime = self._parent.get_mtime(id(self))
 *                 if self._mtime >= pmtime:
 *                     if self._neighbours is not None:             # <<<<<<<<<<<<<<
 *                         return np.asarray(self._neighbours)
 *                 self._eval_neighbours(self._parent.neighbours)
 */
      }

      /* "raypier/core/ctracer.pyx":1114
 *             else:
 *                 pmtime = self._parent.get_mtime(id(self))
 *                 if self._mtime >= pmtime:             # <<<<<<<<<<<<<<
 *                     if self._neighbours is not None:
 *                         return np.asarray(self._neighbours)
 */
    }

    /* "raypier/core/ctracer.pyx":1117
 *                     if self._neighbours is not None:
 *                         return np.asarray(self._neighbours)
 *                 self._eval_neighbours(self._parent.neighbours)             # <<<<<<<<<<<<<<
 *                 self._mtime = time.monotonic()
 *                 return np.asarray(self._neighbours)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_parent), __pyx_n_s_neighbours); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self->__pyx_base.__pyx_vtab)->_eval_neighbours(__pyx_v_self, __pyx_t_8);
    __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
    __pyx_t_8.memview = NULL;
    __pyx_t_8.data = NULL;

    /* "raypier/core/ctracer.pyx":1118
 *                         return np.asarray(self._neighbours)
 *                 self._eval_neighbours(self._parent.neighbours)
 *                 self._mtime = time.monotonic()             # <<<<<<<<<<<<<<
 *                 return np.asarray(self._neighbours)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_monotonic); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1118, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_self->_mtime = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":1119
 *                 self._eval_neighbours(self._parent.neighbours)
 *                 self._mtime = time.monotonic()
 *                 return np.asarray(self._neighbours)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, int[:,:] nb):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_v_self->_neighbours.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1119, __pyx_L1_error)}
    __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_self->_neighbours, 2, (PyObject *(*)(char *)) __pyx_memview_get_int, (int (*)(char *, PyObject *)) __pyx_memview_set_int, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "raypier/core/ctracer.pyx":1106
 * 
 *     property neighbours:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._parent is None:
 *                 if self._neighbours is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.neighbours.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1121
 *                 return np.asarray(self._neighbours)
 * 
 *         def __set__(self, int[:,:] nb):             # <<<<<<<<<<<<<<
 *             self._neighbours = nb
 *             self._mtime = time.monotonic()
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_10neighbours_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_nb); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_10neighbours_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_nb) {
  __Pyx_memviewslice __pyx_v_nb = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_nb); {
    __pyx_v_nb = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(__pyx_arg_nb, PyBUF_WRITABLE); if (unlikely(!__pyx_v_nb.memview)) __PYX_ERR(1, 1121, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.neighbours.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_10neighbours_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), __pyx_v_nb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection_10neighbours_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, __Pyx_memviewslice __pyx_v_nb) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1122
 * 
 *         def __set__(self, int[:,:] nb):
 *             self._neighbours = nb             # <<<<<<<<<<<<<<
 *             self._mtime = time.monotonic()
 * 
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_neighbours, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_nb, 0);
  __pyx_v_self->_neighbours = __pyx_v_nb;

  /* "raypier/core/ctracer.pyx":1123
 *         def __set__(self, int[:,:] nb):
 *             self._neighbours = nb
 *             self._mtime = time.monotonic()             # <<<<<<<<<<<<<<
 * 
 *     property parent:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_monotonic); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_mtime = __pyx_t_4;

  /* "raypier/core/ctracer.pyx":1121
 *                 return np.asarray(self._neighbours)
 * 
 *         def __set__(self, int[:,:] nb):             # <<<<<<<<<<<<<<
 *             self._neighbours = nb
 *             self._mtime = time.monotonic()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.neighbours.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_nb, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1126
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._parent
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_6parent___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_6parent___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1127
 *     property parent:
 *         def __get__(self):
 *             return self._parent             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, RayCollection rc):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_parent));
  __pyx_r = ((PyObject *)__pyx_v_self->_parent);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1126
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._parent
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1129
 *             return self._parent
 * 
 *         def __set__(self, RayCollection rc):             # <<<<<<<<<<<<<<
 *             self._parent = rc
 *             self._neighbours = None
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rc); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_13RayCollection_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rc), __pyx_ptype_7raypier_4core_7ctracer_RayCollection, 1, "rc", 0))) __PYX_ERR(1, 1129, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_6parent_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_rc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_13RayCollection_6parent_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rc) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1130
 * 
 *         def __set__(self, RayCollection rc):
 *             self._parent = rc             # <<<<<<<<<<<<<<
 *             self._neighbours = None
 *             self._wavelengths = rc._wavelengths
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_rc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_rc));
  __Pyx_GOTREF(__pyx_v_self->_parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_parent));
  __pyx_v_self->_parent = __pyx_v_rc;

  /* "raypier/core/ctracer.pyx":1131
 *         def __set__(self, RayCollection rc):
 *             self._parent = rc
 *             self._neighbours = None             # <<<<<<<<<<<<<<
 *             self._wavelengths = rc._wavelengths
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_dsds_int(Py_None, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(1, 1131, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_neighbours, 0);
  __pyx_v_self->_neighbours = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "raypier/core/ctracer.pyx":1132
 *             self._parent = rc
 *             self._neighbours = None
 *             self._wavelengths = rc._wavelengths             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  if (unlikely(!__pyx_v_rc->_wavelengths.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1132, __pyx_L1_error)}
  __pyx_t_2 = __pyx_v_rc->_wavelengths;
  __PYX_INC_MEMVIEW(&__pyx_t_2, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_wavelengths, 0);
  __pyx_v_self->_wavelengths = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;

  /* "raypier/core/ctracer.pyx":1129
 *             return self._parent
 * 
 *         def __set__(self, RayCollection rc):             # <<<<<<<<<<<<<<
 *             self._parent = rc
 *             self._neighbours = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1135
 * 
 *     @classmethod
 *     def from_array(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         """Creates a new RayCollection from the given numpy array. The array
 *         dtype should be a ctracer.ray_dtype. The data is copied into the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_19from_array(PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_13RayCollection_18from_array[] = "Creates a new RayCollection from the given numpy array. The array\n        dtype should be a ctracer.ray_dtype. The data is copied into the \n        RayCollection\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_19from_array(PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_5numpy_ndarray, 1, "data", 0))) __PYX_ERR(1, 1135, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_18from_array(((PyTypeObject*)__pyx_v_cls), ((PyArrayObject *)__pyx_v_data));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_18from_array(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyArrayObject *__pyx_v_data) {
  int __pyx_v_size;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rc = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_array", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_data);

  /* "raypier/core/ctracer.pyx":1140
 *         RayCollection
 *         """
 *         cdef int size=data.shape[0]             # <<<<<<<<<<<<<<
 *         cdef RayCollection rc = RayCollection(size)
 *         assert data.dtype is ray_dtype
 */
  __pyx_v_size = (__pyx_v_data->dimensions[0]);

  /* "raypier/core/ctracer.pyx":1141
 *         """
 *         cdef int size=data.shape[0]
 *         cdef RayCollection rc = RayCollection(size)             # <<<<<<<<<<<<<<
 *         assert data.dtype is ray_dtype
 *         data = np.ascontiguousarray(data)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rc = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1142
 *         cdef int size=data.shape[0]
 *         cdef RayCollection rc = RayCollection(size)
 *         assert data.dtype is ray_dtype             # <<<<<<<<<<<<<<
 *         data = np.ascontiguousarray(data)
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(ray_t))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ray_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_t_2 == __pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_3 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 1142, __pyx_L1_error)
    }
  }
  #endif

  /* "raypier/core/ctracer.pyx":1143
 *         cdef RayCollection rc = RayCollection(size)
 *         assert data.dtype is ray_dtype
 *         data = np.ascontiguousarray(data)             # <<<<<<<<<<<<<<
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(ray_t))
 *         rc.n_rays = size
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, ((PyObject *)__pyx_v_data)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_data));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1143, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_data, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1144
 *         assert data.dtype is ray_dtype
 *         data = np.ascontiguousarray(data)
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(ray_t))             # <<<<<<<<<<<<<<
 *         rc.n_rays = size
 *         return rc
 */
  (void)(memcpy(__pyx_v_rc->rays, ((__pyx_t_5numpy_float64_t *)__pyx_v_data->data), (__pyx_v_size * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_ray_t)))));

  /* "raypier/core/ctracer.pyx":1145
 *         data = np.ascontiguousarray(data)
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(ray_t))
 *         rc.n_rays = size             # <<<<<<<<<<<<<<
 *         return rc
 * 
 */
  __pyx_v_rc->n_rays = __pyx_v_size;

  /* "raypier/core/ctracer.pyx":1146
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(ray_t))
 *         rc.n_rays = size
 *         return rc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rc));
  __pyx_r = ((PyObject *)__pyx_v_rc);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1135
 * 
 *     @classmethod
 *     def from_array(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         """Creates a new RayCollection from the given numpy array. The array
 *         dtype should be a ctracer.ray_dtype. The data is copied into the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rc);
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":135
 *     cdef:
 *         ray_t *rays
 *         readonly unsigned long n_rays, max_size             # <<<<<<<<<<<<<<
 *         RayCollection _parent
 *         double[:] _wavelengths
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_6n_rays_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_6n_rays_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_6n_rays___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_6n_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.n_rays.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_8max_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_8max_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_8max_size___get__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_8max_size___get__(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->max_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.max_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_21__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_20__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_20__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_13RayCollection_23__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_13RayCollection_22__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_13RayCollection_22__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.RayCollection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1150
 * 
 * cdef class GaussletBaseRayView(RayArrayView):
 *     def __cinit__(self, GaussletCollection owner):             # <<<<<<<<<<<<<<
 *         self.owner = owner
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_owner = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_owner)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1150, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_owner = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1150, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletBaseRayView.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_owner), __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, 1, "owner", 0))) __PYX_ERR(1, 1150, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)__pyx_v_self), __pyx_v_owner);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_owner) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":1151
 * cdef class GaussletBaseRayView(RayArrayView):
 *     def __cinit__(self, GaussletCollection owner):
 *         self.owner = owner             # <<<<<<<<<<<<<<
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_owner));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_owner));
  __Pyx_GOTREF(__pyx_v_self->owner);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->owner));
  __pyx_v_self->owner = __pyx_v_owner;

  /* "raypier/core/ctracer.pyx":1150
 * 
 * cdef class GaussletBaseRayView(RayArrayView):
 *     def __cinit__(self, GaussletCollection owner):             # <<<<<<<<<<<<<<
 *         self.owner = owner
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1153
 *         self.owner = owner
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):             # <<<<<<<<<<<<<<
 *         self.owner.rays[i].base_ray = ray
 * 
 */

static void __pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_set_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, unsigned long __pyx_v_i, struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_ray_c", 0);

  /* "raypier/core/ctracer.pyx":1154
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):
 *         self.owner.rays[i].base_ray = ray             # <<<<<<<<<<<<<<
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):
 */
  (__pyx_v_self->owner->rays[__pyx_v_i]).base_ray = __pyx_v_ray;

  /* "raypier/core/ctracer.pyx":1153
 *         self.owner = owner
 * 
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray):             # <<<<<<<<<<<<<<
 *         self.owner.rays[i].base_ray = ray
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1156
 *         self.owner.rays[i].base_ray = ray
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):             # <<<<<<<<<<<<<<
 *         return self.owner.rays[i].base_ray
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_get_ray_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, unsigned long __pyx_v_i) {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ray_c", 0);

  /* "raypier/core/ctracer.pyx":1157
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):
 *         return self.owner.rays[i].base_ray             # <<<<<<<<<<<<<<
 * 
 *     cdef unsigned long get_n_rays(self):
 */
  __pyx_r = (__pyx_v_self->owner->rays[__pyx_v_i]).base_ray;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1156
 *         self.owner.rays[i].base_ray = ray
 * 
 *     cdef ray_t get_ray_c(self, unsigned long i):             # <<<<<<<<<<<<<<
 *         return self.owner.rays[i].base_ray
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1159
 *         return self.owner.rays[i].base_ray
 * 
 *     cdef unsigned long get_n_rays(self):             # <<<<<<<<<<<<<<
 *         return self.owner.n_rays
 * 
 */

static unsigned long __pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_get_n_rays(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self) {
  unsigned long __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_rays", 0);

  /* "raypier/core/ctracer.pyx":1160
 * 
 *     cdef unsigned long get_n_rays(self):
 *         return self.owner.n_rays             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_r = __pyx_v_self->owner->n_rays;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1159
 *         return self.owner.rays[i].base_ray
 * 
 *     cdef unsigned long get_n_rays(self):             # <<<<<<<<<<<<<<
 *         return self.owner.n_rays
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1162
 *         return self.owner.n_rays
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.owner.n_rays
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_2__len__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_2__len__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "raypier/core/ctracer.pyx":1163
 * 
 *     def __len__(self):
 *         return self.owner.n_rays             # <<<<<<<<<<<<<<
 * 
 *     def copy_as_array(self):
 */
  __pyx_r = __pyx_v_self->owner->n_rays;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1162
 *         return self.owner.n_rays
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.owner.n_rays
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1165
 *         return self.owner.n_rays
 * 
 *     def copy_as_array(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i, N = self.get_n_rays()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_5copy_as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_5copy_as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_4copy_as_array(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_4copy_as_array(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self) {
  unsigned int __pyx_v_i;
  unsigned int __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_rays;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  unsigned int __pyx_t_6;
  unsigned int __pyx_t_7;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_as_array", 0);

  /* "raypier/core/ctracer.pyx":1167
 *     def copy_as_array(self):
 *         cdef:
 *             unsigned int i, N = self.get_n_rays()             # <<<<<<<<<<<<<<
 *             np_.ndarray out = np.empty((N,), dtype=ray_dtype)
 *             ray_t * rays ###A bug in Cython memory views means we cannot use ray_t[:]
 */
  __pyx_v_N = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletBaseRayView *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_n_rays(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v_self));

  /* "raypier/core/ctracer.pyx":1168
 *         cdef:
 *             unsigned int i, N = self.get_n_rays()
 *             np_.ndarray out = np.empty((N,), dtype=ray_dtype)             # <<<<<<<<<<<<<<
 *             ray_t * rays ###A bug in Cython memory views means we cannot use ray_t[:]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_N); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ray_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1168, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":1171
 *             ray_t * rays ###A bug in Cython memory views means we cannot use ray_t[:]
 * 
 *         rays = <ray_t *>(out.data)             # <<<<<<<<<<<<<<
 *         for i in range(N):
 *             rays[i] = self.owner.rays[i].base_ray
 */
  __pyx_v_rays = ((struct __pyx_t_7raypier_4core_7ctracer_ray_t *)__pyx_v_out->data);

  /* "raypier/core/ctracer.pyx":1172
 * 
 *         rays = <ray_t *>(out.data)
 *         for i in range(N):             # <<<<<<<<<<<<<<
 *             rays[i] = self.owner.rays[i].base_ray
 *         return out
 */
  __pyx_t_5 = __pyx_v_N;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":1173
 *         rays = <ray_t *>(out.data)
 *         for i in range(N):
 *             rays[i] = self.owner.rays[i].base_ray             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_t_8 = (__pyx_v_self->owner->rays[__pyx_v_i]).base_ray;
    (__pyx_v_rays[__pyx_v_i]) = __pyx_t_8;
  }

  /* "raypier/core/ctracer.pyx":1174
 *         for i in range(N):
 *             rays[i] = self.owner.rays[i].base_ray
 *         return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1165
 *         return self.owner.n_rays
 * 
 *     def copy_as_array(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i, N = self.get_n_rays()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletBaseRayView.copy_as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_6__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletBaseRayView.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_8__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_19GaussletBaseRayView_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletBaseRayView.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1187
 *     """
 * 
 *     def __cinit__(self, size_t max_size):             # <<<<<<<<<<<<<<
 *         self.rays = <gausslet_t*>malloc(max_size*sizeof(gausslet_t))
 *         self.n_rays = 0
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_max_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_size,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_size)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1187, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_size = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_max_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1187, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1187, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), __pyx_v_max_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, size_t __pyx_v_max_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":1188
 * 
 *     def __cinit__(self, size_t max_size):
 *         self.rays = <gausslet_t*>malloc(max_size*sizeof(gausslet_t))             # <<<<<<<<<<<<<<
 *         self.n_rays = 0
 *         self.max_size = max_size
 */
  __pyx_v_self->rays = ((struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *)malloc((__pyx_v_max_size * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t)))));

  /* "raypier/core/ctracer.pyx":1189
 *     def __cinit__(self, size_t max_size):
 *         self.rays = <gausslet_t*>malloc(max_size*sizeof(gausslet_t))
 *         self.n_rays = 0             # <<<<<<<<<<<<<<
 *         self.max_size = max_size
 * 
 */
  __pyx_v_self->n_rays = 0;

  /* "raypier/core/ctracer.pyx":1190
 *         self.rays = <gausslet_t*>malloc(max_size*sizeof(gausslet_t))
 *         self.n_rays = 0
 *         self.max_size = max_size             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->max_size = __pyx_v_max_size;

  /* "raypier/core/ctracer.pyx":1187
 *     """
 * 
 *     def __cinit__(self, size_t max_size):             # <<<<<<<<<<<<<<
 *         self.rays = <gausslet_t*>malloc(max_size*sizeof(gausslet_t))
 *         self.n_rays = 0
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1192
 *         self.max_size = max_size
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.rays)
 * 
 */

/* Python wrapper */
static void __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_2__dealloc__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_2__dealloc__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "raypier/core/ctracer.pyx":1193
 * 
 *     def __dealloc__(self):
 *         free(self.rays)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  free(__pyx_v_self->rays);

  /* "raypier/core/ctracer.pyx":1192
 *         self.max_size = max_size
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.rays)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1195
 *         free(self.rays)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.n_rays
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_4__len__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_4__len__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "raypier/core/ctracer.pyx":1196
 * 
 *     def __len__(self):
 *         return self.n_rays             # <<<<<<<<<<<<<<
 * 
 *     property parent:
 */
  __pyx_r = __pyx_v_self->n_rays;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1195
 *         free(self.rays)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.n_rays
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1199
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._parent
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6parent___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6parent___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1200
 *     property parent:
 *         def __get__(self):
 *             return self._parent             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, GaussletCollection gc):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_parent));
  __pyx_r = ((PyObject *)__pyx_v_self->_parent);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1199
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._parent
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1202
 *             return self._parent
 * 
 *         def __set__(self, GaussletCollection gc):             # <<<<<<<<<<<<<<
 *             self._parent = gc
 *             self._wavelengths = gc._wavelengths
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_gc); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_gc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gc), __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, 1, "gc", 0))) __PYX_ERR(1, 1202, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6parent_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_gc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6parent_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gc) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1203
 * 
 *         def __set__(self, GaussletCollection gc):
 *             self._parent = gc             # <<<<<<<<<<<<<<
 *             self._wavelengths = gc._wavelengths
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_gc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_gc));
  __Pyx_GOTREF(__pyx_v_self->_parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_parent));
  __pyx_v_self->_parent = __pyx_v_gc;

  /* "raypier/core/ctracer.pyx":1204
 *         def __set__(self, GaussletCollection gc):
 *             self._parent = gc
 *             self._wavelengths = gc._wavelengths             # <<<<<<<<<<<<<<
 * 
 *     cdef add_gausslet_c(self, gausslet_t r):
 */
  if (unlikely(!__pyx_v_gc->_wavelengths.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1204, __pyx_L1_error)}
  __pyx_t_1 = __pyx_v_gc->_wavelengths;
  __PYX_INC_MEMVIEW(&__pyx_t_1, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_wavelengths, 0);
  __pyx_v_self->_wavelengths = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "raypier/core/ctracer.pyx":1202
 *             return self._parent
 * 
 *         def __set__(self, GaussletCollection gc):             # <<<<<<<<<<<<<<
 *             self._parent = gc
 *             self._wavelengths = gc._wavelengths
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1206
 *             self._wavelengths = gc._wavelengths
 * 
 *     cdef add_gausslet_c(self, gausslet_t r):             # <<<<<<<<<<<<<<
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:
 */

static PyObject *__pyx_f_7raypier_4core_7ctracer_18GaussletCollection_add_gausslet_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_gausslet_t __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("add_gausslet_c", 0);

  /* "raypier/core/ctracer.pyx":1207
 * 
 *     cdef add_gausslet_c(self, gausslet_t r):
 *         if self.n_rays == self.max_size:             # <<<<<<<<<<<<<<
 *             if self.max_size == 0:
 *                 self.max_size = 1
 */
  __pyx_t_1 = ((__pyx_v_self->n_rays == __pyx_v_self->max_size) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/ctracer.pyx":1208
 *     cdef add_gausslet_c(self, gausslet_t r):
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:             # <<<<<<<<<<<<<<
 *                 self.max_size = 1
 *             else:
 */
    __pyx_t_1 = ((__pyx_v_self->max_size == 0) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/ctracer.pyx":1209
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:
 *                 self.max_size = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 self.max_size *= 2
 */
      __pyx_v_self->max_size = 1;

      /* "raypier/core/ctracer.pyx":1208
 *     cdef add_gausslet_c(self, gausslet_t r):
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:             # <<<<<<<<<<<<<<
 *                 self.max_size = 1
 *             else:
 */
      goto __pyx_L4;
    }

    /* "raypier/core/ctracer.pyx":1211
 *                 self.max_size = 1
 *             else:
 *                 self.max_size *= 2             # <<<<<<<<<<<<<<
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 *         self.rays[self.n_rays] = r
 */
    /*else*/ {
      __pyx_v_self->max_size = (__pyx_v_self->max_size * 2);
    }
    __pyx_L4:;

    /* "raypier/core/ctracer.pyx":1212
 *             else:
 *                 self.max_size *= 2
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))             # <<<<<<<<<<<<<<
 *         self.rays[self.n_rays] = r
 *         self.n_rays += 1
 */
    __pyx_v_self->rays = ((struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *)realloc(__pyx_v_self->rays, (__pyx_v_self->max_size * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t)))));

    /* "raypier/core/ctracer.pyx":1207
 * 
 *     cdef add_gausslet_c(self, gausslet_t r):
 *         if self.n_rays == self.max_size:             # <<<<<<<<<<<<<<
 *             if self.max_size == 0:
 *                 self.max_size = 1
 */
  }

  /* "raypier/core/ctracer.pyx":1213
 *                 self.max_size *= 2
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 *         self.rays[self.n_rays] = r             # <<<<<<<<<<<<<<
 *         self.n_rays += 1
 * 
 */
  (__pyx_v_self->rays[__pyx_v_self->n_rays]) = __pyx_v_r;

  /* "raypier/core/ctracer.pyx":1214
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 *         self.rays[self.n_rays] = r
 *         self.n_rays += 1             # <<<<<<<<<<<<<<
 * 
 *     def add_gausslet(self, Gausslet r):
 */
  __pyx_v_self->n_rays = (__pyx_v_self->n_rays + 1);

  /* "raypier/core/ctracer.pyx":1206
 *             self._wavelengths = gc._wavelengths
 * 
 *     cdef add_gausslet_c(self, gausslet_t r):             # <<<<<<<<<<<<<<
 *         if self.n_rays == self.max_size:
 *             if self.max_size == 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1216
 *         self.n_rays += 1
 * 
 *     def add_gausslet(self, Gausslet r):             # <<<<<<<<<<<<<<
 *         """Adds the given Ray instance to this collection
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_7add_gausslet(PyObject *__pyx_v_self, PyObject *__pyx_v_r); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_6add_gausslet[] = "Adds the given Ray instance to this collection\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_7add_gausslet(PyObject *__pyx_v_self, PyObject *__pyx_v_r) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_gausslet (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7raypier_4core_7ctracer_Gausslet, 1, "r", 0))) __PYX_ERR(1, 1216, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6add_gausslet(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_r));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6add_gausslet(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_gausslet", 0);

  /* "raypier/core/ctracer.pyx":1219
 *         """Adds the given Ray instance to this collection
 *         """
 *         self.add_gausslet_c(r.gausslet)             # <<<<<<<<<<<<<<
 * 
 *     def add_gausslet_list(self, list rays):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self->__pyx_vtab)->add_gausslet_c(__pyx_v_self, __pyx_v_r->gausslet); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1216
 *         self.n_rays += 1
 * 
 *     def add_gausslet(self, Gausslet r):             # <<<<<<<<<<<<<<
 *         """Adds the given Ray instance to this collection
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.add_gausslet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1221
 *         self.add_gausslet_c(r.gausslet)
 * 
 *     def add_gausslet_list(self, list rays):             # <<<<<<<<<<<<<<
 *         """Adds the given list of Rays to this collection
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_9add_gausslet_list(PyObject *__pyx_v_self, PyObject *__pyx_v_rays); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_8add_gausslet_list[] = "Adds the given list of Rays to this collection\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_9add_gausslet_list(PyObject *__pyx_v_self, PyObject *__pyx_v_rays) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_gausslet_list (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), (&PyList_Type), 1, "rays", 1))) __PYX_ERR(1, 1221, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_8add_gausslet_list(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((PyObject*)__pyx_v_rays));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_8add_gausslet_list(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, PyObject *__pyx_v_rays) {
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_gausslet_list", 0);

  /* "raypier/core/ctracer.pyx":1225
 *         """
 *         cdef long int i
 *         for i in range(len(rays)):             # <<<<<<<<<<<<<<
 *             if not isinstance(rays[i], Gausslet):
 *                 raise TypeError("ray list contains non-Gausslet instance at index %d"%i)
 */
  if (unlikely(__pyx_v_rays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1225, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_rays); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1225, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1226
 *         cdef long int i
 *         for i in range(len(rays)):
 *             if not isinstance(rays[i], Gausslet):             # <<<<<<<<<<<<<<
 *                 raise TypeError("ray list contains non-Gausslet instance at index %d"%i)
 *         for i in range(len(rays)):
 */
    if (unlikely(__pyx_v_rays == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1226, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_rays, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_7raypier_4core_7ctracer_Gausslet); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = ((!(__pyx_t_5 != 0)) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "raypier/core/ctracer.pyx":1227
 *         for i in range(len(rays)):
 *             if not isinstance(rays[i], Gausslet):
 *                 raise TypeError("ray list contains non-Gausslet instance at index %d"%i)             # <<<<<<<<<<<<<<
 *         for i in range(len(rays)):
 *             self.add_ray_c((<Gausslet>rays[i]).gausslet)
 */
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_ray_list_contains_non_Gausslet_i, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1227, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 1227, __pyx_L1_error)

      /* "raypier/core/ctracer.pyx":1226
 *         cdef long int i
 *         for i in range(len(rays)):
 *             if not isinstance(rays[i], Gausslet):             # <<<<<<<<<<<<<<
 *                 raise TypeError("ray list contains non-Gausslet instance at index %d"%i)
 *         for i in range(len(rays)):
 */
    }
  }

  /* "raypier/core/ctracer.pyx":1228
 *             if not isinstance(rays[i], Gausslet):
 *                 raise TypeError("ray list contains non-Gausslet instance at index %d"%i)
 *         for i in range(len(rays)):             # <<<<<<<<<<<<<<
 *             self.add_ray_c((<Gausslet>rays[i]).gausslet)
 * 
 */
  if (unlikely(__pyx_v_rays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1228, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_rays); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1228, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1229
 *                 raise TypeError("ray list contains non-Gausslet instance at index %d"%i)
 *         for i in range(len(rays)):
 *             self.add_ray_c((<Gausslet>rays[i]).gausslet)             # <<<<<<<<<<<<<<
 * 
 *     cdef void reset_length_c(self, double max_length):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_ray_c); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__pyx_v_rays == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1229, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_rays, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_gausslet_t(((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_t_8)->gausslet); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "raypier/core/ctracer.pyx":1221
 *         self.add_gausslet_c(r.gausslet)
 * 
 *     def add_gausslet_list(self, list rays):             # <<<<<<<<<<<<<<
 *         """Adds the given list of Rays to this collection
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.add_gausslet_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1231
 *             self.add_ray_c((<Gausslet>rays[i]).gausslet)
 * 
 *     cdef void reset_length_c(self, double max_length):             # <<<<<<<<<<<<<<
 *         cdef:
 *             size_t i, j
 */

static void __pyx_f_7raypier_4core_7ctracer_18GaussletCollection_reset_length_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, double __pyx_v_max_length) {
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  unsigned long __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("reset_length_c", 0);

  /* "raypier/core/ctracer.pyx":1234
 *         cdef:
 *             size_t i, j
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             self.rays[i].base_ray.length = max_length
 *             for j in range(6):
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1235
 *             size_t i, j
 *         for i in range(self.n_rays):
 *             self.rays[i].base_ray.length = max_length             # <<<<<<<<<<<<<<
 *             for j in range(6):
 *                 self.rays[i].para[j].length = max_length
 */
    (__pyx_v_self->rays[__pyx_v_i]).base_ray.length = __pyx_v_max_length;

    /* "raypier/core/ctracer.pyx":1236
 *         for i in range(self.n_rays):
 *             self.rays[i].base_ray.length = max_length
 *             for j in range(6):             # <<<<<<<<<<<<<<
 *                 self.rays[i].para[j].length = max_length
 * 
 */
    for (__pyx_t_4 = 0; __pyx_t_4 < 6; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "raypier/core/ctracer.pyx":1237
 *             self.rays[i].base_ray.length = max_length
 *             for j in range(6):
 *                 self.rays[i].para[j].length = max_length             # <<<<<<<<<<<<<<
 * 
 * 
 */
      ((__pyx_v_self->rays[__pyx_v_i]).para[__pyx_v_j]).length = __pyx_v_max_length;
    }
  }

  /* "raypier/core/ctracer.pyx":1231
 *             self.add_ray_c((<Gausslet>rays[i]).gausslet)
 * 
 *     cdef void reset_length_c(self, double max_length):             # <<<<<<<<<<<<<<
 *         cdef:
 *             size_t i, j
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1240
 * 
 * 
 *     def reset_length(self, double max_length=INF):             # <<<<<<<<<<<<<<
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11reset_length(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_10reset_length[] = "Sets the length of all rays in this RayCollection to Infinity\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11reset_length(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_max_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_length (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_length,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_length);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset_length") < 0)) __PYX_ERR(1, 1240, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_length = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_max_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1240, __pyx_L3_error)
    } else {
      __pyx_v_max_length = __pyx_k__21;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_length", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1240, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.reset_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_10reset_length(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), __pyx_v_max_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_10reset_length(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, double __pyx_v_max_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_length", 0);

  /* "raypier/core/ctracer.pyx":1243
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 *         self.reset_length_c(max_length)             # <<<<<<<<<<<<<<
 * 
 *     def clear_ray_list(self):
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self->__pyx_vtab)->reset_length_c(__pyx_v_self, __pyx_v_max_length);

  /* "raypier/core/ctracer.pyx":1240
 * 
 * 
 *     def reset_length(self, double max_length=INF):             # <<<<<<<<<<<<<<
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1245
 *         self.reset_length_c(max_length)
 * 
 *     def clear_ray_list(self):             # <<<<<<<<<<<<<<
 *         """Empties this RayCollection (by setting the count to zero)
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_13clear_ray_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_12clear_ray_list[] = "Empties this RayCollection (by setting the count to zero)\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_13clear_ray_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_ray_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_12clear_ray_list(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_12clear_ray_list(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_ray_list", 0);

  /* "raypier/core/ctracer.pyx":1248
 *         """Empties this RayCollection (by setting the count to zero)
 *         """
 *         self.n_rays = 0             # <<<<<<<<<<<<<<
 * 
 *     def get_gausslet_list(self):
 */
  __pyx_v_self->n_rays = 0;

  /* "raypier/core/ctracer.pyx":1245
 *         self.reset_length_c(max_length)
 * 
 *     def clear_ray_list(self):             # <<<<<<<<<<<<<<
 *         """Empties this RayCollection (by setting the count to zero)
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1250
 *         self.n_rays = 0
 * 
 *     def get_gausslet_list(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a list of Rays
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_15get_gausslet_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_14get_gausslet_list[] = "Returns the contents of this RayCollection as a list of Rays\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_15get_gausslet_list(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_gausslet_list (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_14get_gausslet_list(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_14get_gausslet_list(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_ray_list = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  unsigned long __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_gausslet_list", 0);

  /* "raypier/core/ctracer.pyx":1254
 *         """
 *         cdef size_t i
 *         cdef list ray_list = []             # <<<<<<<<<<<<<<
 *         cdef Gausslet r
 *         for i in range(self.n_rays):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ray_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1256
 *         cdef list ray_list = []
 *         cdef Gausslet r
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             r = Gausslet()
 *             r.gausslet = self.rays[i]
 */
  __pyx_t_2 = __pyx_v_self->n_rays;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "raypier/core/ctracer.pyx":1257
 *         cdef Gausslet r
 *         for i in range(self.n_rays):
 *             r = Gausslet()             # <<<<<<<<<<<<<<
 *             r.gausslet = self.rays[i]
 *             ray_list.append(r)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Gausslet)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_r, ((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "raypier/core/ctracer.pyx":1258
 *         for i in range(self.n_rays):
 *             r = Gausslet()
 *             r.gausslet = self.rays[i]             # <<<<<<<<<<<<<<
 *             ray_list.append(r)
 *         return ray_list
 */
    __pyx_v_r->gausslet = (__pyx_v_self->rays[__pyx_v_i]);

    /* "raypier/core/ctracer.pyx":1259
 *             r = Gausslet()
 *             r.gausslet = self.rays[i]
 *             ray_list.append(r)             # <<<<<<<<<<<<<<
 *         return ray_list
 * 
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_ray_list, ((PyObject *)__pyx_v_r)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 1259, __pyx_L1_error)
  }

  /* "raypier/core/ctracer.pyx":1260
 *             r.gausslet = self.rays[i]
 *             ray_list.append(r)
 *         return ray_list             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ray_list);
  __pyx_r = __pyx_v_ray_list;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1250
 *         self.n_rays = 0
 * 
 *     def get_gausslet_list(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a list of Rays
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.get_gausslet_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ray_list);
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1262
 *         return ray_list
 * 
 *     def __getitem__(self, size_t idx):             # <<<<<<<<<<<<<<
 *         cdef Gausslet r
 *         if idx >= self.n_rays:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_17__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_17__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx) {
  size_t __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_size_t(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1262, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_16__getitem__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((size_t)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_16__getitem__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, size_t __pyx_v_idx) {
  struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_r = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "raypier/core/ctracer.pyx":1264
 *     def __getitem__(self, size_t idx):
 *         cdef Gausslet r
 *         if idx >= self.n_rays:             # <<<<<<<<<<<<<<
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Gausslet()
 */
  __pyx_t_1 = ((__pyx_v_idx >= __pyx_v_self->n_rays) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "raypier/core/ctracer.pyx":1265
 *         cdef Gausslet r
 *         if idx >= self.n_rays:
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))             # <<<<<<<<<<<<<<
 *         r = Gausslet()
 *         r.gausslet = self.rays[idx]
 */
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Requested_index);
    __pyx_t_3 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_Requested_index);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Requested_index);
    __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_from_a_size);
    __pyx_t_3 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_from_a_size);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_from_a_size);
    __pyx_t_5 = __Pyx_PyUnicode_From_unsigned_long(__pyx_v_self->n_rays, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_array);
    __pyx_t_3 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_array);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_array);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1265, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":1264
 *     def __getitem__(self, size_t idx):
 *         cdef Gausslet r
 *         if idx >= self.n_rays:             # <<<<<<<<<<<<<<
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Gausslet()
 */
  }

  /* "raypier/core/ctracer.pyx":1266
 *         if idx >= self.n_rays:
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Gausslet()             # <<<<<<<<<<<<<<
 *         r.gausslet = self.rays[idx]
 *         return r
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Gausslet)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_r = ((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1267
 *             raise IndexError("Requested index %d from a size %d array"%(idx, self.n_rays))
 *         r = Gausslet()
 *         r.gausslet = self.rays[idx]             # <<<<<<<<<<<<<<
 *         return r
 * 
 */
  __pyx_v_r->gausslet = (__pyx_v_self->rays[__pyx_v_idx]);

  /* "raypier/core/ctracer.pyx":1268
 *         r = Gausslet()
 *         r.gausslet = self.rays[idx]
 *         return r             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, size_t idx, Gausslet r):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1262
 *         return ray_list
 * 
 *     def __getitem__(self, size_t idx):             # <<<<<<<<<<<<<<
 *         cdef Gausslet r
 *         if idx >= self.n_rays:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1270
 *         return r
 * 
 *     def __setitem__(self, size_t idx, Gausslet r):             # <<<<<<<<<<<<<<
 *         if idx >= self.n_rays:
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_19__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx, PyObject *__pyx_v_r); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_19__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_idx, PyObject *__pyx_v_r) {
  size_t __pyx_v_idx;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  assert(__pyx_arg_idx); {
    __pyx_v_idx = __Pyx_PyInt_As_size_t(__pyx_arg_idx); if (unlikely((__pyx_v_idx == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1270, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7raypier_4core_7ctracer_Gausslet, 1, "r", 0))) __PYX_ERR(1, 1270, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_18__setitem__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((size_t)__pyx_v_idx), ((struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *)__pyx_v_r));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_18__setitem__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, size_t __pyx_v_idx, struct __pyx_obj_7raypier_4core_7ctracer_Gausslet *__pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "raypier/core/ctracer.pyx":1271
 * 
 *     def __setitem__(self, size_t idx, Gausslet r):
 *         if idx >= self.n_rays:             # <<<<<<<<<<<<<<
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 *         self.rays[idx] = r.gausslet
 */
  __pyx_t_1 = ((__pyx_v_idx >= __pyx_v_self->n_rays) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "raypier/core/ctracer.pyx":1272
 *     def __setitem__(self, size_t idx, Gausslet r):
 *         if idx >= self.n_rays:
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))             # <<<<<<<<<<<<<<
 *         self.rays[idx] = r.gausslet
 * 
 */
    __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Attempting_to_set_index);
    __pyx_t_3 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_Attempting_to_set_index);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Attempting_to_set_index);
    __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_from_a_size);
    __pyx_t_3 += 13;
    __Pyx_GIVEREF(__pyx_kp_u_from_a_size);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_from_a_size);
    __pyx_t_5 = __Pyx_PyUnicode_From_unsigned_long(__pyx_v_self->n_rays, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_array);
    __pyx_t_3 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_array);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u_array);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1272, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":1271
 * 
 *     def __setitem__(self, size_t idx, Gausslet r):
 *         if idx >= self.n_rays:             # <<<<<<<<<<<<<<
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 *         self.rays[idx] = r.gausslet
 */
  }

  /* "raypier/core/ctracer.pyx":1273
 *         if idx >= self.n_rays:
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 *         self.rays[idx] = r.gausslet             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_6 = __pyx_v_r->gausslet;
  (__pyx_v_self->rays[__pyx_v_idx]) = __pyx_t_6;

  /* "raypier/core/ctracer.pyx":1270
 *         return r
 * 
 *     def __setitem__(self, size_t idx, Gausslet r):             # <<<<<<<<<<<<<<
 *         if idx >= self.n_rays:
 *             raise IndexError("Attempting to set index %d from a size %d array"%(idx, self.n_rays))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1275
 *         self.rays[idx] = r.gausslet
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return GaussletCollectionIterator(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_21__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_21__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_20__iter__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_20__iter__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "raypier/core/ctracer.pyx":1276
 * 
 *     def __iter__(self):
 *         return GaussletCollectionIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     def copy_as_array(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollectionIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1275
 *         self.rays[idx] = r.gausslet
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return GaussletCollectionIterator(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1278
 *         return GaussletCollectionIterator(self)
 * 
 *     def copy_as_array(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a numpy array
 *         (the data is always copied).
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_23copy_as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_22copy_as_array[] = "Returns the contents of this RayCollection as a numpy array\n        (the data is always copied).\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_23copy_as_array(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_as_array (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_22copy_as_array(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_22copy_as_array(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyArrayObject *__pyx_v_out = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_as_array", 0);

  /* "raypier/core/ctracer.pyx":1282
 *         (the data is always copied).
 *         """
 *         cdef np_.ndarray out = np.empty(self.n_rays, dtype=gausslet_dtype)             # <<<<<<<<<<<<<<
 *         memcpy(<np_.float64_t *>out.data, self.rays, self.n_rays*sizeof(gausslet_t))
 *         return out
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_gausslet_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1282, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":1283
 *         """
 *         cdef np_.ndarray out = np.empty(self.n_rays, dtype=gausslet_dtype)
 *         memcpy(<np_.float64_t *>out.data, self.rays, self.n_rays*sizeof(gausslet_t))             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  (void)(memcpy(((__pyx_t_5numpy_float64_t *)__pyx_v_out->data), __pyx_v_self->rays, (__pyx_v_self->n_rays * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t)))));

  /* "raypier/core/ctracer.pyx":1284
 *         cdef np_.ndarray out = np.empty(self.n_rays, dtype=gausslet_dtype)
 *         memcpy(<np_.float64_t *>out.data, self.rays, self.n_rays*sizeof(gausslet_t))
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def extend(self, GaussletCollection gc):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1278
 *         return GaussletCollectionIterator(self)
 * 
 *     def copy_as_array(self):             # <<<<<<<<<<<<<<
 *         """Returns the contents of this RayCollection as a numpy array
 *         (the data is always copied).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.copy_as_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1286
 *         return out
 * 
 *     def extend(self, GaussletCollection gc):             # <<<<<<<<<<<<<<
 *         self.extend_c(gc)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_25extend(PyObject *__pyx_v_self, PyObject *__pyx_v_gc); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_25extend(PyObject *__pyx_v_self, PyObject *__pyx_v_gc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extend (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gc), __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, 1, "gc", 0))) __PYX_ERR(1, 1286, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_24extend(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_gc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_24extend(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extend", 0);

  /* "raypier/core/ctracer.pyx":1287
 * 
 *     def extend(self, GaussletCollection gc):
 *         self.extend_c(gc)             # <<<<<<<<<<<<<<
 * 
 *     cdef void extend_c(self, GaussletCollection gc):
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self->__pyx_vtab)->extend_c(__pyx_v_self, __pyx_v_gc);

  /* "raypier/core/ctracer.pyx":1286
 *         return out
 * 
 *     def extend(self, GaussletCollection gc):             # <<<<<<<<<<<<<<
 *         self.extend_c(gc)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1289
 *         self.extend_c(gc)
 * 
 *     cdef void extend_c(self, GaussletCollection gc):             # <<<<<<<<<<<<<<
 *         if (self.n_rays + gc.n_rays) > self.max_size:
 *             self.max_size = (self.n_rays*2 + gc.n_rays)
 */

static void __pyx_f_7raypier_4core_7ctracer_18GaussletCollection_extend_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gc) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("extend_c", 0);

  /* "raypier/core/ctracer.pyx":1290
 * 
 *     cdef void extend_c(self, GaussletCollection gc):
 *         if (self.n_rays + gc.n_rays) > self.max_size:             # <<<<<<<<<<<<<<
 *             self.max_size = (self.n_rays*2 + gc.n_rays)
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 */
  __pyx_t_1 = (((__pyx_v_self->n_rays + __pyx_v_gc->n_rays) > __pyx_v_self->max_size) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/ctracer.pyx":1291
 *     cdef void extend_c(self, GaussletCollection gc):
 *         if (self.n_rays + gc.n_rays) > self.max_size:
 *             self.max_size = (self.n_rays*2 + gc.n_rays)             # <<<<<<<<<<<<<<
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 *         memcpy(self.rays + self.n_rays, gc.rays, gc.n_rays*sizeof(gausslet_t))
 */
    __pyx_v_self->max_size = ((__pyx_v_self->n_rays * 2) + __pyx_v_gc->n_rays);

    /* "raypier/core/ctracer.pyx":1292
 *         if (self.n_rays + gc.n_rays) > self.max_size:
 *             self.max_size = (self.n_rays*2 + gc.n_rays)
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))             # <<<<<<<<<<<<<<
 *         memcpy(self.rays + self.n_rays, gc.rays, gc.n_rays*sizeof(gausslet_t))
 *         self.n_rays += gc.n_rays
 */
    __pyx_v_self->rays = ((struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *)realloc(__pyx_v_self->rays, (__pyx_v_self->max_size * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t)))));

    /* "raypier/core/ctracer.pyx":1290
 * 
 *     cdef void extend_c(self, GaussletCollection gc):
 *         if (self.n_rays + gc.n_rays) > self.max_size:             # <<<<<<<<<<<<<<
 *             self.max_size = (self.n_rays*2 + gc.n_rays)
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 */
  }

  /* "raypier/core/ctracer.pyx":1293
 *             self.max_size = (self.n_rays*2 + gc.n_rays)
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 *         memcpy(self.rays + self.n_rays, gc.rays, gc.n_rays*sizeof(gausslet_t))             # <<<<<<<<<<<<<<
 *         self.n_rays += gc.n_rays
 * 
 */
  (void)(memcpy((__pyx_v_self->rays + __pyx_v_self->n_rays), __pyx_v_gc->rays, (__pyx_v_gc->n_rays * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t)))));

  /* "raypier/core/ctracer.pyx":1294
 *             self.rays = <gausslet_t*>realloc(self.rays, self.max_size*sizeof(gausslet_t))
 *         memcpy(self.rays + self.n_rays, gc.rays, gc.n_rays*sizeof(gausslet_t))
 *         self.n_rays += gc.n_rays             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_v_self->n_rays = (__pyx_v_self->n_rays + __pyx_v_gc->n_rays);

  /* "raypier/core/ctracer.pyx":1289
 *         self.extend_c(gc)
 * 
 *     cdef void extend_c(self, GaussletCollection gc):             # <<<<<<<<<<<<<<
 *         if (self.n_rays + gc.n_rays) > self.max_size:
 *             self.max_size = (self.n_rays*2 + gc.n_rays)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1297
 * 
 *     @classmethod
 *     def from_array(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         """Creates a new RayCollection from the given numpy array. The array
 *         dtype should be a ctracer.ray_dtype. The data is copied into the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_27from_array(PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_26from_array[] = "Creates a new RayCollection from the given numpy array. The array\n        dtype should be a ctracer.ray_dtype. The data is copied into the \n        RayCollection\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_27from_array(PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_array (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_5numpy_ndarray, 1, "data", 0))) __PYX_ERR(1, 1297, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_26from_array(((PyTypeObject*)__pyx_v_cls), ((PyArrayObject *)__pyx_v_data));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_26from_array(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyArrayObject *__pyx_v_data) {
  int __pyx_v_size;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rc = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_array", 0);

  /* "raypier/core/ctracer.pyx":1303
 *         """
 *         cdef:
 *             int size=data.shape[0]             # <<<<<<<<<<<<<<
 *             GaussletCollection rc = GaussletCollection(size)
 * 
 */
  __pyx_v_size = (__pyx_v_data->dimensions[0]);

  /* "raypier/core/ctracer.pyx":1304
 *         cdef:
 *             int size=data.shape[0]
 *             GaussletCollection rc = GaussletCollection(size)             # <<<<<<<<<<<<<<
 * 
 *         if data.dtype != gausslet_dtype:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rc = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1306
 *             GaussletCollection rc = GaussletCollection(size)
 * 
 *         if data.dtype != gausslet_dtype:             # <<<<<<<<<<<<<<
 *             raise ValueError("Array must have gausslet_dtype dtype")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_gausslet_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "raypier/core/ctracer.pyx":1307
 * 
 *         if data.dtype != gausslet_dtype:
 *             raise ValueError("Array must have gausslet_dtype dtype")             # <<<<<<<<<<<<<<
 * 
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(gausslet_t))
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1307, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":1306
 *             GaussletCollection rc = GaussletCollection(size)
 * 
 *         if data.dtype != gausslet_dtype:             # <<<<<<<<<<<<<<
 *             raise ValueError("Array must have gausslet_dtype dtype")
 * 
 */
  }

  /* "raypier/core/ctracer.pyx":1309
 *             raise ValueError("Array must have gausslet_dtype dtype")
 * 
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(gausslet_t))             # <<<<<<<<<<<<<<
 *         rc.n_rays = size
 *         return rc
 */
  (void)(memcpy(__pyx_v_rc->rays, ((__pyx_t_5numpy_float64_t *)__pyx_v_data->data), (__pyx_v_size * (sizeof(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t)))));

  /* "raypier/core/ctracer.pyx":1310
 * 
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(gausslet_t))
 *         rc.n_rays = size             # <<<<<<<<<<<<<<
 *         return rc
 * 
 */
  __pyx_v_rc->n_rays = __pyx_v_size;

  /* "raypier/core/ctracer.pyx":1311
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(gausslet_t))
 *         rc.n_rays = size
 *         return rc             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rc));
  __pyx_r = ((PyObject *)__pyx_v_rc);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1297
 * 
 *     @classmethod
 *     def from_array(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         """Creates a new RayCollection from the given numpy array. The array
 *         dtype should be a ctracer.ray_dtype. The data is copied into the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.from_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1314
 * 
 *     @classmethod
 *     def from_rays(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int i, j, size=data.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_29from_rays(PyObject *__pyx_v_cls, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_29from_rays(PyObject *__pyx_v_cls, PyObject *__pyx_v_data) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_rays (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_5numpy_ndarray, 1, "data", 0))) __PYX_ERR(1, 1314, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_28from_rays(((PyTypeObject*)__pyx_v_cls), ((PyArrayObject *)__pyx_v_data));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_28from_rays(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyArrayObject *__pyx_v_data) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_size;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rc = 0;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *__pyx_v_gc;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_p;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v__data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_9;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_rays", 0);

  /* "raypier/core/ctracer.pyx":1316
 *     def from_rays(cls, np_.ndarray data):
 *         cdef:
 *             int i, j, size=data.shape[0]             # <<<<<<<<<<<<<<
 *             GaussletCollection rc = GaussletCollection(size)
 *             gausslet_t *gc
 */
  __pyx_v_size = (__pyx_v_data->dimensions[0]);

  /* "raypier/core/ctracer.pyx":1317
 *         cdef:
 *             int i, j, size=data.shape[0]
 *             GaussletCollection rc = GaussletCollection(size)             # <<<<<<<<<<<<<<
 *             gausslet_t *gc
 *             ray_t *ray
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rc = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1321
 *             ray_t *ray
 *             para_t *p
 *             ray_t *_data = <ray_t *>data.data             # <<<<<<<<<<<<<<
 * 
 *         if data.dtype != ray_dtype:
 */
  __pyx_v__data = ((struct __pyx_t_7raypier_4core_7ctracer_ray_t *)__pyx_v_data->data);

  /* "raypier/core/ctracer.pyx":1323
 *             ray_t *_data = <ray_t *>data.data
 * 
 *         if data.dtype != ray_dtype:             # <<<<<<<<<<<<<<
 *             raise ValueError("Array must have gausslet_dtype dtype")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ray_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "raypier/core/ctracer.pyx":1324
 * 
 *         if data.dtype != ray_dtype:
 *             raise ValueError("Array must have gausslet_dtype dtype")             # <<<<<<<<<<<<<<
 * 
 *         for i in range(size):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1324, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":1323
 *             ray_t *_data = <ray_t *>data.data
 * 
 *         if data.dtype != ray_dtype:             # <<<<<<<<<<<<<<
 *             raise ValueError("Array must have gausslet_dtype dtype")
 * 
 */
  }

  /* "raypier/core/ctracer.pyx":1326
 *             raise ValueError("Array must have gausslet_dtype dtype")
 * 
 *         for i in range(size):             # <<<<<<<<<<<<<<
 *             gc = rc.rays+i
 *             ray = &(_data[i])
 */
  __pyx_t_5 = __pyx_v_size;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":1327
 * 
 *         for i in range(size):
 *             gc = rc.rays+i             # <<<<<<<<<<<<<<
 *             ray = &(_data[i])
 *             gc.base_ray = ray[0]
 */
    __pyx_v_gc = (__pyx_v_rc->rays + __pyx_v_i);

    /* "raypier/core/ctracer.pyx":1328
 *         for i in range(size):
 *             gc = rc.rays+i
 *             ray = &(_data[i])             # <<<<<<<<<<<<<<
 *             gc.base_ray = ray[0]
 *             for j in range(6):
 */
    __pyx_v_ray = (&(__pyx_v__data[__pyx_v_i]));

    /* "raypier/core/ctracer.pyx":1329
 *             gc = rc.rays+i
 *             ray = &(_data[i])
 *             gc.base_ray = ray[0]             # <<<<<<<<<<<<<<
 *             for j in range(6):
 *                 p = gc.para + j
 */
    __pyx_v_gc->base_ray = (__pyx_v_ray[0]);

    /* "raypier/core/ctracer.pyx":1330
 *             ray = &(_data[i])
 *             gc.base_ray = ray[0]
 *             for j in range(6):             # <<<<<<<<<<<<<<
 *                 p = gc.para + j
 *                 p.origin = ray.origin
 */
    for (__pyx_t_8 = 0; __pyx_t_8 < 6; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":1331
 *             gc.base_ray = ray[0]
 *             for j in range(6):
 *                 p = gc.para + j             # <<<<<<<<<<<<<<
 *                 p.origin = ray.origin
 *                 p.direction = ray.direction
 */
      __pyx_v_p = (__pyx_v_gc->para + __pyx_v_j);

      /* "raypier/core/ctracer.pyx":1332
 *             for j in range(6):
 *                 p = gc.para + j
 *                 p.origin = ray.origin             # <<<<<<<<<<<<<<
 *                 p.direction = ray.direction
 *                 p.normal = ray.normal
 */
      __pyx_t_9 = __pyx_v_ray->origin;
      __pyx_v_p->origin = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1333
 *                 p = gc.para + j
 *                 p.origin = ray.origin
 *                 p.direction = ray.direction             # <<<<<<<<<<<<<<
 *                 p.normal = ray.normal
 *                 p.length = ray.length
 */
      __pyx_t_9 = __pyx_v_ray->direction;
      __pyx_v_p->direction = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1334
 *                 p.origin = ray.origin
 *                 p.direction = ray.direction
 *                 p.normal = ray.normal             # <<<<<<<<<<<<<<
 *                 p.length = ray.length
 *         rc.n_rays = size
 */
      __pyx_t_9 = __pyx_v_ray->normal;
      __pyx_v_p->normal = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1335
 *                 p.direction = ray.direction
 *                 p.normal = ray.normal
 *                 p.length = ray.length             # <<<<<<<<<<<<<<
 *         rc.n_rays = size
 *         return rc
 */
      __pyx_t_10 = __pyx_v_ray->length;
      __pyx_v_p->length = __pyx_t_10;
    }
  }

  /* "raypier/core/ctracer.pyx":1336
 *                 p.normal = ray.normal
 *                 p.length = ray.length
 *         rc.n_rays = size             # <<<<<<<<<<<<<<
 *         return rc
 * 
 */
  __pyx_v_rc->n_rays = __pyx_v_size;

  /* "raypier/core/ctracer.pyx":1337
 *                 p.length = ray.length
 *         rc.n_rays = size
 *         return rc             # <<<<<<<<<<<<<<
 * 
 *     property lagrange_invariant:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rc));
  __pyx_r = ((PyObject *)__pyx_v_rc);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1314
 * 
 *     @classmethod
 *     def from_rays(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int i, j, size=data.shape[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.from_rays", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1340
 * 
 *     property lagrange_invariant:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 int i,j
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_18lagrange_invariant_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_18lagrange_invariant_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_18lagrange_invariant___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_18lagrange_invariant___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  int __pyx_v_i;
  unsigned long __pyx_v_k;
  unsigned long __pyx_v_N;
  PyArrayObject *__pyx_v_out = 0;
  __Pyx_memviewslice __pyx_v__out = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_v;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t __pyx_v_g;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_r;
  struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_v_p;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_h[6];
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_u[6];
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_axis1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_axis2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_o;
  __Pyx_memviewslice __pyx_v_wavelen = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_t_9;
  int __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1343
 *             cdef:
 *                 int i,j
 *                 unsigned long k, N = self.n_rays             # <<<<<<<<<<<<<<
 *                 np_.ndarray out = np.empty((N,), dtype='d' )
 *                 double[:] _out = out
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_v_N = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1344
 *                 int i,j
 *                 unsigned long k, N = self.n_rays
 *                 np_.ndarray out = np.empty((N,), dtype='d' )             # <<<<<<<<<<<<<<
 *                 double[:] _out = out
 *                 double v=0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_N); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 1344, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1344, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":1345
 *                 unsigned long k, N = self.n_rays
 *                 np_.ndarray out = np.empty((N,), dtype='d' )
 *                 double[:] _out = out             # <<<<<<<<<<<<<<
 *                 double v=0
 *                 gausslet_t g
 */
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(((PyObject *)__pyx_v_out), PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 1345, __pyx_L1_error)
  __pyx_v__out = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "raypier/core/ctracer.pyx":1346
 *                 np_.ndarray out = np.empty((N,), dtype='d' )
 *                 double[:] _out = out
 *                 double v=0             # <<<<<<<<<<<<<<
 *                 gausslet_t g
 *                 ray_t r
 */
  __pyx_v_v = 0.0;

  /* "raypier/core/ctracer.pyx":1353
 *                 vector_t[6] u
 *                 vector_t axis1, axis2, o
 *                 double[:] wavelen = self.wavelengths             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wavelengths); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 1353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_wavelen = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "raypier/core/ctracer.pyx":1356
 * 
 * 
 *             for k in range(N):             # <<<<<<<<<<<<<<
 *                 g = self.rays[k]
 *                 r = g.base_ray
 */
  __pyx_t_1 = __pyx_v_N;
  __pyx_t_7 = __pyx_t_1;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":1357
 * 
 *             for k in range(N):
 *                 g = self.rays[k]             # <<<<<<<<<<<<<<
 *                 r = g.base_ray
 *                 axis1 = norm_(r.E_vector)
 */
    __pyx_v_g = (__pyx_v_self->rays[__pyx_v_k]);

    /* "raypier/core/ctracer.pyx":1358
 *             for k in range(N):
 *                 g = self.rays[k]
 *                 r = g.base_ray             # <<<<<<<<<<<<<<
 *                 axis1 = norm_(r.E_vector)
 *                 axis2 = cross_(axis1, r.direction)
 */
    __pyx_t_9 = __pyx_v_g.base_ray;
    __pyx_v_r = __pyx_t_9;

    /* "raypier/core/ctracer.pyx":1359
 *                 g = self.rays[k]
 *                 r = g.base_ray
 *                 axis1 = norm_(r.E_vector)             # <<<<<<<<<<<<<<
 *                 axis2 = cross_(axis1, r.direction)
 * 
 */
    __pyx_v_axis1 = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_r.E_vector);

    /* "raypier/core/ctracer.pyx":1360
 *                 r = g.base_ray
 *                 axis1 = norm_(r.E_vector)
 *                 axis2 = cross_(axis1, r.direction)             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(6):
 */
    __pyx_v_axis2 = __pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_axis1, __pyx_v_r.direction);

    /* "raypier/core/ctracer.pyx":1362
 *                 axis2 = cross_(axis1, r.direction)
 * 
 *                 for i in range(6):             # <<<<<<<<<<<<<<
 *                     p = g.para[i]
 *                     o = subvv_(p.origin, r.origin)
 */
    for (__pyx_t_10 = 0; __pyx_t_10 < 6; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "raypier/core/ctracer.pyx":1363
 * 
 *                 for i in range(6):
 *                     p = g.para[i]             # <<<<<<<<<<<<<<
 *                     o = subvv_(p.origin, r.origin)
 *                     h[i].x = dotprod_(o, axis1)
 */
      __pyx_v_p = (__pyx_v_g.para[__pyx_v_i]);

      /* "raypier/core/ctracer.pyx":1364
 *                 for i in range(6):
 *                     p = g.para[i]
 *                     o = subvv_(p.origin, r.origin)             # <<<<<<<<<<<<<<
 *                     h[i].x = dotprod_(o, axis1)
 *                     h[i].y = dotprod_(o, axis2)
 */
      __pyx_v_o = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p.origin, __pyx_v_r.origin);

      /* "raypier/core/ctracer.pyx":1365
 *                     p = g.para[i]
 *                     o = subvv_(p.origin, r.origin)
 *                     h[i].x = dotprod_(o, axis1)             # <<<<<<<<<<<<<<
 *                     h[i].y = dotprod_(o, axis2)
 *                     h[i].z = 0.0
 */
      (__pyx_v_h[__pyx_v_i]).x = __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_o, __pyx_v_axis1);

      /* "raypier/core/ctracer.pyx":1366
 *                     o = subvv_(p.origin, r.origin)
 *                     h[i].x = dotprod_(o, axis1)
 *                     h[i].y = dotprod_(o, axis2)             # <<<<<<<<<<<<<<
 *                     h[i].z = 0.0
 *                     u[i].x = dotprod_(p.direction, axis1)
 */
      (__pyx_v_h[__pyx_v_i]).y = __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_o, __pyx_v_axis2);

      /* "raypier/core/ctracer.pyx":1367
 *                     h[i].x = dotprod_(o, axis1)
 *                     h[i].y = dotprod_(o, axis2)
 *                     h[i].z = 0.0             # <<<<<<<<<<<<<<
 *                     u[i].x = dotprod_(p.direction, axis1)
 *                     u[i].y = dotprod_(p.direction, axis2)
 */
      (__pyx_v_h[__pyx_v_i]).z = 0.0;

      /* "raypier/core/ctracer.pyx":1368
 *                     h[i].y = dotprod_(o, axis2)
 *                     h[i].z = 0.0
 *                     u[i].x = dotprod_(p.direction, axis1)             # <<<<<<<<<<<<<<
 *                     u[i].y = dotprod_(p.direction, axis2)
 *                     u[i].z = 0.0
 */
      (__pyx_v_u[__pyx_v_i]).x = __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_p.direction, __pyx_v_axis1);

      /* "raypier/core/ctracer.pyx":1369
 *                     h[i].z = 0.0
 *                     u[i].x = dotprod_(p.direction, axis1)
 *                     u[i].y = dotprod_(p.direction, axis2)             # <<<<<<<<<<<<<<
 *                     u[i].z = 0.0
 * 
 */
      (__pyx_v_u[__pyx_v_i]).y = __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_p.direction, __pyx_v_axis2);

      /* "raypier/core/ctracer.pyx":1370
 *                     u[i].x = dotprod_(p.direction, axis1)
 *                     u[i].y = dotprod_(p.direction, axis2)
 *                     u[i].z = 0.0             # <<<<<<<<<<<<<<
 * 
 *                 v = 0
 */
      (__pyx_v_u[__pyx_v_i]).z = 0.0;
    }

    /* "raypier/core/ctracer.pyx":1372
 *                     u[i].z = 0.0
 * 
 *                 v = 0             # <<<<<<<<<<<<<<
 *                 v += (dotprod_(h[0],u[5]) - dotprod_(h[5],u[0]))**2
 *                 v += (dotprod_(h[1],u[2]) - dotprod_(h[2],u[1]))**2
 */
    __pyx_v_v = 0.0;

    /* "raypier/core/ctracer.pyx":1373
 * 
 *                 v = 0
 *                 v += (dotprod_(h[0],u[5]) - dotprod_(h[5],u[0]))**2             # <<<<<<<<<<<<<<
 *                 v += (dotprod_(h[1],u[2]) - dotprod_(h[2],u[1]))**2
 *                 v += (dotprod_(h[3],u[4]) - dotprod_(h[4],u[3]))**2
 */
    __pyx_v_v = (__pyx_v_v + pow((__pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[0]), (__pyx_v_u[5])) - __pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[5]), (__pyx_v_u[0]))), 2.0));

    /* "raypier/core/ctracer.pyx":1374
 *                 v = 0
 *                 v += (dotprod_(h[0],u[5]) - dotprod_(h[5],u[0]))**2
 *                 v += (dotprod_(h[1],u[2]) - dotprod_(h[2],u[1]))**2             # <<<<<<<<<<<<<<
 *                 v += (dotprod_(h[3],u[4]) - dotprod_(h[4],u[3]))**2
 *                 v += (dotprod_(h[1],u[4]) - dotprod_(h[4],u[1]))**2
 */
    __pyx_v_v = (__pyx_v_v + pow((__pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[1]), (__pyx_v_u[2])) - __pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[2]), (__pyx_v_u[1]))), 2.0));

    /* "raypier/core/ctracer.pyx":1375
 *                 v += (dotprod_(h[0],u[5]) - dotprod_(h[5],u[0]))**2
 *                 v += (dotprod_(h[1],u[2]) - dotprod_(h[2],u[1]))**2
 *                 v += (dotprod_(h[3],u[4]) - dotprod_(h[4],u[3]))**2             # <<<<<<<<<<<<<<
 *                 v += (dotprod_(h[1],u[4]) - dotprod_(h[4],u[1]))**2
 *                 v += (dotprod_(h[0],u[3]) - dotprod_(h[3],u[0]))**2
 */
    __pyx_v_v = (__pyx_v_v + pow((__pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[3]), (__pyx_v_u[4])) - __pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[4]), (__pyx_v_u[3]))), 2.0));

    /* "raypier/core/ctracer.pyx":1376
 *                 v += (dotprod_(h[1],u[2]) - dotprod_(h[2],u[1]))**2
 *                 v += (dotprod_(h[3],u[4]) - dotprod_(h[4],u[3]))**2
 *                 v += (dotprod_(h[1],u[4]) - dotprod_(h[4],u[1]))**2             # <<<<<<<<<<<<<<
 *                 v += (dotprod_(h[0],u[3]) - dotprod_(h[3],u[0]))**2
 *                 v += (dotprod_(h[2],u[5]) - dotprod_(h[5],u[2]))**2
 */
    __pyx_v_v = (__pyx_v_v + pow((__pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[1]), (__pyx_v_u[4])) - __pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[4]), (__pyx_v_u[1]))), 2.0));

    /* "raypier/core/ctracer.pyx":1377
 *                 v += (dotprod_(h[3],u[4]) - dotprod_(h[4],u[3]))**2
 *                 v += (dotprod_(h[1],u[4]) - dotprod_(h[4],u[1]))**2
 *                 v += (dotprod_(h[0],u[3]) - dotprod_(h[3],u[0]))**2             # <<<<<<<<<<<<<<
 *                 v += (dotprod_(h[2],u[5]) - dotprod_(h[5],u[2]))**2
 * 
 */
    __pyx_v_v = (__pyx_v_v + pow((__pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[0]), (__pyx_v_u[3])) - __pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[3]), (__pyx_v_u[0]))), 2.0));

    /* "raypier/core/ctracer.pyx":1378
 *                 v += (dotprod_(h[1],u[4]) - dotprod_(h[4],u[1]))**2
 *                 v += (dotprod_(h[0],u[3]) - dotprod_(h[3],u[0]))**2
 *                 v += (dotprod_(h[2],u[5]) - dotprod_(h[5],u[2]))**2             # <<<<<<<<<<<<<<
 * 
 *                 _out[k] = 1000*sqrt(v/6)/ wavelen[r.wavelength_idx]
 */
    __pyx_v_v = (__pyx_v_v + pow((__pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[2]), (__pyx_v_u[5])) - __pyx_f_7raypier_4core_7ctracer_dotprod_((__pyx_v_h[5]), (__pyx_v_u[2]))), 2.0));

    /* "raypier/core/ctracer.pyx":1380
 *                 v += (dotprod_(h[2],u[5]) - dotprod_(h[5],u[2]))**2
 * 
 *                 _out[k] = 1000*sqrt(v/6)/ wavelen[r.wavelength_idx]             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_t_11 = __pyx_v_r.wavelength_idx;
    __pyx_t_12 = __pyx_v_k;
    *((double *) ( /* dim=0 */ (__pyx_v__out.data + __pyx_t_12 * __pyx_v__out.strides[0]) )) = ((1000.0 * sqrt((__pyx_v_v / 6.0))) / (*((double *) ( /* dim=0 */ (__pyx_v_wavelen.data + __pyx_t_11 * __pyx_v_wavelen.strides[0]) ))));
  }

  /* "raypier/core/ctracer.pyx":1381
 * 
 *                 _out[k] = 1000*sqrt(v/6)/ wavelen[r.wavelength_idx]
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     def project_to_plane(self, origin, direction):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1340
 * 
 *     property lagrange_invariant:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 int i,j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.lagrange_invariant.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __PYX_XDEC_MEMVIEW(&__pyx_v__out, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_wavelen, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1383
 *             return out
 * 
 *     def project_to_plane(self, origin, direction):             # <<<<<<<<<<<<<<
 *         """
 *         Project the rays in the collection onto the intersection with the given plane,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_31project_to_plane(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_30project_to_plane[] = "\n        Project the rays in the collection onto the intersection with the given plane,\n        defined by an origin point on the plane and the plane normal vector.\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_31project_to_plane(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_origin = 0;
  PyObject *__pyx_v_direction = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("project_to_plane (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_origin,&__pyx_n_s_direction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_origin)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("project_to_plane", 1, 2, 2, 1); __PYX_ERR(1, 1383, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "project_to_plane") < 0)) __PYX_ERR(1, 1383, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_origin = values[0];
    __pyx_v_direction = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("project_to_plane", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1383, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.project_to_plane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_30project_to_plane(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), __pyx_v_origin, __pyx_v_direction);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_30project_to_plane(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_direction) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_o;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  unsigned int __pyx_v_i;
  unsigned int __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *__pyx_v_gc;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_para;
  double __pyx_v_a;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  unsigned long __pyx_t_9;
  unsigned long __pyx_t_10;
  unsigned int __pyx_t_11;
  unsigned int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("project_to_plane", 0);

  /* "raypier/core/ctracer.pyx":1397
 *             #double complex[:] wl = self.wavelengths
 * 
 *         o.x, o.y, o.z = origin             # <<<<<<<<<<<<<<
 *         d.x, d.y, d.z = direction
 *         d = norm_(d)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_origin))) || (PyList_CheckExact(__pyx_v_origin))) {
    PyObject* sequence = __pyx_v_origin;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1397, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_origin); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(1, 1397, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1397, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_o.x = __pyx_t_6;
  __pyx_v_o.y = __pyx_t_7;
  __pyx_v_o.z = __pyx_t_8;

  /* "raypier/core/ctracer.pyx":1398
 * 
 *         o.x, o.y, o.z = origin
 *         d.x, d.y, d.z = direction             # <<<<<<<<<<<<<<
 *         d = norm_(d)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_direction))) || (PyList_CheckExact(__pyx_v_direction))) {
    PyObject* sequence = __pyx_v_direction;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1398, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_direction); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(1, 1398, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1398, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_d.x = __pyx_t_8;
  __pyx_v_d.y = __pyx_t_7;
  __pyx_v_d.z = __pyx_t_6;

  /* "raypier/core/ctracer.pyx":1399
 *         o.x, o.y, o.z = origin
 *         d.x, d.y, d.z = direction
 *         d = norm_(d)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_rays):
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_d);

  /* "raypier/core/ctracer.pyx":1401
 *         d = norm_(d)
 * 
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             gc = &(self.rays[i])
 *             ray = &(gc.base_ray)
 */
  __pyx_t_9 = __pyx_v_self->n_rays;
  __pyx_t_10 = __pyx_t_9;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "raypier/core/ctracer.pyx":1402
 * 
 *         for i in range(self.n_rays):
 *             gc = &(self.rays[i])             # <<<<<<<<<<<<<<
 *             ray = &(gc.base_ray)
 *             a = dotprod_(subvv_(o, ray.origin),d) / dotprod_(ray.direction, d)
 */
    __pyx_v_gc = (&(__pyx_v_self->rays[__pyx_v_i]));

    /* "raypier/core/ctracer.pyx":1403
 *         for i in range(self.n_rays):
 *             gc = &(self.rays[i])
 *             ray = &(gc.base_ray)             # <<<<<<<<<<<<<<
 *             a = dotprod_(subvv_(o, ray.origin),d) / dotprod_(ray.direction, d)
 *             ray.origin = addvv_(ray.origin, multvs_(ray.direction,a))
 */
    __pyx_v_ray = (&__pyx_v_gc->base_ray);

    /* "raypier/core/ctracer.pyx":1404
 *             gc = &(self.rays[i])
 *             ray = &(gc.base_ray)
 *             a = dotprod_(subvv_(o, ray.origin),d) / dotprod_(ray.direction, d)             # <<<<<<<<<<<<<<
 *             ray.origin = addvv_(ray.origin, multvs_(ray.direction,a))
 *             ray.accumulated_path += ray.refractive_index.real * a
 */
    __pyx_v_a = (__pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_o, __pyx_v_ray->origin), __pyx_v_d) / __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_ray->direction, __pyx_v_d));

    /* "raypier/core/ctracer.pyx":1405
 *             ray = &(gc.base_ray)
 *             a = dotprod_(subvv_(o, ray.origin),d) / dotprod_(ray.direction, d)
 *             ray.origin = addvv_(ray.origin, multvs_(ray.direction,a))             # <<<<<<<<<<<<<<
 *             ray.accumulated_path += ray.refractive_index.real * a
 *             ### Handle absorption along ray
 */
    __pyx_v_ray->origin = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_a));

    /* "raypier/core/ctracer.pyx":1406
 *             a = dotprod_(subvv_(o, ray.origin),d) / dotprod_(ray.direction, d)
 *             ray.origin = addvv_(ray.origin, multvs_(ray.direction,a))
 *             ray.accumulated_path += ray.refractive_index.real * a             # <<<<<<<<<<<<<<
 *             ### Handle absorption along ray
 *             ### Am ignoring this for now. FIXME
 */
    __pyx_v_ray->accumulated_path = (__pyx_v_ray->accumulated_path + (__Pyx_CREAL(__pyx_v_ray->refractive_index) * __pyx_v_a));

    /* "raypier/core/ctracer.pyx":1409
 *             ### Handle absorption along ray
 *             ### Am ignoring this for now. FIXME
 *             for j in range(6):             # <<<<<<<<<<<<<<
 *                 para = &(gc.para[j])
 *                 a = dotprod_(subvv_(o, para.origin),d) / dotprod_(para.direction, d)
 */
    for (__pyx_t_12 = 0; __pyx_t_12 < 6; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "raypier/core/ctracer.pyx":1410
 *             ### Am ignoring this for now. FIXME
 *             for j in range(6):
 *                 para = &(gc.para[j])             # <<<<<<<<<<<<<<
 *                 a = dotprod_(subvv_(o, para.origin),d) / dotprod_(para.direction, d)
 *                 para.origin = addvv_(para.origin, multvs_(para.direction,a))
 */
      __pyx_v_para = (&(__pyx_v_gc->para[__pyx_v_j]));

      /* "raypier/core/ctracer.pyx":1411
 *             for j in range(6):
 *                 para = &(gc.para[j])
 *                 a = dotprod_(subvv_(o, para.origin),d) / dotprod_(para.direction, d)             # <<<<<<<<<<<<<<
 *                 para.origin = addvv_(para.origin, multvs_(para.direction,a))
 * 
 */
      __pyx_v_a = (__pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_o, __pyx_v_para->origin), __pyx_v_d) / __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_para->direction, __pyx_v_d));

      /* "raypier/core/ctracer.pyx":1412
 *                 para = &(gc.para[j])
 *                 a = dotprod_(subvv_(o, para.origin),d) / dotprod_(para.direction, d)
 *                 para.origin = addvv_(para.origin, multvs_(para.direction,a))             # <<<<<<<<<<<<<<
 * 
 *     def scale_amplitude(self, double complex scale):
 */
      __pyx_v_para->origin = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_para->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_para->direction, __pyx_v_a));
    }
  }

  /* "raypier/core/ctracer.pyx":1383
 *             return out
 * 
 *     def project_to_plane(self, origin, direction):             # <<<<<<<<<<<<<<
 *         """
 *         Project the rays in the collection onto the intersection with the given plane,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.project_to_plane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1414
 *                 para.origin = addvv_(para.origin, multvs_(para.direction,a))
 * 
 *     def scale_amplitude(self, double complex scale):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned long i=self.n_rays
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_33scale_amplitude(PyObject *__pyx_v_self, PyObject *__pyx_arg_scale); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_33scale_amplitude(PyObject *__pyx_v_self, PyObject *__pyx_arg_scale) {
  __pyx_t_double_complex __pyx_v_scale;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scale_amplitude (wrapper)", 0);
  assert(__pyx_arg_scale); {
    __pyx_v_scale = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_arg_scale); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1414, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.scale_amplitude", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_32scale_amplitude(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), __pyx_v_scale);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_32scale_amplitude(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, __pyx_t_double_complex __pyx_v_scale) {
  unsigned long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  unsigned long __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  __Pyx_RefNannySetupContext("scale_amplitude", 0);

  /* "raypier/core/ctracer.pyx":1416
 *     def scale_amplitude(self, double complex scale):
 *         cdef:
 *             unsigned long i=self.n_rays             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self.n_rays):
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_v_i = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1418
 *             unsigned long i=self.n_rays
 * 
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             self.rays[i].base_ray.E1_amp *= scale
 *             self.rays[i].base_ray.E2_amp *= scale
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1419
 * 
 *         for i in range(self.n_rays):
 *             self.rays[i].base_ray.E1_amp *= scale             # <<<<<<<<<<<<<<
 *             self.rays[i].base_ray.E2_amp *= scale
 * 
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_self->rays[__pyx_t_4]).base_ray.E1_amp = __Pyx_c_prod_double((__pyx_v_self->rays[__pyx_t_4]).base_ray.E1_amp, __pyx_v_scale);

    /* "raypier/core/ctracer.pyx":1420
 *         for i in range(self.n_rays):
 *             self.rays[i].base_ray.E1_amp *= scale
 *             self.rays[i].base_ray.E2_amp *= scale             # <<<<<<<<<<<<<<
 * 
 *     def config_parabasal_rays(self, double[:] wavelength_list, double radius, double working_dist):
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_self->rays[__pyx_t_4]).base_ray.E2_amp = __Pyx_c_prod_double((__pyx_v_self->rays[__pyx_t_4]).base_ray.E2_amp, __pyx_v_scale);
  }

  /* "raypier/core/ctracer.pyx":1414
 *                 para.origin = addvv_(para.origin, multvs_(para.direction,a))
 * 
 *     def scale_amplitude(self, double complex scale):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned long i=self.n_rays
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1422
 *             self.rays[i].base_ray.E2_amp *= scale
 * 
 *     def config_parabasal_rays(self, double[:] wavelength_list, double radius, double working_dist):             # <<<<<<<<<<<<<<
 *         """
 *         Initialise the parabasal rays for a symmetric (i.e. circular) modes,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_35config_parabasal_rays(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_34config_parabasal_rays[] = "\n        Initialise the parabasal rays for a symmetric (i.e. circular) modes, \n        using the base_ray data for wavelength, and the given beam waist 1/e^2 radius.\n        'working_dist' indicates the distance from the base_ray origin to the centre \n        of the gaussian beam waist. Negative values imply a beam waist before the origin. \n        'radius' is given in mm.\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_35config_parabasal_rays(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_wavelength_list = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_v_radius;
  double __pyx_v_working_dist;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("config_parabasal_rays (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wavelength_list,&__pyx_n_s_radius,&__pyx_n_s_working_dist,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wavelength_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("config_parabasal_rays", 1, 3, 3, 1); __PYX_ERR(1, 1422, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_working_dist)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("config_parabasal_rays", 1, 3, 3, 2); __PYX_ERR(1, 1422, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "config_parabasal_rays") < 0)) __PYX_ERR(1, 1422, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_wavelength_list = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_wavelength_list.memview)) __PYX_ERR(1, 1422, __pyx_L3_error)
    __pyx_v_radius = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_radius == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1422, __pyx_L3_error)
    __pyx_v_working_dist = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_working_dist == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1422, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("config_parabasal_rays", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1422, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.config_parabasal_rays", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_34config_parabasal_rays(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), __pyx_v_wavelength_list, __pyx_v_radius, __pyx_v_working_dist);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_34config_parabasal_rays(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, __Pyx_memviewslice __pyx_v_wavelength_list, double __pyx_v_radius, double __pyx_v_working_dist) {
  int __pyx_v_i;
  int __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *__pyx_v_gc;
  double __pyx_v_theta0;
  double __pyx_v_angle;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_o;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_base_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_da;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_db;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  unsigned long __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_7;
  double __pyx_t_8;
  __Pyx_RefNannySetupContext("config_parabasal_rays", 0);

  /* "raypier/core/ctracer.pyx":1436
 *             vector_t o, d, d1, d2, base_d, da, db
 * 
 *         for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *             gc = self.rays+i
 *             base_d = norm_(gc.base_ray.direction)
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1437
 * 
 *         for i in range(self.n_rays):
 *             gc = self.rays+i             # <<<<<<<<<<<<<<
 *             base_d = norm_(gc.base_ray.direction)
 *             if base_d.x > base_d.y:
 */
    __pyx_v_gc = (__pyx_v_self->rays + __pyx_v_i);

    /* "raypier/core/ctracer.pyx":1438
 *         for i in range(self.n_rays):
 *             gc = self.rays+i
 *             base_d = norm_(gc.base_ray.direction)             # <<<<<<<<<<<<<<
 *             if base_d.x > base_d.y:
 *                 o.x=0.0
 */
    __pyx_v_base_d = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_gc->base_ray.direction);

    /* "raypier/core/ctracer.pyx":1439
 *             gc = self.rays+i
 *             base_d = norm_(gc.base_ray.direction)
 *             if base_d.x > base_d.y:             # <<<<<<<<<<<<<<
 *                 o.x=0.0
 *                 o.y=1.0
 */
    __pyx_t_4 = ((__pyx_v_base_d.x > __pyx_v_base_d.y) != 0);
    if (__pyx_t_4) {

      /* "raypier/core/ctracer.pyx":1440
 *             base_d = norm_(gc.base_ray.direction)
 *             if base_d.x > base_d.y:
 *                 o.x=0.0             # <<<<<<<<<<<<<<
 *                 o.y=1.0
 *                 o.z=0.0
 */
      __pyx_v_o.x = 0.0;

      /* "raypier/core/ctracer.pyx":1441
 *             if base_d.x > base_d.y:
 *                 o.x=0.0
 *                 o.y=1.0             # <<<<<<<<<<<<<<
 *                 o.z=0.0
 *             else:
 */
      __pyx_v_o.y = 1.0;

      /* "raypier/core/ctracer.pyx":1442
 *                 o.x=0.0
 *                 o.y=1.0
 *                 o.z=0.0             # <<<<<<<<<<<<<<
 *             else:
 *                 o.x=1.0
 */
      __pyx_v_o.z = 0.0;

      /* "raypier/core/ctracer.pyx":1439
 *             gc = self.rays+i
 *             base_d = norm_(gc.base_ray.direction)
 *             if base_d.x > base_d.y:             # <<<<<<<<<<<<<<
 *                 o.x=0.0
 *                 o.y=1.0
 */
      goto __pyx_L5;
    }

    /* "raypier/core/ctracer.pyx":1444
 *                 o.z=0.0
 *             else:
 *                 o.x=1.0             # <<<<<<<<<<<<<<
 *                 o.y=0.0
 *                 o.z=0.0
 */
    /*else*/ {
      __pyx_v_o.x = 1.0;

      /* "raypier/core/ctracer.pyx":1445
 *             else:
 *                 o.x=1.0
 *                 o.y=0.0             # <<<<<<<<<<<<<<
 *                 o.z=0.0
 *             d1 = norm_(cross_(base_d, o))
 */
      __pyx_v_o.y = 0.0;

      /* "raypier/core/ctracer.pyx":1446
 *                 o.x=1.0
 *                 o.y=0.0
 *                 o.z=0.0             # <<<<<<<<<<<<<<
 *             d1 = norm_(cross_(base_d, o))
 *             d2 = norm_(cross_(base_d, d1))
 */
      __pyx_v_o.z = 0.0;
    }
    __pyx_L5:;

    /* "raypier/core/ctracer.pyx":1447
 *                 o.y=0.0
 *                 o.z=0.0
 *             d1 = norm_(cross_(base_d, o))             # <<<<<<<<<<<<<<
 *             d2 = norm_(cross_(base_d, d1))
 *             ### Divergence of the gausslet
 */
    __pyx_v_d1 = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_base_d, __pyx_v_o));

    /* "raypier/core/ctracer.pyx":1448
 *                 o.z=0.0
 *             d1 = norm_(cross_(base_d, o))
 *             d2 = norm_(cross_(base_d, d1))             # <<<<<<<<<<<<<<
 *             ### Divergence of the gausslet
 *             theta0 = wavelength_list[gc.base_ray.wavelength_idx]/(M_PI*radius*1000.0)
 */
    __pyx_v_d2 = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_f_7raypier_4core_7ctracer_cross_(__pyx_v_base_d, __pyx_v_d1));

    /* "raypier/core/ctracer.pyx":1450
 *             d2 = norm_(cross_(base_d, d1))
 *             ### Divergence of the gausslet
 *             theta0 = wavelength_list[gc.base_ray.wavelength_idx]/(M_PI*radius*1000.0)             # <<<<<<<<<<<<<<
 * 
 *             for j in range(0,6,2):
 */
    __pyx_t_5 = __pyx_v_gc->base_ray.wavelength_idx;
    __pyx_v_theta0 = ((*((double *) ( /* dim=0 */ (__pyx_v_wavelength_list.data + __pyx_t_5 * __pyx_v_wavelength_list.strides[0]) ))) / ((M_PI * __pyx_v_radius) * 1000.0));

    /* "raypier/core/ctracer.pyx":1452
 *             theta0 = wavelength_list[gc.base_ray.wavelength_idx]/(M_PI*radius*1000.0)
 * 
 *             for j in range(0,6,2):             # <<<<<<<<<<<<<<
 *                 angle = (j*2*M_PI/6)# + i*(2*M_PI)/self.n_rays
 *                 o = addvv_(multvs_(d1, radius*cos(angle)),
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 6; __pyx_t_6+=2) {
      __pyx_v_j = __pyx_t_6;

      /* "raypier/core/ctracer.pyx":1453
 * 
 *             for j in range(0,6,2):
 *                 angle = (j*2*M_PI/6)# + i*(2*M_PI)/self.n_rays             # <<<<<<<<<<<<<<
 *                 o = addvv_(multvs_(d1, radius*cos(angle)),
 *                                 multvs_(d2, radius*sin(angle)))
 */
      __pyx_v_angle = (((__pyx_v_j * 2) * M_PI) / 6.0);

      /* "raypier/core/ctracer.pyx":1454
 *             for j in range(0,6,2):
 *                 angle = (j*2*M_PI/6)# + i*(2*M_PI)/self.n_rays
 *                 o = addvv_(multvs_(d1, radius*cos(angle)),             # <<<<<<<<<<<<<<
 *                                 multvs_(d2, radius*sin(angle)))
 *                 o = addvv_(o, gc.base_ray.origin)
 */
      __pyx_v_o = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d1, (__pyx_v_radius * cos(__pyx_v_angle))), __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d2, (__pyx_v_radius * sin(__pyx_v_angle))));

      /* "raypier/core/ctracer.pyx":1456
 *                 o = addvv_(multvs_(d1, radius*cos(angle)),
 *                                 multvs_(d2, radius*sin(angle)))
 *                 o = addvv_(o, gc.base_ray.origin)             # <<<<<<<<<<<<<<
 *                 o = addvv_(o, multvs_(base_d, working_dist))
 *                 ###direction of ray
 */
      __pyx_v_o = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_o, __pyx_v_gc->base_ray.origin);

      /* "raypier/core/ctracer.pyx":1457
 *                                 multvs_(d2, radius*sin(angle)))
 *                 o = addvv_(o, gc.base_ray.origin)
 *                 o = addvv_(o, multvs_(base_d, working_dist))             # <<<<<<<<<<<<<<
 *                 ###direction of ray
 *                 d = addvv_(multvs_(d1, -theta0*sin(angle)),
 */
      __pyx_v_o = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_o, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_base_d, __pyx_v_working_dist));

      /* "raypier/core/ctracer.pyx":1459
 *                 o = addvv_(o, multvs_(base_d, working_dist))
 *                 ###direction of ray
 *                 d = addvv_(multvs_(d1, -theta0*sin(angle)),             # <<<<<<<<<<<<<<
 *                             multvs_(d2, theta0*cos(angle)))
 *                 da = addvv_(base_d, d)
 */
      __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d1, ((-__pyx_v_theta0) * sin(__pyx_v_angle))), __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d2, (__pyx_v_theta0 * cos(__pyx_v_angle))));

      /* "raypier/core/ctracer.pyx":1461
 *                 d = addvv_(multvs_(d1, -theta0*sin(angle)),
 *                             multvs_(d2, theta0*cos(angle)))
 *                 da = addvv_(base_d, d)             # <<<<<<<<<<<<<<
 *                 db = subvv_(base_d, d)
 * 
 */
      __pyx_v_da = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_base_d, __pyx_v_d);

      /* "raypier/core/ctracer.pyx":1462
 *                             multvs_(d2, theta0*cos(angle)))
 *                 da = addvv_(base_d, d)
 *                 db = subvv_(base_d, d)             # <<<<<<<<<<<<<<
 * 
 *                 gc.para[j].direction = norm_(da)
 */
      __pyx_v_db = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_base_d, __pyx_v_d);

      /* "raypier/core/ctracer.pyx":1464
 *                 db = subvv_(base_d, d)
 * 
 *                 gc.para[j].direction = norm_(da)             # <<<<<<<<<<<<<<
 *                 gc.para[j].origin = subvv_(o, multvs_(da,working_dist))
 * 
 */
      (__pyx_v_gc->para[__pyx_v_j]).direction = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_da);

      /* "raypier/core/ctracer.pyx":1465
 * 
 *                 gc.para[j].direction = norm_(da)
 *                 gc.para[j].origin = subvv_(o, multvs_(da,working_dist))             # <<<<<<<<<<<<<<
 * 
 *                 gc.para[j+1].direction = norm_(db)
 */
      (__pyx_v_gc->para[__pyx_v_j]).origin = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_o, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_da, __pyx_v_working_dist));

      /* "raypier/core/ctracer.pyx":1467
 *                 gc.para[j].origin = subvv_(o, multvs_(da,working_dist))
 * 
 *                 gc.para[j+1].direction = norm_(db)             # <<<<<<<<<<<<<<
 *                 gc.para[j+1].origin = subvv_(o, multvs_(db,working_dist))
 * 
 */
      (__pyx_v_gc->para[(__pyx_v_j + 1)]).direction = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_db);

      /* "raypier/core/ctracer.pyx":1468
 * 
 *                 gc.para[j+1].direction = norm_(db)
 *                 gc.para[j+1].origin = subvv_(o, multvs_(db,working_dist))             # <<<<<<<<<<<<<<
 * 
 *                 gc.para[j].normal = gc.base_ray.normal
 */
      (__pyx_v_gc->para[(__pyx_v_j + 1)]).origin = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_o, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_db, __pyx_v_working_dist));

      /* "raypier/core/ctracer.pyx":1470
 *                 gc.para[j+1].origin = subvv_(o, multvs_(db,working_dist))
 * 
 *                 gc.para[j].normal = gc.base_ray.normal             # <<<<<<<<<<<<<<
 *                 gc.para[j+1].normal = gc.base_ray.normal
 *                 gc.para[j].length = gc.base_ray.length
 */
      __pyx_t_7 = __pyx_v_gc->base_ray.normal;
      (__pyx_v_gc->para[__pyx_v_j]).normal = __pyx_t_7;

      /* "raypier/core/ctracer.pyx":1471
 * 
 *                 gc.para[j].normal = gc.base_ray.normal
 *                 gc.para[j+1].normal = gc.base_ray.normal             # <<<<<<<<<<<<<<
 *                 gc.para[j].length = gc.base_ray.length
 *                 gc.para[j+1].length = gc.base_ray.length
 */
      __pyx_t_7 = __pyx_v_gc->base_ray.normal;
      (__pyx_v_gc->para[(__pyx_v_j + 1)]).normal = __pyx_t_7;

      /* "raypier/core/ctracer.pyx":1472
 *                 gc.para[j].normal = gc.base_ray.normal
 *                 gc.para[j+1].normal = gc.base_ray.normal
 *                 gc.para[j].length = gc.base_ray.length             # <<<<<<<<<<<<<<
 *                 gc.para[j+1].length = gc.base_ray.length
 * 
 */
      __pyx_t_8 = __pyx_v_gc->base_ray.length;
      (__pyx_v_gc->para[__pyx_v_j]).length = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":1473
 *                 gc.para[j+1].normal = gc.base_ray.normal
 *                 gc.para[j].length = gc.base_ray.length
 *                 gc.para[j+1].length = gc.base_ray.length             # <<<<<<<<<<<<<<
 * 
 *     property base_rays:
 */
      __pyx_t_8 = __pyx_v_gc->base_ray.length;
      (__pyx_v_gc->para[(__pyx_v_j + 1)]).length = __pyx_t_8;
    }
  }

  /* "raypier/core/ctracer.pyx":1422
 *             self.rays[i].base_ray.E2_amp *= scale
 * 
 *     def config_parabasal_rays(self, double[:] wavelength_list, double radius, double working_dist):             # <<<<<<<<<<<<<<
 *         """
 *         Initialise the parabasal rays for a symmetric (i.e. circular) modes,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __PYX_XDEC_MEMVIEW(&__pyx_v_wavelength_list, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1476
 * 
 *     property base_rays:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return GaussletBaseRayView(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_9base_rays_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_9base_rays_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_9base_rays___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_9base_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1477
 *     property base_rays:
 *         def __get__(self):
 *             return GaussletBaseRayView(self)             # <<<<<<<<<<<<<<
 * 
 *     property total_power:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletBaseRayView), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1476
 * 
 *     property base_rays:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return GaussletBaseRayView(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.base_rays.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1480
 * 
 *     property total_power:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long i
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11total_power_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11total_power_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11total_power___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11total_power___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  unsigned long __pyx_v_i;
  double __pyx_v_pwr;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  double __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned long __pyx_t_1;
  unsigned long __pyx_t_2;
  unsigned long __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1483
 *             cdef:
 *                 unsigned long i
 *                 double pwr=0.0             # <<<<<<<<<<<<<<
 *                 ray_t *ray
 *                 double n
 */
  __pyx_v_pwr = 0.0;

  /* "raypier/core/ctracer.pyx":1487
 *                 double n
 * 
 *             for i in range(self.n_rays):             # <<<<<<<<<<<<<<
 *                 ray = &(self.rays[i].base_ray)
 *                 n = ray.refractive_index.real
 */
  __pyx_t_1 = __pyx_v_self->n_rays;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1488
 * 
 *             for i in range(self.n_rays):
 *                 ray = &(self.rays[i].base_ray)             # <<<<<<<<<<<<<<
 *                 n = ray.refractive_index.real
 *                 pwr += (ray.E1_amp.real * ray.E1_amp.real)*n
 */
    __pyx_v_ray = (&(__pyx_v_self->rays[__pyx_v_i]).base_ray);

    /* "raypier/core/ctracer.pyx":1489
 *             for i in range(self.n_rays):
 *                 ray = &(self.rays[i].base_ray)
 *                 n = ray.refractive_index.real             # <<<<<<<<<<<<<<
 *                 pwr += (ray.E1_amp.real * ray.E1_amp.real)*n
 *                 pwr += (ray.E1_amp.imag * ray.E1_amp.imag)*n
 */
    __pyx_t_4 = __Pyx_CREAL(__pyx_v_ray->refractive_index);
    __pyx_v_n = __pyx_t_4;

    /* "raypier/core/ctracer.pyx":1490
 *                 ray = &(self.rays[i].base_ray)
 *                 n = ray.refractive_index.real
 *                 pwr += (ray.E1_amp.real * ray.E1_amp.real)*n             # <<<<<<<<<<<<<<
 *                 pwr += (ray.E1_amp.imag * ray.E1_amp.imag)*n
 *                 pwr += (ray.E2_amp.real * ray.E2_amp.real)*n
 */
    __pyx_v_pwr = (__pyx_v_pwr + ((__Pyx_CREAL(__pyx_v_ray->E1_amp) * __Pyx_CREAL(__pyx_v_ray->E1_amp)) * __pyx_v_n));

    /* "raypier/core/ctracer.pyx":1491
 *                 n = ray.refractive_index.real
 *                 pwr += (ray.E1_amp.real * ray.E1_amp.real)*n
 *                 pwr += (ray.E1_amp.imag * ray.E1_amp.imag)*n             # <<<<<<<<<<<<<<
 *                 pwr += (ray.E2_amp.real * ray.E2_amp.real)*n
 *                 pwr += (ray.E2_amp.imag * ray.E2_amp.imag)*n
 */
    __pyx_v_pwr = (__pyx_v_pwr + ((__Pyx_CIMAG(__pyx_v_ray->E1_amp) * __Pyx_CIMAG(__pyx_v_ray->E1_amp)) * __pyx_v_n));

    /* "raypier/core/ctracer.pyx":1492
 *                 pwr += (ray.E1_amp.real * ray.E1_amp.real)*n
 *                 pwr += (ray.E1_amp.imag * ray.E1_amp.imag)*n
 *                 pwr += (ray.E2_amp.real * ray.E2_amp.real)*n             # <<<<<<<<<<<<<<
 *                 pwr += (ray.E2_amp.imag * ray.E2_amp.imag)*n
 *             return pwr
 */
    __pyx_v_pwr = (__pyx_v_pwr + ((__Pyx_CREAL(__pyx_v_ray->E2_amp) * __Pyx_CREAL(__pyx_v_ray->E2_amp)) * __pyx_v_n));

    /* "raypier/core/ctracer.pyx":1493
 *                 pwr += (ray.E1_amp.imag * ray.E1_amp.imag)*n
 *                 pwr += (ray.E2_amp.real * ray.E2_amp.real)*n
 *                 pwr += (ray.E2_amp.imag * ray.E2_amp.imag)*n             # <<<<<<<<<<<<<<
 *             return pwr
 * 
 */
    __pyx_v_pwr = (__pyx_v_pwr + ((__Pyx_CIMAG(__pyx_v_ray->E2_amp) * __Pyx_CIMAG(__pyx_v_ray->E2_amp)) * __pyx_v_n));
  }

  /* "raypier/core/ctracer.pyx":1494
 *                 pwr += (ray.E2_amp.real * ray.E2_amp.real)*n
 *                 pwr += (ray.E2_amp.imag * ray.E2_amp.imag)*n
 *             return pwr             # <<<<<<<<<<<<<<
 * 
 *     property wavelengths:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pwr); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1480
 * 
 *     property total_power:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 unsigned long i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.total_power.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1497
 * 
 *     property wavelengths:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.asarray(self._wavelengths)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1498
 *     property wavelengths:
 *         def __get__(self):
 *             return np.asarray(self._wavelengths)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, wl_list):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_v_self->_wavelengths.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1498, __pyx_L1_error)}
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_self->_wavelengths, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1497
 * 
 *     property wavelengths:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.asarray(self._wavelengths)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.wavelengths.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1500
 *             return np.asarray(self._wavelengths)
 * 
 *         def __set__(self, wl_list):             # <<<<<<<<<<<<<<
 *             self._wavelengths = np.asarray(wl_list, dtype=np.double)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_wl_list); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_wl_list) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((PyObject *)__pyx_v_wl_list));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, PyObject *__pyx_v_wl_list) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1501
 * 
 *         def __set__(self, wl_list):
 *             self._wavelengths = np.asarray(wl_list, dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     property para_origin:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_wl_list);
  __Pyx_GIVEREF(__pyx_v_wl_list);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_wl_list);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(1, 1501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_wavelengths, 0);
  __pyx_v_self->_wavelengths = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "raypier/core/ctracer.pyx":1500
 *             return np.asarray(self._wavelengths)
 * 
 *         def __set__(self, wl_list):             # <<<<<<<<<<<<<<
 *             self._wavelengths = np.asarray(wl_list, dtype=np.double)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.wavelengths.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1504
 * 
 *     property para_origin:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11para_origin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11para_origin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11para_origin___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11para_origin___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1506
 *         def __get__(self):
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i, j
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_6);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 1506, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1506, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":1509
 *                 size_t i, j
 *                 vector_t v
 *             for i in xrange(self.n_rays):             # <<<<<<<<<<<<<<
 *                 for j in xrange(6):
 *                     v = self.rays[i].para[j].origin
 */
  __pyx_t_5 = __pyx_v_self->n_rays;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":1510
 *                 vector_t v
 *             for i in xrange(self.n_rays):
 *                 for j in xrange(6):             # <<<<<<<<<<<<<<
 *                     v = self.rays[i].para[j].origin
 *                     out[i,j,0] = v.x
 */
    for (__pyx_t_8 = 0; __pyx_t_8 < 6; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":1511
 *             for i in xrange(self.n_rays):
 *                 for j in xrange(6):
 *                     v = self.rays[i].para[j].origin             # <<<<<<<<<<<<<<
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y
 */
      __pyx_t_9 = ((__pyx_v_self->rays[__pyx_v_i]).para[__pyx_v_j]).origin;
      __pyx_v_v = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1512
 *                 for j in xrange(6):
 *                     v = self.rays[i].para[j].origin
 *                     out[i,j,0] = v.x             # <<<<<<<<<<<<<<
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
      __pyx_t_3 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_2, __pyx_t_4) < 0)) __PYX_ERR(1, 1512, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "raypier/core/ctracer.pyx":1513
 *                     v = self.rays[i].para[j].origin
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y             # <<<<<<<<<<<<<<
 *                     out[i,j,2] = v.z
 *             return out
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1513, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1513, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1513, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1513, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 1513, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "raypier/core/ctracer.pyx":1514
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_2);
      __pyx_t_3 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_2, __pyx_t_4) < 0)) __PYX_ERR(1, 1514, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }

  /* "raypier/core/ctracer.pyx":1515
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property para_direction:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1504
 * 
 *     property para_origin:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.para_origin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1518
 * 
 *     property para_direction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_14para_direction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_14para_direction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_14para_direction___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_14para_direction___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1520
 *         def __get__(self):
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i, j
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_6);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 1520, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1520, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":1523
 *                 size_t i, j
 *                 vector_t v
 *             for i in xrange(self.n_rays):             # <<<<<<<<<<<<<<
 *                 for j in range(6):
 *                     v = self.rays[i].para[j].direction
 */
  __pyx_t_5 = __pyx_v_self->n_rays;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":1524
 *                 vector_t v
 *             for i in xrange(self.n_rays):
 *                 for j in range(6):             # <<<<<<<<<<<<<<
 *                     v = self.rays[i].para[j].direction
 *                     out[i,j,0] = v.x
 */
    for (__pyx_t_8 = 0; __pyx_t_8 < 6; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":1525
 *             for i in xrange(self.n_rays):
 *                 for j in range(6):
 *                     v = self.rays[i].para[j].direction             # <<<<<<<<<<<<<<
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y
 */
      __pyx_t_9 = ((__pyx_v_self->rays[__pyx_v_i]).para[__pyx_v_j]).direction;
      __pyx_v_v = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1526
 *                 for j in range(6):
 *                     v = self.rays[i].para[j].direction
 *                     out[i,j,0] = v.x             # <<<<<<<<<<<<<<
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
      __pyx_t_3 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_2, __pyx_t_4) < 0)) __PYX_ERR(1, 1526, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "raypier/core/ctracer.pyx":1527
 *                     v = self.rays[i].para[j].direction
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y             # <<<<<<<<<<<<<<
 *                     out[i,j,2] = v.z
 *             return out
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 1527, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "raypier/core/ctracer.pyx":1528
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1528, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1528, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1528, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1528, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_2);
      __pyx_t_3 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_2, __pyx_t_4) < 0)) __PYX_ERR(1, 1528, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }

  /* "raypier/core/ctracer.pyx":1529
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property para_normal:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1518
 * 
 *     property para_direction:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.para_direction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1532
 * 
 *     property para_normal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11para_normal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11para_normal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11para_normal___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_11para_normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyArrayObject *__pyx_v_out = 0;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1534
 *         def __get__(self):
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 size_t i, j
 *                 vector_t v
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_6);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 1534, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1534, __pyx_L1_error)
  __pyx_v_out = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":1537
 *                 size_t i, j
 *                 vector_t v
 *             for i in xrange(self.n_rays):             # <<<<<<<<<<<<<<
 *                 for j in range(6):
 *                     v = self.rays[i].para[j].normal
 */
  __pyx_t_5 = __pyx_v_self->n_rays;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "raypier/core/ctracer.pyx":1538
 *                 vector_t v
 *             for i in xrange(self.n_rays):
 *                 for j in range(6):             # <<<<<<<<<<<<<<
 *                     v = self.rays[i].para[j].normal
 *                     out[i,j,0] = v.x
 */
    for (__pyx_t_8 = 0; __pyx_t_8 < 6; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":1539
 *             for i in xrange(self.n_rays):
 *                 for j in range(6):
 *                     v = self.rays[i].para[j].normal             # <<<<<<<<<<<<<<
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y
 */
      __pyx_t_9 = ((__pyx_v_self->rays[__pyx_v_i]).para[__pyx_v_j]).normal;
      __pyx_v_v = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1540
 *                 for j in range(6):
 *                     v = self.rays[i].para[j].normal
 *                     out[i,j,0] = v.x             # <<<<<<<<<<<<<<
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1540, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
      __pyx_t_3 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_2, __pyx_t_4) < 0)) __PYX_ERR(1, 1540, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "raypier/core/ctracer.pyx":1541
 *                     v = self.rays[i].para[j].normal
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y             # <<<<<<<<<<<<<<
 *                     out[i,j,2] = v.z
 *             return out
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.y); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_GIVEREF(__pyx_int_1);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_3, __pyx_t_4) < 0)) __PYX_ERR(1, 1541, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "raypier/core/ctracer.pyx":1542
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_v.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_int_2);
      __pyx_t_3 = 0;
      __pyx_t_1 = 0;
      if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_out), __pyx_t_2, __pyx_t_4) < 0)) __PYX_ERR(1, 1542, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }

  /* "raypier/core/ctracer.pyx":1543
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 *             return out             # <<<<<<<<<<<<<<
 * 
 *     property para_termination:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1532
 * 
 *     property para_normal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray out = np.empty((self.n_rays,6,3), dtype='d')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.para_normal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1546
 * 
 *     property para_termination:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray aout = np.empty((self.n_rays,6,3), dtype='d')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_16para_termination_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_16para_termination_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_16para_termination___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_16para_termination___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyArrayObject *__pyx_v_aout = 0;
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  unsigned long __pyx_t_6;
  unsigned long __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  double __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1548
 *         def __get__(self):
 *             cdef:
 *                 np_.ndarray aout = np.empty((self.n_rays,6,3), dtype='d')             # <<<<<<<<<<<<<<
 *                 double [:,:,:] out = aout
 *                 size_t i,j
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_6);
  __Pyx_GIVEREF(__pyx_int_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_6);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_3);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d_2) < 0) __PYX_ERR(1, 1548, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1548, __pyx_L1_error)
  __pyx_v_aout = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":1549
 *             cdef:
 *                 np_.ndarray aout = np.empty((self.n_rays,6,3), dtype='d')
 *                 double [:,:,:] out = aout             # <<<<<<<<<<<<<<
 *                 size_t i,j
 *                 vector_t v
 */
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(((PyObject *)__pyx_v_aout), PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(1, 1549, __pyx_L1_error)
  __pyx_v_out = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "raypier/core/ctracer.pyx":1553
 *                 vector_t v
 *                 para_t *p
 *             for i in xrange(self.n_rays):             # <<<<<<<<<<<<<<
 *                 for j in range(1,7):
 *                     p = self.rays[i].para + j
 */
  __pyx_t_6 = __pyx_v_self->n_rays;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":1554
 *                 para_t *p
 *             for i in xrange(self.n_rays):
 *                 for j in range(1,7):             # <<<<<<<<<<<<<<
 *                     p = self.rays[i].para + j
 *                     v = addvv_(p.origin,
 */
    for (__pyx_t_9 = 1; __pyx_t_9 < 7; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1555
 *             for i in xrange(self.n_rays):
 *                 for j in range(1,7):
 *                     p = self.rays[i].para + j             # <<<<<<<<<<<<<<
 *                     v = addvv_(p.origin,
 *                            multvs_(p.direction,
 */
      __pyx_v_p = ((__pyx_v_self->rays[__pyx_v_i]).para + __pyx_v_j);

      /* "raypier/core/ctracer.pyx":1556
 *                 for j in range(1,7):
 *                     p = self.rays[i].para + j
 *                     v = addvv_(p.origin,             # <<<<<<<<<<<<<<
 *                            multvs_(p.direction,
 *                                     p.length))
 */
      __pyx_v_v = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_p->direction, __pyx_v_p->length));

      /* "raypier/core/ctracer.pyx":1559
 *                            multvs_(p.direction,
 *                                     p.length))
 *                     out[i,j,0] = v.x             # <<<<<<<<<<<<<<
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 */
      __pyx_t_10 = __pyx_v_v.x;
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_12 = __pyx_v_j;
      __pyx_t_13 = 0;
      if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_out.shape[2];
      *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_out.data + __pyx_t_11 * __pyx_v_out.strides[0]) ) + __pyx_t_12 * __pyx_v_out.strides[1]) ) + __pyx_t_13 * __pyx_v_out.strides[2]) )) = __pyx_t_10;

      /* "raypier/core/ctracer.pyx":1560
 *                                     p.length))
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y             # <<<<<<<<<<<<<<
 *                     out[i,j,2] = v.z
 *             return aout
 */
      __pyx_t_10 = __pyx_v_v.y;
      __pyx_t_12 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      __pyx_t_13 = 1;
      if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_out.shape[2];
      *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_out.data + __pyx_t_12 * __pyx_v_out.strides[0]) ) + __pyx_t_11 * __pyx_v_out.strides[1]) ) + __pyx_t_13 * __pyx_v_out.strides[2]) )) = __pyx_t_10;

      /* "raypier/core/ctracer.pyx":1561
 *                     out[i,j,0] = v.x
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z             # <<<<<<<<<<<<<<
 *             return aout
 * 
 */
      __pyx_t_10 = __pyx_v_v.z;
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_12 = __pyx_v_j;
      __pyx_t_13 = 2;
      if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_v_out.shape[2];
      *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_out.data + __pyx_t_11 * __pyx_v_out.strides[0]) ) + __pyx_t_12 * __pyx_v_out.strides[1]) ) + __pyx_t_13 * __pyx_v_out.strides[2]) )) = __pyx_t_10;
    }
  }

  /* "raypier/core/ctracer.pyx":1562
 *                     out[i,j,1] = v.y
 *                     out[i,j,2] = v.z
 *             return aout             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_aout));
  __pyx_r = ((PyObject *)__pyx_v_aout);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1546
 * 
 *     property para_termination:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef:
 *                 np_.ndarray aout = np.empty((self.n_rays,6,3), dtype='d')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.para_termination.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_aout);
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":153
 *     cdef:
 *         gausslet_t *rays
 *         readonly unsigned long n_rays, max_size             # <<<<<<<<<<<<<<
 *         GaussletCollection _parent
 *         double[:] _wavelengths
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6n_rays_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6n_rays_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6n_rays___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_6n_rays___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.n_rays.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_8max_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_8max_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_8max_size___get__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_8max_size___get__(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_self->max_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.max_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_37__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_36__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_36__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_39__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_38__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_18GaussletCollection_38__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.GaussletCollection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1570
 *     """
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.wavelengths = np.array([], dtype=np.double)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":1571
 * 
 *     def __cinit__(self):
 *         self.wavelengths = np.array([], dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     cdef void eval_child_ray_c(self, ray_t *old_ray,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wavelengths, __pyx_t_5) < 0) __PYX_ERR(1, 1571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":1570
 *     """
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.wavelengths = np.array([], dtype=np.double)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1573
 *         self.wavelengths = np.array([], dtype=np.double)
 * 
 *     cdef void eval_child_ray_c(self, ray_t *old_ray,             # <<<<<<<<<<<<<<
 *                                 unsigned int ray_idx,
 *                                 vector_t p,
 */

static void __pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_child_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_old_ray, CYTHON_UNUSED unsigned int __pyx_v_ray_idx, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient, CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_new_rays) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_child_ray_c", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1580
 *         pass
 * 
 *     cdef para_t eval_parabasal_ray_c(self, ray_t *base_ray,             # <<<<<<<<<<<<<<
 *                                      vector_t direction, #incoming ray direction
 *                                    vector_t point, #position of intercept
 */

static struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_parabasal_ray_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_base_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_direction, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point, struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient, unsigned int __pyx_v_ray_type_id) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_cosThetaNormal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_reflected;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_v_para_out;
  double __pyx_v_cosTheta;
  struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("eval_parabasal_ray_c", 0);

  /* "raypier/core/ctracer.pyx":1591
 *             double cosTheta
 * 
 *         normal = norm_(orient.normal)             # <<<<<<<<<<<<<<
 *         if ray_type_id & REFL_RAY:
 *             cosTheta = dotprod_(normal, direction)
 */
  __pyx_v_normal = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_orient.normal);

  /* "raypier/core/ctracer.pyx":1592
 * 
 *         normal = norm_(orient.normal)
 *         if ray_type_id & REFL_RAY:             # <<<<<<<<<<<<<<
 *             cosTheta = dotprod_(normal, direction)
 *             cosThetaNormal = multvs_(normal, cosTheta)
 */
  __pyx_t_1 = ((__pyx_v_ray_type_id & REFL_RAY) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/ctracer.pyx":1593
 *         normal = norm_(orient.normal)
 *         if ray_type_id & REFL_RAY:
 *             cosTheta = dotprod_(normal, direction)             # <<<<<<<<<<<<<<
 *             cosThetaNormal = multvs_(normal, cosTheta)
 *             reflected = subvv_(direction, multvs_(cosThetaNormal, 2))
 */
    __pyx_v_cosTheta = __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_normal, __pyx_v_direction);

    /* "raypier/core/ctracer.pyx":1594
 *         if ray_type_id & REFL_RAY:
 *             cosTheta = dotprod_(normal, direction)
 *             cosThetaNormal = multvs_(normal, cosTheta)             # <<<<<<<<<<<<<<
 *             reflected = subvv_(direction, multvs_(cosThetaNormal, 2))
 *             para_out.direction = reflected
 */
    __pyx_v_cosThetaNormal = __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_normal, __pyx_v_cosTheta);

    /* "raypier/core/ctracer.pyx":1595
 *             cosTheta = dotprod_(normal, direction)
 *             cosThetaNormal = multvs_(normal, cosTheta)
 *             reflected = subvv_(direction, multvs_(cosThetaNormal, 2))             # <<<<<<<<<<<<<<
 *             para_out.direction = reflected
 *         else:
 */
    __pyx_v_reflected = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_direction, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_cosThetaNormal, 2.0));

    /* "raypier/core/ctracer.pyx":1596
 *             cosThetaNormal = multvs_(normal, cosTheta)
 *             reflected = subvv_(direction, multvs_(cosThetaNormal, 2))
 *             para_out.direction = reflected             # <<<<<<<<<<<<<<
 *         else:
 *             para_out.direction = direction
 */
    __pyx_v_para_out.direction = __pyx_v_reflected;

    /* "raypier/core/ctracer.pyx":1592
 * 
 *         normal = norm_(orient.normal)
 *         if ray_type_id & REFL_RAY:             # <<<<<<<<<<<<<<
 *             cosTheta = dotprod_(normal, direction)
 *             cosThetaNormal = multvs_(normal, cosTheta)
 */
    goto __pyx_L3;
  }

  /* "raypier/core/ctracer.pyx":1598
 *             para_out.direction = reflected
 *         else:
 *             para_out.direction = direction             # <<<<<<<<<<<<<<
 *         para_out.origin = point
 *         para_out.normal = normal
 */
  /*else*/ {
    __pyx_v_para_out.direction = __pyx_v_direction;
  }
  __pyx_L3:;

  /* "raypier/core/ctracer.pyx":1599
 *         else:
 *             para_out.direction = direction
 *         para_out.origin = point             # <<<<<<<<<<<<<<
 *         para_out.normal = normal
 *         para_out.length = INF
 */
  __pyx_v_para_out.origin = __pyx_v_point;

  /* "raypier/core/ctracer.pyx":1600
 *             para_out.direction = direction
 *         para_out.origin = point
 *         para_out.normal = normal             # <<<<<<<<<<<<<<
 *         para_out.length = INF
 *         return para_out
 */
  __pyx_v_para_out.normal = __pyx_v_normal;

  /* "raypier/core/ctracer.pyx":1601
 *         para_out.origin = point
 *         para_out.normal = normal
 *         para_out.length = INF             # <<<<<<<<<<<<<<
 *         return para_out
 * 
 */
  __pyx_v_para_out.length = __pyx_v_7raypier_4core_7ctracer_INF;

  /* "raypier/core/ctracer.pyx":1602
 *         para_out.normal = normal
 *         para_out.length = INF
 *         return para_out             # <<<<<<<<<<<<<<
 * 
 *     def is_decomp_material(self):
 */
  __pyx_r = __pyx_v_para_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1580
 *         pass
 * 
 *     cdef para_t eval_parabasal_ray_c(self, ray_t *base_ray,             # <<<<<<<<<<<<<<
 *                                      vector_t direction, #incoming ray direction
 *                                    vector_t point, #position of intercept
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1604
 *         return para_out
 * 
 *     def is_decomp_material(self):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_3is_decomp_material(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_3is_decomp_material(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_decomp_material (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_2is_decomp_material(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_2is_decomp_material(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_decomp_material", 0);

  /* "raypier/core/ctracer.pyx":1605
 * 
 *     def is_decomp_material(self):
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     cdef void eval_decomposed_rays_c(self, GaussletCollection child_rays):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1604
 *         return para_out
 * 
 *     def is_decomp_material(self):             # <<<<<<<<<<<<<<
 *         return False
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1607
 *         return False
 * 
 *     cdef void eval_decomposed_rays_c(self, GaussletCollection child_rays):             # <<<<<<<<<<<<<<
 *         ### This function is called at the end of tracing to comput additional rays
 *         ### due to mode decomposition.
 */

static void __pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_decomposed_rays_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_child_rays) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_decomposed_rays_c", 0);

  /* "raypier/core/ctracer.pyx":1610
 *         ### This function is called at the end of tracing to comput additional rays
 *         ### due to mode decomposition.
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def eval_child_ray(self, Ray old_ray, ray_idx, point,
 */
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1607
 *         return False
 * 
 *     cdef void eval_decomposed_rays_c(self, GaussletCollection child_rays):             # <<<<<<<<<<<<<<
 *         ### This function is called at the end of tracing to comput additional rays
 *         ### due to mode decomposition.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":1612
 *         return
 * 
 *     def eval_child_ray(self, Ray old_ray, ray_idx, point,             # <<<<<<<<<<<<<<
 *                         normal, tangent, RayCollection new_rays):
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_5eval_child_ray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_5eval_child_ray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_old_ray = 0;
  PyObject *__pyx_v_ray_idx = 0;
  PyObject *__pyx_v_point = 0;
  PyObject *__pyx_v_normal = 0;
  PyObject *__pyx_v_tangent = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_new_rays = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_child_ray (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_old_ray,&__pyx_n_s_ray_idx,&__pyx_n_s_point,&__pyx_n_s_normal,&__pyx_n_s_tangent,&__pyx_n_s_new_rays,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_old_ray)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ray_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_child_ray", 1, 6, 6, 1); __PYX_ERR(1, 1612, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_point)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_child_ray", 1, 6, 6, 2); __PYX_ERR(1, 1612, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_child_ray", 1, 6, 6, 3); __PYX_ERR(1, 1612, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tangent)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_child_ray", 1, 6, 6, 4); __PYX_ERR(1, 1612, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_new_rays)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_child_ray", 1, 6, 6, 5); __PYX_ERR(1, 1612, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eval_child_ray") < 0)) __PYX_ERR(1, 1612, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_old_ray = ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)values[0]);
    __pyx_v_ray_idx = values[1];
    __pyx_v_point = values[2];
    __pyx_v_normal = values[3];
    __pyx_v_tangent = values[4];
    __pyx_v_new_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eval_child_ray", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1612, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.eval_child_ray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_old_ray), __pyx_ptype_7raypier_4core_7ctracer_Ray, 1, "old_ray", 0))) __PYX_ERR(1, 1612, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_new_rays), __pyx_ptype_7raypier_4core_7ctracer_RayCollection, 1, "new_rays", 0))) __PYX_ERR(1, 1613, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_4eval_child_ray(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self), __pyx_v_old_ray, __pyx_v_ray_idx, __pyx_v_point, __pyx_v_normal, __pyx_v_tangent, __pyx_v_new_rays);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_4eval_child_ray(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_old_ray, PyObject *__pyx_v_ray_idx, PyObject *__pyx_v_point, PyObject *__pyx_v_normal, PyObject *__pyx_v_tangent, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_new_rays) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_n;
  CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_out = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eval_child_ray", 0);

  /* "raypier/core/ctracer.pyx":1617
 *             vector_t p
 *             orientation_t n
 *             Ray out=Ray()             # <<<<<<<<<<<<<<
 *             unsigned int idx
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Ray)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1620
 *             unsigned int idx
 * 
 *         p = set_v(point)             # <<<<<<<<<<<<<<
 *         n.normal = set_v(normal)
 *         n.tangent = set_v(tangent)
 */
  __pyx_v_p = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_point);

  /* "raypier/core/ctracer.pyx":1621
 * 
 *         p = set_v(point)
 *         n.normal = set_v(normal)             # <<<<<<<<<<<<<<
 *         n.tangent = set_v(tangent)
 *         self.eval_child_ray_c(&old_ray.ray, ray_idx,
 */
  __pyx_v_n.normal = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_normal);

  /* "raypier/core/ctracer.pyx":1622
 *         p = set_v(point)
 *         n.normal = set_v(normal)
 *         n.tangent = set_v(tangent)             # <<<<<<<<<<<<<<
 *         self.eval_child_ray_c(&old_ray.ray, ray_idx,
 *                                         p, n, new_rays)
 */
  __pyx_v_n.tangent = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_tangent);

  /* "raypier/core/ctracer.pyx":1623
 *         n.normal = set_v(normal)
 *         n.tangent = set_v(tangent)
 *         self.eval_child_ray_c(&old_ray.ray, ray_idx,             # <<<<<<<<<<<<<<
 *                                         p, n, new_rays)
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_ray_idx); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1623, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":1624
 *         n.tangent = set_v(tangent)
 *         self.eval_child_ray_c(&old_ray.ray, ray_idx,
 *                                         p, n, new_rays)             # <<<<<<<<<<<<<<
 * 
 *     def eval_parabasal_ray(self, Ray base_ray, direction, point, normal, tangent, reflect=False):
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self->__pyx_vtab)->eval_child_ray_c(__pyx_v_self, (&__pyx_v_old_ray->ray), __pyx_t_2, __pyx_v_p, __pyx_v_n, __pyx_v_new_rays);

  /* "raypier/core/ctracer.pyx":1612
 *         return
 * 
 *     def eval_child_ray(self, Ray old_ray, ray_idx, point,             # <<<<<<<<<<<<<<
 *                         normal, tangent, RayCollection new_rays):
 *         cdef:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.eval_child_ray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1626
 *                                         p, n, new_rays)
 * 
 *     def eval_parabasal_ray(self, Ray base_ray, direction, point, normal, tangent, reflect=False):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t d=set_v(direction), p = set_v(point)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_7eval_parabasal_ray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_7eval_parabasal_ray(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_base_ray = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_point = 0;
  PyObject *__pyx_v_normal = 0;
  PyObject *__pyx_v_tangent = 0;
  PyObject *__pyx_v_reflect = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_parabasal_ray (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base_ray,&__pyx_n_s_direction,&__pyx_n_s_point,&__pyx_n_s_normal,&__pyx_n_s_tangent,&__pyx_n_s_reflect,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_base_ray)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_parabasal_ray", 0, 5, 6, 1); __PYX_ERR(1, 1626, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_point)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_parabasal_ray", 0, 5, 6, 2); __PYX_ERR(1, 1626, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_parabasal_ray", 0, 5, 6, 3); __PYX_ERR(1, 1626, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tangent)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_parabasal_ray", 0, 5, 6, 4); __PYX_ERR(1, 1626, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reflect);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eval_parabasal_ray") < 0)) __PYX_ERR(1, 1626, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_base_ray = ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)values[0]);
    __pyx_v_direction = values[1];
    __pyx_v_point = values[2];
    __pyx_v_normal = values[3];
    __pyx_v_tangent = values[4];
    __pyx_v_reflect = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eval_parabasal_ray", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1626, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.eval_parabasal_ray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_base_ray), __pyx_ptype_7raypier_4core_7ctracer_Ray, 1, "base_ray", 0))) __PYX_ERR(1, 1626, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_6eval_parabasal_ray(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self), __pyx_v_base_ray, __pyx_v_direction, __pyx_v_point, __pyx_v_normal, __pyx_v_tangent, __pyx_v_reflect);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_6eval_parabasal_ray(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_base_ray, PyObject *__pyx_v_direction, PyObject *__pyx_v_point, PyObject *__pyx_v_normal, PyObject *__pyx_v_tangent, PyObject *__pyx_v_reflect) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_n;
  struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_out = 0;
  unsigned int __pyx_v_ray_type;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eval_parabasal_ray", 0);

  /* "raypier/core/ctracer.pyx":1628
 *     def eval_parabasal_ray(self, Ray base_ray, direction, point, normal, tangent, reflect=False):
 *         cdef:
 *             vector_t d=set_v(direction), p = set_v(point)             # <<<<<<<<<<<<<<
 *             orientation_t n
 *             ParabasalRay out = ParabasalRay()
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_direction);
  __pyx_v_p = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_point);

  /* "raypier/core/ctracer.pyx":1630
 *             vector_t d=set_v(direction), p = set_v(point)
 *             orientation_t n
 *             ParabasalRay out = ParabasalRay()             # <<<<<<<<<<<<<<
 *             unsigned int ray_type=1 if reflect else 0
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_ParabasalRay)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out = ((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1631
 *             orientation_t n
 *             ParabasalRay out = ParabasalRay()
 *             unsigned int ray_type=1 if reflect else 0             # <<<<<<<<<<<<<<
 * 
 *         n.normal = set_v(normal)
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_reflect); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(1, 1631, __pyx_L1_error)
  if (__pyx_t_3) {
    __pyx_t_2 = 1;
  } else {
    __pyx_t_2 = 0;
  }
  __pyx_v_ray_type = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":1633
 *             unsigned int ray_type=1 if reflect else 0
 * 
 *         n.normal = set_v(normal)             # <<<<<<<<<<<<<<
 *         n.tangent = set_v(tangent)
 *         out.ray = self.eval_parabasal_ray_c(&base_ray.ray, d, p, n, ray_type)
 */
  __pyx_v_n.normal = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_normal);

  /* "raypier/core/ctracer.pyx":1634
 * 
 *         n.normal = set_v(normal)
 *         n.tangent = set_v(tangent)             # <<<<<<<<<<<<<<
 *         out.ray = self.eval_parabasal_ray_c(&base_ray.ray, d, p, n, ray_type)
 *         return out
 */
  __pyx_v_n.tangent = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_tangent);

  /* "raypier/core/ctracer.pyx":1635
 *         n.normal = set_v(normal)
 *         n.tangent = set_v(tangent)
 *         out.ray = self.eval_parabasal_ray_c(&base_ray.ray, d, p, n, ray_type)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out->ray = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self->__pyx_vtab)->eval_parabasal_ray_c(__pyx_v_self, (&__pyx_v_base_ray->ray), __pyx_v_d, __pyx_v_p, __pyx_v_n, __pyx_v_ray_type);

  /* "raypier/core/ctracer.pyx":1636
 *         n.tangent = set_v(tangent)
 *         out.ray = self.eval_parabasal_ray_c(&base_ray.ray, d, p, n, ray_type)
 *         return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_out));
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1626
 *                                         p, n, new_rays)
 * 
 *     def eval_parabasal_ray(self, Ray base_ray, direction, point, normal, tangent, reflect=False):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t d=set_v(direction), p = set_v(point)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.eval_parabasal_ray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1640
 * 
 *     property wavelengths:
 *         def __set__(self, double[:] wavelengths):             # <<<<<<<<<<<<<<
 *             self._wavelengths = wavelengths
 *             self.on_set_wavelengths()
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_wavelengths); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_wavelengths) {
  __Pyx_memviewslice __pyx_v_wavelengths = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_wavelengths); {
    __pyx_v_wavelengths = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_arg_wavelengths, PyBUF_WRITABLE); if (unlikely(!__pyx_v_wavelengths.memview)) __PYX_ERR(1, 1640, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.wavelengths.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths___set__(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self), __pyx_v_wavelengths);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths___set__(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, __Pyx_memviewslice __pyx_v_wavelengths) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1641
 *     property wavelengths:
 *         def __set__(self, double[:] wavelengths):
 *             self._wavelengths = wavelengths             # <<<<<<<<<<<<<<
 *             self.on_set_wavelengths()
 * 
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_wavelengths, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_wavelengths, 0);
  __pyx_v_self->_wavelengths = __pyx_v_wavelengths;

  /* "raypier/core/ctracer.pyx":1642
 *         def __set__(self, double[:] wavelengths):
 *             self._wavelengths = wavelengths
 *             self.on_set_wavelengths()             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self->__pyx_vtab)->on_set_wavelengths(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1640
 * 
 *     property wavelengths:
 *         def __set__(self, double[:] wavelengths):             # <<<<<<<<<<<<<<
 *             self._wavelengths = wavelengths
 *             self.on_set_wavelengths()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.wavelengths.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_wavelengths, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1644
 *             self.on_set_wavelengths()
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._wavelengths
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_2__get__(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1645
 * 
 *         def __get__(self):
 *             return self._wavelengths             # <<<<<<<<<<<<<<
 * 
 *     cdef on_set_wavelengths(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->_wavelengths.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(1, 1645, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->_wavelengths, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1644
 *             self.on_set_wavelengths()
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._wavelengths
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.wavelengths.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1647
 *             return self._wavelengths
 * 
 *     cdef on_set_wavelengths(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_on_set_wavelengths(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("on_set_wavelengths", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_8__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_10__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_17InterfaceMaterial_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.InterfaceMaterial.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1652
 * 
 * cdef class Shape:
 *     cdef bint point_inside_c(self, double x, double y):             # <<<<<<<<<<<<<<
 *         return 1
 * 
 */

static int __pyx_f_7raypier_4core_7ctracer_5Shape_point_inside_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("point_inside_c", 0);

  /* "raypier/core/ctracer.pyx":1653
 * cdef class Shape:
 *     cdef bint point_inside_c(self, double x, double y):
 *         return 1             # <<<<<<<<<<<<<<
 * 
 *     def point_inside(self, double x, double y):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1652
 * 
 * cdef class Shape:
 *     cdef bint point_inside_c(self, double x, double y):             # <<<<<<<<<<<<<<
 *         return 1
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1655
 *         return 1
 * 
 *     def point_inside(self, double x, double y):             # <<<<<<<<<<<<<<
 *         return self.point_inside_c(x,y)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5Shape_1point_inside(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5Shape_1point_inside(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("point_inside (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("point_inside", 1, 2, 2, 1); __PYX_ERR(1, 1655, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "point_inside") < 0)) __PYX_ERR(1, 1655, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1655, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1655, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("point_inside", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1655, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Shape.point_inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_5Shape_point_inside(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_5Shape_point_inside(struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("point_inside", 0);

  /* "raypier/core/ctracer.pyx":1656
 * 
 *     def point_inside(self, double x, double y):
 *         return self.point_inside_c(x,y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_vtab)->point_inside_c(__pyx_v_self, __pyx_v_x, __pyx_v_y)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1655
 *         return 1
 * 
 *     def point_inside(self, double x, double y):             # <<<<<<<<<<<<<<
 *         return self.point_inside_c(x,y)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Shape.point_inside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5Shape_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5Shape_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_5Shape_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_5Shape_2__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Shape__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Shape.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Shape__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5Shape_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_5Shape_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_5Shape_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_5Shape_4__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Shape__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Shape__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Shape, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Shape__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Shape.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1662
 *     """Positions 'outside' the surface evaluate > 0.0
 *     """
 *     cdef double evaluate_c(self, vector_t p) nogil:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

static double __pyx_f_7raypier_4core_7ctracer_15ImplicitSurface_evaluate_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p) {
  double __pyx_r;

  /* "raypier/core/ctracer.pyx":1663
 *     """
 *     cdef double evaluate_c(self, vector_t p) nogil:
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, double x, double y, double z):
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1662
 *     """Positions 'outside' the surface evaluate > 0.0
 *     """
 *     cdef double evaluate_c(self, vector_t p) nogil:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1665
 *         return 0.0
 * 
 *     def evaluate(self, double x, double y, double z):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_1evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_1evaluate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate", 1, 3, 3, 1); __PYX_ERR(1, 1665, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate", 1, 3, 3, 2); __PYX_ERR(1, 1665, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate") < 0)) __PYX_ERR(1, 1665, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1665, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1665, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1665, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1665, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.ImplicitSurface.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_evaluate(((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_evaluate(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "raypier/core/ctracer.pyx":1668
 *         cdef:
 *             vector_t p
 *         p.x=x             # <<<<<<<<<<<<<<
 *         p.y=y
 *         p.z=z
 */
  __pyx_v_p.x = __pyx_v_x;

  /* "raypier/core/ctracer.pyx":1669
 *             vector_t p
 *         p.x=x
 *         p.y=y             # <<<<<<<<<<<<<<
 *         p.z=z
 *         return self.evaluate_c(p)
 */
  __pyx_v_p.y = __pyx_v_y;

  /* "raypier/core/ctracer.pyx":1670
 *         p.x=x
 *         p.y=y
 *         p.z=z             # <<<<<<<<<<<<<<
 *         return self.evaluate_c(p)
 * 
 */
  __pyx_v_p.z = __pyx_v_z;

  /* "raypier/core/ctracer.pyx":1671
 *         p.y=y
 *         p.z=z
 *         return self.evaluate_c(p)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_v_self->__pyx_vtab)->evaluate_c(__pyx_v_self, __pyx_v_p)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1665
 *         return 0.0
 * 
 *     def evaluate(self, double x, double y, double z):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ImplicitSurface.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_2__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_ImplicitSurface); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImplicitSurface__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_ImplicitSurface); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.ImplicitSurface.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImplicitSurface__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_15ImplicitSurface_4__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImplicitSurface__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_ImplicitSurface__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImplicitSurface, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImplicitSurface__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.ImplicitSurface.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1678
 *     as a function of (x,y).
 *     """
 *     cdef vector_t z_offset_and_gradient_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         """The z-axis surface sag is returned as the z-component
 *         of the output vector. The x- and y-components of the surface
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_10Distortion_z_offset_and_gradient_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;

  /* "raypier/core/ctracer.pyx":1687
 *         cdef:
 *             vector_t p
 *         p.x=0.0             # <<<<<<<<<<<<<<
 *         p.y=0.0
 *         p.z=0.0
 */
  __pyx_v_p.x = 0.0;

  /* "raypier/core/ctracer.pyx":1688
 *             vector_t p
 *         p.x=0.0
 *         p.y=0.0             # <<<<<<<<<<<<<<
 *         p.z=0.0
 *         return p
 */
  __pyx_v_p.y = 0.0;

  /* "raypier/core/ctracer.pyx":1689
 *         p.x=0.0
 *         p.y=0.0
 *         p.z=0.0             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
  __pyx_v_p.z = 0.0;

  /* "raypier/core/ctracer.pyx":1690
 *         p.y=0.0
 *         p.z=0.0
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     cdef double z_offset_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1678
 *     as a function of (x,y).
 *     """
 *     cdef vector_t z_offset_and_gradient_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         """The z-axis surface sag is returned as the z-component
 *         of the output vector. The x- and y-components of the surface
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1692
 *         return p
 * 
 *     cdef double z_offset_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

static double __pyx_f_7raypier_4core_7ctracer_10Distortion_z_offset_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y) {
  double __pyx_r;

  /* "raypier/core/ctracer.pyx":1693
 * 
 *     cdef double z_offset_c(self, double x, double y) nogil:
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     def z_offset_and_gradient(self, double[:] x, double[:] y):
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1692
 *         return p
 * 
 *     cdef double z_offset_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1695
 *         return 0.0
 * 
 *     def z_offset_and_gradient(self, double[:] x, double[:] y):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t v
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_1z_offset_and_gradient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_1z_offset_and_gradient(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_x = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("z_offset_and_gradient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("z_offset_and_gradient", 1, 2, 2, 1); __PYX_ERR(1, 1695, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "z_offset_and_gradient") < 0)) __PYX_ERR(1, 1695, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_x.memview)) __PYX_ERR(1, 1695, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_y.memview)) __PYX_ERR(1, 1695, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("z_offset_and_gradient", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1695, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Distortion.z_offset_and_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_10Distortion_z_offset_and_gradient(((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_z_offset_and_gradient(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  size_t __pyx_v_i;
  size_t __pyx_v_n;
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  double __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("z_offset_and_gradient", 0);

  /* "raypier/core/ctracer.pyx":1698
 *         cdef:
 *             vector_t v
 *             size_t i, n=len(x)             # <<<<<<<<<<<<<<
 *             double[:,:] out = np.empty((n, 3), 'd')
 * 
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_x); 
  __pyx_v_n = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1699
 *             vector_t v
 *             size_t i, n=len(x)
 *             double[:,:] out = np.empty((n, 3), 'd')             # <<<<<<<<<<<<<<
 * 
 *         if len(y) != n:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_n_u_d_2};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1699, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_n_u_d_2};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1699, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_5);
    __Pyx_INCREF(__pyx_n_u_d_2);
    __Pyx_GIVEREF(__pyx_n_u_d_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_u_d_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "raypier/core/ctracer.pyx":1701
 *             double[:,:] out = np.empty((n, 3), 'd')
 * 
 *         if len(y) != n:             # <<<<<<<<<<<<<<
 *             raise ValueError("Both x and y must have the same length")
 * 
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_y); 
  __pyx_t_9 = ((__pyx_t_1 != __pyx_v_n) != 0);
  if (unlikely(__pyx_t_9)) {

    /* "raypier/core/ctracer.pyx":1702
 * 
 *         if len(y) != n:
 *             raise ValueError("Both x and y must have the same length")             # <<<<<<<<<<<<<<
 * 
 *         for i in range(n):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1702, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":1701
 *             double[:,:] out = np.empty((n, 3), 'd')
 * 
 *         if len(y) != n:             # <<<<<<<<<<<<<<
 *             raise ValueError("Both x and y must have the same length")
 * 
 */
  }

  /* "raypier/core/ctracer.pyx":1704
 *             raise ValueError("Both x and y must have the same length")
 * 
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             v = self.z_offset_and_gradient_c(x[i],y[i])
 *             out[i,0] = v.x
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_10 = __pyx_t_1;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "raypier/core/ctracer.pyx":1705
 * 
 *         for i in range(n):
 *             v = self.z_offset_and_gradient_c(x[i],y[i])             # <<<<<<<<<<<<<<
 *             out[i,0] = v.x
 *             out[i,1] = v.y
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = __pyx_v_i;
    __pyx_v_v = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *)__pyx_v_self->__pyx_vtab)->z_offset_and_gradient_c(__pyx_v_self, (*((double *) ( /* dim=0 */ (__pyx_v_x.data + __pyx_t_12 * __pyx_v_x.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_y.data + __pyx_t_13 * __pyx_v_y.strides[0]) ))));

    /* "raypier/core/ctracer.pyx":1706
 *         for i in range(n):
 *             v = self.z_offset_and_gradient_c(x[i],y[i])
 *             out[i,0] = v.x             # <<<<<<<<<<<<<<
 *             out[i,1] = v.y
 *             out[i,2] = v.z
 */
    __pyx_t_14 = __pyx_v_v.x;
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_15 = 0;
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_out.shape[1];
    *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_out.data + __pyx_t_13 * __pyx_v_out.strides[0]) ) + __pyx_t_15 * __pyx_v_out.strides[1]) )) = __pyx_t_14;

    /* "raypier/core/ctracer.pyx":1707
 *             v = self.z_offset_and_gradient_c(x[i],y[i])
 *             out[i,0] = v.x
 *             out[i,1] = v.y             # <<<<<<<<<<<<<<
 *             out[i,2] = v.z
 *         return np.asarray(out)
 */
    __pyx_t_14 = __pyx_v_v.y;
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_15 = 1;
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_out.shape[1];
    *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_out.data + __pyx_t_13 * __pyx_v_out.strides[0]) ) + __pyx_t_15 * __pyx_v_out.strides[1]) )) = __pyx_t_14;

    /* "raypier/core/ctracer.pyx":1708
 *             out[i,0] = v.x
 *             out[i,1] = v.y
 *             out[i,2] = v.z             # <<<<<<<<<<<<<<
 *         return np.asarray(out)
 * 
 */
    __pyx_t_14 = __pyx_v_v.z;
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_15 = 2;
    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_v_out.shape[1];
    *((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_out.data + __pyx_t_13 * __pyx_v_out.strides[0]) ) + __pyx_t_15 * __pyx_v_out.strides[1]) )) = __pyx_t_14;
  }

  /* "raypier/core/ctracer.pyx":1709
 *             out[i,1] = v.y
 *             out[i,2] = v.z
 *         return np.asarray(out)             # <<<<<<<<<<<<<<
 * 
 *     def z_offset(self, double[:] x, double[:] y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_out, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1695
 *         return 0.0
 * 
 *     def z_offset_and_gradient(self, double[:] x, double[:] y):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t v
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.Distortion.z_offset_and_gradient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_x, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1711
 *         return np.asarray(out)
 * 
 *     def z_offset(self, double[:] x, double[:] y):             # <<<<<<<<<<<<<<
 *         cdef:
 *             size_t i, n=len(x)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_3z_offset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_3z_offset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_x = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("z_offset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("z_offset", 1, 2, 2, 1); __PYX_ERR(1, 1711, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "z_offset") < 0)) __PYX_ERR(1, 1711, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_x.memview)) __PYX_ERR(1, 1711, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_y.memview)) __PYX_ERR(1, 1711, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("z_offset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1711, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Distortion.z_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_10Distortion_2z_offset(((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_2z_offset(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y) {
  size_t __pyx_v_i;
  size_t __pyx_v_n;
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  size_t __pyx_t_10;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  size_t __pyx_t_13;
  size_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("z_offset", 0);

  /* "raypier/core/ctracer.pyx":1713
 *     def z_offset(self, double[:] x, double[:] y):
 *         cdef:
 *             size_t i, n=len(x)             # <<<<<<<<<<<<<<
 *             double[:] out = np.empty((n,), 'd')
 * 
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_x); 
  __pyx_v_n = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1714
 *         cdef:
 *             size_t i, n=len(x)
 *             double[:] out = np.empty((n,), 'd')             # <<<<<<<<<<<<<<
 * 
 *         if len(y) != n:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_n_u_d_2};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_n_u_d_2};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_5);
    __Pyx_INCREF(__pyx_n_u_d_2);
    __Pyx_GIVEREF(__pyx_n_u_d_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_n_u_d_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_out = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "raypier/core/ctracer.pyx":1716
 *             double[:] out = np.empty((n,), 'd')
 * 
 *         if len(y) != n:             # <<<<<<<<<<<<<<
 *             raise ValueError("Both x and y must have the same length")
 * 
 */
  __pyx_t_1 = __Pyx_MemoryView_Len(__pyx_v_y); 
  __pyx_t_9 = ((__pyx_t_1 != __pyx_v_n) != 0);
  if (unlikely(__pyx_t_9)) {

    /* "raypier/core/ctracer.pyx":1717
 * 
 *         if len(y) != n:
 *             raise ValueError("Both x and y must have the same length")             # <<<<<<<<<<<<<<
 * 
 *         for i in range(n):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1717, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":1716
 *             double[:] out = np.empty((n,), 'd')
 * 
 *         if len(y) != n:             # <<<<<<<<<<<<<<
 *             raise ValueError("Both x and y must have the same length")
 * 
 */
  }

  /* "raypier/core/ctracer.pyx":1719
 *             raise ValueError("Both x and y must have the same length")
 * 
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             out[i] = self.z_offset_c(x[i],y[i])
 *         return np.asarray(out)
 */
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_10 = __pyx_t_1;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "raypier/core/ctracer.pyx":1720
 * 
 *         for i in range(n):
 *             out[i] = self.z_offset_c(x[i],y[i])             # <<<<<<<<<<<<<<
 *         return np.asarray(out)
 * 
 */
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_14 = __pyx_v_i;
    *((double *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_14 * __pyx_v_out.strides[0]) )) = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *)__pyx_v_self->__pyx_vtab)->z_offset_c(__pyx_v_self, (*((double *) ( /* dim=0 */ (__pyx_v_x.data + __pyx_t_12 * __pyx_v_x.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_y.data + __pyx_t_13 * __pyx_v_y.strides[0]) ))));
  }

  /* "raypier/core/ctracer.pyx":1721
 *         for i in range(n):
 *             out[i] = self.z_offset_c(x[i],y[i])
 *         return np.asarray(out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_out, 1, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1711
 *         return np.asarray(out)
 * 
 *     def z_offset(self, double[:] x, double[:] y):             # <<<<<<<<<<<<<<
 *         cdef:
 *             size_t i, n=len(x)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XDEC_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.Distortion.z_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_x, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_10Distortion_4__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_4__reduce_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Distortion); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Distortion__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Distortion); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Distortion.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Distortion__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_10Distortion_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_10Distortion_6__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_10Distortion_6__setstate_cython__(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Distortion__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Distortion__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Distortion, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Distortion__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Distortion.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1728
 *     params = []
 * 
 *     def __cinit__(self, owner=None, tolerance=0.0001,             # <<<<<<<<<<<<<<
 *                         max_length=100, material=None, **kwds):
 *         self.name = "base Face class"
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_owner = 0;
  PyObject *__pyx_v_tolerance = 0;
  PyObject *__pyx_v_max_length = 0;
  PyObject *__pyx_v_material = 0;
  PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,&__pyx_n_s_tolerance,&__pyx_n_s_max_length,&__pyx_n_s_material,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_float_0_0001);
    values[2] = ((PyObject *)__pyx_int_100);

    /* "raypier/core/ctracer.pyx":1729
 * 
 *     def __cinit__(self, owner=None, tolerance=0.0001,
 *                         max_length=100, material=None, **kwds):             # <<<<<<<<<<<<<<
 *         self.name = "base Face class"
 *         self.tolerance = tolerance
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_owner);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tolerance);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_length);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_material);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1728, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_owner = values[0];
    __pyx_v_tolerance = values[1];
    __pyx_v_max_length = values[2];
    __pyx_v_material = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1728, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), __pyx_v_owner, __pyx_v_tolerance, __pyx_v_max_length, __pyx_v_material, __pyx_v_kwds);

  /* "raypier/core/ctracer.pyx":1728
 *     params = []
 * 
 *     def __cinit__(self, owner=None, tolerance=0.0001,             # <<<<<<<<<<<<<<
 *                         max_length=100, material=None, **kwds):
 *         self.name = "base Face class"
 */

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_owner, PyObject *__pyx_v_tolerance, PyObject *__pyx_v_max_length, PyObject *__pyx_v_material, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_PECMaterial = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  short __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":1730
 *     def __cinit__(self, owner=None, tolerance=0.0001,
 *                         max_length=100, material=None, **kwds):
 *         self.name = "base Face class"             # <<<<<<<<<<<<<<
 *         self.tolerance = tolerance
 *         self.owner = owner
 */
  __pyx_v_self->name = ((char *)"base Face class");

  /* "raypier/core/ctracer.pyx":1731
 *                         max_length=100, material=None, **kwds):
 *         self.name = "base Face class"
 *         self.tolerance = tolerance             # <<<<<<<<<<<<<<
 *         self.owner = owner
 *         self.max_length = max_length
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1731, __pyx_L1_error)
  __pyx_v_self->tolerance = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1732
 *         self.name = "base Face class"
 *         self.tolerance = tolerance
 *         self.owner = owner             # <<<<<<<<<<<<<<
 *         self.max_length = max_length
 *         if isinstance(material, InterfaceMaterial):
 */
  __Pyx_INCREF(__pyx_v_owner);
  __Pyx_GIVEREF(__pyx_v_owner);
  __Pyx_GOTREF(__pyx_v_self->owner);
  __Pyx_DECREF(__pyx_v_self->owner);
  __pyx_v_self->owner = __pyx_v_owner;

  /* "raypier/core/ctracer.pyx":1733
 *         self.tolerance = tolerance
 *         self.owner = owner
 *         self.max_length = max_length             # <<<<<<<<<<<<<<
 *         if isinstance(material, InterfaceMaterial):
 *             self.material = material
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_max_length); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1733, __pyx_L1_error)
  __pyx_v_self->max_length = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1734
 *         self.owner = owner
 *         self.max_length = max_length
 *         if isinstance(material, InterfaceMaterial):             # <<<<<<<<<<<<<<
 *             self.material = material
 *         else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_material, __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "raypier/core/ctracer.pyx":1735
 *         self.max_length = max_length
 *         if isinstance(material, InterfaceMaterial):
 *             self.material = material             # <<<<<<<<<<<<<<
 *         else:
 *             from .cmaterials import PECMaterial
 */
    if (!(likely(((__pyx_v_material) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_material, __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial))))) __PYX_ERR(1, 1735, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_material;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_v_self->material);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->material));
    __pyx_v_self->material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":1734
 *         self.owner = owner
 *         self.max_length = max_length
 *         if isinstance(material, InterfaceMaterial):             # <<<<<<<<<<<<<<
 *             self.material = material
 *         else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/ctracer.pyx":1737
 *             self.material = material
 *         else:
 *             from .cmaterials import PECMaterial             # <<<<<<<<<<<<<<
 *             self.material = PECMaterial()
 *         self.invert_normal = int(kwds.get('invert_normal', 0))
 */
  /*else*/ {
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_n_s_PECMaterial);
    __Pyx_GIVEREF(__pyx_n_s_PECMaterial);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_PECMaterial);
    __pyx_t_5 = __Pyx_Import(__pyx_n_s_cmaterials, __pyx_t_4, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_PECMaterial); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_PECMaterial = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":1738
 *         else:
 *             from .cmaterials import PECMaterial
 *             self.material = PECMaterial()             # <<<<<<<<<<<<<<
 *         self.invert_normal = int(kwds.get('invert_normal', 0))
 * 
 */
    __Pyx_INCREF(__pyx_v_PECMaterial);
    __pyx_t_4 = __pyx_v_PECMaterial; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial))))) __PYX_ERR(1, 1738, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->material);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->material));
    __pyx_v_self->material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "raypier/core/ctracer.pyx":1739
 *             from .cmaterials import PECMaterial
 *             self.material = PECMaterial()
 *         self.invert_normal = int(kwds.get('invert_normal', 0))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_invert_normal, __pyx_int_0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_short(__pyx_t_4); if (unlikely((__pyx_t_7 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 1739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_self->invert_normal = __pyx_t_7;

  /* "raypier/core/ctracer.pyx":1728
 *     params = []
 * 
 *     def __cinit__(self, owner=None, tolerance=0.0001,             # <<<<<<<<<<<<<<
 *                         max_length=100, material=None, **kwds):
 *         self.name = "base Face class"
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_PECMaterial);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1742
 * 
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """returns the distance of the nearest valid intersection between
 *         p1 and p2. p1 and p2 are in the local coordinate system
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_7ctracer_4Face_intersect_c(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, CYTHON_UNUSED int __pyx_v_is_base_ray) {
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/ctracer.pyx":1748
 *         cdef:
 *             intersect_t out
 *         out.dist = 0.0             # <<<<<<<<<<<<<<
 *         out.face_idx = self.idx
 *         out.piece_idx = 0
 */
  __pyx_v_out.dist = 0.0;

  /* "raypier/core/ctracer.pyx":1749
 *             intersect_t out
 *         out.dist = 0.0
 *         out.face_idx = self.idx             # <<<<<<<<<<<<<<
 *         out.piece_idx = 0
 *         return out
 */
  __pyx_t_1 = __pyx_v_self->idx;
  __pyx_v_out.face_idx = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1750
 *         out.dist = 0.0
 *         out.face_idx = self.idx
 *         out.piece_idx = 0             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.piece_idx = 0;

  /* "raypier/core/ctracer.pyx":1751
 *         out.face_idx = self.idx
 *         out.piece_idx = 0
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def update(self):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1742
 * 
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """returns the distance of the nearest valid intersection between
 *         p1 and p2. p1 and p2 are in the local coordinate system
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1753
 *         return out
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         """Called to update the parameters from the owner
 *         to the Face
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_3update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_4Face_2update[] = "Called to update the parameters from the owner\n        to the Face\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_3update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_2update(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_2update(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "raypier/core/ctracer.pyx":1757
 *         to the Face
 *         """
 *         for name in self.params:             # <<<<<<<<<<<<<<
 *             v = getattr(self.owner, name)
 *             setattr(self, name, v)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1757, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1757, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1757, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1757, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1757, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1757, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "raypier/core/ctracer.pyx":1758
 *         """
 *         for name in self.params:
 *             v = getattr(self.owner, name)             # <<<<<<<<<<<<<<
 *             setattr(self, name, v)
 * 
 */
    __pyx_t_1 = __pyx_v_self->owner;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "raypier/core/ctracer.pyx":1759
 *         for name in self.params:
 *             v = getattr(self.owner, name)
 *             setattr(self, name, v)             # <<<<<<<<<<<<<<
 * 
 *     def intersect(self, p1, p2, int is_base_ray):
 */
    __pyx_t_6 = PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_v_name, __pyx_v_v); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1759, __pyx_L1_error)

    /* "raypier/core/ctracer.pyx":1757
 *         to the Face
 *         """
 *         for name in self.params:             # <<<<<<<<<<<<<<
 *             v = getattr(self.owner, name)
 *             setattr(self, name, v)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1753
 *         return out
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         """Called to update the parameters from the owner
 *         to the Face
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1761
 *             setattr(self, name, v)
 * 
 *     def intersect(self, p1, p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p1_, p2_
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_5intersect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_5intersect(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p1 = 0;
  PyObject *__pyx_v_p2 = 0;
  int __pyx_v_is_base_ray;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p1,&__pyx_n_s_p2,&__pyx_n_s_is_base_ray,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 3, 3, 1); __PYX_ERR(1, 1761, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_base_ray)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect", 1, 3, 3, 2); __PYX_ERR(1, 1761, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect") < 0)) __PYX_ERR(1, 1761, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_p1 = values[0];
    __pyx_v_p2 = values[1];
    __pyx_v_is_base_ray = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_is_base_ray == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1761, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1761, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_4intersect(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), __pyx_v_p1, __pyx_v_p2, __pyx_v_is_base_ray);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_4intersect(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_p1, PyObject *__pyx_v_p2, int __pyx_v_is_base_ray) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2_;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "raypier/core/ctracer.pyx":1766
 *             intersect_t it
 * 
 *         p1_ = set_v(p1)             # <<<<<<<<<<<<<<
 *         p2_ = set_v(p2)
 *         it = self.intersect_c(p1_, p2_, is_base_ray)
 */
  __pyx_v_p1_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_p1);

  /* "raypier/core/ctracer.pyx":1767
 * 
 *         p1_ = set_v(p1)
 *         p2_ = set_v(p2)             # <<<<<<<<<<<<<<
 *         it = self.intersect_c(p1_, p2_, is_base_ray)
 *         return it.dist
 */
  __pyx_v_p2_ = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_p2);

  /* "raypier/core/ctracer.pyx":1768
 *         p1_ = set_v(p1)
 *         p2_ = set_v(p2)
 *         it = self.intersect_c(p1_, p2_, is_base_ray)             # <<<<<<<<<<<<<<
 *         return it.dist
 * 
 */
  __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_self->__pyx_vtab)->intersect_c(__pyx_v_self, __pyx_v_p1_, __pyx_v_p2_, __pyx_v_is_base_ray);

  /* "raypier/core/ctracer.pyx":1769
 *         p2_ = set_v(p2)
 *         it = self.intersect_c(p1_, p2_, is_base_ray)
 *         return it.dist             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_it.dist); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1761
 *             setattr(self, name, v)
 * 
 *     def intersect(self, p1, p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p1_, p2_
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1771
 *         return it.dist
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         return p
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_4Face_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/ctracer.pyx":1772
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_tangent_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1771
 *         return it.dist
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         return p
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1774
 *         return p
 * 
 *     cdef vector_t compute_tangent_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef vector_t tangent
 *         tangent.x = 1.0
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_7ctracer_4Face_compute_tangent_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_tangent;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_tangent_c", 0);

  /* "raypier/core/ctracer.pyx":1776
 *     cdef vector_t compute_tangent_c(self, vector_t p, int piece):
 *         cdef vector_t tangent
 *         tangent.x = 1.0             # <<<<<<<<<<<<<<
 *         tangent.y = 0.0
 *         tangent.z = 0.0
 */
  __pyx_v_tangent.x = 1.0;

  /* "raypier/core/ctracer.pyx":1777
 *         cdef vector_t tangent
 *         tangent.x = 1.0
 *         tangent.y = 0.0             # <<<<<<<<<<<<<<
 *         tangent.z = 0.0
 *         return tangent
 */
  __pyx_v_tangent.y = 0.0;

  /* "raypier/core/ctracer.pyx":1778
 *         tangent.x = 1.0
 *         tangent.y = 0.0
 *         tangent.z = 0.0             # <<<<<<<<<<<<<<
 *         return tangent
 * 
 */
  __pyx_v_tangent.z = 0.0;

  /* "raypier/core/ctracer.pyx":1779
 *         tangent.y = 0.0
 *         tangent.z = 0.0
 *         return tangent             # <<<<<<<<<<<<<<
 * 
 *     def compute_normal(self, p):
 */
  __pyx_r = __pyx_v_tangent;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1774
 *         return p
 * 
 *     cdef vector_t compute_tangent_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef vector_t tangent
 *         tangent.x = 1.0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1781
 *         return tangent
 * 
 *     def compute_normal(self, p):             # <<<<<<<<<<<<<<
 *         """Compute normal vector at a given point, in local
 *         face coordinates
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_7compute_normal(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_4Face_6compute_normal[] = "Compute normal vector at a given point, in local\n        face coordinates\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_7compute_normal(PyObject *__pyx_v_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_6compute_normal(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_p));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_6compute_normal(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_p) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_normal", 0);

  /* "raypier/core/ctracer.pyx":1786
 *         """
 *         cdef vector_t p_, n
 *         p_.x, p_.y, p_.z = p             # <<<<<<<<<<<<<<
 *         n = self.compute_normal_c(p_, 0)
 *         return (n.x, n.y, n.z)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_p))) || (PyList_CheckExact(__pyx_v_p))) {
    PyObject* sequence = __pyx_v_p;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1786, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(1, 1786, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1786, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_p_.x = __pyx_t_6;
  __pyx_v_p_.y = __pyx_t_7;
  __pyx_v_p_.z = __pyx_t_8;

  /* "raypier/core/ctracer.pyx":1787
 *         cdef vector_t p_, n
 *         p_.x, p_.y, p_.z = p
 *         n = self.compute_normal_c(p_, 0)             # <<<<<<<<<<<<<<
 *         return (n.x, n.y, n.z)
 * 
 */
  __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_self->__pyx_vtab)->compute_normal_c(__pyx_v_self, __pyx_v_p_, 0);

  /* "raypier/core/ctracer.pyx":1788
 *         p_.x, p_.y, p_.z = p
 *         n = self.compute_normal_c(p_, 0)
 *         return (n.x, n.y, n.z)             # <<<<<<<<<<<<<<
 * 
 *     def compute_tangent(self, p):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_n.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_n.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_n.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1781
 *         return tangent
 * 
 *     def compute_normal(self, p):             # <<<<<<<<<<<<<<
 *         """Compute normal vector at a given point, in local
 *         face coordinates
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.compute_normal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1790
 *         return (n.x, n.y, n.z)
 * 
 *     def compute_tangent(self, p):             # <<<<<<<<<<<<<<
 *         """Compute the surface tangent at a given point,
 *         in face-local coordinates"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_9compute_tangent(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_4Face_8compute_tangent[] = "Compute the surface tangent at a given point,\n        in face-local coordinates";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_9compute_tangent(PyObject *__pyx_v_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_tangent (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_8compute_tangent(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_p));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_8compute_tangent(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_p) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p_;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_tangent;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_tangent", 0);

  /* "raypier/core/ctracer.pyx":1795
 *         cdef vector_t tanget, p_
 * 
 *         p_.x, p_.y, p_.z = p             # <<<<<<<<<<<<<<
 *         tangent = self.compute_tangent_c(p_, 0)
 *         return (tangent.x, tangent.y, tangent.z)
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_p))) || (PyList_CheckExact(__pyx_v_p))) {
    PyObject* sequence = __pyx_v_p;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1795, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(1, 1795, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1795, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_p_.x = __pyx_t_6;
  __pyx_v_p_.y = __pyx_t_7;
  __pyx_v_p_.z = __pyx_t_8;

  /* "raypier/core/ctracer.pyx":1796
 * 
 *         p_.x, p_.y, p_.z = p
 *         tangent = self.compute_tangent_c(p_, 0)             # <<<<<<<<<<<<<<
 *         return (tangent.x, tangent.y, tangent.z)
 * 
 */
  __pyx_v_tangent = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_self->__pyx_vtab)->compute_tangent_c(__pyx_v_self, __pyx_v_p_, 0);

  /* "raypier/core/ctracer.pyx":1797
 *         p_.x, p_.y, p_.z = p
 *         tangent = self.compute_tangent_c(p_, 0)
 *         return (tangent.x, tangent.y, tangent.z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_tangent.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_tangent.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_tangent.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1790
 *         return (n.x, n.y, n.z)
 * 
 *     def compute_tangent(self, p):             # <<<<<<<<<<<<<<
 *         """Compute the surface tangent at a given point,
 *         in face-local coordinates"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.compute_tangent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":218
 * cdef class Face(object):
 *     cdef:
 *         public object owner             # <<<<<<<<<<<<<<
 *         public char *name
 *         public double tolerance
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_5owner_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_5owner_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_5owner___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_5owner___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->owner);
  __pyx_r = __pyx_v_self->owner;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_5owner_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_5owner_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_5owner_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_5owner_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->owner);
  __Pyx_DECREF(__pyx_v_self->owner);
  __pyx_v_self->owner = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_5owner_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_5owner_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_5owner_4__del__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_5owner_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->owner);
  __Pyx_DECREF(__pyx_v_self->owner);
  __pyx_v_self->owner = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":219
 *     cdef:
 *         public object owner
 *         public char *name             # <<<<<<<<<<<<<<
 *         public double tolerance
 *         public int idx #index in the global face list
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_4name___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_4name___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_4name_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_4name_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_value); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(2, 219, __pyx_L1_error)
  __pyx_v_self->name = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":220
 *         public object owner
 *         public char *name
 *         public double tolerance             # <<<<<<<<<<<<<<
 *         public int idx #index in the global face list
 *         public double max_length
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_9tolerance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_9tolerance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_9tolerance___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_9tolerance___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->tolerance); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.tolerance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_9tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_9tolerance_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_9tolerance_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_9tolerance_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 220, __pyx_L1_error)
  __pyx_v_self->tolerance = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.tolerance.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":221
 *         public char *name
 *         public double tolerance
 *         public int idx #index in the global face list             # <<<<<<<<<<<<<<
 *         public double max_length
 *         public InterfaceMaterial material
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_3idx_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_3idx_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_3idx___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_3idx___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.idx.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_3idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_3idx_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_3idx_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_3idx_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 221, __pyx_L1_error)
  __pyx_v_self->idx = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.idx.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":222
 *         public double tolerance
 *         public int idx #index in the global face list
 *         public double max_length             # <<<<<<<<<<<<<<
 *         public InterfaceMaterial material
 *         public short int invert_normal
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_10max_length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_10max_length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_10max_length___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_10max_length___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->max_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.max_length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_10max_length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_10max_length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_10max_length_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_10max_length_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 222, __pyx_L1_error)
  __pyx_v_self->max_length = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.max_length.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":223
 *         public int idx #index in the global face list
 *         public double max_length
 *         public InterfaceMaterial material             # <<<<<<<<<<<<<<
 *         public short int invert_normal
 *         public unsigned int count
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_8material_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_8material_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_8material___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_8material___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->material));
  __pyx_r = ((PyObject *)__pyx_v_self->material);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_8material_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_8material_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_8material_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_8material_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial))))) __PYX_ERR(2, 223, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->material);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->material));
  __pyx_v_self->material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.material.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_8material_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_8material_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_8material_4__del__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_8material_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->material);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->material));
  __pyx_v_self->material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":224
 *         public double max_length
 *         public InterfaceMaterial material
 *         public short int invert_normal             # <<<<<<<<<<<<<<
 *         public unsigned int count
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_13invert_normal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_13invert_normal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_13invert_normal___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_13invert_normal___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short(__pyx_v_self->invert_normal); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.invert_normal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_13invert_normal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_13invert_normal_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_13invert_normal_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_13invert_normal_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  short __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_short(__pyx_v_value); if (unlikely((__pyx_t_1 == (short)-1) && PyErr_Occurred())) __PYX_ERR(2, 224, __pyx_L1_error)
  __pyx_v_self->invert_normal = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.invert_normal.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":225
 *         public InterfaceMaterial material
 *         public short int invert_normal
 *         public unsigned int count             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_5count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_5count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_5count___get__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_5count___get__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->count); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_4Face_5count_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_4Face_5count_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_5count_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_4Face_5count_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(2, 225, __pyx_L1_error)
  __pyx_v_self->count = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.Face.count.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_10__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_4Face_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_4Face_12__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_4Face_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.Face.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1803
 * cdef class FaceList(object):
 *     """A group of faces which share a transform"""
 *     def __cinit__(self, owner=None):             # <<<<<<<<<<<<<<
 *         self.transform = Transform()
 *         self.inverse_transform = Transform()
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_owner = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_owner);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 1803, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_owner = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1803, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList___cinit__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), __pyx_v_owner);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8FaceList___cinit__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_owner) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/ctracer.pyx":1804
 *     """A group of faces which share a transform"""
 *     def __cinit__(self, owner=None):
 *         self.transform = Transform()             # <<<<<<<<<<<<<<
 *         self.inverse_transform = Transform()
 *         self.owner = owner
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_transform, __pyx_t_1) < 0) __PYX_ERR(1, 1804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1805
 *     def __cinit__(self, owner=None):
 *         self.transform = Transform()
 *         self.inverse_transform = Transform()             # <<<<<<<<<<<<<<
 *         self.owner = owner
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inverse_transform, __pyx_t_1) < 0) __PYX_ERR(1, 1805, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1806
 *         self.transform = Transform()
 *         self.inverse_transform = Transform()
 *         self.owner = owner             # <<<<<<<<<<<<<<
 * 
 *     cpdef void sync_transforms(self):
 */
  __Pyx_INCREF(__pyx_v_owner);
  __Pyx_GIVEREF(__pyx_v_owner);
  __Pyx_GOTREF(__pyx_v_self->owner);
  __Pyx_DECREF(__pyx_v_self->owner);
  __pyx_v_self->owner = __pyx_v_owner;

  /* "raypier/core/ctracer.pyx":1803
 * cdef class FaceList(object):
 *     """A group of faces which share a transform"""
 *     def __cinit__(self, owner=None):             # <<<<<<<<<<<<<<
 *         self.transform = Transform()
 *         self.inverse_transform = Transform()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1808
 *         self.owner = owner
 * 
 *     cpdef void sync_transforms(self):             # <<<<<<<<<<<<<<
 *         """sets the transforms from the owner's VTKTransform
 *         """
 */

static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_3sync_transforms(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_7raypier_4core_7ctracer_8FaceList_sync_transforms(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_trans = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_rot = NULL;
  PyObject *__pyx_v_dt = NULL;
  PyObject *__pyx_v_inv_trans = NULL;
  long __pyx_8genexpr1__pyx_v_i;
  long __pyx_8genexpr2__pyx_v_j;
  long __pyx_8genexpr3__pyx_v_i;
  long __pyx_8genexpr4__pyx_v_i;
  long __pyx_8genexpr5__pyx_v_j;
  long __pyx_8genexpr6__pyx_v_i;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  long __pyx_t_10;
  long __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sync_transforms", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sync_transforms); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7raypier_4core_7ctracer_8FaceList_3sync_transforms)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1808, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "raypier/core/ctracer.pyx":1811
 *         """sets the transforms from the owner's VTKTransform
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             trans = self.owner.transform
 *         except AttributeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "raypier/core/ctracer.pyx":1812
 *         """
 *         try:
 *             trans = self.owner.transform             # <<<<<<<<<<<<<<
 *         except AttributeError:
 *             print("NO OWNER", self.owner)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->owner, __pyx_n_s_transform); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1812, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_trans = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "raypier/core/ctracer.pyx":1811
 *         """sets the transforms from the owner's VTKTransform
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             trans = self.owner.transform
 *         except AttributeError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/ctracer.pyx":1813
 *         try:
 *             trans = self.owner.transform
 *         except AttributeError:             # <<<<<<<<<<<<<<
 *             print("NO OWNER", self.owner)
 *             return
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("raypier.core.ctracer.FaceList.sync_transforms", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3) < 0) __PYX_ERR(1, 1813, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);

      /* "raypier/core/ctracer.pyx":1814
 *             trans = self.owner.transform
 *         except AttributeError:
 *             print("NO OWNER", self.owner)             # <<<<<<<<<<<<<<
 *             return
 *         m = trans.matrix
 */
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1814, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_kp_u_NO_OWNER);
      __Pyx_GIVEREF(__pyx_kp_u_NO_OWNER);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_NO_OWNER);
      __Pyx_INCREF(__pyx_v_self->owner);
      __Pyx_GIVEREF(__pyx_v_self->owner);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_self->owner);
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1814, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "raypier/core/ctracer.pyx":1815
 *         except AttributeError:
 *             print("NO OWNER", self.owner)
 *             return             # <<<<<<<<<<<<<<
 *         m = trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 */
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "raypier/core/ctracer.pyx":1811
 *         """sets the transforms from the owner's VTKTransform
 *         """
 *         try:             # <<<<<<<<<<<<<<
 *             trans = self.owner.transform
 *         except AttributeError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L0;
    __pyx_L8_try_end:;
  }

  /* "raypier/core/ctracer.pyx":1816
 *             print("NO OWNER", self.owner)
 *             return
 *         m = trans.matrix             # <<<<<<<<<<<<<<
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_trans, __pyx_n_s_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_m = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":1817
 *             return
 *         m = trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         #print "TRANS", rot, dt
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
      __pyx_8genexpr1__pyx_v_i = __pyx_t_10;
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1817, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
          __pyx_8genexpr2__pyx_v_j = __pyx_t_11;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_8genexpr1__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = __Pyx_PyInt_From_long(__pyx_8genexpr2__pyx_v_j); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1817, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_4, __pyx_t_12};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1817, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_4, __pyx_t_12};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1817, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          {
            __pyx_t_14 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1817, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_8, __pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_8, __pyx_t_12);
            __pyx_t_4 = 0;
            __pyx_t_12 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1817, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_1))) __PYX_ERR(1, 1817, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      } /* exit inner scope */
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 1817, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  } /* exit inner scope */
  __pyx_v_rot = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":1818
 *         m = trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         #print "TRANS", rot, dt
 *         self.transform = Transform(rotation=rot, translation=dt)
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
      __pyx_8genexpr3__pyx_v_i = __pyx_t_10;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_8genexpr3__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_9, __pyx_int_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1818, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_9, __pyx_int_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1818, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_12 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1818, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (__pyx_t_14) {
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_14); __pyx_t_14 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_8, __pyx_t_9);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_8, __pyx_int_3);
        __pyx_t_9 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1818, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 1818, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
  } /* exit inner scope */
  __pyx_v_dt = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":1820
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         #print "TRANS", rot, dt
 *         self.transform = Transform(rotation=rot, translation=dt)             # <<<<<<<<<<<<<<
 *         inv_trans = trans.linear_inverse
 *         m = inv_trans.matrix
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_rotation, __pyx_v_rot) < 0) __PYX_ERR(1, 1820, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_translation, __pyx_v_dt) < 0) __PYX_ERR(1, 1820, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_transform, __pyx_t_2) < 0) __PYX_ERR(1, 1820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1821
 *         #print "TRANS", rot, dt
 *         self.transform = Transform(rotation=rot, translation=dt)
 *         inv_trans = trans.linear_inverse             # <<<<<<<<<<<<<<
 *         m = inv_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_trans, __pyx_n_s_linear_inverse); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_inv_trans = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1822
 *         self.transform = Transform(rotation=rot, translation=dt)
 *         inv_trans = trans.linear_inverse
 *         m = inv_trans.matrix             # <<<<<<<<<<<<<<
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_inv_trans, __pyx_n_s_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_m, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1823
 *         inv_trans = trans.linear_inverse
 *         m = inv_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         self.inverse_transform = Transform(rotation=rot, translation=dt)
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
      __pyx_8genexpr4__pyx_v_i = __pyx_t_10;
      { /* enter inner scope */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
          __pyx_8genexpr5__pyx_v_j = __pyx_t_11;
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_8genexpr4__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_14 = __Pyx_PyInt_From_long(__pyx_8genexpr5__pyx_v_j); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_4 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_12)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_9, __pyx_t_14};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1823, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
            PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_9, __pyx_t_14};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1823, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          } else
          #endif
          {
            __pyx_t_13 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1823, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            if (__pyx_t_4) {
              __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4); __pyx_t_4 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_8, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_8, __pyx_t_14);
            __pyx_t_9 = 0;
            __pyx_t_14 = 0;
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1823, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(1, 1823, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      } /* exit inner scope */
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1823, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_rot, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1824
 *         m = inv_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         self.inverse_transform = Transform(rotation=rot, translation=dt)
 * 
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    for (__pyx_t_10 = 0; __pyx_t_10 < 3; __pyx_t_10+=1) {
      __pyx_8genexpr6__pyx_v_i = __pyx_t_10;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __Pyx_PyInt_From_long(__pyx_8genexpr6__pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_12, __pyx_int_3};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1824, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_t_12, __pyx_int_3};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1824, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1824, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_13) {
          __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_8, __pyx_t_12);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_8, __pyx_int_3);
        __pyx_t_12 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1824, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1824, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_dt, ((PyObject*)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":1825
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         self.inverse_transform = Transform(rotation=rot, translation=dt)             # <<<<<<<<<<<<<<
 * 
 *     property transform:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rotation, __pyx_v_rot) < 0) __PYX_ERR(1, 1825, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_translation, __pyx_v_dt) < 0) __PYX_ERR(1, 1825, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inverse_transform, __pyx_t_3) < 0) __PYX_ERR(1, 1825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":1808
 *         self.owner = owner
 * 
 *     cpdef void sync_transforms(self):             # <<<<<<<<<<<<<<
 *         """sets the transforms from the owner's VTKTransform
 *         """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_WriteUnraisable("raypier.core.ctracer.FaceList.sync_transforms", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_trans);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_rot);
  __Pyx_XDECREF(__pyx_v_dt);
  __Pyx_XDECREF(__pyx_v_inv_trans);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_3sync_transforms(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7raypier_4core_7ctracer_8FaceList_2sync_transforms[] = "sets the transforms from the owner's VTKTransform\n        ";
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_3sync_transforms(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sync_transforms (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_2sync_transforms(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_2sync_transforms(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sync_transforms", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_7raypier_4core_7ctracer_8FaceList_sync_transforms(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.sync_transforms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1828
 * 
 *     property transform:
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.trans = t.trans
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_9transform_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_9transform_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_ptype_7raypier_4core_7ctracer_Transform, 1, "t", 0))) __PYX_ERR(1, 1828, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_9transform___set__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_t));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_9transform___set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1829
 *     property transform:
 *         def __set__(self, Transform t):
 *             self.trans = t.trans             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  __pyx_t_1 = __pyx_v_t->trans;
  __pyx_v_self->trans = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1828
 * 
 *     property transform:
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.trans = t.trans
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1831
 *             self.trans = t.trans
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Transform t=Transform()
 *             t.trans = self.trans
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_9transform_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_9transform_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_9transform_2__get__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_9transform_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1832
 * 
 *         def __get__(self):
 *             cdef Transform t=Transform()             # <<<<<<<<<<<<<<
 *             t.trans = self.trans
 *             return t
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1833
 *         def __get__(self):
 *             cdef Transform t=Transform()
 *             t.trans = self.trans             # <<<<<<<<<<<<<<
 *             return t
 * 
 */
  __pyx_t_2 = __pyx_v_self->trans;
  __pyx_v_t->trans = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":1834
 *             cdef Transform t=Transform()
 *             t.trans = self.trans
 *             return t             # <<<<<<<<<<<<<<
 * 
 *     property inverse_transform:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1831
 *             self.trans = t.trans
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Transform t=Transform()
 *             t.trans = self.trans
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.transform.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1837
 * 
 *     property inverse_transform:
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.inv_trans = t.trans
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_17inverse_transform_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_17inverse_transform_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_ptype_7raypier_4core_7ctracer_Transform, 1, "t", 0))) __PYX_ERR(1, 1837, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_17inverse_transform___set__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_t));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_17inverse_transform___set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/ctracer.pyx":1838
 *     property inverse_transform:
 *         def __set__(self, Transform t):
 *             self.inv_trans = t.trans             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  __pyx_t_1 = __pyx_v_t->trans;
  __pyx_v_self->inv_trans = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":1837
 * 
 *     property inverse_transform:
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.inv_trans = t.trans
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1840
 *             self.inv_trans = t.trans
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_17inverse_transform_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_17inverse_transform_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_17inverse_transform_2__get__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_17inverse_transform_2__get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/ctracer.pyx":1841
 * 
 *         def __get__(self):
 *             cdef Transform t=Transform()             # <<<<<<<<<<<<<<
 *             t.trans = self.inv_trans
 *             return t
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1842
 *         def __get__(self):
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans             # <<<<<<<<<<<<<<
 *             return t
 * 
 */
  __pyx_t_2 = __pyx_v_self->inv_trans;
  __pyx_v_t->trans = __pyx_t_2;

  /* "raypier/core/ctracer.pyx":1843
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans
 *             return t             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, intidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1840
 *             self.inv_trans = t.trans
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.inverse_transform.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1845
 *             return t
 * 
 *     def __getitem__(self, intidx):             # <<<<<<<<<<<<<<
 *         return self.faces[intidx]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_intidx); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_intidx) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_4__getitem__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), ((PyObject *)__pyx_v_intidx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_4__getitem__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_intidx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "raypier/core/ctracer.pyx":1846
 * 
 *     def __getitem__(self, intidx):
 *         return self.faces[intidx]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 1846, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->faces, __pyx_v_intidx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1845
 *             return t
 * 
 *     def __getitem__(self, intidx):             # <<<<<<<<<<<<<<
 *         return self.faces[intidx]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1849
 * 
 * 
 *     cdef intersect_t intersect_one_face_c(self, ray_t *ray, vector_t ray_end, int face_idx):             # <<<<<<<<<<<<<<
 *         """Finds the intersection with the face specified by face_idx.
 *         """
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_one_face_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ray_end, int __pyx_v_face_idx) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2;
  PyObject *__pyx_v_faces = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  double __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect_one_face_c", 0);

  /* "raypier/core/ctracer.pyx":1853
 *         """
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)             # <<<<<<<<<<<<<<
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)
 *             list faces=self.faces
 */
  __pyx_v_p1 = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->inv_trans, __pyx_v_ray->origin);

  /* "raypier/core/ctracer.pyx":1854
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)             # <<<<<<<<<<<<<<
 *             list faces=self.faces
 *             unsigned int i
 */
  __pyx_v_p2 = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->inv_trans, __pyx_v_ray_end);

  /* "raypier/core/ctracer.pyx":1855
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)
 *             list faces=self.faces             # <<<<<<<<<<<<<<
 *             unsigned int i
 *             intersect_t it
 */
  __pyx_t_1 = __pyx_v_self->faces;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_faces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1861
 *             Face face
 * 
 *         face = faces[face_idx]             # <<<<<<<<<<<<<<
 *         it = face.intersect_c(p1, p2, 1)
 *         if face.tolerance < it.dist < ray.length:
 */
  if (unlikely(__pyx_v_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 1861, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_faces, __pyx_v_face_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 1861, __pyx_L1_error)
  __pyx_v_face = ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1862
 * 
 *         face = faces[face_idx]
 *         it = face.intersect_c(p1, p2, 1)             # <<<<<<<<<<<<<<
 *         if face.tolerance < it.dist < ray.length:
 *             ray.length = it.dist
 */
  __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_face->__pyx_vtab)->intersect_c(__pyx_v_face, __pyx_v_p1, __pyx_v_p2, 1);

  /* "raypier/core/ctracer.pyx":1863
 *         face = faces[face_idx]
 *         it = face.intersect_c(p1, p2, 1)
 *         if face.tolerance < it.dist < ray.length:             # <<<<<<<<<<<<<<
 *             ray.length = it.dist
 *             ray.end_face_idx = face.idx
 */
  __pyx_t_2 = (__pyx_v_face->tolerance < __pyx_v_it.dist);
  if (__pyx_t_2) {
    __pyx_t_2 = (__pyx_v_it.dist < __pyx_v_ray->length);
  }
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "raypier/core/ctracer.pyx":1864
 *         it = face.intersect_c(p1, p2, 1)
 *         if face.tolerance < it.dist < ray.length:
 *             ray.length = it.dist             # <<<<<<<<<<<<<<
 *             ray.end_face_idx = face.idx
 *             it.face_idx = face.idx
 */
    __pyx_t_4 = __pyx_v_it.dist;
    __pyx_v_ray->length = __pyx_t_4;

    /* "raypier/core/ctracer.pyx":1865
 *         if face.tolerance < it.dist < ray.length:
 *             ray.length = it.dist
 *             ray.end_face_idx = face.idx             # <<<<<<<<<<<<<<
 *             it.face_idx = face.idx
 *         return it
 */
    __pyx_t_5 = __pyx_v_face->idx;
    __pyx_v_ray->end_face_idx = __pyx_t_5;

    /* "raypier/core/ctracer.pyx":1866
 *             ray.length = it.dist
 *             ray.end_face_idx = face.idx
 *             it.face_idx = face.idx             # <<<<<<<<<<<<<<
 *         return it
 * 
 */
    __pyx_t_5 = __pyx_v_face->idx;
    __pyx_v_it.face_idx = __pyx_t_5;

    /* "raypier/core/ctracer.pyx":1863
 *         face = faces[face_idx]
 *         it = face.intersect_c(p1, p2, 1)
 *         if face.tolerance < it.dist < ray.length:             # <<<<<<<<<<<<<<
 *             ray.length = it.dist
 *             ray.end_face_idx = face.idx
 */
  }

  /* "raypier/core/ctracer.pyx":1867
 *             ray.end_face_idx = face.idx
 *             it.face_idx = face.idx
 *         return it             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_it;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1849
 * 
 * 
 *     cdef intersect_t intersect_one_face_c(self, ray_t *ray, vector_t ray_end, int face_idx):             # <<<<<<<<<<<<<<
 *         """Finds the intersection with the face specified by face_idx.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("raypier.core.ctracer.FaceList.intersect_one_face_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_faces);
  __Pyx_XDECREF((PyObject *)__pyx_v_face);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1870
 * 
 * 
 *     cdef intersect_t intersect_c(self, ray_t *ray, vector_t ray_end):             # <<<<<<<<<<<<<<
 *         """Finds the face with the nearest intersection
 *         point, for the ray defined by the two input points,
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ray_end) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2;
  PyObject *__pyx_v_faces = 0;
  unsigned int __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_this;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/ctracer.pyx":1876
 *         """
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)             # <<<<<<<<<<<<<<
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)
 *             list faces=self.faces
 */
  __pyx_v_p1 = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->inv_trans, __pyx_v_ray->origin);

  /* "raypier/core/ctracer.pyx":1877
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)             # <<<<<<<<<<<<<<
 *             list faces=self.faces
 *             unsigned int i
 */
  __pyx_v_p2 = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->inv_trans, __pyx_v_ray_end);

  /* "raypier/core/ctracer.pyx":1878
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)
 *             list faces=self.faces             # <<<<<<<<<<<<<<
 *             unsigned int i
 *             intersect_t this, out
 */
  __pyx_t_1 = __pyx_v_self->faces;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_faces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1883
 *             Face face
 * 
 *         out.face_idx = -1             # <<<<<<<<<<<<<<
 *         for i in range(len(faces)):
 *             face = faces[i]
 */
  __pyx_v_out.face_idx = -1;

  /* "raypier/core/ctracer.pyx":1884
 * 
 *         out.face_idx = -1
 *         for i in range(len(faces)):             # <<<<<<<<<<<<<<
 *             face = faces[i]
 *             this = face.intersect_c(p1, p2, 1)
 */
  if (unlikely(__pyx_v_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1884, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_faces); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1884, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "raypier/core/ctracer.pyx":1885
 *         out.face_idx = -1
 *         for i in range(len(faces)):
 *             face = faces[i]             # <<<<<<<<<<<<<<
 *             this = face.intersect_c(p1, p2, 1)
 *             if face.tolerance < this.dist < ray.length:
 */
    if (unlikely(__pyx_v_faces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1885, __pyx_L1_error)
    }
    if (!(likely(((PyList_GET_ITEM(__pyx_v_faces, __pyx_v_i)) == Py_None) || likely(__Pyx_TypeTest(PyList_GET_ITEM(__pyx_v_faces, __pyx_v_i), __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 1885, __pyx_L1_error)
    __pyx_t_1 = PyList_GET_ITEM(__pyx_v_faces, __pyx_v_i);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_face, ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "raypier/core/ctracer.pyx":1886
 *         for i in range(len(faces)):
 *             face = faces[i]
 *             this = face.intersect_c(p1, p2, 1)             # <<<<<<<<<<<<<<
 *             if face.tolerance < this.dist < ray.length:
 *                 ray.length = this.dist
 */
    __pyx_v_this = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_face->__pyx_vtab)->intersect_c(__pyx_v_face, __pyx_v_p1, __pyx_v_p2, 1);

    /* "raypier/core/ctracer.pyx":1887
 *             face = faces[i]
 *             this = face.intersect_c(p1, p2, 1)
 *             if face.tolerance < this.dist < ray.length:             # <<<<<<<<<<<<<<
 *                 ray.length = this.dist
 *                 this.face_idx = face.idx
 */
    __pyx_t_5 = (__pyx_v_face->tolerance < __pyx_v_this.dist);
    if (__pyx_t_5) {
      __pyx_t_5 = (__pyx_v_this.dist < __pyx_v_ray->length);
    }
    __pyx_t_6 = (__pyx_t_5 != 0);
    if (__pyx_t_6) {

      /* "raypier/core/ctracer.pyx":1888
 *             this = face.intersect_c(p1, p2, 1)
 *             if face.tolerance < this.dist < ray.length:
 *                 ray.length = this.dist             # <<<<<<<<<<<<<<
 *                 this.face_idx = face.idx
 *                 out = this
 */
      __pyx_t_7 = __pyx_v_this.dist;
      __pyx_v_ray->length = __pyx_t_7;

      /* "raypier/core/ctracer.pyx":1889
 *             if face.tolerance < this.dist < ray.length:
 *                 ray.length = this.dist
 *                 this.face_idx = face.idx             # <<<<<<<<<<<<<<
 *                 out = this
 *                 ray.end_face_idx = this.face_idx
 */
      __pyx_t_8 = __pyx_v_face->idx;
      __pyx_v_this.face_idx = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":1890
 *                 ray.length = this.dist
 *                 this.face_idx = face.idx
 *                 out = this             # <<<<<<<<<<<<<<
 *                 ray.end_face_idx = this.face_idx
 *         return out
 */
      __pyx_v_out = __pyx_v_this;

      /* "raypier/core/ctracer.pyx":1891
 *                 this.face_idx = face.idx
 *                 out = this
 *                 ray.end_face_idx = this.face_idx             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
      __pyx_t_8 = __pyx_v_this.face_idx;
      __pyx_v_ray->end_face_idx = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":1887
 *             face = faces[i]
 *             this = face.intersect_c(p1, p2, 1)
 *             if face.tolerance < this.dist < ray.length:             # <<<<<<<<<<<<<<
 *                 ray.length = this.dist
 *                 this.face_idx = face.idx
 */
    }
  }

  /* "raypier/core/ctracer.pyx":1892
 *                 out = this
 *                 ray.end_face_idx = this.face_idx
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def intersect(self, Ray r):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1870
 * 
 * 
 *     cdef intersect_t intersect_c(self, ray_t *ray, vector_t ray_end):             # <<<<<<<<<<<<<<
 *         """Finds the face with the nearest intersection
 *         point, for the ray defined by the two input points,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("raypier.core.ctracer.FaceList.intersect_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_faces);
  __Pyx_XDECREF((PyObject *)__pyx_v_face);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1894
 *         return out
 * 
 *     def intersect(self, Ray r):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t P1_
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_7intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_r); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_7intersect(PyObject *__pyx_v_self, PyObject *__pyx_v_r) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7raypier_4core_7ctracer_Ray, 1, "r", 0))) __PYX_ERR(1, 1894, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_6intersect(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Ray *)__pyx_v_r));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_6intersect(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Ray *__pyx_v_r) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_P1_;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect", 0);

  /* "raypier/core/ctracer.pyx":1899
 *             intersect_t it
 * 
 *         P1_ = addvv_(r.ray.origin, multvs_(r.ray.direction, r.ray.length))             # <<<<<<<<<<<<<<
 *         it = self.intersect_c(&r.ray, P1_)
 *         return it.face_idx
 */
  __pyx_v_P1_ = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r->ray.origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_r->ray.direction, __pyx_v_r->ray.length));

  /* "raypier/core/ctracer.pyx":1900
 * 
 *         P1_ = addvv_(r.ray.origin, multvs_(r.ray.direction, r.ray.length))
 *         it = self.intersect_c(&r.ray, P1_)             # <<<<<<<<<<<<<<
 *         return it.face_idx
 * 
 */
  __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_self->__pyx_vtab)->intersect_c(__pyx_v_self, (&__pyx_v_r->ray), __pyx_v_P1_);

  /* "raypier/core/ctracer.pyx":1901
 *         P1_ = addvv_(r.ray.origin, multvs_(r.ray.direction, r.ray.length))
 *         it = self.intersect_c(&r.ray, P1_)
 *         return it.face_idx             # <<<<<<<<<<<<<<
 * 
 *     cdef int intersect_para_c(self, para_t *ray, vector_t ray_end, Face face):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_it.face_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1894
 *         return out
 * 
 *     def intersect(self, Ray r):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t P1_
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.intersect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1903
 *         return it.face_idx
 * 
 *     cdef int intersect_para_c(self, para_t *ray, vector_t ray_end, Face face):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)
 */

static int __pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_para_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_ray, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ray_end, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_para_c", 0);

  /* "raypier/core/ctracer.pyx":1905
 *     cdef int intersect_para_c(self, para_t *ray, vector_t ray_end, Face face):
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)             # <<<<<<<<<<<<<<
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)
 *             unsigned int i
 */
  __pyx_v_p1 = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->inv_trans, __pyx_v_ray->origin);

  /* "raypier/core/ctracer.pyx":1906
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)
 *             vector_t p2 = transform_c(self.inv_trans, ray_end)             # <<<<<<<<<<<<<<
 *             unsigned int i
 *             double dist
 */
  __pyx_v_p2 = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->inv_trans, __pyx_v_ray_end);

  /* "raypier/core/ctracer.pyx":1911
 *             intersect_t it
 * 
 *         it = face.intersect_c(p1, p2, 0)             # <<<<<<<<<<<<<<
 *         #print("p1:", p1.x, p1.y, p1.z, "p2:", p2.x, p2.y, p2.z, "rlen:", ray.length, "dist:", dist)
 *         if face.tolerance < it.dist < ray.length:
 */
  __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_face->__pyx_vtab)->intersect_c(__pyx_v_face, __pyx_v_p1, __pyx_v_p2, 0);

  /* "raypier/core/ctracer.pyx":1913
 *         it = face.intersect_c(p1, p2, 0)
 *         #print("p1:", p1.x, p1.y, p1.z, "p2:", p2.x, p2.y, p2.z, "rlen:", ray.length, "dist:", dist)
 *         if face.tolerance < it.dist < ray.length:             # <<<<<<<<<<<<<<
 *             ray.length = it.dist
 *             return 0
 */
  __pyx_t_1 = (__pyx_v_face->tolerance < __pyx_v_it.dist);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_it.dist < __pyx_v_ray->length);
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "raypier/core/ctracer.pyx":1914
 *         #print("p1:", p1.x, p1.y, p1.z, "p2:", p2.x, p2.y, p2.z, "rlen:", ray.length, "dist:", dist)
 *         if face.tolerance < it.dist < ray.length:
 *             ray.length = it.dist             # <<<<<<<<<<<<<<
 *             return 0
 *         return -1
 */
    __pyx_t_3 = __pyx_v_it.dist;
    __pyx_v_ray->length = __pyx_t_3;

    /* "raypier/core/ctracer.pyx":1915
 *         if face.tolerance < it.dist < ray.length:
 *             ray.length = it.dist
 *             return 0             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "raypier/core/ctracer.pyx":1913
 *         it = face.intersect_c(p1, p2, 0)
 *         #print("p1:", p1.x, p1.y, p1.z, "p2:", p2.x, p2.y, p2.z, "rlen:", ray.length, "dist:", dist)
 *         if face.tolerance < it.dist < ray.length:             # <<<<<<<<<<<<<<
 *             ray.length = it.dist
 *             return 0
 */
  }

  /* "raypier/core/ctracer.pyx":1916
 *             ray.length = it.dist
 *             return 0
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     def intersect_para(self, ParabasalRay r, Face face):
 */
  __pyx_r = -1;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1903
 *         return it.face_idx
 * 
 *     cdef int intersect_para_c(self, para_t *ray, vector_t ray_end, Face face):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p1 = transform_c(self.inv_trans, ray.origin)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1918
 *         return -1
 * 
 *     def intersect_para(self, ParabasalRay r, Face face):             # <<<<<<<<<<<<<<
 *         cdef vector_t P1_
 *         cdef int idx
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_9intersect_para(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_9intersect_para(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_r = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersect_para (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,&__pyx_n_s_face,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("intersect_para", 1, 2, 2, 1); __PYX_ERR(1, 1918, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "intersect_para") < 0)) __PYX_ERR(1, 1918, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_r = ((struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *)values[0]);
    __pyx_v_face = ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("intersect_para", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1918, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.intersect_para", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7raypier_4core_7ctracer_ParabasalRay, 1, "r", 0))) __PYX_ERR(1, 1918, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face), __pyx_ptype_7raypier_4core_7ctracer_Face, 1, "face", 0))) __PYX_ERR(1, 1918, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_8intersect_para(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), __pyx_v_r, __pyx_v_face);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_8intersect_para(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay *__pyx_v_r, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_P1_;
  int __pyx_v_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect_para", 0);

  /* "raypier/core/ctracer.pyx":1922
 *         cdef int idx
 * 
 *         P1_ = addvv_(r.ray.origin, multvs_(r.ray.direction, r.ray.length))             # <<<<<<<<<<<<<<
 *         idx = self.intersect_para_c(&r.ray, P1_, face)
 *         return idx
 */
  __pyx_v_P1_ = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r->ray.origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_r->ray.direction, __pyx_v_r->ray.length));

  /* "raypier/core/ctracer.pyx":1923
 * 
 *         P1_ = addvv_(r.ray.origin, multvs_(r.ray.direction, r.ray.length))
 *         idx = self.intersect_para_c(&r.ray, P1_, face)             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */
  __pyx_v_idx = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_self->__pyx_vtab)->intersect_para_c(__pyx_v_self, (&__pyx_v_r->ray), __pyx_v_P1_, __pyx_v_face);

  /* "raypier/core/ctracer.pyx":1924
 *         P1_ = addvv_(r.ray.origin, multvs_(r.ray.direction, r.ray.length))
 *         idx = self.intersect_para_c(&r.ray, P1_, face)
 *         return idx             # <<<<<<<<<<<<<<
 * 
 *     cdef orientation_t compute_orientation_c(self, Face face, vector_t point, int piece):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1918
 *         return -1
 * 
 *     def intersect_para(self, ParabasalRay r, Face face):             # <<<<<<<<<<<<<<
 *         cdef vector_t P1_
 *         cdef int idx
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.intersect_para", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1926
 *         return idx
 * 
 *     cdef orientation_t compute_orientation_c(self, Face face, vector_t point, int piece):             # <<<<<<<<<<<<<<
 *         cdef orientation_t out
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_f_7raypier_4core_7ctracer_8FaceList_compute_orientation_c(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point, int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("compute_orientation_c", 0);

  /* "raypier/core/ctracer.pyx":1929
 *         cdef orientation_t out
 * 
 *         point = transform_c(self.inv_trans, point)             # <<<<<<<<<<<<<<
 *         out.normal = face.compute_normal_c(point, piece)
 *         out.tangent = face.compute_tangent_c(point, piece)
 */
  __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->inv_trans, __pyx_v_point);

  /* "raypier/core/ctracer.pyx":1930
 * 
 *         point = transform_c(self.inv_trans, point)
 *         out.normal = face.compute_normal_c(point, piece)             # <<<<<<<<<<<<<<
 *         out.tangent = face.compute_tangent_c(point, piece)
 *         if face.invert_normal:
 */
  __pyx_v_out.normal = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_face->__pyx_vtab)->compute_normal_c(__pyx_v_face, __pyx_v_point, __pyx_v_piece);

  /* "raypier/core/ctracer.pyx":1931
 *         point = transform_c(self.inv_trans, point)
 *         out.normal = face.compute_normal_c(point, piece)
 *         out.tangent = face.compute_tangent_c(point, piece)             # <<<<<<<<<<<<<<
 *         if face.invert_normal:
 *             out.normal = invert_(out.normal)
 */
  __pyx_v_out.tangent = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *)__pyx_v_face->__pyx_vtab)->compute_tangent_c(__pyx_v_face, __pyx_v_point, __pyx_v_piece);

  /* "raypier/core/ctracer.pyx":1932
 *         out.normal = face.compute_normal_c(point, piece)
 *         out.tangent = face.compute_tangent_c(point, piece)
 *         if face.invert_normal:             # <<<<<<<<<<<<<<
 *             out.normal = invert_(out.normal)
 *             out.tangent = invert_(out.tangent)
 */
  __pyx_t_1 = (__pyx_v_face->invert_normal != 0);
  if (__pyx_t_1) {

    /* "raypier/core/ctracer.pyx":1933
 *         out.tangent = face.compute_tangent_c(point, piece)
 *         if face.invert_normal:
 *             out.normal = invert_(out.normal)             # <<<<<<<<<<<<<<
 *             out.tangent = invert_(out.tangent)
 *         out.normal = rotate_c(self.trans, out.normal)
 */
    __pyx_v_out.normal = __pyx_f_7raypier_4core_7ctracer_invert_(__pyx_v_out.normal);

    /* "raypier/core/ctracer.pyx":1934
 *         if face.invert_normal:
 *             out.normal = invert_(out.normal)
 *             out.tangent = invert_(out.tangent)             # <<<<<<<<<<<<<<
 *         out.normal = rotate_c(self.trans, out.normal)
 *         out.tangent = rotate_c(self.trans, out.tangent)
 */
    __pyx_v_out.tangent = __pyx_f_7raypier_4core_7ctracer_invert_(__pyx_v_out.tangent);

    /* "raypier/core/ctracer.pyx":1932
 *         out.normal = face.compute_normal_c(point, piece)
 *         out.tangent = face.compute_tangent_c(point, piece)
 *         if face.invert_normal:             # <<<<<<<<<<<<<<
 *             out.normal = invert_(out.normal)
 *             out.tangent = invert_(out.tangent)
 */
  }

  /* "raypier/core/ctracer.pyx":1935
 *             out.normal = invert_(out.normal)
 *             out.tangent = invert_(out.tangent)
 *         out.normal = rotate_c(self.trans, out.normal)             # <<<<<<<<<<<<<<
 *         out.tangent = rotate_c(self.trans, out.tangent)
 *         return out
 */
  __pyx_v_out.normal = __pyx_f_7raypier_4core_7ctracer_rotate_c(__pyx_v_self->trans, __pyx_v_out.normal);

  /* "raypier/core/ctracer.pyx":1936
 *             out.tangent = invert_(out.tangent)
 *         out.normal = rotate_c(self.trans, out.normal)
 *         out.tangent = rotate_c(self.trans, out.tangent)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.tangent = __pyx_f_7raypier_4core_7ctracer_rotate_c(__pyx_v_self->trans, __pyx_v_out.tangent);

  /* "raypier/core/ctracer.pyx":1937
 *         out.normal = rotate_c(self.trans, out.normal)
 *         out.tangent = rotate_c(self.trans, out.tangent)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def compute_orientation(self, Face face, point, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1926
 *         return idx
 * 
 *     cdef orientation_t compute_orientation_c(self, Face face, vector_t point, int piece):             # <<<<<<<<<<<<<<
 *         cdef orientation_t out
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1939
 *         return out
 * 
 *     def compute_orientation(self, Face face, point, int piece):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_11compute_orientation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_11compute_orientation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  PyObject *__pyx_v_point = 0;
  int __pyx_v_piece;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_orientation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_face,&__pyx_n_s_point,&__pyx_n_s_piece,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_point)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_orientation", 1, 3, 3, 1); __PYX_ERR(1, 1939, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_piece)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_orientation", 1, 3, 3, 2); __PYX_ERR(1, 1939, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_orientation") < 0)) __PYX_ERR(1, 1939, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_face = ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)values[0]);
    __pyx_v_point = values[1];
    __pyx_v_piece = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_piece == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1939, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_orientation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1939, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.compute_orientation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face), __pyx_ptype_7raypier_4core_7ctracer_Face, 1, "face", 0))) __PYX_ERR(1, 1939, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_10compute_orientation(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), __pyx_v_face, __pyx_v_point, __pyx_v_piece);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_10compute_orientation(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face, PyObject *__pyx_v_point, int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_o;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_orientation", 0);

  /* "raypier/core/ctracer.pyx":1943
 *             vector_t p
 *             orientation_t o
 *         p = set_v(point)             # <<<<<<<<<<<<<<
 *         o = self.compute_orientation_c(face, p, piece)
 *         return (o.normal.x, o.normal.y, o.normal.z), (o.tangent.x, o.tangent.y, o.tangent.z)
 */
  __pyx_v_p = __pyx_f_7raypier_4core_7ctracer_set_v(__pyx_v_point);

  /* "raypier/core/ctracer.pyx":1944
 *             orientation_t o
 *         p = set_v(point)
 *         o = self.compute_orientation_c(face, p, piece)             # <<<<<<<<<<<<<<
 *         return (o.normal.x, o.normal.y, o.normal.z), (o.tangent.x, o.tangent.y, o.tangent.z)
 * 
 */
  __pyx_v_o = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_self->__pyx_vtab)->compute_orientation_c(__pyx_v_self, __pyx_v_face, __pyx_v_p, __pyx_v_piece);

  /* "raypier/core/ctracer.pyx":1945
 *         p = set_v(point)
 *         o = self.compute_orientation_c(face, p, piece)
 *         return (o.normal.x, o.normal.y, o.normal.z), (o.tangent.x, o.tangent.y, o.tangent.z)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_o.normal.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_o.normal.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_o.normal.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_o.tangent.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_o.tangent.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_o.tangent.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1939
 *         return out
 * 
 *     def compute_orientation(self, Face face, point, int piece):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.compute_orientation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":237
 *     cdef transform_t trans
 *     cdef transform_t inv_trans
 *     cdef public list faces             # <<<<<<<<<<<<<<
 *     cdef public object owner
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces___get__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces___get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->faces);
  __pyx_r = __pyx_v_self->faces;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 237, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->faces);
  __Pyx_DECREF(__pyx_v_self->faces);
  __pyx_v_self->faces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.faces.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces_4__del__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5faces_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->faces);
  __Pyx_DECREF(__pyx_v_self->faces);
  __pyx_v_self->faces = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pxd":238
 *     cdef transform_t inv_trans
 *     cdef public list faces
 *     cdef public object owner             # <<<<<<<<<<<<<<
 * 
 *     cpdef void sync_transforms(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner___get__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner___get__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->owner);
  __pyx_r = __pyx_v_self->owner;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner_2__set__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner_2__set__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->owner);
  __Pyx_DECREF(__pyx_v_self->owner);
  __pyx_v_self->owner = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner_4__del__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_7ctracer_8FaceList_5owner_4__del__(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->owner);
  __Pyx_DECREF(__pyx_v_self->owner);
  __pyx_v_self->owner = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_12__reduce_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_7ctracer_8FaceList_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_8FaceList_14__setstate_cython__(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_8FaceList_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.FaceList.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1952
 * ##################################
 * 
 * cdef double ray_power_(ray_t ray):             # <<<<<<<<<<<<<<
 *     cdef double P1, P2
 * 
 */

static double __pyx_f_7raypier_4core_7ctracer_ray_power_(struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray) {
  double __pyx_v_P1;
  double __pyx_v_P2;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ray_power_", 0);

  /* "raypier/core/ctracer.pyx":1955
 *     cdef double P1, P2
 * 
 *     P1 = (ray.E1_amp.real**2 + ray.E1_amp.imag**2)*ray.refractive_index.real             # <<<<<<<<<<<<<<
 *     P2 = (ray.E2_amp.real**2 + ray.E2_amp.imag**2)*ray.refractive_index.real
 *     ### We don't need to handle incident aspect area here as the ray already compensate for this
 */
  __pyx_v_P1 = ((pow(__Pyx_CREAL(__pyx_v_ray.E1_amp), 2.0) + pow(__Pyx_CIMAG(__pyx_v_ray.E1_amp), 2.0)) * __Pyx_CREAL(__pyx_v_ray.refractive_index));

  /* "raypier/core/ctracer.pyx":1956
 * 
 *     P1 = (ray.E1_amp.real**2 + ray.E1_amp.imag**2)*ray.refractive_index.real
 *     P2 = (ray.E2_amp.real**2 + ray.E2_amp.imag**2)*ray.refractive_index.real             # <<<<<<<<<<<<<<
 *     ### We don't need to handle incident aspect area here as the ray already compensate for this
 *     #aspect = abs(dotprod(norm(ray.direction), normal))
 */
  __pyx_v_P2 = ((pow(__Pyx_CREAL(__pyx_v_ray.E2_amp), 2.0) + pow(__Pyx_CIMAG(__pyx_v_ray.E2_amp), 2.0)) * __Pyx_CREAL(__pyx_v_ray.refractive_index));

  /* "raypier/core/ctracer.pyx":1959
 *     ### We don't need to handle incident aspect area here as the ray already compensate for this
 *     #aspect = abs(dotprod(norm(ray.direction), normal))
 *     return (P1+P2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_P1 + __pyx_v_P2);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1952
 * ##################################
 * 
 * cdef double ray_power_(ray_t ray):             # <<<<<<<<<<<<<<
 *     cdef double P1, P2
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":1962
 * 
 * 
 * def select_ray_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_29select_ray_intersections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_29select_ray_intersections = {"select_ray_intersections", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_29select_ray_intersections, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_29select_ray_intersections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set = 0;
  PyObject *__pyx_v_ray_col_list = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_ray_intersections (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_face_set,&__pyx_n_s_ray_col_list,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_set)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ray_col_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("select_ray_intersections", 1, 2, 2, 1); __PYX_ERR(1, 1962, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_ray_intersections") < 0)) __PYX_ERR(1, 1962, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_face_set = ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)values[0]);
    __pyx_v_ray_col_list = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_ray_intersections", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1962, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.select_ray_intersections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_set), __pyx_ptype_7raypier_4core_7ctracer_FaceList, 1, "face_set", 0))) __PYX_ERR(1, 1962, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ray_col_list), (&PyList_Type), 1, "ray_col_list", 1))) __PYX_ERR(1, 1962, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_28select_ray_intersections(__pyx_self, __pyx_v_face_set, __pyx_v_ray_col_list);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_28select_ray_intersections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, PyObject *__pyx_v_ray_col_list) {
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t __pyx_v_ray;
  int __pyx_v_idx;
  int __pyx_v_wl_offset;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rc = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rc_out = 0;
  PyObject *__pyx_v_wl_list = 0;
  __Pyx_memviewslice __pyx_v_inverse = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  PyObject *__pyx_v_reduced = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  unsigned int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_ray_intersections", 0);

  /* "raypier/core/ctracer.pyx":1966
 *         size_t i,j
 *         ray_t ray
 *         int idx, wl_offset=0             # <<<<<<<<<<<<<<
 *         vector_t point
 *         RayCollection rc, rc_out
 */
  __pyx_v_wl_offset = 0;

  /* "raypier/core/ctracer.pyx":1969
 *         vector_t point
 *         RayCollection rc, rc_out
 *         list wl_list=[]             # <<<<<<<<<<<<<<
 *         np_.int64_t[:] inverse
 *         intersect_t it
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wl_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":1973
 *         intersect_t it
 * 
 *     rc_out = RayCollection(len(ray_col_list[0]))             # <<<<<<<<<<<<<<
 * 
 *     for j in range(len(ray_col_list)):
 */
  if (unlikely(__pyx_v_ray_col_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 1973, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_ITEM(__pyx_v_ray_col_list, 0);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1973, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rc_out = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":1975
 *     rc_out = RayCollection(len(ray_col_list[0]))
 * 
 *     for j in range(len(ray_col_list)):             # <<<<<<<<<<<<<<
 *         rc = <RayCollection>ray_col_list[j]
 *         wl_list.append(rc.wavelengths)
 */
  if (unlikely(__pyx_v_ray_col_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 1975, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_ray_col_list); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1975, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_2;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_j = __pyx_t_5;

    /* "raypier/core/ctracer.pyx":1976
 * 
 *     for j in range(len(ray_col_list)):
 *         rc = <RayCollection>ray_col_list[j]             # <<<<<<<<<<<<<<
 *         wl_list.append(rc.wavelengths)
 * 
 */
    if (unlikely(__pyx_v_ray_col_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 1976, __pyx_L1_error)
    }
    __pyx_t_3 = PyList_GET_ITEM(__pyx_v_ray_col_list, __pyx_v_j);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_rc, ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "raypier/core/ctracer.pyx":1977
 *     for j in range(len(ray_col_list)):
 *         rc = <RayCollection>ray_col_list[j]
 *         wl_list.append(rc.wavelengths)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(rc.n_rays):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rc), __pyx_n_s_wavelengths); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_wl_list, __pyx_t_3); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1977, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "raypier/core/ctracer.pyx":1979
 *         wl_list.append(rc.wavelengths)
 * 
 *         for i in range(rc.n_rays):             # <<<<<<<<<<<<<<
 *             ray = rc.rays[i] #need a copy of the ray to prevent mutating it in place
 *             point = addvv_(ray.origin,
 */
    __pyx_t_7 = __pyx_v_rc->n_rays;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":1980
 * 
 *         for i in range(rc.n_rays):
 *             ray = rc.rays[i] #need a copy of the ray to prevent mutating it in place             # <<<<<<<<<<<<<<
 *             point = addvv_(ray.origin,
 *                                 multvs_(ray.direction,
 */
      __pyx_v_ray = (__pyx_v_rc->rays[__pyx_v_i]);

      /* "raypier/core/ctracer.pyx":1981
 *         for i in range(rc.n_rays):
 *             ray = rc.rays[i] #need a copy of the ray to prevent mutating it in place
 *             point = addvv_(ray.origin,             # <<<<<<<<<<<<<<
 *                                 multvs_(ray.direction,
 *                                         ray.length))
 */
      __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray.origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray.direction, __pyx_v_ray.length));

      /* "raypier/core/ctracer.pyx":1985
 *                                         ray.length))
 * 
 *             it = (<FaceList>face_set).intersect_c(&ray, point)             # <<<<<<<<<<<<<<
 *             idx = it.face_idx
 *             if idx >= 0:
 */
      __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set)->__pyx_vtab)->intersect_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set), (&__pyx_v_ray), __pyx_v_point);

      /* "raypier/core/ctracer.pyx":1986
 * 
 *             it = (<FaceList>face_set).intersect_c(&ray, point)
 *             idx = it.face_idx             # <<<<<<<<<<<<<<
 *             if idx >= 0:
 *                 ray.wavelength_idx += wl_offset
 */
      __pyx_t_10 = __pyx_v_it.face_idx;
      __pyx_v_idx = __pyx_t_10;

      /* "raypier/core/ctracer.pyx":1987
 *             it = (<FaceList>face_set).intersect_c(&ray, point)
 *             idx = it.face_idx
 *             if idx >= 0:             # <<<<<<<<<<<<<<
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_ray_c(ray)
 */
      __pyx_t_11 = ((__pyx_v_idx >= 0) != 0);
      if (__pyx_t_11) {

        /* "raypier/core/ctracer.pyx":1988
 *             idx = it.face_idx
 *             if idx >= 0:
 *                 ray.wavelength_idx += wl_offset             # <<<<<<<<<<<<<<
 *                 rc_out.add_ray_c(ray)
 *         wl_offset += len(rc.wavelengths)
 */
        __pyx_v_ray.wavelength_idx = (__pyx_v_ray.wavelength_idx + __pyx_v_wl_offset);

        /* "raypier/core/ctracer.pyx":1989
 *             if idx >= 0:
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_ray_c(ray)             # <<<<<<<<<<<<<<
 *         wl_offset += len(rc.wavelengths)
 * 
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *)__pyx_v_rc_out->__pyx_base.__pyx_vtab)->add_ray_c(__pyx_v_rc_out, __pyx_v_ray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1989, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "raypier/core/ctracer.pyx":1987
 *             it = (<FaceList>face_set).intersect_c(&ray, point)
 *             idx = it.face_idx
 *             if idx >= 0:             # <<<<<<<<<<<<<<
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_ray_c(ray)
 */
      }
    }

    /* "raypier/core/ctracer.pyx":1990
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_ray_c(ray)
 *         wl_offset += len(rc.wavelengths)             # <<<<<<<<<<<<<<
 * 
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rc), __pyx_n_s_wavelengths); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_wl_offset = (__pyx_v_wl_offset + __pyx_t_12);
  }

  /* "raypier/core/ctracer.pyx":1992
 *         wl_offset += len(rc.wavelengths)
 * 
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)             # <<<<<<<<<<<<<<
 *     for i in range(len(rc_out)):
 *         idx = rc_out.rays[i].wavelength_idx
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_unique); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_3 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_13, __pyx_v_wl_list) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_wl_list);
  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return_inverse, Py_True) < 0) __PYX_ERR(1, 1992, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_13))) || (PyList_CheckExact(__pyx_t_13))) {
    PyObject* sequence = __pyx_t_13;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 1992, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_14);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    #endif
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_15 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_15(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_14 = __pyx_t_15(__pyx_t_1); if (unlikely(!__pyx_t_14)) goto __pyx_L8_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_14);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_1), 2) < 0) __PYX_ERR(1, 1992, __pyx_L1_error)
    __pyx_t_15 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L9_unpacking_done;
    __pyx_L8_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_15 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 1992, __pyx_L1_error)
    __pyx_L9_unpacking_done:;
  }
  __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_14, PyBUF_WRITABLE); if (unlikely(!__pyx_t_16.memview)) __PYX_ERR(1, 1992, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_reduced = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_inverse = __pyx_t_16;
  __pyx_t_16.memview = NULL;
  __pyx_t_16.data = NULL;

  /* "raypier/core/ctracer.pyx":1993
 * 
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)
 *     for i in range(len(rc_out)):             # <<<<<<<<<<<<<<
 *         idx = rc_out.rays[i].wavelength_idx
 *         rc_out.rays[i].wavelength_idx = inverse[idx]
 */
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_rc_out)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1993, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_2;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "raypier/core/ctracer.pyx":1994
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)
 *     for i in range(len(rc_out)):
 *         idx = rc_out.rays[i].wavelength_idx             # <<<<<<<<<<<<<<
 *         rc_out.rays[i].wavelength_idx = inverse[idx]
 * 
 */
    __pyx_t_17 = (__pyx_v_rc_out->rays[__pyx_v_i]).wavelength_idx;
    __pyx_v_idx = __pyx_t_17;

    /* "raypier/core/ctracer.pyx":1995
 *     for i in range(len(rc_out)):
 *         idx = rc_out.rays[i].wavelength_idx
 *         rc_out.rays[i].wavelength_idx = inverse[idx]             # <<<<<<<<<<<<<<
 * 
 *     rc_out.wavelengths = reduced
 */
    __pyx_t_18 = __pyx_v_idx;
    if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_inverse.shape[0];
    (__pyx_v_rc_out->rays[__pyx_v_i]).wavelength_idx = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_inverse.data + __pyx_t_18 * __pyx_v_inverse.strides[0]) )));
  }

  /* "raypier/core/ctracer.pyx":1997
 *         rc_out.rays[i].wavelength_idx = inverse[idx]
 * 
 *     rc_out.wavelengths = reduced             # <<<<<<<<<<<<<<
 *     return rc_out
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_rc_out), __pyx_n_s_wavelengths, __pyx_v_reduced) < 0) __PYX_ERR(1, 1997, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":1998
 * 
 *     rc_out.wavelengths = reduced
 *     return rc_out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rc_out));
  __pyx_r = ((PyObject *)__pyx_v_rc_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":1962
 * 
 * 
 * def select_ray_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.select_ray_intersections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rc);
  __Pyx_XDECREF((PyObject *)__pyx_v_rc_out);
  __Pyx_XDECREF(__pyx_v_wl_list);
  __PYX_XDEC_MEMVIEW(&__pyx_v_inverse, 1);
  __Pyx_XDECREF(__pyx_v_reduced);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2001
 * 
 * 
 * def select_gausslet_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_31select_gausslet_intersections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_31select_gausslet_intersections = {"select_gausslet_intersections", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_31select_gausslet_intersections, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_31select_gausslet_intersections(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set = 0;
  PyObject *__pyx_v_ray_col_list = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_gausslet_intersections (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_face_set,&__pyx_n_s_ray_col_list,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_set)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ray_col_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("select_gausslet_intersections", 1, 2, 2, 1); __PYX_ERR(1, 2001, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_gausslet_intersections") < 0)) __PYX_ERR(1, 2001, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_face_set = ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)values[0]);
    __pyx_v_ray_col_list = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_gausslet_intersections", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2001, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.select_gausslet_intersections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_set), __pyx_ptype_7raypier_4core_7ctracer_FaceList, 1, "face_set", 0))) __PYX_ERR(1, 2001, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ray_col_list), (&PyList_Type), 1, "ray_col_list", 1))) __PYX_ERR(1, 2001, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_30select_gausslet_intersections(__pyx_self, __pyx_v_face_set, __pyx_v_ray_col_list);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_30select_gausslet_intersections(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, PyObject *__pyx_v_ray_col_list) {
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t __pyx_v_g;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  int __pyx_v_idx;
  int __pyx_v_wl_offset;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rc = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rc_out = 0;
  PyObject *__pyx_v_wl_list = 0;
  __Pyx_memviewslice __pyx_v_inverse = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  PyObject *__pyx_v_reduced = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  unsigned long __pyx_t_7;
  unsigned long __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  unsigned int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("select_gausslet_intersections", 0);

  /* "raypier/core/ctracer.pyx":2006
 *         gausslet_t g
 *         ray_t *ray
 *         int idx, wl_offset=0             # <<<<<<<<<<<<<<
 *         vector_t point
 *         GaussletCollection rc, rc_out
 */
  __pyx_v_wl_offset = 0;

  /* "raypier/core/ctracer.pyx":2009
 *         vector_t point
 *         GaussletCollection rc, rc_out
 *         list wl_list=[]             # <<<<<<<<<<<<<<
 *         np_.int64_t[:] inverse
 *         intersect_t it
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wl_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":2013
 *         intersect_t it
 * 
 *     rc_out = GaussletCollection(len(ray_col_list[0]))             # <<<<<<<<<<<<<<
 * 
 *     for j in range(len(ray_col_list)):
 */
  if (unlikely(__pyx_v_ray_col_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 2013, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_ITEM(__pyx_v_ray_col_list, 0);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2013, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rc_out = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":2015
 *     rc_out = GaussletCollection(len(ray_col_list[0]))
 * 
 *     for j in range(len(ray_col_list)):             # <<<<<<<<<<<<<<
 *         rc = <GaussletCollection>ray_col_list[j]
 *         wl_list.append(rc.wavelengths)
 */
  if (unlikely(__pyx_v_ray_col_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 2015, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_ray_col_list); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2015, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_2;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_j = __pyx_t_5;

    /* "raypier/core/ctracer.pyx":2016
 * 
 *     for j in range(len(ray_col_list)):
 *         rc = <GaussletCollection>ray_col_list[j]             # <<<<<<<<<<<<<<
 *         wl_list.append(rc.wavelengths)
 * 
 */
    if (unlikely(__pyx_v_ray_col_list == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 2016, __pyx_L1_error)
    }
    __pyx_t_3 = PyList_GET_ITEM(__pyx_v_ray_col_list, __pyx_v_j);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_rc, ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "raypier/core/ctracer.pyx":2017
 *     for j in range(len(ray_col_list)):
 *         rc = <GaussletCollection>ray_col_list[j]
 *         wl_list.append(rc.wavelengths)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(rc.n_rays):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rc), __pyx_n_s_wavelengths); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_wl_list, __pyx_t_3); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 2017, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "raypier/core/ctracer.pyx":2019
 *         wl_list.append(rc.wavelengths)
 * 
 *         for i in range(rc.n_rays):             # <<<<<<<<<<<<<<
 *             g = rc.rays[i] #need a copy of the ray to prevent mutating it in place
 *             ray = &g.base_ray
 */
    __pyx_t_7 = __pyx_v_rc->n_rays;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":2020
 * 
 *         for i in range(rc.n_rays):
 *             g = rc.rays[i] #need a copy of the ray to prevent mutating it in place             # <<<<<<<<<<<<<<
 *             ray = &g.base_ray
 *             point = addvv_(ray.origin,
 */
      __pyx_v_g = (__pyx_v_rc->rays[__pyx_v_i]);

      /* "raypier/core/ctracer.pyx":2021
 *         for i in range(rc.n_rays):
 *             g = rc.rays[i] #need a copy of the ray to prevent mutating it in place
 *             ray = &g.base_ray             # <<<<<<<<<<<<<<
 *             point = addvv_(ray.origin,
 *                                 multvs_(ray.direction,
 */
      __pyx_v_ray = (&__pyx_v_g.base_ray);

      /* "raypier/core/ctracer.pyx":2022
 *             g = rc.rays[i] #need a copy of the ray to prevent mutating it in place
 *             ray = &g.base_ray
 *             point = addvv_(ray.origin,             # <<<<<<<<<<<<<<
 *                                 multvs_(ray.direction,
 *                                         ray.length))
 */
      __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_ray->length));

      /* "raypier/core/ctracer.pyx":2026
 *                                         ray.length))
 * 
 *             it = (<FaceList>face_set).intersect_c(ray, point)             # <<<<<<<<<<<<<<
 *             idx = it.face_idx
 *             if idx >= 0:
 */
      __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set)->__pyx_vtab)->intersect_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set), __pyx_v_ray, __pyx_v_point);

      /* "raypier/core/ctracer.pyx":2027
 * 
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             idx = it.face_idx             # <<<<<<<<<<<<<<
 *             if idx >= 0:
 *                 ray.wavelength_idx += wl_offset
 */
      __pyx_t_10 = __pyx_v_it.face_idx;
      __pyx_v_idx = __pyx_t_10;

      /* "raypier/core/ctracer.pyx":2028
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             idx = it.face_idx
 *             if idx >= 0:             # <<<<<<<<<<<<<<
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_gausslet_c(g)
 */
      __pyx_t_11 = ((__pyx_v_idx >= 0) != 0);
      if (__pyx_t_11) {

        /* "raypier/core/ctracer.pyx":2029
 *             idx = it.face_idx
 *             if idx >= 0:
 *                 ray.wavelength_idx += wl_offset             # <<<<<<<<<<<<<<
 *                 rc_out.add_gausslet_c(g)
 *         wl_offset += len(rc.wavelengths)
 */
        __pyx_v_ray->wavelength_idx = (__pyx_v_ray->wavelength_idx + __pyx_v_wl_offset);

        /* "raypier/core/ctracer.pyx":2030
 *             if idx >= 0:
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_gausslet_c(g)             # <<<<<<<<<<<<<<
 *         wl_offset += len(rc.wavelengths)
 * 
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_rc_out->__pyx_vtab)->add_gausslet_c(__pyx_v_rc_out, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "raypier/core/ctracer.pyx":2028
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             idx = it.face_idx
 *             if idx >= 0:             # <<<<<<<<<<<<<<
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_gausslet_c(g)
 */
      }
    }

    /* "raypier/core/ctracer.pyx":2031
 *                 ray.wavelength_idx += wl_offset
 *                 rc_out.add_gausslet_c(g)
 *         wl_offset += len(rc.wavelengths)             # <<<<<<<<<<<<<<
 * 
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rc), __pyx_n_s_wavelengths); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2031, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_wl_offset = (__pyx_v_wl_offset + __pyx_t_12);
  }

  /* "raypier/core/ctracer.pyx":2033
 *         wl_offset += len(rc.wavelengths)
 * 
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)             # <<<<<<<<<<<<<<
 *     for i in range(len(rc_out)):
 *         idx = rc_out.rays[i].base_ray.wavelength_idx
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_unique); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
    }
  }
  __pyx_t_3 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_13, __pyx_v_wl_list) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_wl_list);
  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return_inverse, Py_True) < 0) __PYX_ERR(1, 2033, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_13))) || (PyList_CheckExact(__pyx_t_13))) {
    PyObject* sequence = __pyx_t_13;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 2033, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_14);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2033, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 2033, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    #endif
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2033, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_15 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_15(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_14 = __pyx_t_15(__pyx_t_1); if (unlikely(!__pyx_t_14)) goto __pyx_L8_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_14);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_15(__pyx_t_1), 2) < 0) __PYX_ERR(1, 2033, __pyx_L1_error)
    __pyx_t_15 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L9_unpacking_done;
    __pyx_L8_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_15 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(1, 2033, __pyx_L1_error)
    __pyx_L9_unpacking_done:;
  }
  __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_t_14, PyBUF_WRITABLE); if (unlikely(!__pyx_t_16.memview)) __PYX_ERR(1, 2033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_reduced = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_inverse = __pyx_t_16;
  __pyx_t_16.memview = NULL;
  __pyx_t_16.data = NULL;

  /* "raypier/core/ctracer.pyx":2034
 * 
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)
 *     for i in range(len(rc_out)):             # <<<<<<<<<<<<<<
 *         idx = rc_out.rays[i].base_ray.wavelength_idx
 *         rc_out.rays[i].base_ray.wavelength_idx = inverse[idx]
 */
  __pyx_t_2 = PyObject_Length(((PyObject *)__pyx_v_rc_out)); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2034, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_2;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "raypier/core/ctracer.pyx":2035
 *     reduced, inverse = np.unique(np.concatenate(wl_list), return_inverse=True)
 *     for i in range(len(rc_out)):
 *         idx = rc_out.rays[i].base_ray.wavelength_idx             # <<<<<<<<<<<<<<
 *         rc_out.rays[i].base_ray.wavelength_idx = inverse[idx]
 * 
 */
    __pyx_t_17 = (__pyx_v_rc_out->rays[__pyx_v_i]).base_ray.wavelength_idx;
    __pyx_v_idx = __pyx_t_17;

    /* "raypier/core/ctracer.pyx":2036
 *     for i in range(len(rc_out)):
 *         idx = rc_out.rays[i].base_ray.wavelength_idx
 *         rc_out.rays[i].base_ray.wavelength_idx = inverse[idx]             # <<<<<<<<<<<<<<
 * 
 *     rc_out.wavelengths = reduced
 */
    __pyx_t_18 = __pyx_v_idx;
    if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_v_inverse.shape[0];
    (__pyx_v_rc_out->rays[__pyx_v_i]).base_ray.wavelength_idx = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_inverse.data + __pyx_t_18 * __pyx_v_inverse.strides[0]) )));
  }

  /* "raypier/core/ctracer.pyx":2038
 *         rc_out.rays[i].base_ray.wavelength_idx = inverse[idx]
 * 
 *     rc_out.wavelengths = reduced             # <<<<<<<<<<<<<<
 *     return rc_out
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_rc_out), __pyx_n_s_wavelengths, __pyx_v_reduced) < 0) __PYX_ERR(1, 2038, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2039
 * 
 *     rc_out.wavelengths = reduced
 *     return rc_out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rc_out));
  __pyx_r = ((PyObject *)__pyx_v_rc_out);
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2001
 * 
 * 
 * def select_gausslet_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __PYX_XDEC_MEMVIEW(&__pyx_t_16, 1);
  __Pyx_AddTraceback("raypier.core.ctracer.select_gausslet_intersections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rc);
  __Pyx_XDECREF((PyObject *)__pyx_v_rc_out);
  __Pyx_XDECREF(__pyx_v_wl_list);
  __PYX_XDEC_MEMVIEW(&__pyx_v_inverse, 1);
  __Pyx_XDECREF(__pyx_v_reduced);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2043
 * 
 * 
 * cdef RayCollection trace_segment_c(RayCollection rays,             # <<<<<<<<<<<<<<
 *                                     list face_sets,
 *                                     list all_faces,
 */

static struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_f_7raypier_4core_7ctracer_trace_segment_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays, PyObject *__pyx_v_face_sets, PyObject *__pyx_v_all_faces, CYTHON_UNUSED PyObject *__pyx_v_decomp_faces, float __pyx_v_max_length) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_n_sets;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient;
  int __pyx_v_nearest_set;
  int __pyx_v_nearest_idx;
  int __pyx_v_nearest_piece;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_new_rays = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned long __pyx_t_4;
  unsigned long __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_segment_c", 0);

  /* "raypier/core/ctracer.pyx":2051
 *         FaceList face_set #a FaceList
 *         Face face
 *         size_t i, j, n_sets=len(face_sets)             # <<<<<<<<<<<<<<
 *         vector_t point
 *         orientation_t orient
 */
  if (unlikely(__pyx_v_face_sets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 2051, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_face_sets); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2051, __pyx_L1_error)
  __pyx_v_n_sets = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":2054
 *         vector_t point
 *         orientation_t orient
 *         int idx, nearest_set=-1, nearest_idx=-1, nearest_piece             # <<<<<<<<<<<<<<
 *         ray_t *ray
 *         RayCollection new_rays
 */
  __pyx_v_nearest_set = -1;
  __pyx_v_nearest_idx = -1;

  /* "raypier/core/ctracer.pyx":2060
 * 
 *     #need to allocate the output rays here
 *     new_rays = RayCollection(rays.n_rays)             # <<<<<<<<<<<<<<
 *     new_rays.parent = rays
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_rays->n_rays); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_new_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":2061
 *     #need to allocate the output rays here
 *     new_rays = RayCollection(rays.n_rays)
 *     new_rays.parent = rays             # <<<<<<<<<<<<<<
 * 
 *     for i in range(rays.n_rays):
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_new_rays), __pyx_n_s_parent, ((PyObject *)__pyx_v_rays)) < 0) __PYX_ERR(1, 2061, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2063
 *     new_rays.parent = rays
 * 
 *     for i in range(rays.n_rays):             # <<<<<<<<<<<<<<
 *         ray = rays.rays + i
 *         ray.length = max_length
 */
  __pyx_t_4 = __pyx_v_rays->n_rays;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "raypier/core/ctracer.pyx":2064
 * 
 *     for i in range(rays.n_rays):
 *         ray = rays.rays + i             # <<<<<<<<<<<<<<
 *         ray.length = max_length
 *         ray.end_face_idx = -1
 */
    __pyx_v_ray = (__pyx_v_rays->rays + __pyx_v_i);

    /* "raypier/core/ctracer.pyx":2065
 *     for i in range(rays.n_rays):
 *         ray = rays.rays + i
 *         ray.length = max_length             # <<<<<<<<<<<<<<
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 */
    __pyx_v_ray->length = __pyx_v_max_length;

    /* "raypier/core/ctracer.pyx":2066
 *         ray = rays.rays + i
 *         ray.length = max_length
 *         ray.end_face_idx = -1             # <<<<<<<<<<<<<<
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,
 */
    __pyx_v_ray->end_face_idx = -1;

    /* "raypier/core/ctracer.pyx":2067
 *         ray.length = max_length
 *         ray.end_face_idx = -1
 *         nearest_idx=-1             # <<<<<<<<<<<<<<
 *         point = addvv_(ray.origin,
 *                             multvs_(ray.direction,
 */
    __pyx_v_nearest_idx = -1;

    /* "raypier/core/ctracer.pyx":2068
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,             # <<<<<<<<<<<<<<
 *                             multvs_(ray.direction,
 *                                     max_length))
 */
    __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_max_length));

    /* "raypier/core/ctracer.pyx":2072
 *                                     max_length))
 *         #print "points", P1, P2
 *         for j in range(n_sets):             # <<<<<<<<<<<<<<
 *             face_set = face_sets[j]
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 */
    __pyx_t_7 = __pyx_v_n_sets;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":2073
 *         #print "points", P1, P2
 *         for j in range(n_sets):
 *             face_set = face_sets[j]             # <<<<<<<<<<<<<<
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 */
      if (unlikely(__pyx_v_face_sets == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2073, __pyx_L1_error)
      }
      if (!(likely(((PyList_GET_ITEM(__pyx_v_face_sets, __pyx_v_j)) == Py_None) || likely(__Pyx_TypeTest(PyList_GET_ITEM(__pyx_v_face_sets, __pyx_v_j), __pyx_ptype_7raypier_4core_7ctracer_FaceList))))) __PYX_ERR(1, 2073, __pyx_L1_error)
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_face_sets, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_face_set, ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "raypier/core/ctracer.pyx":2075
 *             face_set = face_sets[j]
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)             # <<<<<<<<<<<<<<
 *             if it.face_idx >= 0:
 *                 nearest_set = j
 */
      __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set)->__pyx_vtab)->intersect_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set), __pyx_v_ray, __pyx_v_point);

      /* "raypier/core/ctracer.pyx":2076
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             if it.face_idx >= 0:             # <<<<<<<<<<<<<<
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx
 */
      __pyx_t_10 = ((__pyx_v_it.face_idx >= 0) != 0);
      if (__pyx_t_10) {

        /* "raypier/core/ctracer.pyx":2077
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             if it.face_idx >= 0:
 *                 nearest_set = j             # <<<<<<<<<<<<<<
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx
 */
        __pyx_v_nearest_set = __pyx_v_j;

        /* "raypier/core/ctracer.pyx":2078
 *             if it.face_idx >= 0:
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx             # <<<<<<<<<<<<<<
 *                 nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:
 */
        __pyx_t_11 = __pyx_v_it.face_idx;
        __pyx_v_nearest_idx = __pyx_t_11;

        /* "raypier/core/ctracer.pyx":2079
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx             # <<<<<<<<<<<<<<
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 */
        __pyx_t_11 = __pyx_v_it.piece_idx;
        __pyx_v_nearest_piece = __pyx_t_11;

        /* "raypier/core/ctracer.pyx":2076
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             if it.face_idx >= 0:             # <<<<<<<<<<<<<<
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx
 */
      }
    }

    /* "raypier/core/ctracer.pyx":2080
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    __pyx_t_10 = ((__pyx_v_nearest_idx >= 0) != 0);
    if (__pyx_t_10) {

      /* "raypier/core/ctracer.pyx":2082
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]             # <<<<<<<<<<<<<<
 *             face.count += 1
 *             #print "ray length", ray.length
 */
      if (unlikely(__pyx_v_all_faces == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2082, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_all_faces, __pyx_v_nearest_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2082, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 2082, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_face, ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "raypier/core/ctracer.pyx":2083
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 *             face.count += 1             # <<<<<<<<<<<<<<
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 */
      __pyx_v_face->count = (__pyx_v_face->count + 1);

      /* "raypier/core/ctracer.pyx":2085
 *             face.count += 1
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))             # <<<<<<<<<<<<<<
 *             orient = (<FaceList>(face_sets[nearest_set])).compute_orientation_c(face, point, nearest_piece)
 *             #print "s normal", normal
 */
      __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_ray->length));

      /* "raypier/core/ctracer.pyx":2086
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 *             orient = (<FaceList>(face_sets[nearest_set])).compute_orientation_c(face, point, nearest_piece)             # <<<<<<<<<<<<<<
 *             #print "s normal", normal
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,
 */
      if (unlikely(__pyx_v_face_sets == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2086, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_face_sets, __pyx_v_nearest_set, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2086, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_orient = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_t_3)->__pyx_vtab)->compute_orientation_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_t_3), __pyx_v_face, __pyx_v_point, __pyx_v_nearest_piece);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "raypier/core/ctracer.pyx":2088
 *             orient = (<FaceList>(face_sets[nearest_set])).compute_orientation_c(face, point, nearest_piece)
 *             #print "s normal", normal
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,             # <<<<<<<<<<<<<<
 *                                                     point,
 *                                                     orient,
 */
      ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material)->__pyx_vtab)->eval_child_ray_c(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material), __pyx_v_ray, __pyx_v_i, __pyx_v_point, __pyx_v_orient, __pyx_v_new_rays);

      /* "raypier/core/ctracer.pyx":2080
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    }
  }

  /* "raypier/core/ctracer.pyx":2093
 *                                                     new_rays
 *                                                     )
 *     return new_rays             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_new_rays));
  __pyx_r = __pyx_v_new_rays;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2043
 * 
 * 
 * cdef RayCollection trace_segment_c(RayCollection rays,             # <<<<<<<<<<<<<<
 *                                     list face_sets,
 *                                     list all_faces,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_segment_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_face_set);
  __Pyx_XDECREF((PyObject *)__pyx_v_face);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_rays);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2096
 * 
 * 
 * cdef RayCollection trace_one_face_segment_c(RayCollection rays,             # <<<<<<<<<<<<<<
 *                                     FaceList face_set,
 *                                     int face_idx,
 */

static struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_f_7raypier_4core_7ctracer_trace_one_face_segment_c(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, int __pyx_v_face_idx, PyObject *__pyx_v_all_faces, CYTHON_UNUSED PyObject *__pyx_v_decomp_faces, float __pyx_v_max_length) {
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  size_t __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient;
  int __pyx_v_idx;
  int __pyx_v_nearest_idx;
  int __pyx_v_nearest_piece;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_new_rays = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_one_face_segment_c", 0);

  /* "raypier/core/ctracer.pyx":2107
 *         vector_t point
 *         orientation_t orient
 *         int idx, nearest_idx=-1, nearest_piece=0             # <<<<<<<<<<<<<<
 *         ray_t *ray
 *         RayCollection new_rays
 */
  __pyx_v_nearest_idx = -1;
  __pyx_v_nearest_piece = 0;

  /* "raypier/core/ctracer.pyx":2113
 * 
 *     #need to allocate the output rays here
 *     new_rays = RayCollection(rays.n_rays)             # <<<<<<<<<<<<<<
 *     new_rays.parent = rays
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_rays->n_rays); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_new_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":2114
 *     #need to allocate the output rays here
 *     new_rays = RayCollection(rays.n_rays)
 *     new_rays.parent = rays             # <<<<<<<<<<<<<<
 * 
 *     for i in range(rays.n_rays):
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_new_rays), __pyx_n_s_parent, ((PyObject *)__pyx_v_rays)) < 0) __PYX_ERR(1, 2114, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2116
 *     new_rays.parent = rays
 * 
 *     for i in range(rays.n_rays):             # <<<<<<<<<<<<<<
 *         ray = rays.rays + i
 *         ray.length = max_length
 */
  __pyx_t_3 = __pyx_v_rays->n_rays;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "raypier/core/ctracer.pyx":2117
 * 
 *     for i in range(rays.n_rays):
 *         ray = rays.rays + i             # <<<<<<<<<<<<<<
 *         ray.length = max_length
 *         ray.end_face_idx = -1
 */
    __pyx_v_ray = (__pyx_v_rays->rays + __pyx_v_i);

    /* "raypier/core/ctracer.pyx":2118
 *     for i in range(rays.n_rays):
 *         ray = rays.rays + i
 *         ray.length = max_length             # <<<<<<<<<<<<<<
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 */
    __pyx_v_ray->length = __pyx_v_max_length;

    /* "raypier/core/ctracer.pyx":2119
 *         ray = rays.rays + i
 *         ray.length = max_length
 *         ray.end_face_idx = -1             # <<<<<<<<<<<<<<
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,
 */
    __pyx_v_ray->end_face_idx = -1;

    /* "raypier/core/ctracer.pyx":2120
 *         ray.length = max_length
 *         ray.end_face_idx = -1
 *         nearest_idx=-1             # <<<<<<<<<<<<<<
 *         point = addvv_(ray.origin,
 *                             multvs_(ray.direction,
 */
    __pyx_v_nearest_idx = -1;

    /* "raypier/core/ctracer.pyx":2121
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,             # <<<<<<<<<<<<<<
 *                             multvs_(ray.direction,
 *                                     max_length))
 */
    __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_max_length));

    /* "raypier/core/ctracer.pyx":2126
 *         #print "points", P1, P2
 *         #intersect_c returns the face idx of the intersection, or -1 otherwise
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)             # <<<<<<<<<<<<<<
 *         idx = it.face_idx
 *         if idx >= 0:
 */
    __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set)->__pyx_vtab)->intersect_one_face_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set), __pyx_v_ray, __pyx_v_point, __pyx_v_face_idx);

    /* "raypier/core/ctracer.pyx":2127
 *         #intersect_c returns the face idx of the intersection, or -1 otherwise
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)
 *         idx = it.face_idx             # <<<<<<<<<<<<<<
 *         if idx >= 0:
 *             nearest_idx = idx
 */
    __pyx_t_6 = __pyx_v_it.face_idx;
    __pyx_v_idx = __pyx_t_6;

    /* "raypier/core/ctracer.pyx":2128
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)
 *         idx = it.face_idx
 *         if idx >= 0:             # <<<<<<<<<<<<<<
 *             nearest_idx = idx
 *             nearest_piece = it.piece_idx
 */
    __pyx_t_7 = ((__pyx_v_idx >= 0) != 0);
    if (__pyx_t_7) {

      /* "raypier/core/ctracer.pyx":2129
 *         idx = it.face_idx
 *         if idx >= 0:
 *             nearest_idx = idx             # <<<<<<<<<<<<<<
 *             nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:
 */
      __pyx_v_nearest_idx = __pyx_v_idx;

      /* "raypier/core/ctracer.pyx":2130
 *         if idx >= 0:
 *             nearest_idx = idx
 *             nearest_piece = it.piece_idx             # <<<<<<<<<<<<<<
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 */
      __pyx_t_6 = __pyx_v_it.piece_idx;
      __pyx_v_nearest_piece = __pyx_t_6;

      /* "raypier/core/ctracer.pyx":2128
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)
 *         idx = it.face_idx
 *         if idx >= 0:             # <<<<<<<<<<<<<<
 *             nearest_idx = idx
 *             nearest_piece = it.piece_idx
 */
    }

    /* "raypier/core/ctracer.pyx":2131
 *             nearest_idx = idx
 *             nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    __pyx_t_7 = ((__pyx_v_nearest_idx >= 0) != 0);
    if (__pyx_t_7) {

      /* "raypier/core/ctracer.pyx":2133
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]             # <<<<<<<<<<<<<<
 *             face.count += 1
 *             #print "ray length", ray.length
 */
      if (unlikely(__pyx_v_all_faces == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2133, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_all_faces, __pyx_v_nearest_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 2133, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_face, ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "raypier/core/ctracer.pyx":2134
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 *             face.count += 1             # <<<<<<<<<<<<<<
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 */
      __pyx_v_face->count = (__pyx_v_face->count + 1);

      /* "raypier/core/ctracer.pyx":2136
 *             face.count += 1
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))             # <<<<<<<<<<<<<<
 *             orient = (<FaceList>face_set).compute_orientation_c(face, point, nearest_piece)
 *             #print "s normal", normal
 */
      __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_ray->length));

      /* "raypier/core/ctracer.pyx":2137
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 *             orient = (<FaceList>face_set).compute_orientation_c(face, point, nearest_piece)             # <<<<<<<<<<<<<<
 *             #print "s normal", normal
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,
 */
      __pyx_v_orient = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set)->__pyx_vtab)->compute_orientation_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set), __pyx_v_face, __pyx_v_point, __pyx_v_nearest_piece);

      /* "raypier/core/ctracer.pyx":2139
 *             orient = (<FaceList>face_set).compute_orientation_c(face, point, nearest_piece)
 *             #print "s normal", normal
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,             # <<<<<<<<<<<<<<
 *                                                     point,
 *                                                     orient,
 */
      ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material)->__pyx_vtab)->eval_child_ray_c(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material), __pyx_v_ray, __pyx_v_i, __pyx_v_point, __pyx_v_orient, __pyx_v_new_rays);

      /* "raypier/core/ctracer.pyx":2131
 *             nearest_idx = idx
 *             nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    }
  }

  /* "raypier/core/ctracer.pyx":2144
 *                                                     new_rays
 *                                                     )
 *     return new_rays             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_new_rays));
  __pyx_r = __pyx_v_new_rays;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2096
 * 
 * 
 * cdef RayCollection trace_one_face_segment_c(RayCollection rays,             # <<<<<<<<<<<<<<
 *                                     FaceList face_set,
 *                                     int face_idx,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_one_face_segment_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_face);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_rays);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2147
 * 
 * 
 * def trace_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_33trace_segment(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_33trace_segment = {"trace_segment", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_33trace_segment, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_33trace_segment(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays = 0;
  PyObject *__pyx_v_face_sets = 0;
  PyObject *__pyx_v_all_faces = 0;
  PyObject *__pyx_v_max_length = 0;
  PyObject *__pyx_v_decomp_faces = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trace_segment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rays,&__pyx_n_s_face_sets,&__pyx_n_s_all_faces,&__pyx_n_s_max_length,&__pyx_n_s_decomp_faces,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_100);
    values[4] = __pyx_k__32;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rays)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_sets)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_segment", 0, 3, 5, 1); __PYX_ERR(1, 2147, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_faces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_segment", 0, 3, 5, 2); __PYX_ERR(1, 2147, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_length);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_decomp_faces);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "trace_segment") < 0)) __PYX_ERR(1, 2147, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)values[0]);
    __pyx_v_face_sets = ((PyObject*)values[1]);
    __pyx_v_all_faces = ((PyObject*)values[2]);
    __pyx_v_max_length = values[3];
    __pyx_v_decomp_faces = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trace_segment", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2147, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.trace_segment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), __pyx_ptype_7raypier_4core_7ctracer_RayCollection, 1, "rays", 0))) __PYX_ERR(1, 2147, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_sets), (&PyList_Type), 1, "face_sets", 1))) __PYX_ERR(1, 2148, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_faces), (&PyList_Type), 1, "all_faces", 1))) __PYX_ERR(1, 2149, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_32trace_segment(__pyx_self, __pyx_v_rays, __pyx_v_face_sets, __pyx_v_all_faces, __pyx_v_max_length, __pyx_v_decomp_faces);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_32trace_segment(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays, PyObject *__pyx_v_face_sets, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_fs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_segment", 0);

  /* "raypier/core/ctracer.pyx":2154
 *     cdef:
 *         FaceList fs
 *     for fs in face_sets:             # <<<<<<<<<<<<<<
 *         fs.sync_transforms()
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)
 */
  if (unlikely(__pyx_v_face_sets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 2154, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_face_sets; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 2154, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7raypier_4core_7ctracer_FaceList))))) __PYX_ERR(1, 2154, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fs, ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "raypier/core/ctracer.pyx":2155
 *         FaceList fs
 *     for fs in face_sets:
 *         fs.sync_transforms()             # <<<<<<<<<<<<<<
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 */
    ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_fs->__pyx_vtab)->sync_transforms(__pyx_v_fs, 0);

    /* "raypier/core/ctracer.pyx":2154
 *     cdef:
 *         FaceList fs
 *     for fs in face_sets:             # <<<<<<<<<<<<<<
 *         fs.sync_transforms()
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":2156
 *     for fs in face_sets:
 *         fs.sync_transforms()
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)             # <<<<<<<<<<<<<<
 * 
 * def trace_one_face_segment(RayCollection rays,
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_decomp_faces))||((__pyx_v_decomp_faces) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_decomp_faces)->tp_name), 0))) __PYX_ERR(1, 2156, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_v_max_length); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 2156, __pyx_L1_error)
  __pyx_t_1 = ((PyObject *)__pyx_f_7raypier_4core_7ctracer_trace_segment_c(__pyx_v_rays, __pyx_v_face_sets, __pyx_v_all_faces, ((PyObject*)__pyx_v_decomp_faces), __pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2147
 * 
 * 
 * def trace_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_segment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2158
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_35trace_one_face_segment(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_35trace_one_face_segment = {"trace_one_face_segment", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_35trace_one_face_segment, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_35trace_one_face_segment(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set = 0;
  int __pyx_v_face_idx;
  PyObject *__pyx_v_all_faces = 0;
  PyObject *__pyx_v_max_length = 0;
  PyObject *__pyx_v_decomp_faces = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trace_one_face_segment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rays,&__pyx_n_s_face_set,&__pyx_n_s_face_idx,&__pyx_n_s_all_faces,&__pyx_n_s_max_length,&__pyx_n_s_decomp_faces,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_int_100);
    values[5] = __pyx_k__33;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rays)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_set)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_one_face_segment", 0, 4, 6, 1); __PYX_ERR(1, 2158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_one_face_segment", 0, 4, 6, 2); __PYX_ERR(1, 2158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_faces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_one_face_segment", 0, 4, 6, 3); __PYX_ERR(1, 2158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_length);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_decomp_faces);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "trace_one_face_segment") < 0)) __PYX_ERR(1, 2158, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)values[0]);
    __pyx_v_face_set = ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)values[1]);
    __pyx_v_face_idx = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_face_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2160, __pyx_L3_error)
    __pyx_v_all_faces = ((PyObject*)values[3]);
    __pyx_v_max_length = values[4];
    __pyx_v_decomp_faces = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trace_one_face_segment", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.trace_one_face_segment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), __pyx_ptype_7raypier_4core_7ctracer_RayCollection, 1, "rays", 0))) __PYX_ERR(1, 2158, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_set), __pyx_ptype_7raypier_4core_7ctracer_FaceList, 1, "face_set", 0))) __PYX_ERR(1, 2159, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_faces), (&PyList_Type), 1, "all_faces", 1))) __PYX_ERR(1, 2161, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_34trace_one_face_segment(__pyx_self, __pyx_v_rays, __pyx_v_face_set, __pyx_v_face_idx, __pyx_v_all_faces, __pyx_v_max_length, __pyx_v_decomp_faces);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_34trace_one_face_segment(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_rays, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, int __pyx_v_face_idx, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_one_face_segment", 0);

  /* "raypier/core/ctracer.pyx":2164
 *                     max_length=100,
 *                     decomp_faces=[]):
 *     face_set.sync_transforms()             # <<<<<<<<<<<<<<
 *     return trace_one_face_segment_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 * 
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set->__pyx_vtab)->sync_transforms(__pyx_v_face_set, 0);

  /* "raypier/core/ctracer.pyx":2165
 *                     decomp_faces=[]):
 *     face_set.sync_transforms()
 *     return trace_one_face_segment_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)             # <<<<<<<<<<<<<<
 * 
 * def trace_gausslet(GaussletCollection rays,
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_decomp_faces))||((__pyx_v_decomp_faces) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_decomp_faces)->tp_name), 0))) __PYX_ERR(1, 2165, __pyx_L1_error)
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_max_length); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 2165, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_7raypier_4core_7ctracer_trace_one_face_segment_c(__pyx_v_rays, __pyx_v_face_set, __pyx_v_face_idx, __pyx_v_all_faces, ((PyObject*)__pyx_v_decomp_faces), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2158
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_one_face_segment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2167
 *     return trace_one_face_segment_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 * 
 * def trace_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_37trace_gausslet(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_37trace_gausslet = {"trace_gausslet", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_37trace_gausslet, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_37trace_gausslet(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays = 0;
  PyObject *__pyx_v_face_sets = 0;
  PyObject *__pyx_v_all_faces = 0;
  PyObject *__pyx_v_max_length = 0;
  PyObject *__pyx_v_decomp_faces = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trace_gausslet (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rays,&__pyx_n_s_face_sets,&__pyx_n_s_all_faces,&__pyx_n_s_max_length,&__pyx_n_s_decomp_faces,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_int_100);
    values[4] = __pyx_k__34;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rays)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_sets)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_gausslet", 0, 3, 5, 1); __PYX_ERR(1, 2167, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_faces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_gausslet", 0, 3, 5, 2); __PYX_ERR(1, 2167, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_length);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_decomp_faces);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "trace_gausslet") < 0)) __PYX_ERR(1, 2167, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)values[0]);
    __pyx_v_face_sets = ((PyObject*)values[1]);
    __pyx_v_all_faces = ((PyObject*)values[2]);
    __pyx_v_max_length = values[3];
    __pyx_v_decomp_faces = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trace_gausslet", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2167, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.trace_gausslet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, 1, "rays", 0))) __PYX_ERR(1, 2167, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_sets), (&PyList_Type), 1, "face_sets", 1))) __PYX_ERR(1, 2168, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_faces), (&PyList_Type), 1, "all_faces", 1))) __PYX_ERR(1, 2169, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_36trace_gausslet(__pyx_self, __pyx_v_rays, __pyx_v_face_sets, __pyx_v_all_faces, __pyx_v_max_length, __pyx_v_decomp_faces);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_36trace_gausslet(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays, PyObject *__pyx_v_face_sets, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_fs = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_gausslet", 0);

  /* "raypier/core/ctracer.pyx":2174
 *     cdef:
 *         FaceList fs
 *     for fs in face_sets:             # <<<<<<<<<<<<<<
 *         (<FaceList>fs).sync_transforms()
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)
 */
  if (unlikely(__pyx_v_face_sets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 2174, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_face_sets; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 2174, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7raypier_4core_7ctracer_FaceList))))) __PYX_ERR(1, 2174, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fs, ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "raypier/core/ctracer.pyx":2175
 *         FaceList fs
 *     for fs in face_sets:
 *         (<FaceList>fs).sync_transforms()             # <<<<<<<<<<<<<<
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 */
    ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_fs)->__pyx_vtab)->sync_transforms(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_fs), 0);

    /* "raypier/core/ctracer.pyx":2174
 *     cdef:
 *         FaceList fs
 *     for fs in face_sets:             # <<<<<<<<<<<<<<
 *         (<FaceList>fs).sync_transforms()
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":2176
 *     for fs in face_sets:
 *         (<FaceList>fs).sync_transforms()
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)             # <<<<<<<<<<<<<<
 * 
 * def trace_one_face_gausslet(GaussletCollection rays,
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_decomp_faces))||((__pyx_v_decomp_faces) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_decomp_faces)->tp_name), 0))) __PYX_ERR(1, 2176, __pyx_L1_error)
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_max_length); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2176, __pyx_L1_error)
  __pyx_t_1 = ((PyObject *)__pyx_f_7raypier_4core_7ctracer_trace_gausslet_c(__pyx_v_rays, __pyx_v_face_sets, __pyx_v_all_faces, ((PyObject*)__pyx_v_decomp_faces), __pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2167
 *     return trace_one_face_segment_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 * 
 * def trace_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_gausslet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2178
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_39trace_one_face_gausslet(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_39trace_one_face_gausslet = {"trace_one_face_gausslet", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_39trace_one_face_gausslet, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_39trace_one_face_gausslet(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set = 0;
  int __pyx_v_face_idx;
  PyObject *__pyx_v_all_faces = 0;
  PyObject *__pyx_v_max_length = 0;
  PyObject *__pyx_v_decomp_faces = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("trace_one_face_gausslet (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rays,&__pyx_n_s_face_set,&__pyx_n_s_face_idx,&__pyx_n_s_all_faces,&__pyx_n_s_max_length,&__pyx_n_s_decomp_faces,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_int_100);
    values[5] = __pyx_k__35;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rays)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_set)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_one_face_gausslet", 0, 4, 6, 1); __PYX_ERR(1, 2178, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_face_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_one_face_gausslet", 0, 4, 6, 2); __PYX_ERR(1, 2178, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_all_faces)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("trace_one_face_gausslet", 0, 4, 6, 3); __PYX_ERR(1, 2178, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_length);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_decomp_faces);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "trace_one_face_gausslet") < 0)) __PYX_ERR(1, 2178, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)values[0]);
    __pyx_v_face_set = ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)values[1]);
    __pyx_v_face_idx = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_face_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 2180, __pyx_L3_error)
    __pyx_v_all_faces = ((PyObject*)values[3]);
    __pyx_v_max_length = values[4];
    __pyx_v_decomp_faces = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("trace_one_face_gausslet", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2178, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.trace_one_face_gausslet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rays), __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, 1, "rays", 0))) __PYX_ERR(1, 2178, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_face_set), __pyx_ptype_7raypier_4core_7ctracer_FaceList, 1, "face_set", 0))) __PYX_ERR(1, 2179, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_all_faces), (&PyList_Type), 1, "all_faces", 1))) __PYX_ERR(1, 2181, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_38trace_one_face_gausslet(__pyx_self, __pyx_v_rays, __pyx_v_face_set, __pyx_v_face_idx, __pyx_v_all_faces, __pyx_v_max_length, __pyx_v_decomp_faces);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_38trace_one_face_gausslet(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_rays, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, int __pyx_v_face_idx, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_max_length, PyObject *__pyx_v_decomp_faces) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_one_face_gausslet", 0);

  /* "raypier/core/ctracer.pyx":2184
 *                     max_length=100,
 *                     decomp_faces=[]):
 *     face_set.sync_transforms()             # <<<<<<<<<<<<<<
 *     return trace_one_face_gausslet_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 * 
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set->__pyx_vtab)->sync_transforms(__pyx_v_face_set, 0);

  /* "raypier/core/ctracer.pyx":2185
 *                     decomp_faces=[]):
 *     face_set.sync_transforms()
 *     return trace_one_face_gausslet_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_decomp_faces))||((__pyx_v_decomp_faces) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_decomp_faces)->tp_name), 0))) __PYX_ERR(1, 2185, __pyx_L1_error)
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_max_length); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2185, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)__pyx_f_7raypier_4core_7ctracer_trace_one_face_gausslet_c(__pyx_v_rays, __pyx_v_face_set, __pyx_v_face_idx, __pyx_v_all_faces, ((PyObject*)__pyx_v_decomp_faces), __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2178
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_one_face_gausslet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2188
 * 
 * 
 * cdef GaussletCollection trace_gausslet_c(GaussletCollection gausslets,             # <<<<<<<<<<<<<<
 *                                     list face_sets,
 *                                     list all_faces,
 */

static struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_f_7raypier_4core_7ctracer_trace_gausslet_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gausslets, PyObject *__pyx_v_face_sets, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_decomp_faces, double __pyx_v_max_length) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_n_sets;
  size_t __pyx_v_n_decomp;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient;
  int __pyx_v_nearest_set;
  int __pyx_v_nearest_idx;
  int __pyx_v_nearest_piece;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *__pyx_v_gausslet;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_new_gausslets = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_child_rays = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned long __pyx_t_4;
  unsigned long __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_gausslet_c", 0);

  /* "raypier/core/ctracer.pyx":2196
 *         FaceList face_set #a FaceList
 *         Face face
 *         size_t i, j, n_sets=len(face_sets), n_decomp = len(decomp_faces)             # <<<<<<<<<<<<<<
 *         vector_t point
 *         orientation_t orient
 */
  if (unlikely(__pyx_v_face_sets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 2196, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_face_sets); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2196, __pyx_L1_error)
  __pyx_v_n_sets = __pyx_t_1;
  if (unlikely(__pyx_v_decomp_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 2196, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_decomp_faces); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2196, __pyx_L1_error)
  __pyx_v_n_decomp = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":2199
 *         vector_t point
 *         orientation_t orient
 *         int idx, nearest_set=-1, nearest_idx=-1, nearest_piece=0             # <<<<<<<<<<<<<<
 *         gausslet_t *gausslet
 *         ray_t *ray
 */
  __pyx_v_nearest_set = -1;
  __pyx_v_nearest_idx = -1;
  __pyx_v_nearest_piece = 0;

  /* "raypier/core/ctracer.pyx":2207
 * 
 *     #need to allocate the output rays here
 *     new_gausslets = GaussletCollection(gausslets.n_rays)             # <<<<<<<<<<<<<<
 *     new_gausslets.parent = gausslets
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_gausslets->n_rays); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_new_gausslets = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":2208
 *     #need to allocate the output rays here
 *     new_gausslets = GaussletCollection(gausslets.n_rays)
 *     new_gausslets.parent = gausslets             # <<<<<<<<<<<<<<
 * 
 *     child_rays = RayCollection(2)
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_new_gausslets), __pyx_n_s_parent, ((PyObject *)__pyx_v_gausslets)) < 0) __PYX_ERR(1, 2208, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2210
 *     new_gausslets.parent = gausslets
 * 
 *     child_rays = RayCollection(2)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(gausslets.n_rays):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection), __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_child_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":2212
 *     child_rays = RayCollection(2)
 * 
 *     for i in range(gausslets.n_rays):             # <<<<<<<<<<<<<<
 *         gausslet = gausslets.rays + i
 *         ray = &gausslet.base_ray
 */
  __pyx_t_4 = __pyx_v_gausslets->n_rays;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "raypier/core/ctracer.pyx":2213
 * 
 *     for i in range(gausslets.n_rays):
 *         gausslet = gausslets.rays + i             # <<<<<<<<<<<<<<
 *         ray = &gausslet.base_ray
 *         ray.end_face_idx = -1
 */
    __pyx_v_gausslet = (__pyx_v_gausslets->rays + __pyx_v_i);

    /* "raypier/core/ctracer.pyx":2214
 *     for i in range(gausslets.n_rays):
 *         gausslet = gausslets.rays + i
 *         ray = &gausslet.base_ray             # <<<<<<<<<<<<<<
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 */
    __pyx_v_ray = (&__pyx_v_gausslet->base_ray);

    /* "raypier/core/ctracer.pyx":2215
 *         gausslet = gausslets.rays + i
 *         ray = &gausslet.base_ray
 *         ray.end_face_idx = -1             # <<<<<<<<<<<<<<
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,
 */
    __pyx_v_ray->end_face_idx = -1;

    /* "raypier/core/ctracer.pyx":2216
 *         ray = &gausslet.base_ray
 *         ray.end_face_idx = -1
 *         nearest_idx=-1             # <<<<<<<<<<<<<<
 *         point = addvv_(ray.origin,
 *                             multvs_(ray.direction,
 */
    __pyx_v_nearest_idx = -1;

    /* "raypier/core/ctracer.pyx":2217
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,             # <<<<<<<<<<<<<<
 *                             multvs_(ray.direction,
 *                                     max_length))
 */
    __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_max_length));

    /* "raypier/core/ctracer.pyx":2221
 *                                     max_length))
 *         #print "points", P1, P2
 *         for j in range(n_sets):             # <<<<<<<<<<<<<<
 *             face_set = face_sets[j]
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 */
    __pyx_t_7 = __pyx_v_n_sets;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "raypier/core/ctracer.pyx":2222
 *         #print "points", P1, P2
 *         for j in range(n_sets):
 *             face_set = face_sets[j]             # <<<<<<<<<<<<<<
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 */
      if (unlikely(__pyx_v_face_sets == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2222, __pyx_L1_error)
      }
      if (!(likely(((PyList_GET_ITEM(__pyx_v_face_sets, __pyx_v_j)) == Py_None) || likely(__Pyx_TypeTest(PyList_GET_ITEM(__pyx_v_face_sets, __pyx_v_j), __pyx_ptype_7raypier_4core_7ctracer_FaceList))))) __PYX_ERR(1, 2222, __pyx_L1_error)
      __pyx_t_3 = PyList_GET_ITEM(__pyx_v_face_sets, __pyx_v_j);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_face_set, ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "raypier/core/ctracer.pyx":2224
 *             face_set = face_sets[j]
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)             # <<<<<<<<<<<<<<
 *             if it.face_idx >= 0:
 *                 nearest_set = j
 */
      __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set)->__pyx_vtab)->intersect_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set), __pyx_v_ray, __pyx_v_point);

      /* "raypier/core/ctracer.pyx":2225
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             if it.face_idx >= 0:             # <<<<<<<<<<<<<<
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx
 */
      __pyx_t_10 = ((__pyx_v_it.face_idx >= 0) != 0);
      if (__pyx_t_10) {

        /* "raypier/core/ctracer.pyx":2226
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             if it.face_idx >= 0:
 *                 nearest_set = j             # <<<<<<<<<<<<<<
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx
 */
        __pyx_v_nearest_set = __pyx_v_j;

        /* "raypier/core/ctracer.pyx":2227
 *             if it.face_idx >= 0:
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx             # <<<<<<<<<<<<<<
 *                 nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:
 */
        __pyx_t_11 = __pyx_v_it.face_idx;
        __pyx_v_nearest_idx = __pyx_t_11;

        /* "raypier/core/ctracer.pyx":2228
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx             # <<<<<<<<<<<<<<
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 */
        __pyx_t_11 = __pyx_v_it.piece_idx;
        __pyx_v_nearest_piece = __pyx_t_11;

        /* "raypier/core/ctracer.pyx":2225
 *             #intersect_c returns the face idx of the intersection, or -1 otherwise
 *             it = (<FaceList>face_set).intersect_c(ray, point)
 *             if it.face_idx >= 0:             # <<<<<<<<<<<<<<
 *                 nearest_set = j
 *                 nearest_idx = it.face_idx
 */
      }
    }

    /* "raypier/core/ctracer.pyx":2229
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    __pyx_t_10 = ((__pyx_v_nearest_idx >= 0) != 0);
    if (__pyx_t_10) {

      /* "raypier/core/ctracer.pyx":2231
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]             # <<<<<<<<<<<<<<
 *             face.count += 1
 *             #print "ray length", ray.length
 */
      if (unlikely(__pyx_v_all_faces == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2231, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_all_faces, __pyx_v_nearest_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2231, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 2231, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_face, ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "raypier/core/ctracer.pyx":2232
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 *             face.count += 1             # <<<<<<<<<<<<<<
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 */
      __pyx_v_face->count = (__pyx_v_face->count + 1);

      /* "raypier/core/ctracer.pyx":2234
 *             face.count += 1
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))             # <<<<<<<<<<<<<<
 *             face_set = (<FaceList>(face_sets[nearest_set]))
 *             orient = face_set.compute_orientation_c(face, point, nearest_piece)
 */
      __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_ray->length));

      /* "raypier/core/ctracer.pyx":2235
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 *             face_set = (<FaceList>(face_sets[nearest_set]))             # <<<<<<<<<<<<<<
 *             orient = face_set.compute_orientation_c(face, point, nearest_piece)
 *             #print "s normal", normal
 */
      if (unlikely(__pyx_v_face_sets == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2235, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_face_sets, __pyx_v_nearest_set, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_t_3;
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_face_set, ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "raypier/core/ctracer.pyx":2236
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 *             face_set = (<FaceList>(face_sets[nearest_set]))
 *             orient = face_set.compute_orientation_c(face, point, nearest_piece)             # <<<<<<<<<<<<<<
 *             #print "s normal", normal
 *             ### Clear the child_rays structure
 */
      __pyx_v_orient = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set->__pyx_vtab)->compute_orientation_c(__pyx_v_face_set, __pyx_v_face, __pyx_v_point, __pyx_v_nearest_piece);

      /* "raypier/core/ctracer.pyx":2239
 *             #print "s normal", normal
 *             ### Clear the child_rays structure
 *             child_rays.n_rays = 0             # <<<<<<<<<<<<<<
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,
 *                                                     point,
 */
      __pyx_v_child_rays->n_rays = 0;

      /* "raypier/core/ctracer.pyx":2240
 *             ### Clear the child_rays structure
 *             child_rays.n_rays = 0
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,             # <<<<<<<<<<<<<<
 *                                                     point,
 *                                                     orient,
 */
      ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material)->__pyx_vtab)->eval_child_ray_c(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material), __pyx_v_ray, __pyx_v_i, __pyx_v_point, __pyx_v_orient, __pyx_v_child_rays);

      /* "raypier/core/ctracer.pyx":2245
 *                                                     child_rays
 *                                                     )
 *             trace_parabasal_rays(gausslet, child_rays, face, face_set, new_gausslets, max_length, nearest_piece)             # <<<<<<<<<<<<<<
 * 
 *     for j in range(n_decomp):
 */
      __pyx_f_7raypier_4core_7ctracer_trace_parabasal_rays(__pyx_v_gausslet, __pyx_v_child_rays, __pyx_v_face, __pyx_v_face_set, __pyx_v_new_gausslets, __pyx_v_max_length, __pyx_v_nearest_piece);

      /* "raypier/core/ctracer.pyx":2229
 *                 nearest_idx = it.face_idx
 *                 nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    }
  }

  /* "raypier/core/ctracer.pyx":2247
 *             trace_parabasal_rays(gausslet, child_rays, face, face_set, new_gausslets, max_length, nearest_piece)
 * 
 *     for j in range(n_decomp):             # <<<<<<<<<<<<<<
 *         face = decomp_faces[j]
 *         if face.count:
 */
  __pyx_t_6 = __pyx_v_n_decomp;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_j = __pyx_t_8;

    /* "raypier/core/ctracer.pyx":2248
 * 
 *     for j in range(n_decomp):
 *         face = decomp_faces[j]             # <<<<<<<<<<<<<<
 *         if face.count:
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 */
    if (unlikely(__pyx_v_decomp_faces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 2248, __pyx_L1_error)
    }
    if (!(likely(((PyList_GET_ITEM(__pyx_v_decomp_faces, __pyx_v_j)) == Py_None) || likely(__Pyx_TypeTest(PyList_GET_ITEM(__pyx_v_decomp_faces, __pyx_v_j), __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 2248, __pyx_L1_error)
    __pyx_t_2 = PyList_GET_ITEM(__pyx_v_decomp_faces, __pyx_v_j);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_face, ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "raypier/core/ctracer.pyx":2249
 *     for j in range(n_decomp):
 *         face = decomp_faces[j]
 *         if face.count:             # <<<<<<<<<<<<<<
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 *             face.count = 0
 */
    __pyx_t_10 = (__pyx_v_face->count != 0);
    if (__pyx_t_10) {

      /* "raypier/core/ctracer.pyx":2250
 *         face = decomp_faces[j]
 *         if face.count:
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)             # <<<<<<<<<<<<<<
 *             face.count = 0
 * 
 */
      ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material)->__pyx_vtab)->eval_decomposed_rays_c(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material), __pyx_v_new_gausslets);

      /* "raypier/core/ctracer.pyx":2251
 *         if face.count:
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 *             face.count = 0             # <<<<<<<<<<<<<<
 * 
 *     new_gausslets.reset_length_c(max_length)
 */
      __pyx_v_face->count = 0;

      /* "raypier/core/ctracer.pyx":2249
 *     for j in range(n_decomp):
 *         face = decomp_faces[j]
 *         if face.count:             # <<<<<<<<<<<<<<
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 *             face.count = 0
 */
    }
  }

  /* "raypier/core/ctracer.pyx":2253
 *             face.count = 0
 * 
 *     new_gausslets.reset_length_c(max_length)             # <<<<<<<<<<<<<<
 *     return new_gausslets
 * 
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_new_gausslets->__pyx_vtab)->reset_length_c(__pyx_v_new_gausslets, __pyx_v_max_length);

  /* "raypier/core/ctracer.pyx":2254
 * 
 *     new_gausslets.reset_length_c(max_length)
 *     return new_gausslets             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_new_gausslets));
  __pyx_r = __pyx_v_new_gausslets;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2188
 * 
 * 
 * cdef GaussletCollection trace_gausslet_c(GaussletCollection gausslets,             # <<<<<<<<<<<<<<
 *                                     list face_sets,
 *                                     list all_faces,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_gausslet_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_face_set);
  __Pyx_XDECREF((PyObject *)__pyx_v_face);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_gausslets);
  __Pyx_XDECREF((PyObject *)__pyx_v_child_rays);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2257
 * 
 * 
 * cdef GaussletCollection trace_one_face_gausslet_c(GaussletCollection gausslets,             # <<<<<<<<<<<<<<
 *                                     FaceList face_set,
 *                                     int face_idx,
 */

static struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_f_7raypier_4core_7ctracer_trace_one_face_gausslet_c(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_gausslets, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, int __pyx_v_face_idx, PyObject *__pyx_v_all_faces, PyObject *__pyx_v_decomp_faces, double __pyx_v_max_length) {
  struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face = 0;
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_n_decomp;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point;
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient;
  int __pyx_v_nearest_piece;
  int __pyx_v_nearest_idx;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *__pyx_v_gausslet;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *__pyx_v_ray;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_new_gausslets = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_child_rays = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_it;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned long __pyx_t_4;
  unsigned long __pyx_t_5;
  size_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_one_face_gausslet_c", 0);

  /* "raypier/core/ctracer.pyx":2265
 *     cdef:
 *         Face face
 *         size_t i, j, n_decomp = len(decomp_faces)             # <<<<<<<<<<<<<<
 *         vector_t point
 *         orientation_t orient
 */
  if (unlikely(__pyx_v_decomp_faces == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 2265, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_decomp_faces); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2265, __pyx_L1_error)
  __pyx_v_n_decomp = __pyx_t_1;

  /* "raypier/core/ctracer.pyx":2268
 *         vector_t point
 *         orientation_t orient
 *         int nearest_piece, nearest_idx=-1             # <<<<<<<<<<<<<<
 *         gausslet_t *gausslet
 *         ray_t *ray
 */
  __pyx_v_nearest_idx = -1;

  /* "raypier/core/ctracer.pyx":2276
 * 
 *     #need to allocate the output rays here
 *     new_gausslets = GaussletCollection(gausslets.n_rays)             # <<<<<<<<<<<<<<
 *     new_gausslets.parent = gausslets
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_long(__pyx_v_gausslets->n_rays); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_new_gausslets = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":2277
 *     #need to allocate the output rays here
 *     new_gausslets = GaussletCollection(gausslets.n_rays)
 *     new_gausslets.parent = gausslets             # <<<<<<<<<<<<<<
 * 
 *     child_rays = RayCollection(2)
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_new_gausslets), __pyx_n_s_parent, ((PyObject *)__pyx_v_gausslets)) < 0) __PYX_ERR(1, 2277, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2279
 *     new_gausslets.parent = gausslets
 * 
 *     child_rays = RayCollection(2)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(gausslets.n_rays):
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection), __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_child_rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":2281
 *     child_rays = RayCollection(2)
 * 
 *     for i in range(gausslets.n_rays):             # <<<<<<<<<<<<<<
 *         gausslet = gausslets.rays + i
 *         ray = &gausslet.base_ray
 */
  __pyx_t_4 = __pyx_v_gausslets->n_rays;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "raypier/core/ctracer.pyx":2282
 * 
 *     for i in range(gausslets.n_rays):
 *         gausslet = gausslets.rays + i             # <<<<<<<<<<<<<<
 *         ray = &gausslet.base_ray
 *         ray.end_face_idx = -1
 */
    __pyx_v_gausslet = (__pyx_v_gausslets->rays + __pyx_v_i);

    /* "raypier/core/ctracer.pyx":2283
 *     for i in range(gausslets.n_rays):
 *         gausslet = gausslets.rays + i
 *         ray = &gausslet.base_ray             # <<<<<<<<<<<<<<
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 */
    __pyx_v_ray = (&__pyx_v_gausslet->base_ray);

    /* "raypier/core/ctracer.pyx":2284
 *         gausslet = gausslets.rays + i
 *         ray = &gausslet.base_ray
 *         ray.end_face_idx = -1             # <<<<<<<<<<<<<<
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,
 */
    __pyx_v_ray->end_face_idx = -1;

    /* "raypier/core/ctracer.pyx":2285
 *         ray = &gausslet.base_ray
 *         ray.end_face_idx = -1
 *         nearest_idx=-1             # <<<<<<<<<<<<<<
 *         point = addvv_(ray.origin,
 *                             multvs_(ray.direction,
 */
    __pyx_v_nearest_idx = -1;

    /* "raypier/core/ctracer.pyx":2286
 *         ray.end_face_idx = -1
 *         nearest_idx=-1
 *         point = addvv_(ray.origin,             # <<<<<<<<<<<<<<
 *                             multvs_(ray.direction,
 *                                     max_length))
 */
    __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_max_length));

    /* "raypier/core/ctracer.pyx":2291
 *         #print "points", P1, P2
 *         #intersect_c returns the face idx of the intersection, or -1 otherwise
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)             # <<<<<<<<<<<<<<
 *         if it.face_idx >= 0:
 *             nearest_idx = it.face_idx
 */
    __pyx_v_it = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set)->__pyx_vtab)->intersect_one_face_c(((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set), __pyx_v_ray, __pyx_v_point, __pyx_v_face_idx);

    /* "raypier/core/ctracer.pyx":2292
 *         #intersect_c returns the face idx of the intersection, or -1 otherwise
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)
 *         if it.face_idx >= 0:             # <<<<<<<<<<<<<<
 *             nearest_idx = it.face_idx
 *             nearest_piece = it.piece_idx
 */
    __pyx_t_7 = ((__pyx_v_it.face_idx >= 0) != 0);
    if (__pyx_t_7) {

      /* "raypier/core/ctracer.pyx":2293
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)
 *         if it.face_idx >= 0:
 *             nearest_idx = it.face_idx             # <<<<<<<<<<<<<<
 *             nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:
 */
      __pyx_t_8 = __pyx_v_it.face_idx;
      __pyx_v_nearest_idx = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":2294
 *         if it.face_idx >= 0:
 *             nearest_idx = it.face_idx
 *             nearest_piece = it.piece_idx             # <<<<<<<<<<<<<<
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 */
      __pyx_t_8 = __pyx_v_it.piece_idx;
      __pyx_v_nearest_piece = __pyx_t_8;

      /* "raypier/core/ctracer.pyx":2292
 *         #intersect_c returns the face idx of the intersection, or -1 otherwise
 *         it = (<FaceList>face_set).intersect_one_face_c(ray, point, face_idx)
 *         if it.face_idx >= 0:             # <<<<<<<<<<<<<<
 *             nearest_idx = it.face_idx
 *             nearest_piece = it.piece_idx
 */
    }

    /* "raypier/core/ctracer.pyx":2295
 *             nearest_idx = it.face_idx
 *             nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    __pyx_t_7 = ((__pyx_v_nearest_idx >= 0) != 0);
    if (__pyx_t_7) {

      /* "raypier/core/ctracer.pyx":2297
 *         if nearest_idx >= 0:
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]             # <<<<<<<<<<<<<<
 *             face.count += 1
 *             #print "ray length", ray.length
 */
      if (unlikely(__pyx_v_all_faces == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 2297, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_all_faces, __pyx_v_nearest_idx, int, 1, __Pyx_PyInt_From_int, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 2297, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_face, ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "raypier/core/ctracer.pyx":2298
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 *             face.count += 1             # <<<<<<<<<<<<<<
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 */
      __pyx_v_face->count = (__pyx_v_face->count + 1);

      /* "raypier/core/ctracer.pyx":2300
 *             face.count += 1
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))             # <<<<<<<<<<<<<<
 *             orient = face_set.compute_orientation_c(face, point, nearest_piece)
 *             #print "s normal", normal
 */
      __pyx_v_point = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_ray->direction, __pyx_v_ray->length));

      /* "raypier/core/ctracer.pyx":2301
 *             #print "ray length", ray.length
 *             point = addvv_(ray.origin, multvs_(ray.direction, ray.length))
 *             orient = face_set.compute_orientation_c(face, point, nearest_piece)             # <<<<<<<<<<<<<<
 *             #print "s normal", normal
 *             ### Clear the child_rays structure
 */
      __pyx_v_orient = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set->__pyx_vtab)->compute_orientation_c(__pyx_v_face_set, __pyx_v_face, __pyx_v_point, __pyx_v_nearest_piece);

      /* "raypier/core/ctracer.pyx":2304
 *             #print "s normal", normal
 *             ### Clear the child_rays structure
 *             child_rays.n_rays = 0             # <<<<<<<<<<<<<<
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,
 *                                                     point,
 */
      __pyx_v_child_rays->n_rays = 0;

      /* "raypier/core/ctracer.pyx":2305
 *             ### Clear the child_rays structure
 *             child_rays.n_rays = 0
 *             (<InterfaceMaterial>(face.material)).eval_child_ray_c(ray, i,             # <<<<<<<<<<<<<<
 *                                                     point,
 *                                                     orient,
 */
      ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material)->__pyx_vtab)->eval_child_ray_c(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material), __pyx_v_ray, __pyx_v_i, __pyx_v_point, __pyx_v_orient, __pyx_v_child_rays);

      /* "raypier/core/ctracer.pyx":2310
 *                                                     child_rays
 *                                                     )
 *             trace_parabasal_rays(gausslet, child_rays, face, face_set,             # <<<<<<<<<<<<<<
 *                                  new_gausslets, max_length, nearest_piece)
 * 
 */
      __pyx_f_7raypier_4core_7ctracer_trace_parabasal_rays(__pyx_v_gausslet, __pyx_v_child_rays, __pyx_v_face, __pyx_v_face_set, __pyx_v_new_gausslets, __pyx_v_max_length, __pyx_v_nearest_piece);

      /* "raypier/core/ctracer.pyx":2295
 *             nearest_idx = it.face_idx
 *             nearest_piece = it.piece_idx
 *         if nearest_idx >= 0:             # <<<<<<<<<<<<<<
 *             #print "GET FACE", nearest.face_idx, len(all_faces)
 *             face = all_faces[nearest_idx]
 */
    }
  }

  /* "raypier/core/ctracer.pyx":2313
 *                                  new_gausslets, max_length, nearest_piece)
 * 
 *     for j in range(n_decomp):             # <<<<<<<<<<<<<<
 *         face = decomp_faces[j]
 *         if face.count:
 */
  __pyx_t_6 = __pyx_v_n_decomp;
  __pyx_t_9 = __pyx_t_6;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_j = __pyx_t_10;

    /* "raypier/core/ctracer.pyx":2314
 * 
 *     for j in range(n_decomp):
 *         face = decomp_faces[j]             # <<<<<<<<<<<<<<
 *         if face.count:
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 */
    if (unlikely(__pyx_v_decomp_faces == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 2314, __pyx_L1_error)
    }
    if (!(likely(((PyList_GET_ITEM(__pyx_v_decomp_faces, __pyx_v_j)) == Py_None) || likely(__Pyx_TypeTest(PyList_GET_ITEM(__pyx_v_decomp_faces, __pyx_v_j), __pyx_ptype_7raypier_4core_7ctracer_Face))))) __PYX_ERR(1, 2314, __pyx_L1_error)
    __pyx_t_3 = PyList_GET_ITEM(__pyx_v_decomp_faces, __pyx_v_j);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_face, ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "raypier/core/ctracer.pyx":2315
 *     for j in range(n_decomp):
 *         face = decomp_faces[j]
 *         if face.count:             # <<<<<<<<<<<<<<
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 *             face.count = 0
 */
    __pyx_t_7 = (__pyx_v_face->count != 0);
    if (__pyx_t_7) {

      /* "raypier/core/ctracer.pyx":2316
 *         face = decomp_faces[j]
 *         if face.count:
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)             # <<<<<<<<<<<<<<
 *             face.count = 0
 * 
 */
      ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material)->__pyx_vtab)->eval_decomposed_rays_c(((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_face->material), __pyx_v_new_gausslets);

      /* "raypier/core/ctracer.pyx":2317
 *         if face.count:
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 *             face.count = 0             # <<<<<<<<<<<<<<
 * 
 *     new_gausslets.reset_length_c(max_length)
 */
      __pyx_v_face->count = 0;

      /* "raypier/core/ctracer.pyx":2315
 *     for j in range(n_decomp):
 *         face = decomp_faces[j]
 *         if face.count:             # <<<<<<<<<<<<<<
 *             (<InterfaceMaterial>(face.material)).eval_decomposed_rays_c(new_gausslets)
 *             face.count = 0
 */
    }
  }

  /* "raypier/core/ctracer.pyx":2319
 *             face.count = 0
 * 
 *     new_gausslets.reset_length_c(max_length)             # <<<<<<<<<<<<<<
 *     return new_gausslets
 * 
 */
  ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_new_gausslets->__pyx_vtab)->reset_length_c(__pyx_v_new_gausslets, __pyx_v_max_length);

  /* "raypier/core/ctracer.pyx":2320
 * 
 *     new_gausslets.reset_length_c(max_length)
 *     return new_gausslets             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_new_gausslets));
  __pyx_r = __pyx_v_new_gausslets;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2257
 * 
 * 
 * cdef GaussletCollection trace_one_face_gausslet_c(GaussletCollection gausslets,             # <<<<<<<<<<<<<<
 *                                     FaceList face_set,
 *                                     int face_idx,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.ctracer.trace_one_face_gausslet_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_face);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_gausslets);
  __Pyx_XDECREF((PyObject *)__pyx_v_child_rays);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2323
 * 
 * 
 * cdef void trace_parabasal_rays(gausslet_t *g_in, RayCollection base_rays, Face face, FaceList face_set,             # <<<<<<<<<<<<<<
 *                           GaussletCollection new_gausslets, double max_length, int piece):
 *     cdef:
 */

static void __pyx_f_7raypier_4core_7ctracer_trace_parabasal_rays(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *__pyx_v_g_in, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *__pyx_v_base_rays, struct __pyx_obj_7raypier_4core_7ctracer_Face *__pyx_v_face, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *__pyx_v_face_set, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *__pyx_v_new_gausslets, double __pyx_v_max_length, int __pyx_v_piece) {
  unsigned int __pyx_v_i;
  unsigned int __pyx_v_j;
  struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_para_ray;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t __pyx_v_gausslet;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ray_end;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_point[6];
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t __pyx_v_orient[6];
  struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_v_material = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  unsigned long __pyx_t_4;
  unsigned long __pyx_t_5;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("trace_parabasal_rays", 0);

  /* "raypier/core/ctracer.pyx":2332
 *         vector_t point[6]
 *         orientation_t orient[6]
 *         InterfaceMaterial material = (<InterfaceMaterial>(face.material))             # <<<<<<<<<<<<<<
 * 
 *     for j in range(6):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_face->material);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":2334
 *         InterfaceMaterial material = (<InterfaceMaterial>(face.material))
 * 
 *     for j in range(6):             # <<<<<<<<<<<<<<
 *         para_ray = g_in.para + j
 *         ray_end = addvv_(para_ray.origin,
 */
  for (__pyx_t_2 = 0; __pyx_t_2 < 6; __pyx_t_2+=1) {
    __pyx_v_j = __pyx_t_2;

    /* "raypier/core/ctracer.pyx":2335
 * 
 *     for j in range(6):
 *         para_ray = g_in.para + j             # <<<<<<<<<<<<<<
 *         ray_end = addvv_(para_ray.origin,
 *                         multvs_(para_ray.direction,
 */
    __pyx_v_para_ray = (__pyx_v_g_in->para + __pyx_v_j);

    /* "raypier/core/ctracer.pyx":2336
 *     for j in range(6):
 *         para_ray = g_in.para + j
 *         ray_end = addvv_(para_ray.origin,             # <<<<<<<<<<<<<<
 *                         multvs_(para_ray.direction,
 *                                 max_length))
 */
    __pyx_v_ray_end = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_para_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_para_ray->direction, __pyx_v_max_length));

    /* "raypier/core/ctracer.pyx":2339
 *                         multvs_(para_ray.direction,
 *                                 max_length))
 *         if face_set.intersect_para_c(para_ray, ray_end, face):             # <<<<<<<<<<<<<<
 *             return
 *         point[j] = addvv_(para_ray.origin, multvs_(para_ray.direction, para_ray.length))
 */
    __pyx_t_3 = (((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set->__pyx_vtab)->intersect_para_c(__pyx_v_face_set, __pyx_v_para_ray, __pyx_v_ray_end, __pyx_v_face) != 0);
    if (__pyx_t_3) {

      /* "raypier/core/ctracer.pyx":2340
 *                                 max_length))
 *         if face_set.intersect_para_c(para_ray, ray_end, face):
 *             return             # <<<<<<<<<<<<<<
 *         point[j] = addvv_(para_ray.origin, multvs_(para_ray.direction, para_ray.length))
 *         orient[j] = face_set.compute_orientation_c(face, point[j], piece)
 */
      goto __pyx_L0;

      /* "raypier/core/ctracer.pyx":2339
 *                         multvs_(para_ray.direction,
 *                                 max_length))
 *         if face_set.intersect_para_c(para_ray, ray_end, face):             # <<<<<<<<<<<<<<
 *             return
 *         point[j] = addvv_(para_ray.origin, multvs_(para_ray.direction, para_ray.length))
 */
    }

    /* "raypier/core/ctracer.pyx":2341
 *         if face_set.intersect_para_c(para_ray, ray_end, face):
 *             return
 *         point[j] = addvv_(para_ray.origin, multvs_(para_ray.direction, para_ray.length))             # <<<<<<<<<<<<<<
 *         orient[j] = face_set.compute_orientation_c(face, point[j], piece)
 * 
 */
    (__pyx_v_point[__pyx_v_j]) = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_para_ray->origin, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_para_ray->direction, __pyx_v_para_ray->length));

    /* "raypier/core/ctracer.pyx":2342
 *             return
 *         point[j] = addvv_(para_ray.origin, multvs_(para_ray.direction, para_ray.length))
 *         orient[j] = face_set.compute_orientation_c(face, point[j], piece)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(base_rays.n_rays):
 */
    (__pyx_v_orient[__pyx_v_j]) = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *)__pyx_v_face_set->__pyx_vtab)->compute_orientation_c(__pyx_v_face_set, __pyx_v_face, (__pyx_v_point[__pyx_v_j]), __pyx_v_piece);
  }

  /* "raypier/core/ctracer.pyx":2344
 *         orient[j] = face_set.compute_orientation_c(face, point[j], piece)
 * 
 *     for i in range(base_rays.n_rays):             # <<<<<<<<<<<<<<
 *         gausslet.base_ray = base_rays.rays[i]
 *         for j in range(6):
 */
  __pyx_t_4 = __pyx_v_base_rays->n_rays;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_5; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "raypier/core/ctracer.pyx":2345
 * 
 *     for i in range(base_rays.n_rays):
 *         gausslet.base_ray = base_rays.rays[i]             # <<<<<<<<<<<<<<
 *         for j in range(6):
 *             para_ray = g_in.para + j
 */
    __pyx_v_gausslet.base_ray = (__pyx_v_base_rays->rays[__pyx_v_i]);

    /* "raypier/core/ctracer.pyx":2346
 *     for i in range(base_rays.n_rays):
 *         gausslet.base_ray = base_rays.rays[i]
 *         for j in range(6):             # <<<<<<<<<<<<<<
 *             para_ray = g_in.para + j
 *             gausslet.para[j] = material.eval_parabasal_ray_c(base_rays.rays + i,
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 6; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "raypier/core/ctracer.pyx":2347
 *         gausslet.base_ray = base_rays.rays[i]
 *         for j in range(6):
 *             para_ray = g_in.para + j             # <<<<<<<<<<<<<<
 *             gausslet.para[j] = material.eval_parabasal_ray_c(base_rays.rays + i,
 *                                                             para_ray.direction, #incoming ray direction
 */
      __pyx_v_para_ray = (__pyx_v_g_in->para + __pyx_v_j);

      /* "raypier/core/ctracer.pyx":2348
 *         for j in range(6):
 *             para_ray = g_in.para + j
 *             gausslet.para[j] = material.eval_parabasal_ray_c(base_rays.rays + i,             # <<<<<<<<<<<<<<
 *                                                             para_ray.direction, #incoming ray direction
 *                                                             point[j], #position of intercept
 */
      (__pyx_v_gausslet.para[__pyx_v_j]) = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_v_material->__pyx_vtab)->eval_parabasal_ray_c(__pyx_v_material, (__pyx_v_base_rays->rays + __pyx_v_i), __pyx_v_para_ray->direction, (__pyx_v_point[__pyx_v_j]), (__pyx_v_orient[__pyx_v_j]), __pyx_v_gausslet.base_ray.ray_type_id);
    }

    /* "raypier/core/ctracer.pyx":2354
 *                                                             gausslet.base_ray.ray_type_id, #indicates if it's a transmitted or reflected ray
 *                                                             )
 *         new_gausslets.add_gausslet_c(gausslet)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *)__pyx_v_new_gausslets->__pyx_vtab)->add_gausslet_c(__pyx_v_new_gausslets, __pyx_v_gausslet); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "raypier/core/ctracer.pyx":2323
 * 
 * 
 * cdef void trace_parabasal_rays(gausslet_t *g_in, RayCollection base_rays, Face face, FaceList face_set,             # <<<<<<<<<<<<<<
 *                           GaussletCollection new_gausslets, double max_length, int piece):
 *     cdef:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("raypier.core.ctracer.trace_parabasal_rays", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_material);
  __Pyx_RefNannyFinishContext();
}

/* "raypier/core/ctracer.pyx":2358
 * 
 * 
 * def transform(Transform t, p):             # <<<<<<<<<<<<<<
 *     cdef vector_t p1, p2
 *     assert isinstance(t, Transform)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_41transform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_41transform = {"transform", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_41transform, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_41transform(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t = 0;
  PyObject *__pyx_v_p = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_p,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transform", 1, 2, 2, 1); __PYX_ERR(1, 2358, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transform") < 0)) __PYX_ERR(1, 2358, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_t = ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)values[0]);
    __pyx_v_p = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transform", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 2358, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_ptype_7raypier_4core_7ctracer_Transform, 1, "t", 0))) __PYX_ERR(1, 2358, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_40transform(__pyx_self, __pyx_v_t, __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_40transform(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t, PyObject *__pyx_v_p) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform", 0);

  /* "raypier/core/ctracer.pyx":2360
 * def transform(Transform t, p):
 *     cdef vector_t p1, p2
 *     assert isinstance(t, Transform)             # <<<<<<<<<<<<<<
 *     assert len(p)==3
 *     p1.x = p[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_t), __pyx_ptype_7raypier_4core_7ctracer_Transform); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 2360, __pyx_L1_error)
    }
  }
  #endif

  /* "raypier/core/ctracer.pyx":2361
 *     cdef vector_t p1, p2
 *     assert isinstance(t, Transform)
 *     assert len(p)==3             # <<<<<<<<<<<<<<
 *     p1.x = p[0]
 *     p1.y = p[1]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyObject_Length(__pyx_v_p); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 2361, __pyx_L1_error)
    if (unlikely(!((__pyx_t_2 == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 2361, __pyx_L1_error)
    }
  }
  #endif

  /* "raypier/core/ctracer.pyx":2362
 *     assert isinstance(t, Transform)
 *     assert len(p)==3
 *     p1.x = p[0]             # <<<<<<<<<<<<<<
 *     p1.y = p[1]
 *     p1.z = p[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_p1.x = __pyx_t_4;

  /* "raypier/core/ctracer.pyx":2363
 *     assert len(p)==3
 *     p1.x = p[0]
 *     p1.y = p[1]             # <<<<<<<<<<<<<<
 *     p1.z = p[2]
 *     p2 = transform_c(t.trans, p1)
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_p1.y = __pyx_t_4;

  /* "raypier/core/ctracer.pyx":2364
 *     p1.x = p[0]
 *     p1.y = p[1]
 *     p1.z = p[2]             # <<<<<<<<<<<<<<
 *     p2 = transform_c(t.trans, p1)
 *     return (p2.x, p2.y, p2.z)
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 2364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_p1.z = __pyx_t_4;

  /* "raypier/core/ctracer.pyx":2365
 *     p1.y = p[1]
 *     p1.z = p[2]
 *     p2 = transform_c(t.trans, p1)             # <<<<<<<<<<<<<<
 *     return (p2.x, p2.y, p2.z)
 * 
 */
  __pyx_v_p2 = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_t->trans, __pyx_v_p1);

  /* "raypier/core/ctracer.pyx":2366
 *     p1.z = p[2]
 *     p2 = transform_c(t.trans, p1)
 *     return (p2.x, p2.y, p2.z)             # <<<<<<<<<<<<<<
 * 
 * def get_ray_size():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p2.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p2.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_p2.z); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2358
 * 
 * 
 * def transform(Transform t, p):             # <<<<<<<<<<<<<<
 *     cdef vector_t p1, p2
 *     assert isinstance(t, Transform)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.ctracer.transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/ctracer.pyx":2368
 *     return (p2.x, p2.y, p2.z)
 * 
 * def get_ray_size():             # <<<<<<<<<<<<<<
 *     return sizeof( ray_t )
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_43get_ray_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_43get_ray_size = {"get_ray_size", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_43get_ray_size, METH_NOARGS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_43get_ray_size(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ray_size (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_42get_ray_size(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_42get_ray_size(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ray_size", 0);

  /* "raypier/core/ctracer.pyx":2369
 * 
 * def get_ray_size():
 *     return sizeof( ray_t )             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((sizeof(struct __pyx_t_7raypier_4core_7ctracer_ray_t))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/ctracer.pyx":2368
 *     return (p2.x, p2.y, p2.z)
 * 
 * def get_ray_size():             # <<<<<<<<<<<<<<
 *     return sizeof( ray_t )
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.ctracer.get_ray_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_RayArrayView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_45__pyx_unpickle_RayArrayView(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_45__pyx_unpickle_RayArrayView = {"__pyx_unpickle_RayArrayView", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_45__pyx_unpickle_RayArrayView, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_45__pyx_unpickle_RayArrayView(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_RayArrayView (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RayArrayView", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RayArrayView", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_RayArrayView") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RayArrayView", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_RayArrayView", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_44__pyx_unpickle_RayArrayView(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_44__pyx_unpickle_RayArrayView(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RayArrayView", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__37, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = RayArrayView.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = RayArrayView.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = RayArrayView.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayArrayView), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = RayArrayView.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = RayArrayView.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_RayArrayView__set_state(((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = RayArrayView.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RayArrayView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_RayArrayView", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_RayArrayView__set_state(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RayArrayView__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_RayArrayView__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Shape(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_47__pyx_unpickle_Shape(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_47__pyx_unpickle_Shape = {"__pyx_unpickle_Shape", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_47__pyx_unpickle_Shape, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_47__pyx_unpickle_Shape(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Shape (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Shape", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Shape", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Shape") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Shape", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_Shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_46__pyx_unpickle_Shape(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_46__pyx_unpickle_Shape(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Shape", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__37, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Shape.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Shape.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Shape.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Shape__set_state(<Shape> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Shape), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Shape.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Shape__set_state(<Shape> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Shape.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Shape__set_state(<Shape> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Shape__set_state(Shape __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Shape__set_state(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Shape.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Shape__set_state(<Shape> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Shape__set_state(<Shape> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Shape__set_state(Shape __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Shape(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_Shape", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Shape__set_state(<Shape> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Shape__set_state(Shape __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Shape__set_state(struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Shape__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Shape__set_state(Shape __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Shape__set_state(Shape __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Shape__set_state(Shape __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Shape__set_state(<Shape> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Shape__set_state(Shape __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_Shape__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ImplicitSurface(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_49__pyx_unpickle_ImplicitSurface(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_49__pyx_unpickle_ImplicitSurface = {"__pyx_unpickle_ImplicitSurface", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_49__pyx_unpickle_ImplicitSurface, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_49__pyx_unpickle_ImplicitSurface(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImplicitSurface (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImplicitSurface", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImplicitSurface", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ImplicitSurface") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImplicitSurface", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_ImplicitSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_48__pyx_unpickle_ImplicitSurface(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_48__pyx_unpickle_ImplicitSurface(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImplicitSurface", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__37, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = ImplicitSurface.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ImplicitSurface.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = ImplicitSurface.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = ImplicitSurface.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = ImplicitSurface.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_ImplicitSurface__set_state(((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = ImplicitSurface.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImplicitSurface(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_ImplicitSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_ImplicitSurface__set_state(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImplicitSurface__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_ImplicitSurface__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Distortion(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_7ctracer_51__pyx_unpickle_Distortion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_7ctracer_51__pyx_unpickle_Distortion = {"__pyx_unpickle_Distortion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_51__pyx_unpickle_Distortion, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_7ctracer_51__pyx_unpickle_Distortion(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Distortion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Distortion", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Distortion", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Distortion") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Distortion", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_Distortion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_7ctracer_50__pyx_unpickle_Distortion(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_7ctracer_50__pyx_unpickle_Distortion(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Distortion", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__37, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Distortion.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Distortion.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Distortion.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Distortion__set_state(<Distortion> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Distortion), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Distortion.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Distortion__set_state(<Distortion> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Distortion.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Distortion__set_state(<Distortion> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Distortion__set_state(Distortion __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Distortion__set_state(((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Distortion.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Distortion__set_state(<Distortion> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Distortion__set_state(<Distortion> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Distortion__set_state(Distortion __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Distortion(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_Distortion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Distortion__set_state(<Distortion> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Distortion__set_state(Distortion __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_7raypier_4core_7ctracer___pyx_unpickle_Distortion__set_state(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Distortion__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Distortion__set_state(Distortion __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Distortion__set_state(Distortion __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 13, __pyx_L1_error)
    }
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) : __Pyx_PyObject_CallOneArg(__pyx_t_7, PyTuple_GET_ITEM(__pyx_v___pyx_state, 0));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Distortion__set_state(Distortion __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Distortion__set_state(<Distortion> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Distortion__set_state(Distortion __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.ctracer.__pyx_unpickle_Distortion__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":929
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":930
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":933
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":935
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":936
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":942
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 942, __pyx_L3_error)

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":943
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 943, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 944, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":948
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 948, __pyx_L3_error)

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":949
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 949, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 950, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":954
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 954, __pyx_L3_error)

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":955
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 955, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":956
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 956, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":978
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":993
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1003
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1010
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1017
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(PyObject *__pyx_v_obj) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t", 0);

  /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, ((char const *)"Expected %.16s, got %.200s"), ((char *)"a mapping"), Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['x']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['x']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['x']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['x']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 18, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['x']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")             # <<<<<<<<<<<<<<
 *     result.x = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 19, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 19, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['x']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['y']
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_v_result.x = __pyx_t_10;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['y']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.x = value
 *     try:
 *         value = obj['y']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_y); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 22, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['y']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['y']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['y']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")             # <<<<<<<<<<<<<<
 *     result.y = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 24, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 24, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'x'")
 *     result.x = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['y']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['z']
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_v_result.y = __pyx_t_10;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['z']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":27
 *     result.y = value
 *     try:
 *         value = obj['z']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'z'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['z']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":28
 *     try:
 *         value = obj['z']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'z'")
 *     result.z = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 28, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":29
 *         value = obj['z']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'z'")             # <<<<<<<<<<<<<<
 *     result.z = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 29, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 29, __pyx_L22_except_error)
    }
    goto __pyx_L22_except_error;
    __pyx_L22_except_error:;

    /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'y'")
 *     result.y = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['z']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "FromPyStructUtility":30
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'z'")
 *     result.z = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 30, __pyx_L1_error)
  __pyx_v_result.z = __pyx_t_10;

  /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'z'")
 *     result.z = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(PyObject *__pyx_v_obj) {
  struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_para_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", 0);

  /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, ((char const *)"Expected %.16s, got %.200s"), ((char *)"a mapping"), Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['origin']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['origin']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'origin'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_origin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['origin']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['origin']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'origin'")
 *     result.origin = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 18, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['origin']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'origin'")             # <<<<<<<<<<<<<<
 *     result.origin = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 19, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 19, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['origin']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'origin'")
 *     result.origin = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['direction']
 */
  __pyx_t_10 = __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_v_result.origin = __pyx_t_10;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'origin'")
 *     result.origin = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['direction']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.origin = value
 *     try:
 *         value = obj['direction']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'direction'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_direction); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 22, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'origin'")
 *     result.origin = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['direction']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['direction']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'direction'")
 *     result.direction = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['direction']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'direction'")             # <<<<<<<<<<<<<<
 *     result.direction = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 24, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 24, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'origin'")
 *     result.origin = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['direction']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'direction'")
 *     result.direction = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['normal']
 */
  __pyx_t_10 = __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L1_error)
  __pyx_v_result.direction = __pyx_t_10;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'direction'")
 *     result.direction = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['normal']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":27
 *     result.direction = value
 *     try:
 *         value = obj['normal']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'normal'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_normal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'direction'")
 *     result.direction = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['normal']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":28
 *     try:
 *         value = obj['normal']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'normal'")
 *     result.normal = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(0, 28, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":29
 *         value = obj['normal']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'normal'")             # <<<<<<<<<<<<<<
 *     result.normal = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 29, __pyx_L22_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 29, __pyx_L22_except_error)
    }
    goto __pyx_L22_except_error;
    __pyx_L22_except_error:;

    /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'direction'")
 *     result.direction = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['normal']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "FromPyStructUtility":30
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'normal'")
 *     result.normal = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['length']
 */
  __pyx_t_10 = __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(__pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 30, __pyx_L1_error)
  __pyx_v_result.normal = __pyx_t_10;

  /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'normal'")
 *     result.normal = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['length']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":32
 *     result.normal = value
 *     try:
 *         value = obj['length']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'length'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_length); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 32, __pyx_L28_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'normal'")
 *     result.normal = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['length']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L33_try_end;
    __pyx_L28_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":33
 *     try:
 *         value = obj['length']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'length'")
 *     result.length = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L30_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":34
 *         value = obj['length']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'length'")             # <<<<<<<<<<<<<<
 *     result.length = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 34, __pyx_L30_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 34, __pyx_L30_except_error)
    }
    goto __pyx_L30_except_error;
    __pyx_L30_except_error:;

    /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 'normal'")
 *     result.normal = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['length']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L33_try_end:;
  }

  /* "FromPyStructUtility":35
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'length'")
 *     result.length = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_v_result.length = __pyx_t_11;

  /* "FromPyStructUtility":36
 *         raise ValueError("No value specified for struct attribute 'length'")
 *     result.length = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t")
 * cdef inline list __Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t")
 * cdef inline list __Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t")
 * cdef inline tuple __Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t(struct __pyx_t_7raypier_4core_7ctracer_para_t *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t")
 * cdef inline tuple __Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_struct____pyx_t_7raypier_4core_7ctracer_para_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(0, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(0, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(0, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(0, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(0, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(0, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(0, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(0, 180, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_self->len / __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(0, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(0, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(0, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(0, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(0, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(0, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(0, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(0, 445, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(0, 446, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 456, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(0, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(0, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(0, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(0, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__58, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(0, 628, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__61);
            __Pyx_GIVEREF(__pyx_slice__61);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__61);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__61); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(0, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__61);
        __Pyx_GIVEREF(__pyx_slice__61);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__61);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(0, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(0, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(0, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(0, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(0, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(0, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(0, 917, __pyx_L1_error)
    }
    __pyx_v_shape = (__pyx_v_view->len / __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = (__pyx_v_ndim / 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(0, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(0, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(0, 1265, __pyx_L1_error)
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1297, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(0, 1307, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(0, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(0, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(0, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(0, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(0, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__65, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(0, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Transform(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_Transform(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_9Transform_rotation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_9Transform_8rotation_3__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_9Transform_rotation(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_9Transform_8rotation_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_9Transform_translation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_9Transform_11translation_3__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_9Transform_translation(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_9Transform_11translation_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_Transform[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_9Transform_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_9Transform_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_Transform[] = {
  {(char *)"rotation", __pyx_getprop_7raypier_4core_7ctracer_9Transform_rotation, __pyx_setprop_7raypier_4core_7ctracer_9Transform_rotation, (char *)0, 0},
  {(char *)"translation", __pyx_getprop_7raypier_4core_7ctracer_9Transform_translation, __pyx_setprop_7raypier_4core_7ctracer_9Transform_translation, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_Transform = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.Transform", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Transform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_Transform, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_Transform, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_Transform, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7raypier_4core_7ctracer_9Transform_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_Transform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Ray(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_3Ray_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_Ray(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_origin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_6origin_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_origin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_6origin_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_direction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_9direction_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_direction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_9direction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_normal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_6normal_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_normal(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_6normal_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_E_vector(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_8E_vector_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_E_vector(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_8E_vector_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_6length_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_length(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_6length_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_phase(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_5phase_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_phase(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_5phase_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_accumulated_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_16accumulated_path_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_accumulated_path(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_16accumulated_path_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_wavelength_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_14wavelength_idx_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_wavelength_idx(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_14wavelength_idx_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_termination(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_11termination_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_refractive_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_16refractive_index_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_refractive_index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_16refractive_index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_E1_amp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_6E1_amp_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_E1_amp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_6E1_amp_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_E2_amp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_6E2_amp_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_E2_amp(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_6E2_amp_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_parent_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_10parent_idx_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_parent_idx(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_10parent_idx_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_end_face_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_12end_face_idx_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_end_face_idx(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_12end_face_idx_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_ray_ident(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_9ray_ident_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_ray_ident(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_9ray_ident_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_ray_type_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_11ray_type_id_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_3Ray_ray_type_id(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_3Ray_11ray_type_id_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_power(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_5power_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_amplitude(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_9amplitude_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_jones_vector(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_12jones_vector_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_E_left(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_6E_left_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_E_right(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_7E_right_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_ellipticity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_11ellipticity_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_3Ray_major_minor_axes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_3Ray_16major_minor_axes_1__get__(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_Ray[] = {
  {"project_E", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_3Ray_5project_E, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7raypier_4core_7ctracer_3Ray_4project_E},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_3Ray_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_3Ray_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_Ray[] = {
  {(char *)"origin", __pyx_getprop_7raypier_4core_7ctracer_3Ray_origin, __pyx_setprop_7raypier_4core_7ctracer_3Ray_origin, (char *)"Origin coordinates of the ray", 0},
  {(char *)"direction", __pyx_getprop_7raypier_4core_7ctracer_3Ray_direction, __pyx_setprop_7raypier_4core_7ctracer_3Ray_direction, (char *)"direction of the ray, normalised to a unit vector", 0},
  {(char *)"normal", __pyx_getprop_7raypier_4core_7ctracer_3Ray_normal, __pyx_setprop_7raypier_4core_7ctracer_3Ray_normal, (char *)"normal vector for the face which created this ray", 0},
  {(char *)"E_vector", __pyx_getprop_7raypier_4core_7ctracer_3Ray_E_vector, __pyx_setprop_7raypier_4core_7ctracer_3Ray_E_vector, (char *)"Unit vector, perpendicular to the ray direction,\n        which gives the direction of E-field polarisation", 0},
  {(char *)"length", __pyx_getprop_7raypier_4core_7ctracer_3Ray_length, __pyx_setprop_7raypier_4core_7ctracer_3Ray_length, (char *)"The length of the ray. This is infinite in \n        unterminated rays", 0},
  {(char *)"phase", __pyx_getprop_7raypier_4core_7ctracer_3Ray_phase, __pyx_setprop_7raypier_4core_7ctracer_3Ray_phase, (char *)"An additional phase-factor for the ray. At present, this handles the 'grating phase' factor\n        generated by diffraction gratings. All other material surfaces leave this unchanged", 0},
  {(char *)"accumulated_path", __pyx_getprop_7raypier_4core_7ctracer_3Ray_accumulated_path, __pyx_setprop_7raypier_4core_7ctracer_3Ray_accumulated_path, (char *)"The total *optical* path up to the start-point of this ray.", 0},
  {(char *)"wavelength_idx", __pyx_getprop_7raypier_4core_7ctracer_3Ray_wavelength_idx, __pyx_setprop_7raypier_4core_7ctracer_3Ray_wavelength_idx, (char *)"The wavelength of the ray in vacuum, in microns", 0},
  {(char *)"termination", __pyx_getprop_7raypier_4core_7ctracer_3Ray_termination, 0, (char *)"the end-point of the ray (read only)\n        ", 0},
  {(char *)"refractive_index", __pyx_getprop_7raypier_4core_7ctracer_3Ray_refractive_index, __pyx_setprop_7raypier_4core_7ctracer_3Ray_refractive_index, (char *)"complex refractive index through which\n        this ray is propagating", 0},
  {(char *)"E1_amp", __pyx_getprop_7raypier_4core_7ctracer_3Ray_E1_amp, __pyx_setprop_7raypier_4core_7ctracer_3Ray_E1_amp, (char *)"Complex amplitude of the electric field polarised\n        parallel to the E_vection.", 0},
  {(char *)"E2_amp", __pyx_getprop_7raypier_4core_7ctracer_3Ray_E2_amp, __pyx_setprop_7raypier_4core_7ctracer_3Ray_E2_amp, (char *)"Complex amplitude of the electric field polarised\n        perpendicular to the E_vection", 0},
  {(char *)"parent_idx", __pyx_getprop_7raypier_4core_7ctracer_3Ray_parent_idx, __pyx_setprop_7raypier_4core_7ctracer_3Ray_parent_idx, (char *)"Index of the parent ray in parent RayCollection\n        ", 0},
  {(char *)"end_face_idx", __pyx_getprop_7raypier_4core_7ctracer_3Ray_end_face_idx, __pyx_setprop_7raypier_4core_7ctracer_3Ray_end_face_idx, (char *)"Index of the terminating face, in the global\n        face list (created for each tracing operation)\n        ", 0},
  {(char *)"ray_ident", __pyx_getprop_7raypier_4core_7ctracer_3Ray_ray_ident, __pyx_setprop_7raypier_4core_7ctracer_3Ray_ray_ident, (char *)"An arbitrary identifier inherited from it's parent ray\n        ", 0},
  {(char *)"ray_type_id", __pyx_getprop_7raypier_4core_7ctracer_3Ray_ray_type_id, __pyx_setprop_7raypier_4core_7ctracer_3Ray_ray_type_id, (char *)"Used to distinguish rays created by reflection vs transmission or some other mechanism.\n        Transmission->0, Reflection->1", 0},
  {(char *)"power", __pyx_getprop_7raypier_4core_7ctracer_3Ray_power, 0, (char *)"Optical power for the ray", 0},
  {(char *)"amplitude", __pyx_getprop_7raypier_4core_7ctracer_3Ray_amplitude, 0, (char *)"E field amplitude", 0},
  {(char *)"jones_vector", __pyx_getprop_7raypier_4core_7ctracer_3Ray_jones_vector, 0, (char *)"Jones polarisation vector expressed as a tuple (alpha, beta)\n        where alpha and beta are complex", 0},
  {(char *)"E_left", __pyx_getprop_7raypier_4core_7ctracer_3Ray_E_left, 0, (char *)0, 0},
  {(char *)"E_right", __pyx_getprop_7raypier_4core_7ctracer_3Ray_E_right, 0, (char *)0, 0},
  {(char *)"ellipticity", __pyx_getprop_7raypier_4core_7ctracer_3Ray_ellipticity, 0, (char *)"Provide the ratio of power in the RH circular polarisation\n        to the LH circular polarisation. A value of zero indicates \n        linear polarisation. +1 indicate RH polarisation, -1 is\n        LH polarisation. Or maybe the other way round.", 0},
  {(char *)"major_minor_axes", __pyx_getprop_7raypier_4core_7ctracer_3Ray_major_minor_axes, 0, (char *)"Find the vector giving the major and minor axes of the polarisation ellipse.\n        For fully circularly polarised light, the current E_vector will be\n        returned", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_Ray = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.Ray", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Ray), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_Ray, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7raypier_4core_7ctracer_3Ray_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " Ray - a wrapper around the ray_t C-structure.\n    \n    The Ray extension class exists mainly as a convenience for manipulation of single or small numbers of rays \n    from python. Large numbers of rays are more efficiently handled as either RayCollection objects, created in the\n    tracing process, or as numpy arrays with the 'ray_dtype' dtype.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_Ray, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_Ray, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_Ray, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_ParabasalRay(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_ParabasalRay(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_origin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6origin_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_origin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6origin_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_direction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_9direction_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_direction(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_9direction_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_normal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6normal_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_normal(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6normal_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6length_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_length(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_6length_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_termination(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_11termination_1__get__(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_ParabasalRay[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_ParabasalRay[] = {
  {(char *)"origin", __pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_origin, __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_origin, (char *)"Origin coordinates of the ray", 0},
  {(char *)"direction", __pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_direction, __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_direction, (char *)"direction of the ray, normalised to a unit vector", 0},
  {(char *)"normal", __pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_normal, __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_normal, (char *)"normal vector for the face which created this ray", 0},
  {(char *)"length", __pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_length, __pyx_setprop_7raypier_4core_7ctracer_12ParabasalRay_length, (char *)"The length of the ray. This is infinite in \n        unterminated rays", 0},
  {(char *)"termination", __pyx_getprop_7raypier_4core_7ctracer_12ParabasalRay_termination, 0, (char *)"the end-point of the ray (read only)\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_ParabasalRay = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.ParabasalRay", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_ParabasalRay, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7raypier_4core_7ctracer_12ParabasalRay_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_ParabasalRay, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_ParabasalRay, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_ParabasalRay, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Gausslet(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_8Gausslet_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_Gausslet(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_8Gausslet_base_ray(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_8Gausslet_8base_ray_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_8Gausslet_base_ray(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_8Gausslet_8base_ray_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_8Gausslet_parabasal_rays(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_8Gausslet_parabasal_rays(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_8Gausslet_14parabasal_rays_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_Gausslet[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_8Gausslet_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_8Gausslet_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_Gausslet[] = {
  {(char *)"base_ray", __pyx_getprop_7raypier_4core_7ctracer_8Gausslet_base_ray, __pyx_setprop_7raypier_4core_7ctracer_8Gausslet_base_ray, (char *)0, 0},
  {(char *)"parabasal_rays", __pyx_getprop_7raypier_4core_7ctracer_8Gausslet_parabasal_rays, __pyx_setprop_7raypier_4core_7ctracer_8Gausslet_parabasal_rays, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_Gausslet = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.Gausslet", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_Gausslet, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7raypier_4core_7ctracer_8Gausslet_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_Gausslet, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_Gausslet, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_Gausslet, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView __pyx_vtable_7raypier_4core_7ctracer_RayArrayView;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_RayArrayView(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView;
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_RayArrayView(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_7raypier_4core_7ctracer_RayArrayView(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7raypier_4core_7ctracer_RayArrayView(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_3__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_origin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6origin_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_direction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9direction_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_normal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6normal_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_E_vector(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_8E_vector_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_refractive_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_16refractive_index_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_E1_amp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6E1_amp_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_E2_amp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6E2_amp_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_6length_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_phase(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_5phase_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_accumulated_path(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_16accumulated_path_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_wavelength_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_14wavelength_idx_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_parent_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_10parent_idx_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_end_face_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_12end_face_idx_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_ray_ident(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9ray_ident_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_ray_type_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_11ray_type_id_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_termination(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_11termination_1__get__(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_RayArrayView[] = {
  {"get_ray_list", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_5get_ray_list, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_12RayArrayView_4get_ray_list},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_12RayArrayView_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_RayArrayView[] = {
  {(char *)"origin", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_origin, 0, (char *)0, 0},
  {(char *)"direction", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_direction, 0, (char *)0, 0},
  {(char *)"normal", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_normal, 0, (char *)0, 0},
  {(char *)"E_vector", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_E_vector, 0, (char *)0, 0},
  {(char *)"refractive_index", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_refractive_index, 0, (char *)0, 0},
  {(char *)"E1_amp", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_E1_amp, 0, (char *)0, 0},
  {(char *)"E2_amp", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_E2_amp, 0, (char *)0, 0},
  {(char *)"length", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_length, 0, (char *)0, 0},
  {(char *)"phase", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_phase, 0, (char *)0, 0},
  {(char *)"accumulated_path", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_accumulated_path, 0, (char *)0, 0},
  {(char *)"wavelength_idx", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_wavelength_idx, 0, (char *)0, 0},
  {(char *)"parent_idx", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_parent_idx, 0, (char *)0, 0},
  {(char *)"end_face_idx", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_end_face_idx, 0, (char *)0, 0},
  {(char *)"ray_ident", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_ray_ident, 0, (char *)0, 0},
  {(char *)"ray_type_id", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_ray_type_id, 0, (char *)0, 0},
  {(char *)"termination", __pyx_getprop_7raypier_4core_7ctracer_12RayArrayView_termination, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_RayArrayView = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7raypier_4core_7ctracer_RayArrayView, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RayArrayView = {
  0, /*mp_length*/
  __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_1__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7raypier_4core_7ctracer_RayArrayView, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_RayArrayView = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.RayArrayView", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_RayArrayView, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_RayArrayView, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RayArrayView, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An abstract class to provide the API for ray_t member access from python / numpy", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_RayArrayView, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_RayArrayView, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_RayArrayView, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection __pyx_vtable_7raypier_4core_7ctracer_RayCollection;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_RayCollection(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_7ctracer_RayArrayView(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView*)__pyx_vtabptr_7raypier_4core_7ctracer_RayCollection;
  p->_parent = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)Py_None); Py_INCREF(Py_None);
  p->_wavelengths.data = NULL;
  p->_wavelengths.memview = NULL;
  p->_neighbours.data = NULL;
  p->_neighbours.memview = NULL;
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_13RayCollection_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_RayCollection(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *p = (struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7raypier_4core_7ctracer_13RayCollection_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_parent);
  __PYX_XDEC_MEMVIEW(&p->_wavelengths, 1);
  __PYX_XDEC_MEMVIEW(&p->_neighbours, 1);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7raypier_4core_7ctracer_RayArrayView(o);
}

static int __pyx_tp_traverse_7raypier_4core_7ctracer_RayCollection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *p = (struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)o;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_RayArrayView)) ? ((__pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_7ctracer_RayCollection)); if (e) return e;
  if (p->_parent) {
    e = (*v)(((PyObject *)p->_parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_7ctracer_RayCollection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *p = (struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)o;
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_RayArrayView)) { if (__pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_7ctracer_RayCollection);
  tmp = ((PyObject*)p->_parent);
  p->_parent = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_13RayCollection_base_rays(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_9base_rays_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_13RayCollection_wavelengths(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_11wavelengths_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_13RayCollection_wavelengths(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_11wavelengths_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_13RayCollection_neighbours(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_10neighbours_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_13RayCollection_neighbours(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_10neighbours_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_13RayCollection_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_6parent_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_13RayCollection_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_6parent_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_13RayCollection_n_rays(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_6n_rays_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_13RayCollection_max_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_13RayCollection_8max_size_1__get__(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_RayCollection[] = {
  {"reset_length", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_7reset_length, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7raypier_4core_7ctracer_13RayCollection_6reset_length},
  {"add_ray", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_9add_ray, METH_O, __pyx_doc_7raypier_4core_7ctracer_13RayCollection_8add_ray},
  {"add_ray_list", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_11add_ray_list, METH_O, __pyx_doc_7raypier_4core_7ctracer_13RayCollection_10add_ray_list},
  {"clear_ray_list", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_13clear_ray_list, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_13RayCollection_12clear_ray_list},
  {"copy_as_array", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_17copy_as_array, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_13RayCollection_16copy_as_array},
  {"from_array", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_19from_array, METH_O, __pyx_doc_7raypier_4core_7ctracer_13RayCollection_18from_array},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_21__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_13RayCollection_23__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_RayCollection[] = {
  {(char *)"base_rays", __pyx_getprop_7raypier_4core_7ctracer_13RayCollection_base_rays, 0, (char *)0, 0},
  {(char *)"wavelengths", __pyx_getprop_7raypier_4core_7ctracer_13RayCollection_wavelengths, __pyx_setprop_7raypier_4core_7ctracer_13RayCollection_wavelengths, (char *)0, 0},
  {(char *)"neighbours", __pyx_getprop_7raypier_4core_7ctracer_13RayCollection_neighbours, __pyx_setprop_7raypier_4core_7ctracer_13RayCollection_neighbours, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_7raypier_4core_7ctracer_13RayCollection_parent, __pyx_setprop_7raypier_4core_7ctracer_13RayCollection_parent, (char *)0, 0},
  {(char *)"n_rays", __pyx_getprop_7raypier_4core_7ctracer_13RayCollection_n_rays, 0, (char *)0, 0},
  {(char *)"max_size", __pyx_getprop_7raypier_4core_7ctracer_13RayCollection_max_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_RayCollection = {
  __pyx_pw_7raypier_4core_7ctracer_13RayCollection_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RayCollection = {
  __pyx_pw_7raypier_4core_7ctracer_13RayCollection_5__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_1__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_RayCollection = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.RayCollection", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_RayCollection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_RayCollection, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RayCollection, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A list-like collection of ray_t objects.\n    \n    The RayCollection is the primary data-structure used in the ray-tracing operation. \n    \n    The RayCollection is of variable length, in that it can grow as individual rays are added to it.\n    Internally, the memory allocated to the array of ray_t structures is re-allocated to increase\n    its capacity.\n    ", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_7ctracer_RayCollection, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_7ctracer_RayCollection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7raypier_4core_7ctracer_13RayCollection_15__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_RayCollection, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_RayCollection, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_RayCollection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection __pyx_vtable_7raypier_4core_7ctracer_GaussletCollection;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_GaussletCollection(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_GaussletCollection;
  p->_parent = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)Py_None); Py_INCREF(Py_None);
  p->_wavelengths.data = NULL;
  p->_wavelengths.memview = NULL;
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_GaussletCollection(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_parent);
  __PYX_XDEC_MEMVIEW(&p->_wavelengths, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7raypier_4core_7ctracer_GaussletCollection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)o;
  if (p->_parent) {
    e = (*v)(((PyObject *)p->_parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_7ctracer_GaussletCollection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)o;
  tmp = ((PyObject*)p->_parent);
  p->_parent = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_7raypier_4core_7ctracer_GaussletCollection(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7raypier_4core_7ctracer_GaussletCollection(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_19__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6parent_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_18GaussletCollection_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6parent_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_lagrange_invariant(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_18lagrange_invariant_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_base_rays(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_9base_rays_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_total_power(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11total_power_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_wavelengths(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_18GaussletCollection_wavelengths(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11wavelengths_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_origin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11para_origin_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_direction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_14para_direction_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_normal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11para_normal_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_termination(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_16para_termination_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_n_rays(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_6n_rays_1__get__(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_max_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_8max_size_1__get__(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_GaussletCollection[] = {
  {"add_gausslet", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_7add_gausslet, METH_O, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_6add_gausslet},
  {"add_gausslet_list", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_9add_gausslet_list, METH_O, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_8add_gausslet_list},
  {"reset_length", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_11reset_length, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_10reset_length},
  {"clear_ray_list", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_13clear_ray_list, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_12clear_ray_list},
  {"get_gausslet_list", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_15get_gausslet_list, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_14get_gausslet_list},
  {"copy_as_array", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_23copy_as_array, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_22copy_as_array},
  {"extend", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_25extend, METH_O, 0},
  {"from_array", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_27from_array, METH_O, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_26from_array},
  {"from_rays", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_29from_rays, METH_O, 0},
  {"project_to_plane", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_31project_to_plane, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_30project_to_plane},
  {"scale_amplitude", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_33scale_amplitude, METH_O, 0},
  {"config_parabasal_rays", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_35config_parabasal_rays, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7raypier_4core_7ctracer_18GaussletCollection_34config_parabasal_rays},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_37__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_39__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_GaussletCollection[] = {
  {(char *)"parent", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_parent, __pyx_setprop_7raypier_4core_7ctracer_18GaussletCollection_parent, (char *)0, 0},
  {(char *)"lagrange_invariant", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_lagrange_invariant, 0, (char *)0, 0},
  {(char *)"base_rays", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_base_rays, 0, (char *)0, 0},
  {(char *)"total_power", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_total_power, 0, (char *)0, 0},
  {(char *)"wavelengths", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_wavelengths, __pyx_setprop_7raypier_4core_7ctracer_18GaussletCollection_wavelengths, (char *)0, 0},
  {(char *)"para_origin", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_origin, 0, (char *)0, 0},
  {(char *)"para_direction", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_direction, 0, (char *)0, 0},
  {(char *)"para_normal", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_normal, 0, (char *)0, 0},
  {(char *)"para_termination", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_para_termination, 0, (char *)0, 0},
  {(char *)"n_rays", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_n_rays, 0, (char *)0, 0},
  {(char *)"max_size", __pyx_getprop_7raypier_4core_7ctracer_18GaussletCollection_max_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GaussletCollection = {
  __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7raypier_4core_7ctracer_GaussletCollection, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GaussletCollection = {
  __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_5__len__, /*mp_length*/
  __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_17__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7raypier_4core_7ctracer_GaussletCollection, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_GaussletCollection = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.GaussletCollection", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_GaussletCollection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GaussletCollection, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GaussletCollection, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A list-like collection of ray_t objects.\n    \n    The RayCollection is the primary data-structure used in the ray-tracing operation. \n    \n    The RayCollection is of variable length, in that it can grow as individual rays are added to it.\n    Internally, the memory allocated to the array of ray_t structures is re-allocated to increase\n    its capacity.\n    ", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_7ctracer_GaussletCollection, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_7ctracer_GaussletCollection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7raypier_4core_7ctracer_18GaussletCollection_21__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_GaussletCollection, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_GaussletCollection, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_GaussletCollection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletBaseRayView __pyx_vtable_7raypier_4core_7ctracer_GaussletBaseRayView;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_GaussletBaseRayView(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_7ctracer_RayArrayView(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView*)__pyx_vtabptr_7raypier_4core_7ctracer_GaussletBaseRayView;
  p->owner = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_GaussletBaseRayView(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->owner);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7raypier_4core_7ctracer_RayArrayView(o);
}

static int __pyx_tp_traverse_7raypier_4core_7ctracer_GaussletBaseRayView(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)o;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_RayArrayView)) ? ((__pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_7ctracer_GaussletBaseRayView)); if (e) return e;
  if (p->owner) {
    e = (*v)(((PyObject *)p->owner), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_7ctracer_GaussletBaseRayView(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView *)o;
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_RayArrayView)) { if (__pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_7ctracer_GaussletBaseRayView);
  tmp = ((PyObject*)p->owner);
  p->owner = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_GaussletBaseRayView[] = {
  {"copy_as_array", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_5copy_as_array, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GaussletBaseRayView = {
  __pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GaussletBaseRayView = {
  __pyx_pw_7raypier_4core_7ctracer_19GaussletBaseRayView_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7raypier_4core_7ctracer_12RayArrayView_1__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.GaussletBaseRayView", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_GaussletBaseRayView, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GaussletBaseRayView, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GaussletBaseRayView, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_7ctracer_GaussletBaseRayView, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_7ctracer_GaussletBaseRayView, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_GaussletBaseRayView, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_GaussletBaseRayView, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_RayCollectionIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)o);
  p->rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_RayCollectionIterator(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *p = (struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->rays);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7raypier_4core_7ctracer_RayCollectionIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *p = (struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)o;
  if (p->rays) {
    e = (*v)(((PyObject *)p->rays), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_7ctracer_RayCollectionIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *p = (struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator *)o;
  tmp = ((PyObject*)p->rays);
  p->rays = ((struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_5__next__(self);}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_RayCollectionIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_RayCollectionIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.RayCollectionIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_RayCollectionIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_7ctracer_RayCollectionIterator, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_7ctracer_RayCollectionIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_3__iter__, /*tp_iter*/
  __pyx_pw_7raypier_4core_7ctracer_21RayCollectionIterator_5__next__, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_RayCollectionIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_RayCollectionIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_GaussletCollectionIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)o);
  p->rays = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_GaussletCollectionIterator(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->rays);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7raypier_4core_7ctracer_GaussletCollectionIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)o;
  if (p->rays) {
    e = (*v)(((PyObject *)p->rays), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_7ctracer_GaussletCollectionIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *p = (struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator *)o;
  tmp = ((PyObject*)p->rays);
  p->rays = ((struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_5__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_5__next__(self);}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_GaussletCollectionIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_5__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.GaussletCollectionIterator", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_GaussletCollectionIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_7ctracer_GaussletCollectionIterator, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_7ctracer_GaussletCollectionIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_3__iter__, /*tp_iter*/
  __pyx_pw_7raypier_4core_7ctracer_26GaussletCollectionIterator_5__next__, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_GaussletCollectionIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_GaussletCollectionIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial __pyx_vtable_7raypier_4core_7ctracer_InterfaceMaterial;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_InterfaceMaterial(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_InterfaceMaterial;
  p->_wavelengths.data = NULL;
  p->_wavelengths.memview = NULL;
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_InterfaceMaterial(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *p = (struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __PYX_XDEC_MEMVIEW(&p->_wavelengths, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_17InterfaceMaterial_wavelengths(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_3__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_17InterfaceMaterial_wavelengths(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11wavelengths_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_InterfaceMaterial[] = {
  {"is_decomp_material", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_3is_decomp_material, METH_NOARGS, 0},
  {"eval_child_ray", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_5eval_child_ray, METH_VARARGS|METH_KEYWORDS, 0},
  {"eval_parabasal_ray", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_7eval_parabasal_ray, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_17InterfaceMaterial_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_InterfaceMaterial[] = {
  {(char *)"wavelengths", __pyx_getprop_7raypier_4core_7ctracer_17InterfaceMaterial_wavelengths, __pyx_setprop_7raypier_4core_7ctracer_17InterfaceMaterial_wavelengths, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_InterfaceMaterial = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.InterfaceMaterial", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_InterfaceMaterial, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Abstract base class for objects describing\n    the materials characterics of a Face\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_InterfaceMaterial, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_InterfaceMaterial, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_InterfaceMaterial, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion __pyx_vtable_7raypier_4core_7ctracer_Distortion;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Distortion(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_Distortion *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_Distortion;
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_Distortion(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_Distortion[] = {
  {"z_offset_and_gradient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_10Distortion_1z_offset_and_gradient, METH_VARARGS|METH_KEYWORDS, 0},
  {"z_offset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_10Distortion_3z_offset, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_10Distortion_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_10Distortion_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_Distortion = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.Distortion", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Distortion), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_Distortion, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "A abstract base class to represents distortions on a face, a z-offset \n    as a function of (x,y).\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_Distortion, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_Distortion, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape __pyx_vtable_7raypier_4core_7ctracer_Shape;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Shape(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_Shape *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_Shape;
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_Shape(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_Shape[] = {
  {"point_inside", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_5Shape_1point_inside, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_5Shape_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_5Shape_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_Shape = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.Shape", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Shape), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_Shape, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_Shape, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_Shape, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface __pyx_vtable_7raypier_4core_7ctracer_ImplicitSurface;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_ImplicitSurface(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_ImplicitSurface;
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_ImplicitSurface(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_ImplicitSurface[] = {
  {"evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_1evaluate, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_15ImplicitSurface_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_ImplicitSurface = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.ImplicitSurface", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_ImplicitSurface, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Positions 'outside' the surface evaluate > 0.0\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_ImplicitSurface, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_ImplicitSurface, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_vtable_7raypier_4core_7ctracer_Face;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_Face(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_Face *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_Face *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_Face;
  p->owner = Py_None; Py_INCREF(Py_None);
  p->material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_4Face_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_Face(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_Face *p = (struct __pyx_obj_7raypier_4core_7ctracer_Face *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->owner);
  Py_CLEAR(p->material);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7raypier_4core_7ctracer_Face(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_7ctracer_Face *p = (struct __pyx_obj_7raypier_4core_7ctracer_Face *)o;
  if (p->owner) {
    e = (*v)(p->owner, a); if (e) return e;
  }
  if (p->material) {
    e = (*v)(((PyObject *)p->material), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_7ctracer_Face(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_7ctracer_Face *p = (struct __pyx_obj_7raypier_4core_7ctracer_Face *)o;
  tmp = ((PyObject*)p->owner);
  p->owner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->material);
  p->material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_owner(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_5owner_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_owner(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_5owner_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_5owner_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_4name_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_4name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_tolerance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_9tolerance_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_tolerance(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_9tolerance_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_idx(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_3idx_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_idx(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_3idx_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_max_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_10max_length_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_max_length(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_10max_length_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_material(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_8material_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_material(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_8material_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_8material_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_invert_normal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_13invert_normal_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_invert_normal(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_13invert_normal_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_4Face_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_4Face_5count_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_4Face_count(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_4Face_5count_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_Face[] = {
  {"update", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_4Face_3update, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_4Face_2update},
  {"intersect", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_4Face_5intersect, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute_normal", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_4Face_7compute_normal, METH_O, __pyx_doc_7raypier_4core_7ctracer_4Face_6compute_normal},
  {"compute_tangent", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_4Face_9compute_tangent, METH_O, __pyx_doc_7raypier_4core_7ctracer_4Face_8compute_tangent},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_4Face_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_4Face_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_Face[] = {
  {(char *)"owner", __pyx_getprop_7raypier_4core_7ctracer_4Face_owner, __pyx_setprop_7raypier_4core_7ctracer_4Face_owner, (char *)0, 0},
  {(char *)"name", __pyx_getprop_7raypier_4core_7ctracer_4Face_name, __pyx_setprop_7raypier_4core_7ctracer_4Face_name, (char *)0, 0},
  {(char *)"tolerance", __pyx_getprop_7raypier_4core_7ctracer_4Face_tolerance, __pyx_setprop_7raypier_4core_7ctracer_4Face_tolerance, (char *)0, 0},
  {(char *)"idx", __pyx_getprop_7raypier_4core_7ctracer_4Face_idx, __pyx_setprop_7raypier_4core_7ctracer_4Face_idx, (char *)0, 0},
  {(char *)"max_length", __pyx_getprop_7raypier_4core_7ctracer_4Face_max_length, __pyx_setprop_7raypier_4core_7ctracer_4Face_max_length, (char *)0, 0},
  {(char *)"material", __pyx_getprop_7raypier_4core_7ctracer_4Face_material, __pyx_setprop_7raypier_4core_7ctracer_4Face_material, (char *)0, 0},
  {(char *)"invert_normal", __pyx_getprop_7raypier_4core_7ctracer_4Face_invert_normal, __pyx_setprop_7raypier_4core_7ctracer_4Face_invert_normal, (char *)0, 0},
  {(char *)"count", __pyx_getprop_7raypier_4core_7ctracer_4Face_count, __pyx_setprop_7raypier_4core_7ctracer_4Face_count, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_Face = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.Face", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Face), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_Face, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_7ctracer_Face, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_7ctracer_Face, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_Face, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_Face, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_Face, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList __pyx_vtable_7raypier_4core_7ctracer_FaceList;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer_FaceList(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)o);
  p->__pyx_vtab = __pyx_vtabptr_7raypier_4core_7ctracer_FaceList;
  p->faces = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->owner = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_7ctracer_8FaceList_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer_FaceList(PyObject *o) {
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *p = (struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->faces);
  Py_CLEAR(p->owner);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7raypier_4core_7ctracer_FaceList(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *p = (struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)o;
  if (p->faces) {
    e = (*v)(p->faces, a); if (e) return e;
  }
  if (p->owner) {
    e = (*v)(p->owner, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_7ctracer_FaceList(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_7ctracer_FaceList *p = (struct __pyx_obj_7raypier_4core_7ctracer_FaceList *)o;
  tmp = ((PyObject*)p->faces);
  p->faces = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->owner);
  p->owner = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_7raypier_4core_7ctracer_FaceList(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_8FaceList_transform(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_8FaceList_9transform_3__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_8FaceList_transform(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_8FaceList_9transform_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_8FaceList_inverse_transform(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_8FaceList_17inverse_transform_3__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_8FaceList_inverse_transform(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_8FaceList_17inverse_transform_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_8FaceList_faces(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_8FaceList_faces(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_7ctracer_8FaceList_5faces_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7raypier_4core_7ctracer_8FaceList_owner(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_7ctracer_8FaceList_owner(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_7ctracer_8FaceList_5owner_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_7ctracer_FaceList[] = {
  {"sync_transforms", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_8FaceList_3sync_transforms, METH_NOARGS, __pyx_doc_7raypier_4core_7ctracer_8FaceList_2sync_transforms},
  {"intersect", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_8FaceList_7intersect, METH_O, 0},
  {"intersect_para", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_8FaceList_9intersect_para, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute_orientation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_7ctracer_8FaceList_11compute_orientation, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_8FaceList_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_7ctracer_8FaceList_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_7ctracer_FaceList[] = {
  {(char *)"transform", __pyx_getprop_7raypier_4core_7ctracer_8FaceList_transform, __pyx_setprop_7raypier_4core_7ctracer_8FaceList_transform, (char *)0, 0},
  {(char *)"inverse_transform", __pyx_getprop_7raypier_4core_7ctracer_8FaceList_inverse_transform, __pyx_setprop_7raypier_4core_7ctracer_8FaceList_inverse_transform, (char *)0, 0},
  {(char *)"faces", __pyx_getprop_7raypier_4core_7ctracer_8FaceList_faces, __pyx_setprop_7raypier_4core_7ctracer_8FaceList_faces, (char *)0, 0},
  {(char *)"owner", __pyx_getprop_7raypier_4core_7ctracer_8FaceList_owner, __pyx_setprop_7raypier_4core_7ctracer_8FaceList_owner, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_FaceList = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7raypier_4core_7ctracer_FaceList, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_FaceList = {
  0, /*mp_length*/
  __pyx_pw_7raypier_4core_7ctracer_8FaceList_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7raypier_4core_7ctracer_FaceList = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.FaceList", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer_FaceList), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer_FaceList, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_FaceList, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_FaceList, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "A group of faces which share a transform", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_7ctracer_FaceList, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_7ctracer_FaceList, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_7ctracer_FaceList, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_7ctracer_FaceList, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer_FaceList, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr *__pyx_freelist_7raypier_4core_7ctracer___pyx_scope_struct__genexpr[8];
static int __pyx_freecount_7raypier_4core_7ctracer___pyx_scope_struct__genexpr = 0;

static PyObject *__pyx_tp_new_7raypier_4core_7ctracer___pyx_scope_struct__genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_7raypier_4core_7ctracer___pyx_scope_struct__genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr)))) {
    o = (PyObject*)__pyx_freelist_7raypier_4core_7ctracer___pyx_scope_struct__genexpr[--__pyx_freecount_7raypier_4core_7ctracer___pyx_scope_struct__genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_7ctracer___pyx_scope_struct__genexpr(PyObject *o) {
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_7raypier_4core_7ctracer___pyx_scope_struct__genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr)))) {
    __pyx_freelist_7raypier_4core_7ctracer___pyx_scope_struct__genexpr[__pyx_freecount_7raypier_4core_7ctracer___pyx_scope_struct__genexpr++] = ((struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static PyTypeObject __pyx_type_7raypier_4core_7ctracer___pyx_scope_struct__genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.__pyx_scope_struct__genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_7ctracer___pyx_scope_struct__genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_7ctracer___pyx_scope_struct__genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_7ctracer___pyx_scope_struct__genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.ctracer._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_ctracer(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_ctracer},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ctracer",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_u_Array_must_have_gausslet_dtype_d, __pyx_k_Array_must_have_gausslet_dtype_d, sizeof(__pyx_k_Array_must_have_gausslet_dtype_d), 0, 1, 0, 0},
  {&__pyx_kp_u_Attempting_to_set_index, __pyx_k_Attempting_to_set_index, sizeof(__pyx_k_Attempting_to_set_index), 0, 1, 0, 0},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Both_x_and_y_must_have_the_same, __pyx_k_Both_x_and_y_must_have_the_same, sizeof(__pyx_k_Both_x_and_y_must_have_the_same), 0, 1, 0, 0},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Distortion, __pyx_k_Distortion, sizeof(__pyx_k_Distortion), 0, 0, 1, 1},
  {&__pyx_n_s_E1_amp, __pyx_k_E1_amp, sizeof(__pyx_k_E1_amp), 0, 0, 1, 1},
  {&__pyx_n_u_E1_amp, __pyx_k_E1_amp, sizeof(__pyx_k_E1_amp), 0, 1, 0, 1},
  {&__pyx_n_s_E2_amp, __pyx_k_E2_amp, sizeof(__pyx_k_E2_amp), 0, 0, 1, 1},
  {&__pyx_n_u_E2_amp, __pyx_k_E2_amp, sizeof(__pyx_k_E2_amp), 0, 1, 0, 1},
  {&__pyx_n_s_E_vector, __pyx_k_E_vector, sizeof(__pyx_k_E_vector), 0, 0, 1, 1},
  {&__pyx_n_u_E_vector, __pyx_k_E_vector, sizeof(__pyx_k_E_vector), 0, 1, 0, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Face, __pyx_k_Face, sizeof(__pyx_k_Face), 0, 0, 1, 1},
  {&__pyx_n_s_FaceList, __pyx_k_FaceList, sizeof(__pyx_k_FaceList), 0, 0, 1, 1},
  {&__pyx_n_s_GAUSSLET, __pyx_k_GAUSSLET, sizeof(__pyx_k_GAUSSLET), 0, 0, 1, 1},
  {&__pyx_n_s_GAUSSLET_2, __pyx_k_GAUSSLET_2, sizeof(__pyx_k_GAUSSLET_2), 0, 0, 1, 1},
  {&__pyx_n_s_Gausslet, __pyx_k_Gausslet, sizeof(__pyx_k_Gausslet), 0, 0, 1, 1},
  {&__pyx_n_s_GaussletBaseRayView, __pyx_k_GaussletBaseRayView, sizeof(__pyx_k_GaussletBaseRayView), 0, 0, 1, 1},
  {&__pyx_n_s_GaussletCollection, __pyx_k_GaussletCollection, sizeof(__pyx_k_GaussletCollection), 0, 0, 1, 1},
  {&__pyx_n_s_GaussletCollectionIterator, __pyx_k_GaussletCollectionIterator, sizeof(__pyx_k_GaussletCollectionIterator), 0, 0, 1, 1},
  {&__pyx_n_s_Gausslet___get___locals_genexpr, __pyx_k_Gausslet___get___locals_genexpr, sizeof(__pyx_k_Gausslet___get___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_kp_u_Gausslet_o, __pyx_k_Gausslet_o, sizeof(__pyx_k_Gausslet_o), 0, 1, 0, 0},
  {&__pyx_n_s_INF, __pyx_k_INF, sizeof(__pyx_k_INF), 0, 0, 1, 1},
  {&__pyx_n_s_ImplicitSurface, __pyx_k_ImplicitSurface, sizeof(__pyx_k_ImplicitSurface), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_n_s_InterfaceMaterial, __pyx_k_InterfaceMaterial, sizeof(__pyx_k_InterfaceMaterial), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_kp_u_NO_OWNER, __pyx_k_NO_OWNER, sizeof(__pyx_k_NO_OWNER), 0, 1, 0, 0},
  {&__pyx_n_s_NPARA, __pyx_k_NPARA, sizeof(__pyx_k_NPARA), 0, 0, 1, 1},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_3, __pyx_k_No_value_specified_for_struct_at_3, sizeof(__pyx_k_No_value_specified_for_struct_at_3), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_4, __pyx_k_No_value_specified_for_struct_at_4, sizeof(__pyx_k_No_value_specified_for_struct_at_4), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_5, __pyx_k_No_value_specified_for_struct_at_5, sizeof(__pyx_k_No_value_specified_for_struct_at_5), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_6, __pyx_k_No_value_specified_for_struct_at_6, sizeof(__pyx_k_No_value_specified_for_struct_at_6), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_7, __pyx_k_No_value_specified_for_struct_at_7, sizeof(__pyx_k_No_value_specified_for_struct_at_7), 0, 0, 1, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PARABASAL, __pyx_k_PARABASAL, sizeof(__pyx_k_PARABASAL), 0, 0, 1, 1},
  {&__pyx_n_s_PARABASAL_2, __pyx_k_PARABASAL_2, sizeof(__pyx_k_PARABASAL_2), 0, 0, 1, 1},
  {&__pyx_n_s_PECMaterial, __pyx_k_PECMaterial, sizeof(__pyx_k_PECMaterial), 0, 0, 1, 1},
  {&__pyx_n_s_ParabasalRay, __pyx_k_ParabasalRay, sizeof(__pyx_k_ParabasalRay), 0, 0, 1, 1},
  {&__pyx_kp_u_Parabasal_Ray_o, __pyx_k_Parabasal_Ray_o, sizeof(__pyx_k_Parabasal_Ray_o), 0, 1, 0, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Pickling_of_struct_members_such, __pyx_k_Pickling_of_struct_members_such, sizeof(__pyx_k_Pickling_of_struct_members_such), 0, 0, 1, 0},
  {&__pyx_n_s_REFL_RAY, __pyx_k_REFL_RAY, sizeof(__pyx_k_REFL_RAY), 0, 0, 1, 1},
  {&__pyx_n_s_Ray, __pyx_k_Ray, sizeof(__pyx_k_Ray), 0, 0, 1, 1},
  {&__pyx_n_s_RayArrayView, __pyx_k_RayArrayView, sizeof(__pyx_k_RayArrayView), 0, 0, 1, 1},
  {&__pyx_n_s_RayCollection, __pyx_k_RayCollection, sizeof(__pyx_k_RayCollection), 0, 0, 1, 1},
  {&__pyx_n_s_RayCollectionIterator, __pyx_k_RayCollectionIterator, sizeof(__pyx_k_RayCollectionIterator), 0, 0, 1, 1},
  {&__pyx_kp_u_Ray_o, __pyx_k_Ray_o, sizeof(__pyx_k_Ray_o), 0, 1, 0, 0},
  {&__pyx_kp_u_Requested_index, __pyx_k_Requested_index, sizeof(__pyx_k_Requested_index), 0, 1, 0, 0},
  {&__pyx_n_s_Shape, __pyx_k_Shape, sizeof(__pyx_k_Shape), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_Transform, __pyx_k_Transform, sizeof(__pyx_k_Transform), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_a_2, __pyx_k_a_2, sizeof(__pyx_k_a_2), 0, 0, 1, 1},
  {&__pyx_n_s_accumulated_path, __pyx_k_accumulated_path, sizeof(__pyx_k_accumulated_path), 0, 0, 1, 1},
  {&__pyx_n_u_accumulated_path, __pyx_k_accumulated_path, sizeof(__pyx_k_accumulated_path), 0, 1, 0, 1},
  {&__pyx_n_s_add_ray_c, __pyx_k_add_ray_c, sizeof(__pyx_k_add_ray_c), 0, 0, 1, 1},
  {&__pyx_n_s_addvs, __pyx_k_addvs, sizeof(__pyx_k_addvs), 0, 0, 1, 1},
  {&__pyx_n_s_addvv, __pyx_k_addvv, sizeof(__pyx_k_addvv), 0, 0, 1, 1},
  {&__pyx_n_s_all_faces, __pyx_k_all_faces, sizeof(__pyx_k_all_faces), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_amplitude, __pyx_k_amplitude, sizeof(__pyx_k_amplitude), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_u_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 1, 0, 0},
  {&__pyx_n_s_array_2, __pyx_k_array_2, sizeof(__pyx_k_array_2), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_b_2, __pyx_k_b_2, sizeof(__pyx_k_b_2), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_base_ray, __pyx_k_base_ray, sizeof(__pyx_k_base_ray), 0, 0, 1, 1},
  {&__pyx_n_u_base_ray, __pyx_k_base_ray, sizeof(__pyx_k_base_ray), 0, 1, 0, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_c_2, __pyx_k_c_2, sizeof(__pyx_k_c_2), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cmaterials, __pyx_k_cmaterials, sizeof(__pyx_k_cmaterials), 0, 0, 1, 1},
  {&__pyx_n_s_complex128, __pyx_k_complex128, sizeof(__pyx_k_complex128), 0, 0, 1, 1},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_cross, __pyx_k_cross, sizeof(__pyx_k_cross), 0, 0, 1, 1},
  {&__pyx_kp_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 0},
  {&__pyx_n_u_d_2, __pyx_k_d_2, sizeof(__pyx_k_d_2), 0, 1, 0, 1},
  {&__pyx_n_s_decomp_faces, __pyx_k_decomp_faces, sizeof(__pyx_k_decomp_faces), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
  {&__pyx_n_u_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 1, 0, 1},
  {&__pyx_n_s_dotprod, __pyx_k_dotprod, sizeof(__pyx_k_dotprod), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end_face_idx, __pyx_k_end_face_idx, sizeof(__pyx_k_end_face_idx), 0, 0, 1, 1},
  {&__pyx_n_u_end_face_idx, __pyx_k_end_face_idx, sizeof(__pyx_k_end_face_idx), 0, 1, 0, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_face, __pyx_k_face, sizeof(__pyx_k_face), 0, 0, 1, 1},
  {&__pyx_n_s_face_idx, __pyx_k_face_idx, sizeof(__pyx_k_face_idx), 0, 0, 1, 1},
  {&__pyx_n_s_face_set, __pyx_k_face_set, sizeof(__pyx_k_face_set), 0, 0, 1, 1},
  {&__pyx_n_s_face_sets, __pyx_k_face_sets, sizeof(__pyx_k_face_sets), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_kp_u_from_a_size, __pyx_k_from_a_size, sizeof(__pyx_k_from_a_size), 0, 1, 0, 0},
  {&__pyx_n_s_from_array, __pyx_k_from_array, sizeof(__pyx_k_from_array), 0, 0, 1, 1},
  {&__pyx_n_s_from_rays, __pyx_k_from_rays, sizeof(__pyx_k_from_rays), 0, 0, 1, 1},
  {&__pyx_n_s_fs, __pyx_k_fs, sizeof(__pyx_k_fs), 0, 0, 1, 1},
  {&__pyx_n_s_full, __pyx_k_full, sizeof(__pyx_k_full), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_gausslet_dtype, __pyx_k_gausslet_dtype, sizeof(__pyx_k_gausslet_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_element, __pyx_k_get_element, sizeof(__pyx_k_get_element), 0, 0, 1, 1},
  {&__pyx_n_s_get_ray_size, __pyx_k_get_ray_size, sizeof(__pyx_k_get_ray_size), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_imag, __pyx_k_imag, sizeof(__pyx_k_imag), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_inverse, __pyx_k_inverse, sizeof(__pyx_k_inverse), 0, 0, 1, 1},
  {&__pyx_n_s_inverse_transform, __pyx_k_inverse_transform, sizeof(__pyx_k_inverse_transform), 0, 0, 1, 1},
  {&__pyx_n_s_invert, __pyx_k_invert, sizeof(__pyx_k_invert), 0, 0, 1, 1},
  {&__pyx_n_u_invert_normal, __pyx_k_invert_normal, sizeof(__pyx_k_invert_normal), 0, 1, 0, 1},
  {&__pyx_n_s_is_base_ray, __pyx_k_is_base_ray, sizeof(__pyx_k_is_base_ray), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_jones_vector, __pyx_k_jones_vector, sizeof(__pyx_k_jones_vector), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_u_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 1, 0, 1},
  {&__pyx_n_s_linear_inverse, __pyx_k_linear_inverse, sizeof(__pyx_k_linear_inverse), 0, 0, 1, 1},
  {&__pyx_n_s_mag, __pyx_k_mag, sizeof(__pyx_k_mag), 0, 0, 1, 1},
  {&__pyx_n_s_mag_sq, __pyx_k_mag_sq, sizeof(__pyx_k_mag_sq), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_material, __pyx_k_material, sizeof(__pyx_k_material), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_max_length, __pyx_k_max_length, sizeof(__pyx_k_max_length), 0, 0, 1, 1},
  {&__pyx_n_s_max_size, __pyx_k_max_size, sizeof(__pyx_k_max_size), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_monotonic, __pyx_k_monotonic, sizeof(__pyx_k_monotonic), 0, 0, 1, 1},
  {&__pyx_n_s_multvs, __pyx_k_multvs, sizeof(__pyx_k_multvs), 0, 0, 1, 1},
  {&__pyx_n_s_multvv, __pyx_k_multvv, sizeof(__pyx_k_multvv), 0, 0, 1, 1},
  {&__pyx_n_s_n_rays, __pyx_k_n_rays, sizeof(__pyx_k_n_rays), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_neighbours, __pyx_k_neighbours, sizeof(__pyx_k_neighbours), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_new_rays, __pyx_k_new_rays, sizeof(__pyx_k_new_rays), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 0, 1, 1},
  {&__pyx_n_u_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 1, 0, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_old_ray, __pyx_k_old_ray, sizeof(__pyx_k_old_ray), 0, 0, 1, 1},
  {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
  {&__pyx_n_u_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 1, 0, 1},
  {&__pyx_n_s_owner, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_p1, __pyx_k_p1, sizeof(__pyx_k_p1), 0, 0, 1, 1},
  {&__pyx_n_s_p2, __pyx_k_p2, sizeof(__pyx_k_p2), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_para, __pyx_k_para, sizeof(__pyx_k_para), 0, 0, 1, 1},
  {&__pyx_n_s_para_dtype, __pyx_k_para_dtype, sizeof(__pyx_k_para_dtype), 0, 0, 1, 1},
  {&__pyx_n_u_para_rays, __pyx_k_para_rays, sizeof(__pyx_k_para_rays), 0, 1, 0, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_parent_idx, __pyx_k_parent_idx, sizeof(__pyx_k_parent_idx), 0, 0, 1, 1},
  {&__pyx_n_u_parent_idx, __pyx_k_parent_idx, sizeof(__pyx_k_parent_idx), 0, 1, 0, 1},
  {&__pyx_n_s_phase, __pyx_k_phase, sizeof(__pyx_k_phase), 0, 0, 1, 1},
  {&__pyx_n_u_phase, __pyx_k_phase, sizeof(__pyx_k_phase), 0, 1, 0, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_piece, __pyx_k_piece, sizeof(__pyx_k_piece), 0, 0, 1, 1},
  {&__pyx_n_s_point, __pyx_k_point, sizeof(__pyx_k_point), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_set_v, __pyx_k_py_set_v, sizeof(__pyx_k_py_set_v), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_capi, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Distortion, __pyx_k_pyx_unpickle_Distortion, sizeof(__pyx_k_pyx_unpickle_Distortion), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ImplicitSurface, __pyx_k_pyx_unpickle_ImplicitSurface, sizeof(__pyx_k_pyx_unpickle_ImplicitSurface), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_RayArrayView, __pyx_k_pyx_unpickle_RayArrayView, sizeof(__pyx_k_pyx_unpickle_RayArrayView), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Shape, __pyx_k_pyx_unpickle_Shape, sizeof(__pyx_k_pyx_unpickle_Shape), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ray, __pyx_k_ray, sizeof(__pyx_k_ray), 0, 0, 1, 1},
  {&__pyx_n_s_ray_col_list, __pyx_k_ray_col_list, sizeof(__pyx_k_ray_col_list), 0, 0, 1, 1},
  {&__pyx_n_s_ray_dtype, __pyx_k_ray_dtype, sizeof(__pyx_k_ray_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_ray_ident, __pyx_k_ray_ident, sizeof(__pyx_k_ray_ident), 0, 0, 1, 1},
  {&__pyx_n_u_ray_ident, __pyx_k_ray_ident, sizeof(__pyx_k_ray_ident), 0, 1, 0, 1},
  {&__pyx_n_s_ray_idx, __pyx_k_ray_idx, sizeof(__pyx_k_ray_idx), 0, 0, 1, 1},
  {&__pyx_kp_u_ray_list_contains_non_Gausslet_i, __pyx_k_ray_list_contains_non_Gausslet_i, sizeof(__pyx_k_ray_list_contains_non_Gausslet_i), 0, 1, 0, 0},
  {&__pyx_kp_u_ray_list_contains_non_Ray_instan, __pyx_k_ray_list_contains_non_Ray_instan, sizeof(__pyx_k_ray_list_contains_non_Ray_instan), 0, 1, 0, 0},
  {&__pyx_n_s_ray_type_id, __pyx_k_ray_type_id, sizeof(__pyx_k_ray_type_id), 0, 0, 1, 1},
  {&__pyx_n_u_ray_type_id, __pyx_k_ray_type_id, sizeof(__pyx_k_ray_type_id), 0, 1, 0, 1},
  {&__pyx_n_s_raypier_core_ctracer, __pyx_k_raypier_core_ctracer, sizeof(__pyx_k_raypier_core_ctracer), 0, 0, 1, 1},
  {&__pyx_kp_s_raypier_core_ctracer_pyx, __pyx_k_raypier_core_ctracer_pyx, sizeof(__pyx_k_raypier_core_ctracer_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_rays, __pyx_k_rays, sizeof(__pyx_k_rays), 0, 0, 1, 1},
  {&__pyx_n_s_rc, __pyx_k_rc, sizeof(__pyx_k_rc), 0, 0, 1, 1},
  {&__pyx_n_s_rc_out, __pyx_k_rc_out, sizeof(__pyx_k_rc_out), 0, 0, 1, 1},
  {&__pyx_n_s_real, __pyx_k_real, sizeof(__pyx_k_real), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reduced, __pyx_k_reduced, sizeof(__pyx_k_reduced), 0, 0, 1, 1},
  {&__pyx_n_s_reflect, __pyx_k_reflect, sizeof(__pyx_k_reflect), 0, 0, 1, 1},
  {&__pyx_n_s_refractive_index, __pyx_k_refractive_index, sizeof(__pyx_k_refractive_index), 0, 0, 1, 1},
  {&__pyx_n_u_refractive_index, __pyx_k_refractive_index, sizeof(__pyx_k_refractive_index), 0, 1, 0, 1},
  {&__pyx_n_s_return_inverse, __pyx_k_return_inverse, sizeof(__pyx_k_return_inverse), 0, 0, 1, 1},
  {&__pyx_n_s_rotation, __pyx_k_rotation, sizeof(__pyx_k_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_select_gausslet_intersections, __pyx_k_select_gausslet_intersections, sizeof(__pyx_k_select_gausslet_intersections), 0, 0, 1, 1},
  {&__pyx_n_s_select_ray_intersections, __pyx_k_select_ray_intersections, sizeof(__pyx_k_select_ray_intersections), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_subvs, __pyx_k_subvs, sizeof(__pyx_k_subvs), 0, 0, 1, 1},
  {&__pyx_n_s_subvv, __pyx_k_subvv, sizeof(__pyx_k_subvv), 0, 0, 1, 1},
  {&__pyx_n_s_sync_transforms, __pyx_k_sync_transforms, sizeof(__pyx_k_sync_transforms), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tangent, __pyx_k_tangent, sizeof(__pyx_k_tangent), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_tolerance, __pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_trace_gausslet, __pyx_k_trace_gausslet, sizeof(__pyx_k_trace_gausslet), 0, 0, 1, 1},
  {&__pyx_n_s_trace_one_face_gausslet, __pyx_k_trace_one_face_gausslet, sizeof(__pyx_k_trace_one_face_gausslet), 0, 0, 1, 1},
  {&__pyx_n_s_trace_one_face_segment, __pyx_k_trace_one_face_segment, sizeof(__pyx_k_trace_one_face_segment), 0, 0, 1, 1},
  {&__pyx_n_s_trace_segment, __pyx_k_trace_segment, sizeof(__pyx_k_trace_segment), 0, 0, 1, 1},
  {&__pyx_n_s_transform, __pyx_k_transform, sizeof(__pyx_k_transform), 0, 0, 1, 1},
  {&__pyx_n_s_translation, __pyx_k_translation, sizeof(__pyx_k_translation), 0, 0, 1, 1},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_v_2, __pyx_k_v_2, sizeof(__pyx_k_v_2), 0, 0, 1, 1},
  {&__pyx_n_s_wavelength_idx, __pyx_k_wavelength_idx, sizeof(__pyx_k_wavelength_idx), 0, 0, 1, 1},
  {&__pyx_n_u_wavelength_idx, __pyx_k_wavelength_idx, sizeof(__pyx_k_wavelength_idx), 0, 1, 0, 1},
  {&__pyx_n_s_wavelength_list, __pyx_k_wavelength_list, sizeof(__pyx_k_wavelength_list), 0, 0, 1, 1},
  {&__pyx_n_s_wavelengths, __pyx_k_wavelengths, sizeof(__pyx_k_wavelengths), 0, 0, 1, 1},
  {&__pyx_n_s_wl_list, __pyx_k_wl_list, sizeof(__pyx_k_wl_list), 0, 0, 1, 1},
  {&__pyx_n_s_wl_offset, __pyx_k_wl_offset, sizeof(__pyx_k_wl_offset), 0, 0, 1, 1},
  {&__pyx_n_s_working_dist, __pyx_k_working_dist, sizeof(__pyx_k_working_dist), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(1, 301, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 699, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 725, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(1, 754, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(1, 754, __pyx_L1_error)
  #endif
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 1066, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 1307, __pyx_L1_error)
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(1, 1813, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(1, 1814, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 944, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(0, 404, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "raypier/core/ctracer.pyx":1307
 * 
 *         if data.dtype != gausslet_dtype:
 *             raise ValueError("Array must have gausslet_dtype dtype")             # <<<<<<<<<<<<<<
 * 
 *         memcpy(rc.rays, <np_.float64_t *>data.data, size*sizeof(gausslet_t))
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_Array_must_have_gausslet_dtype_d); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "raypier/core/ctracer.pyx":1702
 * 
 *         if len(y) != n:
 *             raise ValueError("Both x and y must have the same length")             # <<<<<<<<<<<<<<
 * 
 *         for i in range(n):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_Both_x_and_y_must_have_the_same); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "raypier/core/ctracer.pyx":2210
 *     new_gausslets.parent = gausslets
 * 
 *     child_rays = RayCollection(2)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(gausslets.n_rays):
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_int_2); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 2210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_int_222419149, __pyx_int_238750788, __pyx_int_228825662); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(3, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(3, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "FromPyStructUtility":19
 *         value = obj['x']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'x'")             # <<<<<<<<<<<<<<
 *     result.x = value
 *     try:
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "FromPyStructUtility":24
 *         value = obj['y']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'y'")             # <<<<<<<<<<<<<<
 *     result.y = value
 *     try:
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "FromPyStructUtility":29
 *         value = obj['z']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'z'")             # <<<<<<<<<<<<<<
 *     result.z = value
 *     return result
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_3); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "FromPyStructUtility":19
 *         value = obj['origin']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'origin'")             # <<<<<<<<<<<<<<
 *     result.origin = value
 *     try:
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_4); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "FromPyStructUtility":24
 *         value = obj['direction']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'direction'")             # <<<<<<<<<<<<<<
 *     result.direction = value
 *     try:
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_5); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "FromPyStructUtility":29
 *         value = obj['normal']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'normal'")             # <<<<<<<<<<<<<<
 *     result.normal = value
 *     try:
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_6); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "FromPyStructUtility":34
 *         value = obj['length']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'length'")             # <<<<<<<<<<<<<<
 *     result.length = value
 *     return result
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_7); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__58 = PyTuple_New(1); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__58, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__61 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__61)) __PYX_ERR(0, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__61);
  __Pyx_GIVEREF(__pyx_slice__61);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_tuple__65 = PyTuple_Pack(3, __pyx_int_184977713, __pyx_int_136983863, __pyx_int_112105877); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "raypier/core/ctracer.pyx":37
 * 
 * 
 * ray_dtype = np.dtype([('origin', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "raypier/core/ctracer.pyx":96
 *     return v
 * 
 * def py_set_v(O):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_
 *     v_ = set_v(O)
 */
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_n_s_O, __pyx_n_s_v); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_py_set_v, 96, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(1, 96, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":108
 *     return sqrt((a*a) + (b*b) + (c*c))
 * 
 * def sep(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_ = set_v(a), b_ = set_v(b)
 *     return sep_(a_, b_)
 */
  __pyx_tuple__69 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_b_2); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_sep, 108, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(1, 108, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":118
 *     return v
 * 
 * def invert(v):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_ = set_v(v)
 *     v_ = invert_(v_)
 */
  __pyx_tuple__71 = PyTuple_Pack(2, __pyx_n_s_v_2, __pyx_n_s_v); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_invert, 118, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 118, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":130
 *     return out
 * 
 * def multvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_tuple__73 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_b_2, __pyx_n_s_c_2); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_multvv, 130, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(1, 130, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":144
 *     return out
 * 
 * def multvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */
  __pyx_tuple__75 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_c_2); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_multvs, 144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 144, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":157
 *     return out
 * 
 * def addvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_tuple__77 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_b_2, __pyx_n_s_c_2); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_addvv, 157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(1, 157, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":171
 *     return out
 * 
 * def addvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */
  __pyx_tuple__79 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_c_2); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_addvs, 171, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(1, 171, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":184
 *     return out
 * 
 * def subvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_tuple__81 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_b_2, __pyx_n_s_c_2); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_subvv, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(1, 184, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":198
 *     return out
 * 
 * def subvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */
  __pyx_tuple__83 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_c_2); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_subvs, 198, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 198, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":207
 *     return sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 * 
 * def mag(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */
  __pyx_tuple__85 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_a_2); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_mag, 207, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(1, 207, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":215
 *     return a.x*a.x + a.y*a.y + a.z*a.z
 * 
 * def mag_sq(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */
  __pyx_tuple__87 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_a_2); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(1, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_mag_sq, 215, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(1, 215, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":223
 *     return a.x*b.x + a.y*b.y + a.z*b.z
 * 
 * def dotprod(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_
 *     a_ = set_v(a)
 */
  __pyx_tuple__89 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_b_2); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_dotprod, 223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(1, 223, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":236
 *     return c
 * 
 * def cross(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_tuple__91 = PyTuple_Pack(5, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_a_2, __pyx_n_s_b_2, __pyx_n_s_c_2); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_cross, 236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 236, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":250
 *     return a
 * 
 * def norm(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */
  __pyx_tuple__93 = PyTuple_Pack(2, __pyx_n_s_a, __pyx_n_s_a_2); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_norm, 250, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(1, 250, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":1962
 * 
 * 
 * def select_ray_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */
  __pyx_tuple__95 = PyTuple_Pack(14, __pyx_n_s_face_set, __pyx_n_s_ray_col_list, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_ray, __pyx_n_s_idx, __pyx_n_s_wl_offset, __pyx_n_s_point, __pyx_n_s_rc, __pyx_n_s_rc_out, __pyx_n_s_wl_list, __pyx_n_s_inverse, __pyx_n_s_it, __pyx_n_s_reduced); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(1, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_select_ray_intersections, 1962, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(1, 1962, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2001
 * 
 * 
 * def select_gausslet_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */
  __pyx_tuple__97 = PyTuple_Pack(15, __pyx_n_s_face_set, __pyx_n_s_ray_col_list, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_g, __pyx_n_s_ray, __pyx_n_s_idx, __pyx_n_s_wl_offset, __pyx_n_s_point, __pyx_n_s_rc, __pyx_n_s_rc_out, __pyx_n_s_wl_list, __pyx_n_s_inverse, __pyx_n_s_it, __pyx_n_s_reduced); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(1, 2001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(2, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_select_gausslet_intersections, 2001, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(1, 2001, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2147
 * 
 * 
 * def trace_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */
  __pyx_tuple__99 = PyTuple_Pack(6, __pyx_n_s_rays, __pyx_n_s_face_sets, __pyx_n_s_all_faces, __pyx_n_s_max_length, __pyx_n_s_decomp_faces, __pyx_n_s_fs); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(1, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_trace_segment, 2147, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(1, 2147, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2158
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */
  __pyx_tuple__101 = PyTuple_Pack(6, __pyx_n_s_rays, __pyx_n_s_face_set, __pyx_n_s_face_idx, __pyx_n_s_all_faces, __pyx_n_s_max_length, __pyx_n_s_decomp_faces); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(1, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_trace_one_face_segment, 2158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(1, 2158, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2167
 *     return trace_one_face_segment_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 * 
 * def trace_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */
  __pyx_tuple__103 = PyTuple_Pack(6, __pyx_n_s_rays, __pyx_n_s_face_sets, __pyx_n_s_all_faces, __pyx_n_s_max_length, __pyx_n_s_decomp_faces, __pyx_n_s_fs); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(1, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_trace_gausslet, 2167, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(1, 2167, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2178
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */
  __pyx_tuple__105 = PyTuple_Pack(6, __pyx_n_s_rays, __pyx_n_s_face_set, __pyx_n_s_face_idx, __pyx_n_s_all_faces, __pyx_n_s_max_length, __pyx_n_s_decomp_faces); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(1, 2178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_trace_one_face_gausslet, 2178, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(1, 2178, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2358
 * 
 * 
 * def transform(Transform t, p):             # <<<<<<<<<<<<<<
 *     cdef vector_t p1, p2
 *     assert isinstance(t, Transform)
 */
  __pyx_tuple__107 = PyTuple_Pack(4, __pyx_n_s_t, __pyx_n_s_p, __pyx_n_s_p1, __pyx_n_s_p2); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(1, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_transform, 2358, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(1, 2358, __pyx_L1_error)

  /* "raypier/core/ctracer.pyx":2368
 *     return (p2.x, p2.y, p2.z)
 * 
 * def get_ray_size():             # <<<<<<<<<<<<<<
 *     return sizeof( ray_t )
 */
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_ctracer_pyx, __pyx_n_s_get_ray_size, 2368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(1, 2368, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_RayArrayView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__110 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_RayArrayView, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_tuple__112 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Shape, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_tuple__114 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ImplicitSurface, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_tuple__116 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Distortion, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__123 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_0001 = PyFloat_FromDouble(0.0001); if (unlikely(!__pyx_float_0_0001)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  if (__Pyx_ExportVoidPtr(__pyx_n_s_INF, (void *)&__pyx_v_7raypier_4core_7ctracer_INF, "double") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportVoidPtr(__pyx_n_s_NPARA, (void *)&__pyx_v_7raypier_4core_7ctracer_NPARA, "int") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportVoidPtr(__pyx_n_s_REFL_RAY, (void *)&REFL_RAY, "unsigned int") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportVoidPtr(__pyx_n_s_GAUSSLET, (void *)&GAUSSLET, "unsigned int") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportVoidPtr(__pyx_n_s_PARABASAL, (void *)&PARABASAL, "unsigned int") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("transform_c", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_transform_c, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("rotate_c", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_rotate_c, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("set_v", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_set_v, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("sep_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_sep_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("multvv_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_multvv_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("multvs_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_multvs_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, double)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("addvv_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_addvv_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("addvs_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_addvs_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, double)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("subvv_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_subvv_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("subvs_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_subvs_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, double)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("dotprod_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_dotprod_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("cross_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_cross_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("norm_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_norm_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("mag_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_mag_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("mag_sq_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_mag_sq_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("invert_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_invert_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("trace_segment_c", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_trace_segment_c, "struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, PyObject *, PyObject *, PyObject *, float)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("trace_one_face_segment_c", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_trace_one_face_segment_c, "struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, int, PyObject *, PyObject *, float)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("trace_gausslet_c", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_trace_gausslet_c, "struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, PyObject *, PyObject *, PyObject *, double)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("trace_one_face_gausslet_c", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_trace_one_face_gausslet_c, "struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, int, PyObject *, PyObject *, double)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("ray_power_", (void (*)(void))__pyx_f_7raypier_4core_7ctracer_ray_power_, "double (struct __pyx_t_7raypier_4core_7ctracer_ray_t)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_Transform) < 0) __PYX_ERR(1, 260, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_Transform.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_Transform.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_Transform.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_Transform.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Transform, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_Transform) < 0) __PYX_ERR(1, 260, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_Transform) < 0) __PYX_ERR(1, 260, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Transform = &__pyx_type_7raypier_4core_7ctracer_Transform;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_Ray) < 0) __PYX_ERR(1, 388, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_Ray.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_Ray.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_Ray.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_Ray.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Ray, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_Ray) < 0) __PYX_ERR(1, 388, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_Ray) < 0) __PYX_ERR(1, 388, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Ray = &__pyx_type_7raypier_4core_7ctracer_Ray;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_ParabasalRay) < 0) __PYX_ERR(1, 324, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_ParabasalRay.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_ParabasalRay.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_ParabasalRay.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_ParabasalRay.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ParabasalRay, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_ParabasalRay) < 0) __PYX_ERR(1, 324, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_ParabasalRay) < 0) __PYX_ERR(1, 324, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_ParabasalRay = &__pyx_type_7raypier_4core_7ctracer_ParabasalRay;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_Gausslet) < 0) __PYX_ERR(1, 671, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_Gausslet.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_Gausslet.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_Gausslet.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_Gausslet.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Gausslet, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_Gausslet) < 0) __PYX_ERR(1, 671, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_Gausslet) < 0) __PYX_ERR(1, 671, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Gausslet = &__pyx_type_7raypier_4core_7ctracer_Gausslet;
  __pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView = &__pyx_vtable_7raypier_4core_7ctracer_RayArrayView;
  __pyx_vtable_7raypier_4core_7ctracer_RayArrayView.set_ray_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long, struct __pyx_t_7raypier_4core_7ctracer_ray_t))__pyx_f_7raypier_4core_7ctracer_12RayArrayView_set_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_RayArrayView.get_ray_c = (struct __pyx_t_7raypier_4core_7ctracer_ray_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long))__pyx_f_7raypier_4core_7ctracer_12RayArrayView_get_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_RayArrayView.get_n_rays = (unsigned long (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *))__pyx_f_7raypier_4core_7ctracer_12RayArrayView_get_n_rays;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_RayArrayView) < 0) __PYX_ERR(1, 709, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_RayArrayView.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_RayArrayView.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_RayArrayView.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_RayArrayView.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_RayArrayView.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView) < 0) __PYX_ERR(1, 709, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RayArrayView, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_RayArrayView) < 0) __PYX_ERR(1, 709, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_RayArrayView) < 0) __PYX_ERR(1, 709, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_RayArrayView = &__pyx_type_7raypier_4core_7ctracer_RayArrayView;
  __pyx_vtabptr_7raypier_4core_7ctracer_RayCollection = &__pyx_vtable_7raypier_4core_7ctracer_RayCollection;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection.__pyx_base.set_ray_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long, struct __pyx_t_7raypier_4core_7ctracer_ray_t))__pyx_f_7raypier_4core_7ctracer_13RayCollection_set_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection.__pyx_base.get_ray_c = (struct __pyx_t_7raypier_4core_7ctracer_ray_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long))__pyx_f_7raypier_4core_7ctracer_13RayCollection_get_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection.__pyx_base.get_n_rays = (unsigned long (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *))__pyx_f_7raypier_4core_7ctracer_13RayCollection_get_n_rays;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection.add_ray_c = (PyObject *(*)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, struct __pyx_t_7raypier_4core_7ctracer_ray_t))__pyx_f_7raypier_4core_7ctracer_13RayCollection_add_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection.reset_length_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, double))__pyx_f_7raypier_4core_7ctracer_13RayCollection_reset_length_c;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection.get_mtime = (double (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, unsigned long))__pyx_f_7raypier_4core_7ctracer_13RayCollection_get_mtime;
  __pyx_vtable_7raypier_4core_7ctracer_RayCollection._eval_neighbours = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, __Pyx_memviewslice))__pyx_f_7raypier_4core_7ctracer_13RayCollection__eval_neighbours;
  __pyx_type_7raypier_4core_7ctracer_RayCollection.tp_base = __pyx_ptype_7raypier_4core_7ctracer_RayArrayView;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_RayCollection) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_RayCollection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_RayCollection.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_RayCollection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_RayCollection.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_RayCollection.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_RayCollection) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RayCollection, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_RayCollection) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_RayCollection) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_RayCollection = &__pyx_type_7raypier_4core_7ctracer_RayCollection;
  __pyx_vtabptr_7raypier_4core_7ctracer_GaussletCollection = &__pyx_vtable_7raypier_4core_7ctracer_GaussletCollection;
  __pyx_vtable_7raypier_4core_7ctracer_GaussletCollection.add_gausslet_c = (PyObject *(*)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_t_7raypier_4core_7ctracer_gausslet_t))__pyx_f_7raypier_4core_7ctracer_18GaussletCollection_add_gausslet_c;
  __pyx_vtable_7raypier_4core_7ctracer_GaussletCollection.extend_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *))__pyx_f_7raypier_4core_7ctracer_18GaussletCollection_extend_c;
  __pyx_vtable_7raypier_4core_7ctracer_GaussletCollection.reset_length_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, double))__pyx_f_7raypier_4core_7ctracer_18GaussletCollection_reset_length_c;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_GaussletCollection) < 0) __PYX_ERR(1, 1177, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_GaussletCollection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_GaussletCollection.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_GaussletCollection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_GaussletCollection.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_GaussletCollection.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_GaussletCollection) < 0) __PYX_ERR(1, 1177, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GaussletCollection, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_GaussletCollection) < 0) __PYX_ERR(1, 1177, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_GaussletCollection) < 0) __PYX_ERR(1, 1177, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection = &__pyx_type_7raypier_4core_7ctracer_GaussletCollection;
  __pyx_vtabptr_7raypier_4core_7ctracer_GaussletBaseRayView = &__pyx_vtable_7raypier_4core_7ctracer_GaussletBaseRayView;
  __pyx_vtable_7raypier_4core_7ctracer_GaussletBaseRayView.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView;
  __pyx_vtable_7raypier_4core_7ctracer_GaussletBaseRayView.__pyx_base.set_ray_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long, struct __pyx_t_7raypier_4core_7ctracer_ray_t))__pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_set_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_GaussletBaseRayView.__pyx_base.get_ray_c = (struct __pyx_t_7raypier_4core_7ctracer_ray_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long))__pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_get_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_GaussletBaseRayView.__pyx_base.get_n_rays = (unsigned long (*)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *))__pyx_f_7raypier_4core_7ctracer_19GaussletBaseRayView_get_n_rays;
  __pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView.tp_base = __pyx_ptype_7raypier_4core_7ctracer_RayArrayView;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView) < 0) __PYX_ERR(1, 1149, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_GaussletBaseRayView) < 0) __PYX_ERR(1, 1149, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GaussletBaseRayView, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView) < 0) __PYX_ERR(1, 1149, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView) < 0) __PYX_ERR(1, 1149, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_GaussletBaseRayView = &__pyx_type_7raypier_4core_7ctracer_GaussletBaseRayView;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_RayCollectionIterator) < 0) __PYX_ERR(1, 290, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_RayCollectionIterator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_RayCollectionIterator.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_RayCollectionIterator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_RayCollectionIterator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RayCollectionIterator, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_RayCollectionIterator) < 0) __PYX_ERR(1, 290, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_RayCollectionIterator) < 0) __PYX_ERR(1, 290, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_RayCollectionIterator = &__pyx_type_7raypier_4core_7ctracer_RayCollectionIterator;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator) < 0) __PYX_ERR(1, 307, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GaussletCollectionIterator, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator) < 0) __PYX_ERR(1, 307, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator) < 0) __PYX_ERR(1, 307, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_GaussletCollectionIterator = &__pyx_type_7raypier_4core_7ctracer_GaussletCollectionIterator;
  __pyx_vtabptr_7raypier_4core_7ctracer_InterfaceMaterial = &__pyx_vtable_7raypier_4core_7ctracer_InterfaceMaterial;
  __pyx_vtable_7raypier_4core_7ctracer_InterfaceMaterial.eval_child_ray_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, unsigned int, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_orientation_t, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *))__pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_child_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_InterfaceMaterial.eval_parabasal_ray_c = (struct __pyx_t_7raypier_4core_7ctracer_para_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_orientation_t, unsigned int))__pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_parabasal_ray_c;
  __pyx_vtable_7raypier_4core_7ctracer_InterfaceMaterial.eval_decomposed_rays_c = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *))__pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_eval_decomposed_rays_c;
  __pyx_vtable_7raypier_4core_7ctracer_InterfaceMaterial.on_set_wavelengths = (PyObject *(*)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *))__pyx_f_7raypier_4core_7ctracer_17InterfaceMaterial_on_set_wavelengths;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_InterfaceMaterial) < 0) __PYX_ERR(1, 1565, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_InterfaceMaterial.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_InterfaceMaterial.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_InterfaceMaterial.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_InterfaceMaterial.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_InterfaceMaterial.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_InterfaceMaterial) < 0) __PYX_ERR(1, 1565, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_InterfaceMaterial, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_InterfaceMaterial) < 0) __PYX_ERR(1, 1565, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_InterfaceMaterial) < 0) __PYX_ERR(1, 1565, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial = &__pyx_type_7raypier_4core_7ctracer_InterfaceMaterial;
  __pyx_vtabptr_7raypier_4core_7ctracer_Distortion = &__pyx_vtable_7raypier_4core_7ctracer_Distortion;
  __pyx_vtable_7raypier_4core_7ctracer_Distortion.z_offset_and_gradient_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *, double, double))__pyx_f_7raypier_4core_7ctracer_10Distortion_z_offset_and_gradient_c;
  __pyx_vtable_7raypier_4core_7ctracer_Distortion.z_offset_c = (double (*)(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *, double, double))__pyx_f_7raypier_4core_7ctracer_10Distortion_z_offset_c;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_Distortion) < 0) __PYX_ERR(1, 1674, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_Distortion.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_Distortion.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_Distortion.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_Distortion.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_Distortion.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_Distortion) < 0) __PYX_ERR(1, 1674, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Distortion, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_Distortion) < 0) __PYX_ERR(1, 1674, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_Distortion) < 0) __PYX_ERR(1, 1674, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Distortion = &__pyx_type_7raypier_4core_7ctracer_Distortion;
  __pyx_vtabptr_7raypier_4core_7ctracer_Shape = &__pyx_vtable_7raypier_4core_7ctracer_Shape;
  __pyx_vtable_7raypier_4core_7ctracer_Shape.point_inside_c = (int (*)(struct __pyx_obj_7raypier_4core_7ctracer_Shape *, double, double))__pyx_f_7raypier_4core_7ctracer_5Shape_point_inside_c;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_Shape) < 0) __PYX_ERR(1, 1651, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_Shape.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_Shape.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_Shape.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_Shape.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_Shape.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_Shape) < 0) __PYX_ERR(1, 1651, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Shape, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_Shape) < 0) __PYX_ERR(1, 1651, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_Shape) < 0) __PYX_ERR(1, 1651, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Shape = &__pyx_type_7raypier_4core_7ctracer_Shape;
  __pyx_vtabptr_7raypier_4core_7ctracer_ImplicitSurface = &__pyx_vtable_7raypier_4core_7ctracer_ImplicitSurface;
  __pyx_vtable_7raypier_4core_7ctracer_ImplicitSurface.evaluate_c = (double (*)(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *, struct __pyx_t_7raypier_4core_7ctracer_vector_t))__pyx_f_7raypier_4core_7ctracer_15ImplicitSurface_evaluate_c;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_ImplicitSurface) < 0) __PYX_ERR(1, 1659, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_ImplicitSurface.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_ImplicitSurface.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_ImplicitSurface.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_ImplicitSurface.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_ImplicitSurface.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_ImplicitSurface) < 0) __PYX_ERR(1, 1659, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImplicitSurface, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_ImplicitSurface) < 0) __PYX_ERR(1, 1659, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_ImplicitSurface) < 0) __PYX_ERR(1, 1659, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface = &__pyx_type_7raypier_4core_7ctracer_ImplicitSurface;
  __pyx_vtabptr_7raypier_4core_7ctracer_Face = &__pyx_vtable_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_7ctracer_Face.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_7ctracer_4Face_intersect_c;
  __pyx_vtable_7raypier_4core_7ctracer_Face.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_7ctracer_4Face_compute_normal_c;
  __pyx_vtable_7raypier_4core_7ctracer_Face.compute_tangent_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_7ctracer_4Face_compute_tangent_c;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_Face) < 0) __PYX_ERR(1, 1724, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_Face.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_Face.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_Face.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_Face.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_Face.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_Face) < 0) __PYX_ERR(1, 1724, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Face, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_Face) < 0) __PYX_ERR(1, 1724, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_Face) < 0) __PYX_ERR(1, 1724, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Face = &__pyx_type_7raypier_4core_7ctracer_Face;
  __pyx_vtabptr_7raypier_4core_7ctracer_FaceList = &__pyx_vtable_7raypier_4core_7ctracer_FaceList;
  __pyx_vtable_7raypier_4core_7ctracer_FaceList.sync_transforms = (void (*)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, int __pyx_skip_dispatch))__pyx_f_7raypier_4core_7ctracer_8FaceList_sync_transforms;
  __pyx_vtable_7raypier_4core_7ctracer_FaceList.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t))__pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_c;
  __pyx_vtable_7raypier_4core_7ctracer_FaceList.intersect_one_face_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_one_face_c;
  __pyx_vtable_7raypier_4core_7ctracer_FaceList.intersect_para_c = (int (*)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_para_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_obj_7raypier_4core_7ctracer_Face *))__pyx_f_7raypier_4core_7ctracer_8FaceList_intersect_para_c;
  __pyx_vtable_7raypier_4core_7ctracer_FaceList.compute_orientation_c = (struct __pyx_t_7raypier_4core_7ctracer_orientation_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_7ctracer_8FaceList_compute_orientation_c;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer_FaceList) < 0) __PYX_ERR(1, 1801, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer_FaceList.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer_FaceList.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer_FaceList.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer_FaceList.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_7ctracer_FaceList.tp_dict, __pyx_vtabptr_7raypier_4core_7ctracer_FaceList) < 0) __PYX_ERR(1, 1801, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FaceList, (PyObject *)&__pyx_type_7raypier_4core_7ctracer_FaceList) < 0) __PYX_ERR(1, 1801, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_7ctracer_FaceList) < 0) __PYX_ERR(1, 1801, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_FaceList = &__pyx_type_7raypier_4core_7ctracer_FaceList;
  if (PyType_Ready(&__pyx_type_7raypier_4core_7ctracer___pyx_scope_struct__genexpr) < 0) __PYX_ERR(1, 698, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_7ctracer___pyx_scope_struct__genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_7ctracer___pyx_scope_struct__genexpr.tp_dictoffset && __pyx_type_7raypier_4core_7ctracer___pyx_scope_struct__genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_7ctracer___pyx_scope_struct__genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_7raypier_4core_7ctracer___pyx_scope_struct__genexpr = &__pyx_type_7raypier_4core_7ctracer___pyx_scope_struct__genexpr;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(0, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 770, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 772, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 774, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 776, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 778, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 780, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 782, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 784, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 786, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 788, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initctracer(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initctracer(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_ctracer(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_ctracer(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_ctracer(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  static PyThread_type_lock __pyx_t_18[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'ctracer' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ctracer(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ctracer", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_raypier__core__ctracer) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "raypier.core.ctracer")) {
      if (unlikely(PyDict_SetItemString(modules, "raypier.core.ctracer", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  if (unlikely(__Pyx_modinit_variable_export_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "raypier/core/ctracer.pyx":18
 * 
 * cdef:
 *     INF=(DBL_MAX+DBL_MAX)             # <<<<<<<<<<<<<<
 *     double root2 = sqrt(2.0)
 *     public unsigned int REFL_RAY=1<<0
 */
  __pyx_v_7raypier_4core_7ctracer_INF = (DBL_MAX + DBL_MAX);

  /* "raypier/core/ctracer.pyx":19
 * cdef:
 *     INF=(DBL_MAX+DBL_MAX)
 *     double root2 = sqrt(2.0)             # <<<<<<<<<<<<<<
 *     public unsigned int REFL_RAY=1<<0
 *     public unsigned int GAUSSLET=1<<1
 */
  __pyx_v_7raypier_4core_7ctracer_root2 = sqrt(2.0);

  /* "raypier/core/ctracer.pyx":20
 *     INF=(DBL_MAX+DBL_MAX)
 *     double root2 = sqrt(2.0)
 *     public unsigned int REFL_RAY=1<<0             # <<<<<<<<<<<<<<
 *     public unsigned int GAUSSLET=1<<1
 *     public unsigned int PARABASAL=1<<2
 */
  REFL_RAY = 1;

  /* "raypier/core/ctracer.pyx":21
 *     double root2 = sqrt(2.0)
 *     public unsigned int REFL_RAY=1<<0
 *     public unsigned int GAUSSLET=1<<1             # <<<<<<<<<<<<<<
 *     public unsigned int PARABASAL=1<<2
 * 
 */
  GAUSSLET = 2;

  /* "raypier/core/ctracer.pyx":22
 *     public unsigned int REFL_RAY=1<<0
 *     public unsigned int GAUSSLET=1<<1
 *     public unsigned int PARABASAL=1<<2             # <<<<<<<<<<<<<<
 * 
 * from libc.stdlib cimport malloc, free, realloc
 */
  PARABASAL = 4;

  /* "raypier/core/ctracer.pyx":29
 *     void *memcpy(void *str1, void *str2, size_t n)
 * 
 * import time             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np_
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_1) < 0) __PYX_ERR(1, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":30
 * 
 * import time
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np_
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(1, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/ctracer.pyx":34
 * 
 * cdef:
 *     int NPARA = 6             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_7raypier_4core_7ctracer_NPARA = 6;

  /* "raypier/core/ctracer.pyx":37
 * 
 * 
 * ray_dtype = np.dtype([('origin', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_double); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_origin);
  __Pyx_GIVEREF(__pyx_n_u_origin);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_origin);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_tuple__66);
  __pyx_t_3 = 0;

  /* "raypier/core/ctracer.pyx":38
 * 
 * ray_dtype = np.dtype([('origin', np.double, (3,)),
 *                         ('direction', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('normal', np.double, (3,)),
 *                         ('E_vector', np.double, (3,)),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_u_direction);
  __Pyx_GIVEREF(__pyx_n_u_direction);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_direction);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_tuple__66);
  __pyx_t_4 = 0;

  /* "raypier/core/ctracer.pyx":39
 * ray_dtype = np.dtype([('origin', np.double, (3,)),
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('E_vector', np.double, (3,)),
 *                         ('refractive_index', np.complex128),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_u_normal);
  __Pyx_GIVEREF(__pyx_n_u_normal);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_normal);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_tuple__66);
  __pyx_t_5 = 0;

  /* "raypier/core/ctracer.pyx":40
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),
 *                         ('E_vector', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('refractive_index', np.complex128),
 *                         ('E1_amp', np.complex128),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_u_E_vector);
  __Pyx_GIVEREF(__pyx_n_u_E_vector);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_u_E_vector);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_tuple__66);
  __pyx_t_6 = 0;

  /* "raypier/core/ctracer.pyx":41
 *                         ('normal', np.double, (3,)),
 *                         ('E_vector', np.double, (3,)),
 *                         ('refractive_index', np.complex128),             # <<<<<<<<<<<<<<
 *                         ('E1_amp', np.complex128),
 *                         ('E2_amp', np.complex128),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_complex128); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_u_refractive_index);
  __Pyx_GIVEREF(__pyx_n_u_refractive_index);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_u_refractive_index);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "raypier/core/ctracer.pyx":42
 *                         ('E_vector', np.double, (3,)),
 *                         ('refractive_index', np.complex128),
 *                         ('E1_amp', np.complex128),             # <<<<<<<<<<<<<<
 *                         ('E2_amp', np.complex128),
 *                         ('length', np.double),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_complex128); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_u_E1_amp);
  __Pyx_GIVEREF(__pyx_n_u_E1_amp);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_u_E1_amp);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "raypier/core/ctracer.pyx":43
 *                         ('refractive_index', np.complex128),
 *                         ('E1_amp', np.complex128),
 *                         ('E2_amp', np.complex128),             # <<<<<<<<<<<<<<
 *                         ('length', np.double),
 *                         ('phase', np.double),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_complex128); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_n_u_E2_amp);
  __Pyx_GIVEREF(__pyx_n_u_E2_amp);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_u_E2_amp);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "raypier/core/ctracer.pyx":44
 *                         ('E1_amp', np.complex128),
 *                         ('E2_amp', np.complex128),
 *                         ('length', np.double),             # <<<<<<<<<<<<<<
 *                         ('phase', np.double),
 *                         ('accumulated_path', np.double),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_double); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF(__pyx_n_u_length);
  __Pyx_GIVEREF(__pyx_n_u_length);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_u_length);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
  __pyx_t_10 = 0;

  /* "raypier/core/ctracer.pyx":45
 *                         ('E2_amp', np.complex128),
 *                         ('length', np.double),
 *                         ('phase', np.double),             # <<<<<<<<<<<<<<
 *                         ('accumulated_path', np.double),
 *                         ('wavelength_idx', np.uint32),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_double); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_n_u_phase);
  __Pyx_GIVEREF(__pyx_n_u_phase);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_n_u_phase);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_11);
  __pyx_t_11 = 0;

  /* "raypier/core/ctracer.pyx":46
 *                         ('length', np.double),
 *                         ('phase', np.double),
 *                         ('accumulated_path', np.double),             # <<<<<<<<<<<<<<
 *                         ('wavelength_idx', np.uint32),
 *                         ('parent_idx', np.uint32),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_double); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_n_u_accumulated_path);
  __Pyx_GIVEREF(__pyx_n_u_accumulated_path);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_n_u_accumulated_path);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_12);
  __pyx_t_12 = 0;

  /* "raypier/core/ctracer.pyx":47
 *                         ('phase', np.double),
 *                         ('accumulated_path', np.double),
 *                         ('wavelength_idx', np.uint32),             # <<<<<<<<<<<<<<
 *                         ('parent_idx', np.uint32),
 *                         ('end_face_idx', np.uint32),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_uint32); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_n_u_wavelength_idx);
  __Pyx_GIVEREF(__pyx_n_u_wavelength_idx);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_n_u_wavelength_idx);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_13);
  __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":48
 *                         ('accumulated_path', np.double),
 *                         ('wavelength_idx', np.uint32),
 *                         ('parent_idx', np.uint32),             # <<<<<<<<<<<<<<
 *                         ('end_face_idx', np.uint32),
 *                         ('ray_ident', np.uint32),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_uint32); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_n_u_parent_idx);
  __Pyx_GIVEREF(__pyx_n_u_parent_idx);
  PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_n_u_parent_idx);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_14);
  __pyx_t_14 = 0;

  /* "raypier/core/ctracer.pyx":49
 *                         ('wavelength_idx', np.uint32),
 *                         ('parent_idx', np.uint32),
 *                         ('end_face_idx', np.uint32),             # <<<<<<<<<<<<<<
 *                         ('ray_ident', np.uint32),
 *                         ('ray_type_id', np.uint32) #No point using a smaller type here as it'll probably get padded by the compiler
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_uint32); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_n_u_end_face_idx);
  __Pyx_GIVEREF(__pyx_n_u_end_face_idx);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_u_end_face_idx);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_15);
  __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":50
 *                         ('parent_idx', np.uint32),
 *                         ('end_face_idx', np.uint32),
 *                         ('ray_ident', np.uint32),             # <<<<<<<<<<<<<<
 *                         ('ray_type_id', np.uint32) #No point using a smaller type here as it'll probably get padded by the compiler
 *                         ])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_uint32); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_u_ray_ident);
  __Pyx_GIVEREF(__pyx_n_u_ray_ident);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_u_ray_ident);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_16);
  __pyx_t_16 = 0;

  /* "raypier/core/ctracer.pyx":51
 *                         ('end_face_idx', np.uint32),
 *                         ('ray_ident', np.uint32),
 *                         ('ray_type_id', np.uint32) #No point using a smaller type here as it'll probably get padded by the compiler             # <<<<<<<<<<<<<<
 *                         ])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_uint32); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_n_u_ray_type_id);
  __Pyx_GIVEREF(__pyx_n_u_ray_type_id);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_u_ray_type_id);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_17);
  __pyx_t_17 = 0;

  /* "raypier/core/ctracer.pyx":37
 * 
 * 
 * ray_dtype = np.dtype([('origin', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),
 */
  __pyx_t_17 = PyList_New(15); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_17, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_17, 6, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_17, 7, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_17, 8, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_17, 9, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_17, 10, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_17, 11, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_17, 12, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_17, 13, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_17, 14, __pyx_t_16);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ray_dtype, __pyx_t_16) < 0) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "raypier/core/ctracer.pyx":55
 * 
 * 
 * GAUSSLET_ = GAUSSLET             # <<<<<<<<<<<<<<
 * PARABASAL_ = PARABASAL
 * 
 */
  __pyx_t_16 = __Pyx_PyInt_From_unsigned_int(GAUSSLET); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GAUSSLET_2, __pyx_t_16) < 0) __PYX_ERR(1, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "raypier/core/ctracer.pyx":56
 * 
 * GAUSSLET_ = GAUSSLET
 * PARABASAL_ = PARABASAL             # <<<<<<<<<<<<<<
 * 
 * para_dtype = np.dtype([('origin', np.double, (3,)),
 */
  __pyx_t_16 = __Pyx_PyInt_From_unsigned_int(PARABASAL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PARABASAL_2, __pyx_t_16) < 0) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "raypier/core/ctracer.pyx":58
 * PARABASAL_ = PARABASAL
 * 
 * para_dtype = np.dtype([('origin', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_dtype); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_double); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_n_u_origin);
  __Pyx_GIVEREF(__pyx_n_u_origin);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_u_origin);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_tuple__66);
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":59
 * 
 * para_dtype = np.dtype([('origin', np.double, (3,)),
 *                         ('direction', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('normal', np.double, (3,)),
 *                         ('length', np.double),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_direction);
  __Pyx_GIVEREF(__pyx_n_u_direction);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_direction);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_15);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_tuple__66);
  __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":60
 * para_dtype = np.dtype([('origin', np.double, (3,)),
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('length', np.double),
 *                         ])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_double); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_u_normal);
  __Pyx_GIVEREF(__pyx_n_u_normal);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_u_normal);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_14);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_tuple__66);
  __pyx_t_14 = 0;

  /* "raypier/core/ctracer.pyx":61
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),
 *                         ('length', np.double),             # <<<<<<<<<<<<<<
 *                         ])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_double); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_n_u_length);
  __Pyx_GIVEREF(__pyx_n_u_length);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_n_u_length);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_13);
  __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":58
 * PARABASAL_ = PARABASAL
 * 
 * para_dtype = np.dtype([('origin', np.double, (3,)),             # <<<<<<<<<<<<<<
 *                         ('direction', np.double, (3,)),
 *                         ('normal', np.double, (3,)),
 */
  __pyx_t_13 = PyList_New(4); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_13, 3, __pyx_t_14);
  __pyx_t_16 = 0;
  __pyx_t_2 = 0;
  __pyx_t_15 = 0;
  __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_para_dtype, __pyx_t_14) < 0) __PYX_ERR(1, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "raypier/core/ctracer.pyx":65
 * 
 * 
 * gausslet_dtype = np.dtype([             # <<<<<<<<<<<<<<
 *                     ('base_ray', ray_dtype),
 *                     ('para_rays', para_dtype, (NPARA,))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_dtype); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "raypier/core/ctracer.pyx":66
 * 
 * gausslet_dtype = np.dtype([
 *                     ('base_ray', ray_dtype),             # <<<<<<<<<<<<<<
 *                     ('para_rays', para_dtype, (NPARA,))
 *                     ])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_ray_dtype); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_n_u_base_ray);
  __Pyx_GIVEREF(__pyx_n_u_base_ray);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_n_u_base_ray);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_14);
  __pyx_t_14 = 0;

  /* "raypier/core/ctracer.pyx":67
 * gausslet_dtype = np.dtype([
 *                     ('base_ray', ray_dtype),
 *                     ('para_rays', para_dtype, (NPARA,))             # <<<<<<<<<<<<<<
 *                     ])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_para_dtype); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = __Pyx_PyInt_From_int(__pyx_v_7raypier_4core_7ctracer_NPARA); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_15);
  __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_u_para_rays);
  __Pyx_GIVEREF(__pyx_n_u_para_rays);
  PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_u_para_rays);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_t_2);
  __pyx_t_14 = 0;
  __pyx_t_2 = 0;

  /* "raypier/core/ctracer.pyx":65
 * 
 * 
 * gausslet_dtype = np.dtype([             # <<<<<<<<<<<<<<
 *                     ('base_ray', ray_dtype),
 *                     ('para_rays', para_dtype, (NPARA,))
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_15);
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gausslet_dtype, __pyx_t_15) < 0) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":96
 *     return v
 * 
 * def py_set_v(O):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_
 *     v_ = set_v(O)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_1py_set_v, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_set_v, __pyx_t_15) < 0) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":108
 *     return sqrt((a*a) + (b*b) + (c*c))
 * 
 * def sep(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_ = set_v(a), b_ = set_v(b)
 *     return sep_(a_, b_)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_3sep, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sep, __pyx_t_15) < 0) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":118
 *     return v
 * 
 * def invert(v):             # <<<<<<<<<<<<<<
 *     cdef vector_t v_ = set_v(v)
 *     v_ = invert_(v_)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_5invert, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_invert, __pyx_t_15) < 0) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":130
 *     return out
 * 
 * def multvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_7multvv, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_multvv, __pyx_t_15) < 0) __PYX_ERR(1, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":144
 *     return out
 * 
 * def multvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_9multvs, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_multvs, __pyx_t_15) < 0) __PYX_ERR(1, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":157
 *     return out
 * 
 * def addvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_11addvv, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_addvv, __pyx_t_15) < 0) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":171
 *     return out
 * 
 * def addvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_13addvs, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_addvs, __pyx_t_15) < 0) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":184
 *     return out
 * 
 * def subvv(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_15subvv, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subvv, __pyx_t_15) < 0) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":198
 *     return out
 * 
 * def subvs(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, c_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_17subvs, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_subvs, __pyx_t_15) < 0) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":207
 *     return sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
 * 
 * def mag(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_19mag, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mag, __pyx_t_15) < 0) __PYX_ERR(1, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":215
 *     return a.x*a.x + a.y*a.y + a.z*a.z
 * 
 * def mag_sq(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_21mag_sq, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mag_sq, __pyx_t_15) < 0) __PYX_ERR(1, 215, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":223
 *     return a.x*b.x + a.y*b.y + a.z*b.z
 * 
 * def dotprod(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_23dotprod, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dotprod, __pyx_t_15) < 0) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":236
 *     return c
 * 
 * def cross(a, b):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_, b_, c_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_25cross, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cross, __pyx_t_15) < 0) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":250
 *     return a
 * 
 * def norm(a):             # <<<<<<<<<<<<<<
 *     cdef vector_t a_
 *     a_ = set_v(a)
 */
  __pyx_t_15 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_27norm, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_norm, __pyx_t_15) < 0) __PYX_ERR(1, 250, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "raypier/core/ctracer.pyx":262
 * cdef class Transform:
 * 
 *     def __init__(self, rotation=[[1,0,0],[0,1,0],[0,0,1]],             # <<<<<<<<<<<<<<
 *                         translation=[0,0,0]):
 *         self.rotation = rotation
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_15, 0, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_15, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_15, 2, __pyx_int_0);
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_13, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_13, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_13, 2, __pyx_int_1);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_13);
  __pyx_t_15 = 0;
  __pyx_t_2 = 0;
  __pyx_t_13 = 0;
  __pyx_k_ = __pyx_t_17;
  __Pyx_GIVEREF(__pyx_t_17);
  __pyx_t_17 = 0;

  /* "raypier/core/ctracer.pyx":263
 * 
 *     def __init__(self, rotation=[[1,0,0],[0,1,0],[0,0,1]],
 *                         translation=[0,0,0]):             # <<<<<<<<<<<<<<
 *         self.rotation = rotation
 *         self.translation = translation
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_17, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_17, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_17, 2, __pyx_int_0);
  __pyx_k__2 = __pyx_t_17;
  __Pyx_GIVEREF(__pyx_t_17);
  __pyx_t_17 = 0;

  /* "raypier/core/ctracer.pyx":1012
 *             self.rays[i].length = max_length
 * 
 *     def reset_length(self, double max_length=INF):             # <<<<<<<<<<<<<<
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 */
  __pyx_k__16 = __pyx_v_7raypier_4core_7ctracer_INF;

  /* "raypier/core/ctracer.pyx":1135
 * 
 *     @classmethod
 *     def from_array(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         """Creates a new RayCollection from the given numpy array. The array
 *         dtype should be a ctracer.ray_dtype. The data is copied into the
 */
  __Pyx_GetNameInClass(__pyx_t_17, (PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection, __pyx_n_s_from_array); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);

  /* "raypier/core/ctracer.pyx":1134
 *             self._wavelengths = rc._wavelengths
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_array(cls, np_.ndarray data):
 *         """Creates a new RayCollection from the given numpy array. The array
 */
  __pyx_t_13 = __Pyx_Method_ClassMethod(__pyx_t_17); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_RayCollection->tp_dict, __pyx_n_s_from_array, __pyx_t_13) < 0) __PYX_ERR(1, 1135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_7ctracer_RayCollection);

  /* "raypier/core/ctracer.pyx":1240
 * 
 * 
 *     def reset_length(self, double max_length=INF):             # <<<<<<<<<<<<<<
 *         """Sets the length of all rays in this RayCollection to Infinity
 *         """
 */
  __pyx_k__21 = __pyx_v_7raypier_4core_7ctracer_INF;

  /* "raypier/core/ctracer.pyx":1297
 * 
 *     @classmethod
 *     def from_array(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         """Creates a new RayCollection from the given numpy array. The array
 *         dtype should be a ctracer.ray_dtype. The data is copied into the
 */
  __Pyx_GetNameInClass(__pyx_t_13, (PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, __pyx_n_s_from_array); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "raypier/core/ctracer.pyx":1296
 *         self.n_rays += gc.n_rays
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_array(cls, np_.ndarray data):
 *         """Creates a new RayCollection from the given numpy array. The array
 */
  __pyx_t_17 = __Pyx_Method_ClassMethod(__pyx_t_13); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection->tp_dict, __pyx_n_s_from_array, __pyx_t_17) < 0) __PYX_ERR(1, 1297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection);

  /* "raypier/core/ctracer.pyx":1314
 * 
 *     @classmethod
 *     def from_rays(cls, np_.ndarray data):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int i, j, size=data.shape[0]
 */
  __Pyx_GetNameInClass(__pyx_t_17, (PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection, __pyx_n_s_from_rays); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);

  /* "raypier/core/ctracer.pyx":1313
 *         return rc
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_rays(cls, np_.ndarray data):
 *         cdef:
 */
  __pyx_t_13 = __Pyx_Method_ClassMethod(__pyx_t_17); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection->tp_dict, __pyx_n_s_from_rays, __pyx_t_13) < 0) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection);

  /* "raypier/core/ctracer.pyx":1726
 * cdef class Face(object):
 * 
 *     params = []             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, owner=None, tolerance=0.0001,
 */
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Face->tp_dict, __pyx_n_s_params, __pyx_t_13) < 0) __PYX_ERR(1, 1726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_7ctracer_Face);

  /* "raypier/core/ctracer.pyx":1962
 * 
 * 
 * def select_ray_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_29select_ray_intersections, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_select_ray_intersections, __pyx_t_13) < 0) __PYX_ERR(1, 1962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2001
 * 
 * 
 * def select_gausslet_intersections(FaceList face_set, list ray_col_list):             # <<<<<<<<<<<<<<
 *     cdef:
 *         size_t i,j
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_31select_gausslet_intersections, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_select_gausslet_intersections, __pyx_t_13) < 0) __PYX_ERR(1, 2001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2151
 *                     list all_faces,
 *                     max_length=100,
 *                     decomp_faces=[]):             # <<<<<<<<<<<<<<
 *     cdef:
 *         FaceList fs
 */
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_k__32 = __pyx_t_13;
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2147
 * 
 * 
 * def trace_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_33trace_segment, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trace_segment, __pyx_t_13) < 0) __PYX_ERR(1, 2147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2163
 *                     list all_faces,
 *                     max_length=100,
 *                     decomp_faces=[]):             # <<<<<<<<<<<<<<
 *     face_set.sync_transforms()
 *     return trace_one_face_segment_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 */
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_k__33 = __pyx_t_13;
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2158
 *     return trace_segment_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_segment(RayCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_35trace_one_face_segment, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trace_one_face_segment, __pyx_t_13) < 0) __PYX_ERR(1, 2158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2171
 *                     list all_faces,
 *                     max_length=100,
 *                     decomp_faces=[]):             # <<<<<<<<<<<<<<
 *     cdef:
 *         FaceList fs
 */
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_k__34 = __pyx_t_13;
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2167
 *     return trace_one_face_segment_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 * 
 * def trace_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     list face_sets,
 *                     list all_faces,
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_37trace_gausslet, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trace_gausslet, __pyx_t_13) < 0) __PYX_ERR(1, 2167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2183
 *                     list all_faces,
 *                     max_length=100,
 *                     decomp_faces=[]):             # <<<<<<<<<<<<<<
 *     face_set.sync_transforms()
 *     return trace_one_face_gausslet_c(rays, face_set, face_idx, all_faces, decomp_faces, max_length)
 */
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_k__35 = __pyx_t_13;
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2178
 *     return trace_gausslet_c(rays, face_sets, all_faces, decomp_faces, max_length)
 * 
 * def trace_one_face_gausslet(GaussletCollection rays,             # <<<<<<<<<<<<<<
 *                     FaceList face_set,
 *                     int face_idx,
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_39trace_one_face_gausslet, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_trace_one_face_gausslet, __pyx_t_13) < 0) __PYX_ERR(1, 2178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2358
 * 
 * 
 * def transform(Transform t, p):             # <<<<<<<<<<<<<<
 *     cdef vector_t p1, p2
 *     assert isinstance(t, Transform)
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_41transform, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_transform, __pyx_t_13) < 0) __PYX_ERR(1, 2358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":2368
 *     return (p2.x, p2.y, p2.z)
 * 
 * def get_ray_size():             # <<<<<<<<<<<<<<
 *     return sizeof( ray_t )
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_43get_ray_size, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 2368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_ray_size, __pyx_t_13) < 0) __PYX_ERR(1, 2368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RayArrayView(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_45__pyx_unpickle_RayArrayView, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_RayArrayView, __pyx_t_13) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_RayArrayView__set_state(<RayArrayView> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RayArrayView__set_state(RayArrayView __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_47__pyx_unpickle_Shape, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Shape, __pyx_t_13) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImplicitSurface(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_49__pyx_unpickle_ImplicitSurface, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ImplicitSurface, __pyx_t_13) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_ImplicitSurface__set_state(<ImplicitSurface> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitSurface__set_state(ImplicitSurface __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_7ctracer_51__pyx_unpickle_Distortion, NULL, __pyx_n_s_raypier_core_ctracer); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Distortion, __pyx_t_13) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "raypier/core/ctracer.pyx":1
 * #!/bin/env python             # <<<<<<<<<<<<<<
 * 
 * #cython: boundscheck=False
 */
  __pyx_t_13 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_13) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_13 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_13) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  __pyx_t_13 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_18[0] = PyThread_allocate_lock();
  __pyx_t_18[1] = PyThread_allocate_lock();
  __pyx_t_18[2] = PyThread_allocate_lock();
  __pyx_t_18[3] = PyThread_allocate_lock();
  __pyx_t_18[4] = PyThread_allocate_lock();
  __pyx_t_18[5] = PyThread_allocate_lock();
  __pyx_t_18[6] = PyThread_allocate_lock();
  __pyx_t_18[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_18, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_13 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_13) < 0) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_13 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_13) < 0) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_13 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_13) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init raypier.core.ctracer", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init raypier.core.ctracer");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(size_t)*3+2];
    char *dpos, *end = digits + sizeof(size_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    size_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (size_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (size_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (size_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_unsigned_long(unsigned long value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(unsigned long)*3+2];
    char *dpos, *end = digits + sizeof(unsigned long)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    unsigned long remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (unsigned long) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (unsigned long) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (unsigned long) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ClassMethod */
static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* FromPy */
  static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_int(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_int(*(int *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_int(const char *itemp, PyObject *obj) {
    int value = __Pyx_PyInt_As_int(obj);
    if ((value == (int)-1) && PyErr_Occurred())
        return 0;
    *(int *) itemp = value;
    return 1;
}

static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(struct __pyx_t_7raypier_4core_7ctracer_vector_t s) {
    PyObject* res;
    PyObject* member;
    res = __Pyx_PyDict_NewPresized(3); if (unlikely(!res)) return NULL;
    member = PyFloat_FromDouble(s.x); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_x, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.y); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_y, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.z); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_z, member) < 0)) goto bad;
    Py_DECREF(member);
    return res;
    bad:
    Py_XDECREF(member);
    Py_DECREF(res);
    return NULL;
  }
  static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_ray_t(struct __pyx_t_7raypier_4core_7ctracer_ray_t s) {
    PyObject* res;
    PyObject* member;
    res = __Pyx_PyDict_NewPresized(15); if (unlikely(!res)) return NULL;
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(s.origin); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_origin, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(s.direction); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_direction, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(s.normal); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_normal, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(s.E_vector); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_E_vector, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_PyComplex_FromComplex(s.refractive_index); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_refractive_index, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_PyComplex_FromComplex(s.E1_amp); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_E1_amp, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_PyComplex_FromComplex(s.E2_amp); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_E2_amp, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.length); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_length, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.phase); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_phase, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.accumulated_path); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_accumulated_path, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __Pyx_PyInt_From_unsigned_int(s.wavelength_idx); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_wavelength_idx, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __Pyx_PyInt_From_unsigned_int(s.parent_idx); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_parent_idx, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __Pyx_PyInt_From_unsigned_int(s.end_face_idx); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_end_face_idx, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __Pyx_PyInt_From_unsigned_int(s.ray_ident); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_ray_ident, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __Pyx_PyInt_From_unsigned_int(s.ray_type_id); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_ray_type_id, member) < 0)) goto bad;
    Py_DECREF(member);
    return res;
    bad:
    Py_XDECREF(member);
    Py_DECREF(res);
    return NULL;
  }
  static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(struct __pyx_t_7raypier_4core_7ctracer_para_t s) {
    PyObject* res;
    PyObject* member;
    res = __Pyx_PyDict_NewPresized(4); if (unlikely(!res)) return NULL;
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(s.origin); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_origin, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(s.direction); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_direction, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_vector_t(s.normal); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_normal, member) < 0)) goto bad;
    Py_DECREF(member);
    member = PyFloat_FromDouble(s.length); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_length, member) < 0)) goto bad;
    Py_DECREF(member);
    return res;
    bad:
    Py_XDECREF(member);
    Py_DECREF(res);
    return NULL;
  }
  static PyObject* __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_gausslet_t(struct __pyx_t_7raypier_4core_7ctracer_gausslet_t s) {
    PyObject* res;
    PyObject* member;
    res = __Pyx_PyDict_NewPresized(2); if (unlikely(!res)) return NULL;
    member = __pyx_convert__to_py_struct____pyx_t_7raypier_4core_7ctracer_ray_t(s.base_ray); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_base_ray, member) < 0)) goto bad;
    Py_DECREF(member);
    member = __Pyx_carray_to_py_struct____pyx_t_7raypier_4core_7ctracer_para_t(s.para, 6); if (unlikely(!member)) goto bad;
    if (unlikely(PyDict_SetItem(res, __pyx_n_s_para, member) < 0)) goto bad;
    Py_DECREF(member);
    return res;
    bad:
    Py_XDECREF(member);
    Py_DECREF(res);
    return NULL;
  }
  /* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT) {
                            return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT) {
                            return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT) {
                            return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case  1: __PYX_VERIFY_RETURN_INT(short, digit, digits[0])
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 2 * PyLong_SHIFT) {
                            return (short) (((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 3 * PyLong_SHIFT) {
                            return (short) (((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 4 * PyLong_SHIFT) {
                            return (short) (((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case -1: __PYX_VERIFY_RETURN_INT(short, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(short,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(short) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) ((((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) ((((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) ((((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to short");
    return (short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to short");
    return (short) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
  #include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrExport */
  static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig) {
    PyObject *d;
    PyObject *cobj = 0;
    d = PyDict_GetItem(__pyx_d, __pyx_n_s_pyx_capi);
    Py_XINCREF(d);
    if (!d) {
        d = PyDict_New();
        if (!d)
            goto bad;
        if (__Pyx_PyObject_SetAttrStr(__pyx_m, __pyx_n_s_pyx_capi, d) < 0)
            goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItem(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionExport */
  static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
