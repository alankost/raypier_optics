/* Generated by Cython 0.29.30 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "raypier.core.cfaces",
        "sources": [
            "raypier/core\\cfaces.pyx"
        ]
    },
    "module_name": "raypier.core.cfaces"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_30"
#define CYTHON_HEX_VERSION 0x001D1EF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_HEX >= 0x07030900)
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__raypier__core__cfaces
#define __PYX_HAVE_API__raypier__core__cfaces
/* Early includes */
#include "math.h"
#include "float.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "raypier\\core\\cfaces.pyx",
  "stringsource",
  "__init__.pxd",
  "raypier\\core\\ctracer.pxd",
  "type.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* None.proto */
#if defined(__GNUC__)
#define __Pyx_PACKED __attribute__((__packed__))
#else
#define __Pyx_PACKED
#endif


/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);


/*--- Type declarations ---*/
struct __pyx_obj_7raypier_4core_7ctracer_Transform;
struct __pyx_obj_7raypier_4core_7ctracer_Ray;
struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay;
struct __pyx_obj_7raypier_4core_7ctracer_Gausslet;
struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView;
struct __pyx_obj_7raypier_4core_7ctracer_RayCollection;
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection;
struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView;
struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator;
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator;
struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial;
struct __pyx_obj_7raypier_4core_7ctracer_Distortion;
struct __pyx_obj_7raypier_4core_7ctracer_Shape;
struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface;
struct __pyx_obj_7raypier_4core_7ctracer_Face;
struct __pyx_obj_7raypier_4core_7ctracer_FaceList;
struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace;
struct __pyx_obj_7raypier_4core_6cfaces_CircularFace;
struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace;
struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace;
struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace;
struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace;
struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace;
struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace;
struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace;
struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace;
struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace;
struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace;
struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace;
struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace;
struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace;
struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace;
struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace;
struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace;
struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace;
struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace;
struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;
struct __pyx_t_7raypier_4core_7ctracer_vector_t;
struct __pyx_t_7raypier_4core_7ctracer_orientation_t;
struct __pyx_t_7raypier_4core_7ctracer_ray_t;
struct __pyx_t_7raypier_4core_7ctracer_para_t;
struct __pyx_t_7raypier_4core_7ctracer_gausslet_t;
struct __pyx_t_7raypier_4core_7ctracer_transform_t;
struct __pyx_t_7raypier_4core_7ctracer_ray_pair_t;
struct __pyx_t_7raypier_4core_7ctracer_intersect_t;

/* "ctracer.pxd":19
 * ############################################
 * 
 * cdef struct vector_t:             # <<<<<<<<<<<<<<
 *     double x,y,z
 * 
 */
struct __pyx_t_7raypier_4core_7ctracer_vector_t {
  double x;
  double y;
  double z;
};

/* "ctracer.pxd":22
 *     double x,y,z
 * 
 * cdef struct orientation_t:             # <<<<<<<<<<<<<<
 *     vector_t normal, tangent
 * 
 */
struct __pyx_t_7raypier_4core_7ctracer_orientation_t {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t tangent;
};

/* "ctracer.pxd":40
 * 
 * 
 * cdef packed struct ray_t:             # <<<<<<<<<<<<<<
 *     #vectors
 *     vector_t origin, direction, normal, E_vector
 */
#if defined(__SUNPRO_C)
  #pragma pack(1)
#elif !defined(__GNUC__)
  #pragma pack(push, 1)
#endif
struct __Pyx_PACKED __pyx_t_7raypier_4core_7ctracer_ray_t {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t origin;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t direction;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t E_vector;
  __pyx_t_double_complex refractive_index;
  __pyx_t_double_complex E1_amp;
  __pyx_t_double_complex E2_amp;
  double length;
  double phase;
  double accumulated_path;
  unsigned int wavelength_idx;
  unsigned int parent_idx;
  unsigned int end_face_idx;
  unsigned int ray_ident;
  unsigned int ray_type_id;
};
#if defined(__SUNPRO_C)
  #pragma pack()
#elif !defined(__GNUC__)
  #pragma pack(pop)
#endif

/* "ctracer.pxd":54
 * 
 * ### Structure for parabasal rays. These only carry geometric information.
 * cdef packed struct para_t:             # <<<<<<<<<<<<<<
 *     #vectors
 *     vector_t origin, direction, normal
 */
#if defined(__SUNPRO_C)
  #pragma pack(1)
#elif !defined(__GNUC__)
  #pragma pack(push, 1)
#endif
struct __Pyx_PACKED __pyx_t_7raypier_4core_7ctracer_para_t {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t origin;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t direction;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t normal;
  double length;
};
#if defined(__SUNPRO_C)
  #pragma pack()
#elif !defined(__GNUC__)
  #pragma pack(pop)
#endif

/* "ctracer.pxd":62
 * 
 * ### A Gausslet combines a base-ray with 6 parabasal rays
 * cdef packed struct gausslet_t:             # <<<<<<<<<<<<<<
 *     ray_t base_ray
 *     para_t para[6]
 */
#if defined(__SUNPRO_C)
  #pragma pack(1)
#elif !defined(__GNUC__)
  #pragma pack(push, 1)
#endif
struct __Pyx_PACKED __pyx_t_7raypier_4core_7ctracer_gausslet_t {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t base_ray;
  struct __pyx_t_7raypier_4core_7ctracer_para_t para[6];
};
#if defined(__SUNPRO_C)
  #pragma pack()
#elif !defined(__GNUC__)
  #pragma pack(pop)
#endif

/* "ctracer.pxd":67
 * 
 * 
 * cdef struct transform_t:             # <<<<<<<<<<<<<<
 *     double m00, m01, m02, m10, m11, m12, m20, m21, m22
 *     double tx, ty, tz
 */
struct __pyx_t_7raypier_4core_7ctracer_transform_t {
  double m00;
  double m01;
  double m02;
  double m10;
  double m11;
  double m12;
  double m20;
  double m21;
  double m22;
  double tx;
  double ty;
  double tz;
};

/* "ctracer.pxd":71
 *     double tx, ty, tz
 * 
 * cdef struct ray_pair_t:             # <<<<<<<<<<<<<<
 *     ray_t trans, refln
 * 
 */
struct __pyx_t_7raypier_4core_7ctracer_ray_pair_t {
  struct __pyx_t_7raypier_4core_7ctracer_ray_t trans;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t refln;
};

/* "ctracer.pxd":74
 *     ray_t trans, refln
 * 
 * cdef struct intersect_t:             # <<<<<<<<<<<<<<
 *     double dist
 *     int face_idx
 */
struct __pyx_t_7raypier_4core_7ctracer_intersect_t {
  double dist;
  int face_idx;
  int piece_idx;
};

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_7raypier_4core_6cfaces_flatvector_t;
struct __pyx_t_7raypier_4core_6cfaces_poly_roots;
struct __pyx_t_7raypier_4core_6cfaces_aspheric_t;
struct __pyx_t_7raypier_4core_6cfaces_extpoly_t;

/* "raypier/core/cfaces.pyx":46
 * NO_INTERSECTION.piece_idx = 0
 * 
 * cdef struct flatvector_t:             # <<<<<<<<<<<<<<
 *     double x,y
 * 
 */
struct __pyx_t_7raypier_4core_6cfaces_flatvector_t {
  double x;
  double y;
};

/* "raypier/core/cfaces.pyx":716
 *     return 3*A*t**2 + 2*B*t + C
 * 
 * cdef struct poly_roots:             # <<<<<<<<<<<<<<
 *     #my apologies for highly unusable code,
 *     #I am such a noob at passing values between functions
 */
struct __pyx_t_7raypier_4core_6cfaces_poly_roots {
  double roots[3];
  int n;
};

/* "raypier/core/cfaces.pyx":1725
 * 
 * 
 * cdef struct aspheric_t:             # <<<<<<<<<<<<<<
 *     double R #curvature
 *     double beta #=1+conic const
 */
struct __pyx_t_7raypier_4core_6cfaces_aspheric_t {
  double R;
  double beta;
  double A4;
  double A6;
  double A8;
  double A10;
  double A12;
  double A14;
  double A16;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t a;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t d;
};

/* "raypier/core/cfaces.pyx":1913
 * 
 * 
 * cdef struct extpoly_t:             # <<<<<<<<<<<<<<
 *     double R #curvature
 *     double beta #=1+conic const
 */
struct __pyx_t_7raypier_4core_6cfaces_extpoly_t {
  double R;
  double beta;
  double norm_radius;
  double z_height;
};

/* "ctracer.pxd":106
 * ##################################
 * 
 * cdef class Transform:             # <<<<<<<<<<<<<<
 *     cdef transform_t trans
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_Transform {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_transform_t trans;
};


/* "ctracer.pxd":110
 * 
 * 
 * cdef class Ray:             # <<<<<<<<<<<<<<
 *     cdef:
 *         ray_t ray
 */
struct __pyx_obj_7raypier_4core_7ctracer_Ray {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_ray_t ray;
  double max_length;
};


/* "ctracer.pxd":116
 * 
 * 
 * cdef class ParabasalRay:             # <<<<<<<<<<<<<<
 *     cdef:
 *         para_t ray
 */
struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_para_t ray;
  double max_length;
};


/* "ctracer.pxd":122
 * 
 * 
 * cdef class Gausslet:             # <<<<<<<<<<<<<<
 *     cdef gausslet_t gausslet
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_Gausslet {
  PyObject_HEAD
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t gausslet;
};


/* "ctracer.pxd":126
 * 
 * 
 * cdef class RayArrayView:             # <<<<<<<<<<<<<<
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray)
 *     cdef ray_t get_ray_c(self, unsigned long i)
 */
struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *__pyx_vtab;
};


/* "ctracer.pxd":132
 * 
 * 
 * cdef class RayCollection(RayArrayView):             # <<<<<<<<<<<<<<
 *     cdef:
 *         ray_t *rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_RayCollection {
  struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView __pyx_base;
  struct __pyx_t_7raypier_4core_7ctracer_ray_t *rays;
  unsigned long n_rays;
  unsigned long max_size;
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *_parent;
  __Pyx_memviewslice _wavelengths;
  __Pyx_memviewslice _neighbours;
  double _mtime;
};


/* "ctracer.pxd":150
 * 
 * 
 * cdef class GaussletCollection:             # <<<<<<<<<<<<<<
 *     cdef:
 *         gausslet_t *rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *__pyx_vtab;
  struct __pyx_t_7raypier_4core_7ctracer_gausslet_t *rays;
  unsigned long n_rays;
  unsigned long max_size;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *_parent;
  __Pyx_memviewslice _wavelengths;
};


/* "ctracer.pxd":162
 * 
 * 
 * cdef class GaussletBaseRayView(RayArrayView):             # <<<<<<<<<<<<<<
 *     cdef:
 *         GaussletCollection owner
 */
struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView {
  struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView __pyx_base;
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *owner;
};


/* "ctracer.pxd":167
 * 
 * 
 * cdef class RayCollectionIterator:             # <<<<<<<<<<<<<<
 *     cdef:
 *         RayCollection rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator {
  PyObject_HEAD
  struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *rays;
  unsigned int counter;
};


/* "ctracer.pxd":173
 * 
 * 
 * cdef class GaussletCollectionIterator:             # <<<<<<<<<<<<<<
 *     cdef:
 *         GaussletCollection rays
 */
struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator {
  PyObject_HEAD
  struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *rays;
  unsigned int counter;
};


/* "ctracer.pxd":179
 * 
 * 
 * cdef class InterfaceMaterial(object):             # <<<<<<<<<<<<<<
 *     """Abstract base class for objects describing
 *     the materials characterics of a Face
 */
struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_vtab;
  __Pyx_memviewslice _wavelengths;
};


/* "ctracer.pxd":203
 * 
 * 
 * cdef class Distortion:             # <<<<<<<<<<<<<<
 *     cdef vector_t z_offset_and_gradient_c(self, double x, double y) nogil
 *     cdef double z_offset_c(self, double x, double y) nogil
 */
struct __pyx_obj_7raypier_4core_7ctracer_Distortion {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *__pyx_vtab;
};


/* "ctracer.pxd":208
 * 
 * 
 * cdef class Shape:             # <<<<<<<<<<<<<<
 *     cdef bint point_inside_c(self, double x, double y)
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_Shape {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *__pyx_vtab;
};


/* "ctracer.pxd":212
 * 
 * 
 * cdef class ImplicitSurface:             # <<<<<<<<<<<<<<
 *     cdef double evaluate_c(self, vector_t p) nogil
 * 
 */
struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface *__pyx_vtab;
};


/* "ctracer.pxd":216
 * 
 * 
 * cdef class Face(object):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object owner
 */
struct __pyx_obj_7raypier_4core_7ctracer_Face {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *__pyx_vtab;
  PyObject *owner;
  char *name;
  double tolerance;
  int idx;
  double max_length;
  struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *material;
  short invert_normal;
  unsigned int count;
};


/* "ctracer.pxd":233
 * 
 * 
 * cdef class FaceList(object):             # <<<<<<<<<<<<<<
 *     """A group of faces which share a transform"""
 *     cdef transform_t trans
 */
struct __pyx_obj_7raypier_4core_7ctracer_FaceList {
  PyObject_HEAD
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *__pyx_vtab;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t trans;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t inv_trans;
  PyObject *faces;
  PyObject *owner;
};


/* "raypier/core/cfaces.pyx":50
 * 
 * 
 * cdef class ShapedFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public Shape shape
 */
struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  struct __pyx_obj_7raypier_4core_7ctracer_Shape *shape;
  int invert_normals;
};


/* "raypier/core/cfaces.pyx":140
 * 
 * 
 * cdef class CircularFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double diameter, offset, z_plane
 * 
 */
struct __pyx_obj_7raypier_4core_6cfaces_CircularFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double diameter;
  double offset;
  double z_plane;
};


/* "raypier/core/cfaces.pyx":188
 * 
 * 
 * cdef class ShapedPlanarFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double z_height
 */
struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double z_height;
};


/* "raypier/core/cfaces.pyx":239
 * 
 * 
 * cdef class ImplicitBoundedFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public ImplicitSurface boundary
 */
struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *boundary;
  struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *target;
};


/* "raypier/core/cfaces.pyx":245
 * 
 * 
 * cdef class ImplicitBoundedPlanarFace(ImplicitBoundedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         vector_t _origin
 */
struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace __pyx_base;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t _origin;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t _normal;
};


/* "raypier/core/cfaces.pyx":307
 * 
 * 
 * cdef class ElipticalPlaneFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double g_x, g_y, diameter
 * 
 */
struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double g_x;
  double g_y;
  double diameter;
};


/* "raypier/core/cfaces.pyx":348
 * 
 * 
 * cdef class RectangularFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double length, width, offset, z_plane
 * 
 */
struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double length;
  double width;
  double offset;
  double z_plane;
};


/* "raypier/core/cfaces.pyx":404
 * 
 * 
 * cdef class SphericalFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double diameter, curvature, z_height
 * 
 */
struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double diameter;
  double curvature;
  double z_height;
};


/* "raypier/core/cfaces.pyx":495
 * 
 * 
 * cdef class ShapedSphericalFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double curvature, z_height
 */
struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double curvature;
  double z_height;
};


/* "raypier/core/cfaces.pyx":605
 * 
 * 
 * cdef class ExtrudedPlanarFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double x1_, y1_, x2_, y2_
 */
struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double x1_;
  double y1_;
  double x2_;
  double y2_;
  double z1;
  double z2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t normal;
};


/* "raypier/core/cfaces.pyx":782
 *     return result
 * 
 * cdef class ExtrudedBezierFace(Face):             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double z_height_1;
  double z_height_2;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t mincorner;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t maxcorner;
  PyArrayObject *curves_array;
};


/* "raypier/core/cfaces.pyx":1065
 * 
 * 
 * cdef class PolygonFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double z_plane
 *     cdef object _xy_points
 */
struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double z_plane;
  PyObject *_xy_points;
};


/* "raypier/core/cfaces.pyx":1109
 * 
 * 
 * cdef class OffAxisParabolicFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double EFL, diameter, height
 */
struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double EFL;
  double diameter;
  double height;
};


/* "raypier/core/cfaces.pyx":1205
 * 
 * 
 * cdef class EllipsoidalFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double major, minor #axis lengths
 */
struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace {
  struct __pyx_obj_7raypier_4core_7ctracer_Face __pyx_base;
  double major;
  double minor;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t trans;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t inv_trans;
  double x1;
  double x2;
  double y1;
  double y2;
  double z1;
  double z2;
};


/* "raypier/core/cfaces.pyx":1314
 * 
 * 
 * cdef class SaddleFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double z_height, curvature
 */
struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double z_height;
  double curvature;
};


/* "raypier/core/cfaces.pyx":1401
 * 
 * 
 * cdef class CylindericalFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double z_height, radius
 */
struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double z_height;
  double radius;
};


/* "raypier/core/cfaces.pyx":1492
 * 
 * 
 * cdef class AxiconFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """
 *     While technically, we can use the conic surface to generate a cone, it requires setting some parameters to infinity which
 */
struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double z_height;
  double gradient;
};


/* "raypier/core/cfaces.pyx":1636
 * 
 * 
 * cdef class ConicRevolutionFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """This is surface of revolution formed from a conic section. Spherical and ellipsoidal faces
 *     are a special case of this.
 */
struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double curvature;
  double z_height;
  double conic_const;
};


/* "raypier/core/cfaces.pyx":1770
 * 
 * 
 * cdef class AsphericFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """This is the general aspheric lens surface formula.
 * 
 */
struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double curvature;
  double z_height;
  double conic_const;
  double A4;
  double A6;
  double A8;
  double A10;
  double A12;
  double A14;
  double A16;
  double atol;
};


/* "raypier/core/cfaces.pyx":2015
 * 
 * 
 * cdef class ExtendedPolynomialFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """Extended polynomial
 *     """
 */
struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  double nterms;
  double atol;
  struct __pyx_t_7raypier_4core_6cfaces_extpoly_t ext_poly;
  __Pyx_memviewslice _coefs;
};


/* "raypier/core/cfaces.pyx":2208
 * 
 * 
 * cdef class DistortionFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """This class wraps another ShapedFace object, and applies a small distortion to it's
 *     surface geometry. The distortion is given by an instance of a Distortion subclass
 */
struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace __pyx_base;
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *base_face;
  struct __pyx_obj_7raypier_4core_7ctracer_Distortion *distortion;
  double accuracy;
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "ctracer.pxd":126
 * 
 * 
 * cdef class RayArrayView:             # <<<<<<<<<<<<<<
 *     cdef void set_ray_c(self, unsigned long i, ray_t ray)
 *     cdef ray_t get_ray_c(self, unsigned long i)
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView {
  void (*set_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long, struct __pyx_t_7raypier_4core_7ctracer_ray_t);
  struct __pyx_t_7raypier_4core_7ctracer_ray_t (*get_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *, unsigned long);
  unsigned long (*get_n_rays)(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView *);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView *__pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView;


/* "ctracer.pxd":132
 * 
 * 
 * cdef class RayCollection(RayArrayView):             # <<<<<<<<<<<<<<
 *     cdef:
 *         ray_t *rays
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView __pyx_base;
  PyObject *(*add_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, struct __pyx_t_7raypier_4core_7ctracer_ray_t);
  void (*reset_length_c)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, double);
  double (*get_mtime)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, unsigned long);
  void (*_eval_neighbours)(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *, __Pyx_memviewslice);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection *__pyx_vtabptr_7raypier_4core_7ctracer_RayCollection;


/* "ctracer.pxd":150
 * 
 * 
 * cdef class GaussletCollection:             # <<<<<<<<<<<<<<
 *     cdef:
 *         gausslet_t *rays
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection {
  PyObject *(*add_gausslet_c)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_t_7raypier_4core_7ctracer_gausslet_t);
  void (*extend_c)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *);
  void (*reset_length_c)(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *, double);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection *__pyx_vtabptr_7raypier_4core_7ctracer_GaussletCollection;


/* "ctracer.pxd":162
 * 
 * 
 * cdef class GaussletBaseRayView(RayArrayView):             # <<<<<<<<<<<<<<
 *     cdef:
 *         GaussletCollection owner
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletBaseRayView {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletBaseRayView *__pyx_vtabptr_7raypier_4core_7ctracer_GaussletBaseRayView;


/* "ctracer.pxd":179
 * 
 * 
 * cdef class InterfaceMaterial(object):             # <<<<<<<<<<<<<<
 *     """Abstract base class for objects describing
 *     the materials characterics of a Face
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial {
  void (*eval_child_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, unsigned int, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_orientation_t, struct __pyx_obj_7raypier_4core_7ctracer_RayCollection *);
  struct __pyx_t_7raypier_4core_7ctracer_para_t (*eval_parabasal_ray_c)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_orientation_t, unsigned int);
  void (*eval_decomposed_rays_c)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *, struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection *);
  PyObject *(*on_set_wavelengths)(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial *__pyx_vtabptr_7raypier_4core_7ctracer_InterfaceMaterial;


/* "ctracer.pxd":203
 * 
 * 
 * cdef class Distortion:             # <<<<<<<<<<<<<<
 *     cdef vector_t z_offset_and_gradient_c(self, double x, double y) nogil
 *     cdef double z_offset_c(self, double x, double y) nogil
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t (*z_offset_and_gradient_c)(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *, double, double);
  double (*z_offset_c)(struct __pyx_obj_7raypier_4core_7ctracer_Distortion *, double, double);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *__pyx_vtabptr_7raypier_4core_7ctracer_Distortion;


/* "ctracer.pxd":208
 * 
 * 
 * cdef class Shape:             # <<<<<<<<<<<<<<
 *     cdef bint point_inside_c(self, double x, double y)
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape {
  int (*point_inside_c)(struct __pyx_obj_7raypier_4core_7ctracer_Shape *, double, double);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *__pyx_vtabptr_7raypier_4core_7ctracer_Shape;


/* "ctracer.pxd":212
 * 
 * 
 * cdef class ImplicitSurface:             # <<<<<<<<<<<<<<
 *     cdef double evaluate_c(self, vector_t p) nogil
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface {
  double (*evaluate_c)(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *, struct __pyx_t_7raypier_4core_7ctracer_vector_t);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface *__pyx_vtabptr_7raypier_4core_7ctracer_ImplicitSurface;


/* "ctracer.pxd":216
 * 
 * 
 * cdef class Face(object):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object owner
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face {
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*intersect_c)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
  struct __pyx_t_7raypier_4core_7ctracer_vector_t (*compute_normal_c)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
  struct __pyx_t_7raypier_4core_7ctracer_vector_t (*compute_tangent_c)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face *__pyx_vtabptr_7raypier_4core_7ctracer_Face;


/* "ctracer.pxd":233
 * 
 * 
 * cdef class FaceList(object):             # <<<<<<<<<<<<<<
 *     """A group of faces which share a transform"""
 *     cdef transform_t trans
 */

struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList {
  void (*sync_transforms)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, int __pyx_skip_dispatch);
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*intersect_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t);
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*intersect_one_face_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_ray_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
  int (*intersect_para_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_t_7raypier_4core_7ctracer_para_t *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_obj_7raypier_4core_7ctracer_Face *);
  struct __pyx_t_7raypier_4core_7ctracer_orientation_t (*compute_orientation_c)(struct __pyx_obj_7raypier_4core_7ctracer_FaceList *, struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int);
};
static struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList *__pyx_vtabptr_7raypier_4core_7ctracer_FaceList;


/* "raypier/core/cfaces.pyx":50
 * 
 * 
 * cdef class ShapedFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public Shape shape
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
  double (*eval_z_c)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double);
  double (*eval_implicit_c)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double, double);
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;


/* "raypier/core/cfaces.pyx":140
 * 
 * 
 * cdef class CircularFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double diameter, offset, z_plane
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_CircularFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_CircularFace *__pyx_vtabptr_7raypier_4core_6cfaces_CircularFace;


/* "raypier/core/cfaces.pyx":188
 * 
 * 
 * cdef class ShapedPlanarFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double z_height
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedPlanarFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedPlanarFace;


/* "raypier/core/cfaces.pyx":239
 * 
 * 
 * cdef class ImplicitBoundedFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public ImplicitSurface boundary
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ImplicitBoundedFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedFace;


/* "raypier/core/cfaces.pyx":245
 * 
 * 
 * cdef class ImplicitBoundedPlanarFace(ImplicitBoundedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         vector_t _origin
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ImplicitBoundedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace;


/* "raypier/core/cfaces.pyx":307
 * 
 * 
 * cdef class ElipticalPlaneFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double g_x, g_y, diameter
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ElipticalPlaneFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_vtabptr_7raypier_4core_6cfaces_ElipticalPlaneFace;


/* "raypier/core/cfaces.pyx":348
 * 
 * 
 * cdef class RectangularFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double length, width, offset, z_plane
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_RectangularFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_RectangularFace *__pyx_vtabptr_7raypier_4core_6cfaces_RectangularFace;


/* "raypier/core/cfaces.pyx":404
 * 
 * 
 * cdef class SphericalFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double diameter, curvature, z_height
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_SphericalFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_SphericalFace *__pyx_vtabptr_7raypier_4core_6cfaces_SphericalFace;


/* "raypier/core/cfaces.pyx":495
 * 
 * 
 * cdef class ShapedSphericalFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double curvature, z_height
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedSphericalFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedSphericalFace;


/* "raypier/core/cfaces.pyx":605
 * 
 * 
 * cdef class ExtrudedPlanarFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double x1_, y1_, x2_, y2_
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedPlanarFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
  PyObject *(*calc_normal)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *);
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedPlanarFace;


/* "raypier/core/cfaces.pyx":782
 *     return result
 * 
 * cdef class ExtrudedBezierFace(Face):             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
  int (*ccw)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t);
  int (*line_seg_overlap)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t);
  int (*pnt_in_hull)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t);
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedBezierFace;


/* "raypier/core/cfaces.pyx":1065
 * 
 * 
 * cdef class PolygonFace(Face):             # <<<<<<<<<<<<<<
 *     cdef public double z_plane
 *     cdef object _xy_points
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_PolygonFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_PolygonFace *__pyx_vtabptr_7raypier_4core_6cfaces_PolygonFace;


/* "raypier/core/cfaces.pyx":1109
 * 
 * 
 * cdef class OffAxisParabolicFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double EFL, diameter, height
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_OffAxisParabolicFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_vtabptr_7raypier_4core_6cfaces_OffAxisParabolicFace;


/* "raypier/core/cfaces.pyx":1205
 * 
 * 
 * cdef class EllipsoidalFace(Face):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double major, minor #axis lengths
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_EllipsoidalFace {
  struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_vtabptr_7raypier_4core_6cfaces_EllipsoidalFace;


/* "raypier/core/cfaces.pyx":1314
 * 
 * 
 * cdef class SaddleFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double z_height, curvature
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_SaddleFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_SaddleFace *__pyx_vtabptr_7raypier_4core_6cfaces_SaddleFace;


/* "raypier/core/cfaces.pyx":1401
 * 
 * 
 * cdef class CylindericalFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double z_height, radius
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_CylindericalFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_CylindericalFace *__pyx_vtabptr_7raypier_4core_6cfaces_CylindericalFace;


/* "raypier/core/cfaces.pyx":1492
 * 
 * 
 * cdef class AxiconFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """
 *     While technically, we can use the conic surface to generate a cone, it requires setting some parameters to infinity which
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_AxiconFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_AxiconFace *__pyx_vtabptr_7raypier_4core_6cfaces_AxiconFace;


/* "raypier/core/cfaces.pyx":1636
 * 
 * 
 * cdef class ConicRevolutionFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """This is surface of revolution formed from a conic section. Spherical and ellipsoidal faces
 *     are a special case of this.
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ConicRevolutionFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_vtabptr_7raypier_4core_6cfaces_ConicRevolutionFace;


/* "raypier/core/cfaces.pyx":1770
 * 
 * 
 * cdef class AsphericFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """This is the general aspheric lens surface formula.
 * 
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_AsphericFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_AsphericFace *__pyx_vtabptr_7raypier_4core_6cfaces_AsphericFace;


/* "raypier/core/cfaces.pyx":2015
 * 
 * 
 * cdef class ExtendedPolynomialFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """Extended polynomial
 *     """
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtendedPolynomialFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_vtabptr_7raypier_4core_6cfaces_ExtendedPolynomialFace;


/* "raypier/core/cfaces.pyx":2208
 * 
 * 
 * cdef class DistortionFace(ShapedFace):             # <<<<<<<<<<<<<<
 *     """This class wraps another ShapedFace object, and applies a small distortion to it's
 *     surface geometry. The distortion is given by an instance of a Distortion subclass
 */

struct __pyx_vtabstruct_7raypier_4core_6cfaces_DistortionFace {
  struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_base;
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_DistortionFace *__pyx_vtabptr_7raypier_4core_6cfaces_DistortionFace;


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

#define __Pyx_BufPtrStrided3d(type, buf, i0, s0, i1, s1, i2, s2) (type)((char*)buf + i0 * s0 + i1 * s1 + i2 * s2)
/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

/* CIntFromPy.proto */
static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static double __pyx_f_7raypier_4core_6cfaces_10ShapedFace_eval_z_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_10ShapedFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_12CircularFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_12CircularFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, double __pyx_v_z); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_18ElipticalPlaneFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_18ElipticalPlaneFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_15RectangularFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_15RectangularFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_13SphericalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_13SphericalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto*/
static PyObject *__pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_calc_normal(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static int __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_ccw(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_A, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_B, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_C); /* proto*/
static int __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_line_seg_overlap(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_A, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_B, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_C, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_D); /* proto*/
static int __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_pnt_in_hull(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_p, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_A, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_B, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_C, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_D); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ar, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pee2, CYTHON_UNUSED int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_11PolygonFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_11PolygonFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_20OffAxisParabolicFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_20OffAxisParabolicFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_15EllipsoidalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_15EllipsoidalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_10SaddleFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_10SaddleFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_10SaddleFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_16CylindericalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_16CylindericalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_16CylindericalFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_10AxiconFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_10AxiconFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_10AxiconFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_12AsphericFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_12AsphericFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_12AsphericFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_12AsphericFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_14DistortionFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, CYTHON_UNUSED int __pyx_v_is_base_ray); /* proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_14DistortionFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, int __pyx_v_piece); /* proto*/
static double __pyx_f_7raypier_4core_6cfaces_14DistortionFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'raypier.core.ctracer' */
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Transform = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Ray = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_ParabasalRay = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Gausslet = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_RayArrayView = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_RayCollection = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_GaussletBaseRayView = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_RayCollectionIterator = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_GaussletCollectionIterator = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Distortion = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Shape = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_Face = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_7ctracer_FaceList = 0;
static double *__pyx_vp_7raypier_4core_7ctracer_INF = 0;
#define __pyx_v_7raypier_4core_7ctracer_INF (*__pyx_vp_7raypier_4core_7ctracer_INF)
static int *__pyx_vp_7raypier_4core_7ctracer_NPARA = 0;
#define __pyx_v_7raypier_4core_7ctracer_NPARA (*__pyx_vp_7raypier_4core_7ctracer_NPARA)
static unsigned int *__pyx_vp_7raypier_4core_7ctracer_REFL_RAY = 0;
#define __pyx_v_7raypier_4core_7ctracer_REFL_RAY (*__pyx_vp_7raypier_4core_7ctracer_REFL_RAY)
static unsigned int *__pyx_vp_7raypier_4core_7ctracer_GAUSSLET = 0;
#define __pyx_v_7raypier_4core_7ctracer_GAUSSLET (*__pyx_vp_7raypier_4core_7ctracer_GAUSSLET)
static unsigned int *__pyx_vp_7raypier_4core_7ctracer_PARABASAL = 0;
#define __pyx_v_7raypier_4core_7ctracer_PARABASAL (*__pyx_vp_7raypier_4core_7ctracer_PARABASAL)
static struct __pyx_t_7raypier_4core_7ctracer_vector_t (*__pyx_f_7raypier_4core_7ctracer_transform_c)(struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t (*__pyx_f_7raypier_4core_7ctracer_rotate_c)(struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static double (*__pyx_f_7raypier_4core_7ctracer_sep_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t (*__pyx_f_7raypier_4core_7ctracer_multvs_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t, double); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t (*__pyx_f_7raypier_4core_7ctracer_addvv_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t (*__pyx_f_7raypier_4core_7ctracer_subvv_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static double (*__pyx_f_7raypier_4core_7ctracer_dotprod_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static struct __pyx_t_7raypier_4core_7ctracer_vector_t (*__pyx_f_7raypier_4core_7ctracer_norm_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static double (*__pyx_f_7raypier_4core_7ctracer_mag_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/
static double (*__pyx_f_7raypier_4core_7ctracer_mag_sq_)(struct __pyx_t_7raypier_4core_7ctracer_vector_t); /*proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'raypier.core.cfaces' */
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ShapedFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_CircularFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ShapedPlanarFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ElipticalPlaneFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_RectangularFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_SphericalFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ShapedSphericalFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ExtrudedPlanarFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ExtrudedBezierFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_PolygonFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_OffAxisParabolicFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_EllipsoidalFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_SaddleFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_CylindericalFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_AxiconFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ConicRevolutionFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_AsphericFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_ExtendedPolynomialFace = 0;
static PyTypeObject *__pyx_ptype_7raypier_4core_6cfaces_DistortionFace = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static double __pyx_v_7raypier_4core_6cfaces_INF;
static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static double __pyx_f_7raypier_4core_6cfaces_eval_bezier(double, double, double, double, double); /*proto*/
static double __pyx_f_7raypier_4core_6cfaces_dif_bezier(double, double, double, double, double); /*proto*/
static struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_f_7raypier_4core_6cfaces_roots_of_cubic(double, double, double, double); /*proto*/
static struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_f_7raypier_4core_6cfaces_rotate2D(double, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t); /*proto*/
static int __pyx_f_7raypier_4core_6cfaces_point_in_polygon_c(double, double, PyObject *); /*proto*/
static double __pyx_f_7raypier_4core_6cfaces_intersect_conic(struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, double, double); /*proto*/
static double __pyx_f_7raypier_4core_6cfaces_eval_aspheric_impf(struct __pyx_t_7raypier_4core_6cfaces_aspheric_t, double); /*proto*/
static double __pyx_f_7raypier_4core_6cfaces_eval_aspheric_grad(struct __pyx_t_7raypier_4core_6cfaces_aspheric_t, double); /*proto*/
static double __pyx_f_7raypier_4core_6cfaces_eval_extpoly_impf(struct __pyx_t_7raypier_4core_6cfaces_extpoly_t, __Pyx_memviewslice, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, double); /*proto*/
static double __pyx_f_7raypier_4core_6cfaces_eval_extpoly_grad(struct __pyx_t_7raypier_4core_6cfaces_extpoly_t, __Pyx_memviewslice, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, double); /*proto*/
static PyObject *__pyx_f_7raypier_4core_6cfaces___pyx_unpickle_ImplicitBoundedFace__set_state(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *, PyObject *); /*proto*/
static PyObject *__pyx_f_7raypier_4core_6cfaces___pyx_unpickle_OffAxisParabolicFace__set_state(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *, PyObject *); /*proto*/
static int __Pyx_carray_from_py_double(PyObject *, double *, Py_ssize_t); /*proto*/
static struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots(PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "raypier.core.cfaces"
extern int __pyx_module_is_main_raypier__core__cfaces;
int __pyx_module_is_main_raypier__core__cfaces = 0;

/* Implementation of 'raypier.core.cfaces' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_A4[] = "A4";
static const char __pyx_k_A6[] = "A6";
static const char __pyx_k_A8[] = "A8";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_z1[] = "z1";
static const char __pyx_k_z2[] = "z2";
static const char __pyx_k_A10[] = "A10";
static const char __pyx_k_A12[] = "A12";
static const char __pyx_k_A14[] = "A14";
static const char __pyx_k_A16[] = "A16";
static const char __pyx_k_g_x[] = "g_x";
static const char __pyx_k_g_y[] = "g_y";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_pts[] = "pts";
static const char __pyx_k_atol[] = "atol";
static const char __pyx_k_axes[] = "axes";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_Plane[] = "Plane";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_coefs[] = "coefs";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_roots[] = "roots";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_normal[] = "normal";
static const char __pyx_k_nterms[] = "nterms";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_z_plane[] = "z_plane";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_X_bounds[] = "X_bounds";
static const char __pyx_k_Y_bounds[] = "Y_bounds";
static const char __pyx_k_Z_bounds[] = "Z_bounds";
static const char __pyx_k_accuracy[] = "accuracy";
static const char __pyx_k_boundary[] = "boundary";
static const char __pyx_k_diameter[] = "diameter";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_gradient[] = "gradient";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_rotation[] = "rotation";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_z_height[] = "z_height";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_base_face[] = "base_face";
static const char __pyx_k_curvature[] = "curvature";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_transform[] = "transform";
static const char __pyx_k_xy_points[] = "xy_points";
static const char __pyx_k_AxiconFace[] = "AxiconFace";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_SaddleFace[] = "SaddleFace";
static const char __pyx_k_ShapedFace[] = "ShapedFace";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_distortion[] = "distortion";
static const char __pyx_k_point_list[] = "point_list";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_z_height_1[] = "z_height_1";
static const char __pyx_k_z_height_2[] = "z_height_2";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_NullSurface[] = "NullSurface";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_PolygonFace[] = "PolygonFace";
static const char __pyx_k_conic_const[] = "conic_const";
static const char __pyx_k_get_element[] = "get_element";
static const char __pyx_k_norm_radius[] = "norm_radius";
static const char __pyx_k_translation[] = "translation";
static const char __pyx_k_AsphericFace[] = "AsphericFace";
static const char __pyx_k_CircularFace[] = "CircularFace";
static const char __pyx_k_beziercurves[] = "beziercurves";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_SphericalFace[] = "SphericalFace";
static const char __pyx_k_ellipse_trans[] = "ellipse_trans";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_DistortionFace[] = "DistortionFace";
static const char __pyx_k_invert_normals[] = "invert_normals";
static const char __pyx_k_linear_inverse[] = "linear_inverse";
static const char __pyx_k_sync_transform[] = "sync_transform";
static const char __pyx_k_EllipsoidalFace[] = "EllipsoidalFace";
static const char __pyx_k_RectangularFace[] = "RectangularFace";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_CylindericalFace[] = "CylindericalFace";
static const char __pyx_k_ShapedPlanarFace[] = "ShapedPlanarFace";
static const char __pyx_k_point_in_polygon[] = "point_in_polygon";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_inverse_transform[] = "inverse_transform";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_ElipticalPlaneFace[] = "ElipticalPlaneFace";
static const char __pyx_k_ExtrudedBezierFace[] = "ExtrudedBezierFace";
static const char __pyx_k_ExtrudedPlanarFace[] = "ExtrudedPlanarFace";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_ConicRevolutionFace[] = "ConicRevolutionFace";
static const char __pyx_k_ImplicitBoundedFace[] = "ImplicitBoundedFace";
static const char __pyx_k_ShapedSphericalFace[] = "ShapedSphericalFace";
static const char __pyx_k_raypier_core_cfaces[] = "raypier.core.cfaces";
static const char __pyx_k_OffAxisParabolicFace[] = "OffAxisParabolicFace";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_ExtendedPolynomialFace[] = "ExtendedPolynomialFace";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_raypier_core_cfaces_pyx[] = "raypier\\core\\cfaces.pyx";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_ImplicitBoundedPlanarFace[] = "ImplicitBoundedPlanarFace";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_raypier_core_cimplicit_surfs[] = "raypier.core.cimplicit_surfs";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_pyx_unpickle_ImplicitBoundedFa[] = "__pyx_unpickle_ImplicitBoundedFace";
static const char __pyx_k_pyx_unpickle_OffAxisParabolicF[] = "__pyx_unpickle_OffAxisParabolicFace";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Cython_module_for_Face_definiti[] = "\nCython module for Face definitions\n";
static const char __pyx_k_Pickling_of_struct_members_such[] = "Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'roots'";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_error_Bezier_normal_not_found_po[] = "error: Bezier normal not found, point not actually on curve!";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_3[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'n'";
static PyObject *__pyx_n_u_A10;
static PyObject *__pyx_n_u_A12;
static PyObject *__pyx_n_u_A14;
static PyObject *__pyx_n_u_A16;
static PyObject *__pyx_n_u_A4;
static PyObject *__pyx_n_u_A6;
static PyObject *__pyx_n_u_A8;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_AsphericFace;
static PyObject *__pyx_n_s_AxiconFace;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_CircularFace;
static PyObject *__pyx_n_s_ConicRevolutionFace;
static PyObject *__pyx_n_s_CylindericalFace;
static PyObject *__pyx_n_s_DistortionFace;
static PyObject *__pyx_n_s_ElipticalPlaneFace;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_n_s_EllipsoidalFace;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_ExtendedPolynomialFace;
static PyObject *__pyx_n_s_ExtrudedBezierFace;
static PyObject *__pyx_n_s_ExtrudedPlanarFace;
static PyObject *__pyx_n_s_ImplicitBoundedFace;
static PyObject *__pyx_n_s_ImplicitBoundedPlanarFace;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_n_s_NullSurface;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_OffAxisParabolicFace;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_OverflowError;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_s_Pickling_of_struct_members_such;
static PyObject *__pyx_n_s_Plane;
static PyObject *__pyx_n_s_PolygonFace;
static PyObject *__pyx_n_s_RectangularFace;
static PyObject *__pyx_n_s_SaddleFace;
static PyObject *__pyx_n_s_ShapedFace;
static PyObject *__pyx_n_s_ShapedPlanarFace;
static PyObject *__pyx_n_s_ShapedSphericalFace;
static PyObject *__pyx_n_s_SphericalFace;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_n_s_X_bounds;
static PyObject *__pyx_n_s_Y;
static PyObject *__pyx_n_s_Y_bounds;
static PyObject *__pyx_n_s_Z_bounds;
static PyObject *__pyx_n_u_accuracy;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_ascontiguousarray;
static PyObject *__pyx_n_u_atol;
static PyObject *__pyx_n_s_axes;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_u_base_face;
static PyObject *__pyx_n_s_beziercurves;
static PyObject *__pyx_n_u_boundary;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_coefs;
static PyObject *__pyx_n_u_coefs;
static PyObject *__pyx_n_s_conic_const;
static PyObject *__pyx_n_u_conic_const;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_curvature;
static PyObject *__pyx_n_u_curvature;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_u_diameter;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_u_distortion;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_ellipse_trans;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_kp_u_error_Bezier_normal_not_found_po;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_u_g_x;
static PyObject *__pyx_n_u_g_y;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_get_element;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_u_gradient;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inverse_transform;
static PyObject *__pyx_n_u_invert_normals;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_u_length;
static PyObject *__pyx_n_s_linear_inverse;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_norm_radius;
static PyObject *__pyx_n_u_norm_radius;
static PyObject *__pyx_n_s_normal;
static PyObject *__pyx_n_u_normal;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_u_nterms;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_u_offset;
static PyObject *__pyx_n_s_origin;
static PyObject *__pyx_n_u_origin;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_point_in_polygon;
static PyObject *__pyx_n_s_point_list;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pts;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_unpickle_ImplicitBoundedFa;
static PyObject *__pyx_n_s_pyx_unpickle_OffAxisParabolicF;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_u_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raypier_core_cfaces;
static PyObject *__pyx_kp_s_raypier_core_cfaces_pyx;
static PyObject *__pyx_n_s_raypier_core_cimplicit_surfs;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_roots;
static PyObject *__pyx_n_s_rotation;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_u_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_sync_transform;
static PyObject *__pyx_n_u_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_transform;
static PyObject *__pyx_n_s_translation;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_u_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_u_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_u_x2;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_xy_points;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_u_y1;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_u_y2;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_u_z1;
static PyObject *__pyx_n_u_z2;
static PyObject *__pyx_n_s_z_height;
static PyObject *__pyx_n_u_z_height;
static PyObject *__pyx_n_s_z_height_1;
static PyObject *__pyx_n_s_z_height_2;
static PyObject *__pyx_n_s_z_plane;
static PyObject *__pyx_n_u_z_plane;
static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_2eval_z_extent(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_4eval_z_points(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_points); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_6eval_implicit_grid(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y, __Pyx_memviewslice __pyx_v_z); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_8eval_implicit_points(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_points); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_14invert_normals___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_6offset___get__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace_6offset_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_7z_plane___get__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace_7z_plane_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary___get__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target___get__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace___reduce_cython__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_2__setstate_cython__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_2update(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x___get__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y___get__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6length___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6length_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_5width___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_5width_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6offset___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6offset_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_7z_plane___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_7z_plane_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, PyArrayObject *__pyx_v_beziercurves, double __pyx_v_z_height_1, double __pyx_v_z_height_2, CYTHON_UNUSED PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_point_in_polygon(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_X, double __pyx_v_Y, PyObject *__pyx_v_point_list); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_11PolygonFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, PyObject *__pyx_v_z_plane, PyObject *__pyx_v_xy_points, CYTHON_UNUSED PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_9xy_points___get__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_9xy_points_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, PyObject *__pyx_v_pts); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_7z_plane___get__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_7z_plane_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL___get__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height___get__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace___reduce_cython__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_2__setstate_cython__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_9transform___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform___set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_2__get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_update(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2sync_transform(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_vtk_trans); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5major___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5major_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5minor___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x1___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x2___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y1___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y2___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z1___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z2___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10SaddleFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_6radius___get__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_6radius_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10AxiconFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8gradient___get__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8gradient_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const___get__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_11conic_const___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_11conic_const_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A4___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A4_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A6___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A6_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A8___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A8_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A10___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A10_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A12___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A12_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A14___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A14_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A16___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A16_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4atol___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4atol_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_coefs); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_kwds); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face___get__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion___get__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_8accuracy___get__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self); /* proto */
static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_8accuracy_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_2__pyx_unpickle_ImplicitBoundedFace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7raypier_4core_6cfaces_4__pyx_unpickle_OffAxisParabolicFace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_CircularFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ShapedPlanarFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ImplicitBoundedFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ElipticalPlaneFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_RectangularFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_SphericalFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ShapedSphericalFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ExtrudedPlanarFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ExtrudedBezierFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_PolygonFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_OffAxisParabolicFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_EllipsoidalFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_SaddleFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_CylindericalFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_AxiconFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ConicRevolutionFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_AsphericFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ExtendedPolynomialFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_DistortionFace(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_float_5_0;
static PyObject *__pyx_float_10_0;
static PyObject *__pyx_float_1eneg_6;
static PyObject *__pyx_float_25_0;
static PyObject *__pyx_float_100_0;
static PyObject *__pyx_float_1_0eneg_8;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_38528712;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_132898716;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_159202165;
static PyObject *__pyx_int_180632545;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_228929714;
static PyObject *__pyx_int_232498138;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__24;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__64;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__81;
/* Late includes */

/* "raypier/core/cfaces.pyx":55
 *         public int invert_normals
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.shape = kwds.get("shape", Shape())
 *         self.invert_normals = int(kwds.get('invert_normals', 0))
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":56
 * 
 *     def __cinit__(self, **kwds):
 *         self.shape = kwds.get("shape", Shape())             # <<<<<<<<<<<<<<
 *         self.invert_normals = int(kwds.get('invert_normals', 0))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Shape)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_shape, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7raypier_4core_7ctracer_Shape))))) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->shape);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->shape));
  __pyx_v_self->shape = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/cfaces.pyx":57
 *     def __cinit__(self, **kwds):
 *         self.shape = kwds.get("shape", Shape())
 *         self.invert_normals = int(kwds.get('invert_normals', 0))             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_invert_normals, __pyx_int_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->invert_normals = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":55
 *         public int invert_normals
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.shape = kwds.get("shape", Shape())
 *         self.invert_normals = int(kwds.get('invert_normals', 0))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":59
 *         self.invert_normals = int(kwds.get('invert_normals', 0))
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_10ShapedFace_eval_z_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":60
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 *         return 0.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":59
 *         self.invert_normals = int(kwds.get('invert_normals', 0))
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return 0.0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":62
 *         return 0.0
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_10ShapedFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":63
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 *         return z - self.eval_z_c(x,y)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 */
  __pyx_r = (__pyx_v_z - ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->eval_z_c(__pyx_v_self, __pyx_v_x, __pyx_v_y));
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":62
 *         return 0.0
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":67
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_z_extent(self, double[:] x, double[:] y):             # <<<<<<<<<<<<<<
 *         """Samples the face surface z-values over the 2d grid given by the x- and y-
 *            arrays. Returns the max and min values of z"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_3eval_z_extent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7raypier_4core_6cfaces_10ShapedFace_2eval_z_extent[] = "Samples the face surface z-values over the 2d grid given by the x- and y-\n           arrays. Returns the max and min values of z";
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_3eval_z_extent(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_x = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_z_extent (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_z_extent", 1, 2, 2, 1); __PYX_ERR(0, 67, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eval_z_extent") < 0)) __PYX_ERR(0, 67, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_x.memview)) __PYX_ERR(0, 67, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_y.memview)) __PYX_ERR(0, 67, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eval_z_extent", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 67, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_z_extent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_2eval_z_extent(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_2eval_z_extent(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y) {
  size_t __pyx_v_i;
  size_t __pyx_v_j;
  size_t __pyx_v_ni;
  size_t __pyx_v_nj;
  double __pyx_v_maxv;
  double __pyx_v_minv;
  double __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  size_t __pyx_t_6;
  size_t __pyx_t_7;
  size_t __pyx_t_8;
  size_t __pyx_t_9;
  size_t __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eval_z_extent", 0);

  /* "raypier/core/cfaces.pyx":71
 *            arrays. Returns the max and min values of z"""
 *         cdef:
 *             size_t i,j,ni=x.shape[0], nj=y.shape[0]             # <<<<<<<<<<<<<<
 *             double maxv, minv, v
 *         maxv = self.eval_z_c(x[0],y[0])+0.1
 */
  __pyx_v_ni = (__pyx_v_x.shape[0]);
  __pyx_v_nj = (__pyx_v_y.shape[0]);

  /* "raypier/core/cfaces.pyx":73
 *             size_t i,j,ni=x.shape[0], nj=y.shape[0]
 *             double maxv, minv, v
 *         maxv = self.eval_z_c(x[0],y[0])+0.1             # <<<<<<<<<<<<<<
 *         minv = maxv-0.2
 *         with nogil:
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_v_maxv = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->eval_z_c(__pyx_v_self, (*((double *) ( /* dim=0 */ (__pyx_v_x.data + __pyx_t_1 * __pyx_v_x.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_y.data + __pyx_t_2 * __pyx_v_y.strides[0]) )))) + 0.1);

  /* "raypier/core/cfaces.pyx":74
 *             double maxv, minv, v
 *         maxv = self.eval_z_c(x[0],y[0])+0.1
 *         minv = maxv-0.2             # <<<<<<<<<<<<<<
 *         with nogil:
 *             for i in range(ni):
 */
  __pyx_v_minv = (__pyx_v_maxv - 0.2);

  /* "raypier/core/cfaces.pyx":75
 *         maxv = self.eval_z_c(x[0],y[0])+0.1
 *         minv = maxv-0.2
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range(ni):
 *                 for j in range(nj):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "raypier/core/cfaces.pyx":76
 *         minv = maxv-0.2
 *         with nogil:
 *             for i in range(ni):             # <<<<<<<<<<<<<<
 *                 for j in range(nj):
 *                     v = self.eval_z_c(x[i],y[j])
 */
        __pyx_t_3 = __pyx_v_ni;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "raypier/core/cfaces.pyx":77
 *         with nogil:
 *             for i in range(ni):
 *                 for j in range(nj):             # <<<<<<<<<<<<<<
 *                     v = self.eval_z_c(x[i],y[j])
 *                     if v < minv:
 */
          __pyx_t_6 = __pyx_v_nj;
          __pyx_t_7 = __pyx_t_6;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_j = __pyx_t_8;

            /* "raypier/core/cfaces.pyx":78
 *             for i in range(ni):
 *                 for j in range(nj):
 *                     v = self.eval_z_c(x[i],y[j])             # <<<<<<<<<<<<<<
 *                     if v < minv:
 *                         minv = v
 */
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_10 = __pyx_v_j;
            __pyx_v_v = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->eval_z_c(__pyx_v_self, (*((double *) ( /* dim=0 */ (__pyx_v_x.data + __pyx_t_9 * __pyx_v_x.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_y.data + __pyx_t_10 * __pyx_v_y.strides[0]) ))));

            /* "raypier/core/cfaces.pyx":79
 *                 for j in range(nj):
 *                     v = self.eval_z_c(x[i],y[j])
 *                     if v < minv:             # <<<<<<<<<<<<<<
 *                         minv = v
 *                     if v > maxv:
 */
            __pyx_t_11 = ((__pyx_v_v < __pyx_v_minv) != 0);
            if (__pyx_t_11) {

              /* "raypier/core/cfaces.pyx":80
 *                     v = self.eval_z_c(x[i],y[j])
 *                     if v < minv:
 *                         minv = v             # <<<<<<<<<<<<<<
 *                     if v > maxv:
 *                         maxv = v
 */
              __pyx_v_minv = __pyx_v_v;

              /* "raypier/core/cfaces.pyx":79
 *                 for j in range(nj):
 *                     v = self.eval_z_c(x[i],y[j])
 *                     if v < minv:             # <<<<<<<<<<<<<<
 *                         minv = v
 *                     if v > maxv:
 */
            }

            /* "raypier/core/cfaces.pyx":81
 *                     if v < minv:
 *                         minv = v
 *                     if v > maxv:             # <<<<<<<<<<<<<<
 *                         maxv = v
 *         return (minv, maxv)
 */
            __pyx_t_11 = ((__pyx_v_v > __pyx_v_maxv) != 0);
            if (__pyx_t_11) {

              /* "raypier/core/cfaces.pyx":82
 *                         minv = v
 *                     if v > maxv:
 *                         maxv = v             # <<<<<<<<<<<<<<
 *         return (minv, maxv)
 * 
 */
              __pyx_v_maxv = __pyx_v_v;

              /* "raypier/core/cfaces.pyx":81
 *                     if v < minv:
 *                         minv = v
 *                     if v > maxv:             # <<<<<<<<<<<<<<
 *                         maxv = v
 *         return (minv, maxv)
 */
            }
          }
        }
      }

      /* "raypier/core/cfaces.pyx":75
 *         maxv = self.eval_z_c(x[0],y[0])+0.1
 *         minv = maxv-0.2
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in range(ni):
 *                 for j in range(nj):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "raypier/core/cfaces.pyx":83
 *                     if v > maxv:
 *                         maxv = v
 *         return (minv, maxv)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_minv); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_maxv); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_13);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_r = __pyx_t_14;
  __pyx_t_14 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":67
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_z_extent(self, double[:] x, double[:] y):             # <<<<<<<<<<<<<<
 *         """Samples the face surface z-values over the 2d grid given by the x- and y-
 *            arrays. Returns the max and min values of z"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_z_extent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_x, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":87
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_z_points(self, double[:,:] points):             # <<<<<<<<<<<<<<
 *         cdef:
 *             long i, ni=points.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5eval_z_points(PyObject *__pyx_v_self, PyObject *__pyx_arg_points); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5eval_z_points(PyObject *__pyx_v_self, PyObject *__pyx_arg_points) {
  __Pyx_memviewslice __pyx_v_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_z_points (wrapper)", 0);
  assert(__pyx_arg_points); {
    __pyx_v_points = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_arg_points, PyBUF_WRITABLE); if (unlikely(!__pyx_v_points.memview)) __PYX_ERR(0, 87, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_z_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_4eval_z_points(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_points);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_4eval_z_points(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_points) {
  long __pyx_v_i;
  long __pyx_v_ni;
  PyArrayObject *__pyx_v_aout = 0;
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eval_z_points", 0);

  /* "raypier/core/cfaces.pyx":89
 *     def eval_z_points(self, double[:,:] points):
 *         cdef:
 *             long i, ni=points.shape[0]             # <<<<<<<<<<<<<<
 *             np_.ndarray aout = np.empty((ni,), dtype='d')
 *             double[:] out = aout
 */
  __pyx_v_ni = (__pyx_v_points.shape[0]);

  /* "raypier/core/cfaces.pyx":90
 *         cdef:
 *             long i, ni=points.shape[0]
 *             np_.ndarray aout = np.empty((ni,), dtype='d')             # <<<<<<<<<<<<<<
 *             double[:] out = aout
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_ni); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_v_aout = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/cfaces.pyx":91
 *             long i, ni=points.shape[0]
 *             np_.ndarray aout = np.empty((ni,), dtype='d')
 *             double[:] out = aout             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(((PyObject *)__pyx_v_aout), PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_v_out = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "raypier/core/cfaces.pyx":93
 *             double[:] out = aout
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ###Not using prange here because ZernikeDistortion uses a cache for its calculation.
 *             ###Threading screws this up.
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "raypier/core/cfaces.pyx":96
 *             ###Not using prange here because ZernikeDistortion uses a cache for its calculation.
 *             ###Threading screws this up.
 *             for i in prange(ni):             # <<<<<<<<<<<<<<
 *                 out[i] = self.eval_z_c(points[i,0],points[i,1])
 *         return aout
 */
        __pyx_t_6 = __pyx_v_ni;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_8 = (__pyx_t_6 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_8 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_8; __pyx_t_7++){
                        {
                            __pyx_v_i = (long)(0 + 1 * __pyx_t_7);

                            /* "raypier/core/cfaces.pyx":97
 *             ###Threading screws this up.
 *             for i in prange(ni):
 *                 out[i] = self.eval_z_c(points[i,0],points[i,1])             # <<<<<<<<<<<<<<
 *         return aout
 * 
 */
                            __pyx_t_9 = __pyx_v_i;
                            __pyx_t_10 = 0;
                            __pyx_t_11 = __pyx_v_i;
                            __pyx_t_12 = 1;
                            __pyx_t_13 = __pyx_v_i;
                            *((double *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_13 * __pyx_v_out.strides[0]) )) = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->eval_z_c(__pyx_v_self, (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_points.data + __pyx_t_9 * __pyx_v_points.strides[0]) ) + __pyx_t_10 * __pyx_v_points.strides[1]) ))), (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_points.data + __pyx_t_11 * __pyx_v_points.strides[0]) ) + __pyx_t_12 * __pyx_v_points.strides[1]) ))));
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "raypier/core/cfaces.pyx":93
 *             double[:] out = aout
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ###Not using prange here because ZernikeDistortion uses a cache for its calculation.
 *             ###Threading screws this up.
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "raypier/core/cfaces.pyx":98
 *             for i in prange(ni):
 *                 out[i] = self.eval_z_c(points[i,0],points[i,1])
 *         return aout             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_aout));
  __pyx_r = ((PyObject *)__pyx_v_aout);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":87
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_z_points(self, double[:,:] points):             # <<<<<<<<<<<<<<
 *         cdef:
 *             long i, ni=points.shape[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_z_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_points, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_aout);
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":102
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_implicit_grid(self, double[:] x, double[:] y, double[:] z):             # <<<<<<<<<<<<<<
 *         cdef:
 *             long i,j,k, ni=x.shape[0], nj=y.shape[0], nk=z.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_7eval_implicit_grid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_7eval_implicit_grid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_x = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_z = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_implicit_grid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_implicit_grid", 1, 3, 3, 1); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("eval_implicit_grid", 1, 3, 3, 2); __PYX_ERR(0, 102, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "eval_implicit_grid") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_x.memview)) __PYX_ERR(0, 102, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_y.memview)) __PYX_ERR(0, 102, __pyx_L3_error)
    __pyx_v_z = __Pyx_PyObject_to_MemoryviewSlice_ds_double(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_z.memview)) __PYX_ERR(0, 102, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("eval_implicit_grid", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_implicit_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_6eval_implicit_grid(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_6eval_implicit_grid(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y, __Pyx_memviewslice __pyx_v_z) {
  long __pyx_v_i;
  long __pyx_v_j;
  long __pyx_v_k;
  long __pyx_v_ni;
  long __pyx_v_nj;
  long __pyx_v_nk;
  PyArrayObject *__pyx_v_aout = 0;
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_sign;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  long __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eval_implicit_grid", 0);

  /* "raypier/core/cfaces.pyx":104
 *     def eval_implicit_grid(self, double[:] x, double[:] y, double[:] z):
 *         cdef:
 *             long i,j,k, ni=x.shape[0], nj=y.shape[0], nk=z.shape[0]             # <<<<<<<<<<<<<<
 *             np_.ndarray aout = np.empty((ni,nj,nk), dtype='d')
 *             double[:,:,:] out = aout
 */
  __pyx_v_ni = (__pyx_v_x.shape[0]);
  __pyx_v_nj = (__pyx_v_y.shape[0]);
  __pyx_v_nk = (__pyx_v_z.shape[0]);

  /* "raypier/core/cfaces.pyx":105
 *         cdef:
 *             long i,j,k, ni=x.shape[0], nj=y.shape[0], nk=z.shape[0]
 *             np_.ndarray aout = np.empty((ni,nj,nk), dtype='d')             # <<<<<<<<<<<<<<
 *             double[:,:,:] out = aout
 *             int sign
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_ni); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_nj); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_nk); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_n_u_d) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_v_aout = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":106
 *             long i,j,k, ni=x.shape[0], nj=y.shape[0], nk=z.shape[0]
 *             np_.ndarray aout = np.empty((ni,nj,nk), dtype='d')
 *             double[:,:,:] out = aout             # <<<<<<<<<<<<<<
 *             int sign
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(((PyObject *)__pyx_v_aout), PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_v_out = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "raypier/core/cfaces.pyx":109
 *             int sign
 * 
 *         if self.invert_normals:             # <<<<<<<<<<<<<<
 *             sign = -1
 *         else:
 */
  __pyx_t_7 = (__pyx_v_self->invert_normals != 0);
  if (__pyx_t_7) {

    /* "raypier/core/cfaces.pyx":110
 * 
 *         if self.invert_normals:
 *             sign = -1             # <<<<<<<<<<<<<<
 *         else:
 *             sign = 1
 */
    __pyx_v_sign = -1;

    /* "raypier/core/cfaces.pyx":109
 *             int sign
 * 
 *         if self.invert_normals:             # <<<<<<<<<<<<<<
 *             sign = -1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":112
 *             sign = -1
 *         else:
 *             sign = 1             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  /*else*/ {
    __pyx_v_sign = 1;
  }
  __pyx_L3:;

  /* "raypier/core/cfaces.pyx":114
 *             sign = 1
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in prange(ni):
 *                 for j in range(nj):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "raypier/core/cfaces.pyx":115
 * 
 *         with nogil:
 *             for i in prange(ni):             # <<<<<<<<<<<<<<
 *                 for j in range(nj):
 *                     for k in range(nk):
 */
        __pyx_t_8 = __pyx_v_ni;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_10 = (__pyx_t_8 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_10 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k)
                    #endif /* _OPENMP */
                    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_10; __pyx_t_9++){
                        {
                            __pyx_v_i = (long)(0 + 1 * __pyx_t_9);
                            /* Initialize private variables to invalid values */
                            __pyx_v_j = ((long)0xbad0bad0);
                            __pyx_v_k = ((long)0xbad0bad0);

                            /* "raypier/core/cfaces.pyx":116
 *         with nogil:
 *             for i in prange(ni):
 *                 for j in range(nj):             # <<<<<<<<<<<<<<
 *                     for k in range(nk):
 *                         out[i,j,k] = sign*self.eval_implicit_c(x[i], y[j], z[k])
 */
                            __pyx_t_11 = __pyx_v_nj;
                            __pyx_t_12 = __pyx_t_11;
                            for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
                              __pyx_v_j = __pyx_t_13;

                              /* "raypier/core/cfaces.pyx":117
 *             for i in prange(ni):
 *                 for j in range(nj):
 *                     for k in range(nk):             # <<<<<<<<<<<<<<
 *                         out[i,j,k] = sign*self.eval_implicit_c(x[i], y[j], z[k])
 *         return aout
 */
                              __pyx_t_14 = __pyx_v_nk;
                              __pyx_t_15 = __pyx_t_14;
                              for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
                                __pyx_v_k = __pyx_t_16;

                                /* "raypier/core/cfaces.pyx":118
 *                 for j in range(nj):
 *                     for k in range(nk):
 *                         out[i,j,k] = sign*self.eval_implicit_c(x[i], y[j], z[k])             # <<<<<<<<<<<<<<
 *         return aout
 * 
 */
                                __pyx_t_17 = __pyx_v_i;
                                __pyx_t_18 = __pyx_v_j;
                                __pyx_t_19 = __pyx_v_k;
                                __pyx_t_20 = __pyx_v_i;
                                __pyx_t_21 = __pyx_v_j;
                                __pyx_t_22 = __pyx_v_k;
                                *((double *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_out.data + __pyx_t_20 * __pyx_v_out.strides[0]) ) + __pyx_t_21 * __pyx_v_out.strides[1]) ) + __pyx_t_22 * __pyx_v_out.strides[2]) )) = (__pyx_v_sign * ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->eval_implicit_c(__pyx_v_self, (*((double *) ( /* dim=0 */ (__pyx_v_x.data + __pyx_t_17 * __pyx_v_x.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_y.data + __pyx_t_18 * __pyx_v_y.strides[0]) ))), (*((double *) ( /* dim=0 */ (__pyx_v_z.data + __pyx_t_19 * __pyx_v_z.strides[0]) )))));
                              }
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "raypier/core/cfaces.pyx":114
 *             sign = 1
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in prange(ni):
 *                 for j in range(nj):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "raypier/core/cfaces.pyx":119
 *                     for k in range(nk):
 *                         out[i,j,k] = sign*self.eval_implicit_c(x[i], y[j], z[k])
 *         return aout             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_aout));
  __pyx_r = ((PyObject *)__pyx_v_aout);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":102
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_implicit_grid(self, double[:] x, double[:] y, double[:] z):             # <<<<<<<<<<<<<<
 *         cdef:
 *             long i,j,k, ni=x.shape[0], nj=y.shape[0], nk=z.shape[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_implicit_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_aout);
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_x, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_z, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":123
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_implicit_points(self, double[:,:] points):             # <<<<<<<<<<<<<<
 *         cdef:
 *             long i, ni=points.shape[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_9eval_implicit_points(PyObject *__pyx_v_self, PyObject *__pyx_arg_points); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_9eval_implicit_points(PyObject *__pyx_v_self, PyObject *__pyx_arg_points) {
  __Pyx_memviewslice __pyx_v_points = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_implicit_points (wrapper)", 0);
  assert(__pyx_arg_points); {
    __pyx_v_points = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_arg_points, PyBUF_WRITABLE); if (unlikely(!__pyx_v_points.memview)) __PYX_ERR(0, 123, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_implicit_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_8eval_implicit_points(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_points);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_8eval_implicit_points(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_points) {
  long __pyx_v_i;
  long __pyx_v_ni;
  PyArrayObject *__pyx_v_aout = 0;
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_sign;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("eval_implicit_points", 0);

  /* "raypier/core/cfaces.pyx":125
 *     def eval_implicit_points(self, double[:,:] points):
 *         cdef:
 *             long i, ni=points.shape[0]             # <<<<<<<<<<<<<<
 *             np_.ndarray aout = np.empty((ni,), dtype='d')
 *             double[:] out = aout
 */
  __pyx_v_ni = (__pyx_v_points.shape[0]);

  /* "raypier/core/cfaces.pyx":126
 *         cdef:
 *             long i, ni=points.shape[0]
 *             np_.ndarray aout = np.empty((ni,), dtype='d')             # <<<<<<<<<<<<<<
 *             double[:] out = aout
 *             int sign
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_ni); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_d) < 0) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_v_aout = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "raypier/core/cfaces.pyx":127
 *             long i, ni=points.shape[0]
 *             np_.ndarray aout = np.empty((ni,), dtype='d')
 *             double[:] out = aout             # <<<<<<<<<<<<<<
 *             int sign
 *         if self.invert_normals:
 */
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_ds_double(((PyObject *)__pyx_v_aout), PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_v_out = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "raypier/core/cfaces.pyx":129
 *             double[:] out = aout
 *             int sign
 *         if self.invert_normals:             # <<<<<<<<<<<<<<
 *             sign = -1
 *         else:
 */
  __pyx_t_6 = (__pyx_v_self->invert_normals != 0);
  if (__pyx_t_6) {

    /* "raypier/core/cfaces.pyx":130
 *             int sign
 *         if self.invert_normals:
 *             sign = -1             # <<<<<<<<<<<<<<
 *         else:
 *             sign = 1
 */
    __pyx_v_sign = -1;

    /* "raypier/core/cfaces.pyx":129
 *             double[:] out = aout
 *             int sign
 *         if self.invert_normals:             # <<<<<<<<<<<<<<
 *             sign = -1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":132
 *             sign = -1
 *         else:
 *             sign = 1             # <<<<<<<<<<<<<<
 * 
 *         with nogil:
 */
  /*else*/ {
    __pyx_v_sign = 1;
  }
  __pyx_L3:;

  /* "raypier/core/cfaces.pyx":134
 *             sign = 1
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in prange(ni):
 *                 out[i] = sign*self.eval_implicit_c(points[i,0],points[i,1],points[i,2])
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "raypier/core/cfaces.pyx":135
 * 
 *         with nogil:
 *             for i in prange(ni):             # <<<<<<<<<<<<<<
 *                 out[i] = sign*self.eval_implicit_c(points[i,0],points[i,1],points[i,2])
 *         return aout
 */
        __pyx_t_7 = __pyx_v_ni;
        if ((1 == 0)) abort();
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_9 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_9 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for firstprivate(__pyx_v_i) lastprivate(__pyx_v_i)
                    #endif /* _OPENMP */
                    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_9; __pyx_t_8++){
                        {
                            __pyx_v_i = (long)(0 + 1 * __pyx_t_8);

                            /* "raypier/core/cfaces.pyx":136
 *         with nogil:
 *             for i in prange(ni):
 *                 out[i] = sign*self.eval_implicit_c(points[i,0],points[i,1],points[i,2])             # <<<<<<<<<<<<<<
 *         return aout
 * 
 */
                            __pyx_t_10 = __pyx_v_i;
                            __pyx_t_11 = 0;
                            __pyx_t_12 = __pyx_v_i;
                            __pyx_t_13 = 1;
                            __pyx_t_14 = __pyx_v_i;
                            __pyx_t_15 = 2;
                            __pyx_t_16 = __pyx_v_i;
                            *((double *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_16 * __pyx_v_out.strides[0]) )) = (__pyx_v_sign * ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->eval_implicit_c(__pyx_v_self, (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_points.data + __pyx_t_10 * __pyx_v_points.strides[0]) ) + __pyx_t_11 * __pyx_v_points.strides[1]) ))), (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_points.data + __pyx_t_12 * __pyx_v_points.strides[0]) ) + __pyx_t_13 * __pyx_v_points.strides[1]) ))), (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_points.data + __pyx_t_14 * __pyx_v_points.strides[0]) ) + __pyx_t_15 * __pyx_v_points.strides[1]) )))));
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "raypier/core/cfaces.pyx":134
 *             sign = 1
 * 
 *         with nogil:             # <<<<<<<<<<<<<<
 *             for i in prange(ni):
 *                 out[i] = sign*self.eval_implicit_c(points[i,0],points[i,1],points[i,2])
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L6:;
      }
  }

  /* "raypier/core/cfaces.pyx":137
 *             for i in prange(ni):
 *                 out[i] = sign*self.eval_implicit_c(points[i,0],points[i,1],points[i,2])
 *         return aout             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_aout));
  __pyx_r = ((PyObject *)__pyx_v_aout);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":123
 *     @cython.boundscheck(False)  # Deactivate bounds checking
 *     @cython.wraparound(False)   # Deactivate negative indexing.
 *     def eval_implicit_points(self, double[:,:] points):             # <<<<<<<<<<<<<<
 *         cdef:
 *             long i, ni=points.shape[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.eval_implicit_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_points, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_aout);
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":52
 * cdef class ShapedFace(Face):
 *     cdef:
 *         public Shape shape             # <<<<<<<<<<<<<<
 *         public int invert_normals
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->shape));
  __pyx_r = ((PyObject *)__pyx_v_self->shape);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7raypier_4core_7ctracer_Shape))))) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->shape);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->shape));
  __pyx_v_self->shape = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.shape.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape_4__del__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_5shape_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->shape);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->shape));
  __pyx_v_self->shape = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":53
 *     cdef:
 *         public Shape shape
 *         public int invert_normals             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_14invert_normals___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_14invert_normals___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->invert_normals); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.invert_normals.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_v_self->invert_normals = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.invert_normals.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_10__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10ShapedFace_12__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10ShapedFace_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":145
 *     params = ['diameter', 'offset']
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_plane = kwds.get('z_plane', 0.0)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":146
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_plane = kwds.get('z_plane', 0.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_plane, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_plane = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":145
 *     params = ['diameter', 'offset']
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_plane = kwds.get('z_plane', 0.0)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":148
 *         self.z_plane = kwds.get('z_plane', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_12CircularFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_max_length;
  double __pyx_v_h;
  double __pyx_v_X;
  double __pyx_v_Y;
  double __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":160
 *         """
 *         cdef:
 *             double max_length = sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y, d=self.diameter
 */
  __pyx_v_max_length = __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2);

  /* "raypier/core/cfaces.pyx":161
 *         cdef:
 *             double max_length = sep_(p1, p2)
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)             # <<<<<<<<<<<<<<
 *             double X, Y, d=self.diameter
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_h = ((__pyx_v_self->z_plane - __pyx_v_p1.z) / (__pyx_v_p2.z - __pyx_v_p1.z));

  /* "raypier/core/cfaces.pyx":162
 *             double max_length = sep_(p1, p2)
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y, d=self.diameter             # <<<<<<<<<<<<<<
 *             intersect_t out=NO_INTERSECTION
 * 
 */
  __pyx_t_1 = __pyx_v_self->diameter;
  __pyx_v_d = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":163
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y, d=self.diameter
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         #print "CFACE", p1, p2
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":166
 * 
 *         #print "CFACE", p1, p2
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             #print "H", h
 *             return NO_INTERSECTION
 */
  __pyx_t_3 = ((__pyx_v_h < __pyx_v_self->__pyx_base.tolerance) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_h > 1.0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":168
 *         if (h<self.tolerance) or (h>1.0):
 *             #print "H", h
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         X = p1.x + h*(p2.x-p1.x) - self.offset
 *         Y = p1.y + h*(p2.y-p1.y)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":166
 * 
 *         #print "CFACE", p1, p2
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             #print "H", h
 *             return NO_INTERSECTION
 */
  }

  /* "raypier/core/cfaces.pyx":169
 *             #print "H", h
 *             return NO_INTERSECTION
 *         X = p1.x + h*(p2.x-p1.x) - self.offset             # <<<<<<<<<<<<<<
 *         Y = p1.y + h*(p2.y-p1.y)
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):
 */
  __pyx_v_X = ((__pyx_v_p1.x + (__pyx_v_h * (__pyx_v_p2.x - __pyx_v_p1.x))) - __pyx_v_self->offset);

  /* "raypier/core/cfaces.pyx":170
 *             return NO_INTERSECTION
 *         X = p1.x + h*(p2.x-p1.x) - self.offset
 *         Y = p1.y + h*(p2.y-p1.y)             # <<<<<<<<<<<<<<
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):
 *             #print "X", X, "Y", Y
 */
  __pyx_v_Y = (__pyx_v_p1.y + (__pyx_v_h * (__pyx_v_p2.y - __pyx_v_p1.y)));

  /* "raypier/core/cfaces.pyx":171
 *         X = p1.x + h*(p2.x-p1.x) - self.offset
 *         Y = p1.y + h*(p2.y-p1.y)
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):             # <<<<<<<<<<<<<<
 *             #print "X", X, "Y", Y
 *             return NO_INTERSECTION
 */
  __pyx_t_3 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = ((((__pyx_v_X * __pyx_v_X) + (__pyx_v_Y * __pyx_v_Y)) > ((__pyx_v_d * __pyx_v_d) / 4.0)) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":173
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):
 *             #print "X", X, "Y", Y
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = h * max_length
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":171
 *         X = p1.x + h*(p2.x-p1.x) - self.offset
 *         Y = p1.y + h*(p2.y-p1.y)
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):             # <<<<<<<<<<<<<<
 *             #print "X", X, "Y", Y
 *             return NO_INTERSECTION
 */
  }

  /* "raypier/core/cfaces.pyx":174
 *             #print "X", X, "Y", Y
 *             return NO_INTERSECTION
 *         out.dist = h * max_length             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_h * __pyx_v_max_length);

  /* "raypier/core/cfaces.pyx":175
 *             return NO_INTERSECTION
 *         out.dist = h * max_length
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":148
 *         self.z_plane = kwds.get('z_plane', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":177
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_12CircularFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":182
 *         """
 *         cdef vector_t normal
 *         normal.x=0             # <<<<<<<<<<<<<<
 *         normal.y=0
 *         normal.z=-1
 */
  __pyx_v_normal.x = 0.0;

  /* "raypier/core/cfaces.pyx":183
 *         cdef vector_t normal
 *         normal.x=0
 *         normal.y=0             # <<<<<<<<<<<<<<
 *         normal.z=-1
 *         return normal
 */
  __pyx_v_normal.y = 0.0;

  /* "raypier/core/cfaces.pyx":184
 *         normal.x=0
 *         normal.y=0
 *         normal.z=-1             # <<<<<<<<<<<<<<
 *         return normal
 * 
 */
  __pyx_v_normal.z = -1.0;

  /* "raypier/core/cfaces.pyx":185
 *         normal.y=0
 *         normal.z=-1
 *         return normal             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_normal;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":177
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":141
 * 
 * cdef class CircularFace(Face):
 *     cdef public double diameter, offset, z_plane             # <<<<<<<<<<<<<<
 * 
 *     params = ['diameter', 'offset']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_8diameter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_8diameter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_8diameter___get__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->diameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.diameter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_8diameter_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_v_self->diameter = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.diameter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_6offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_6offset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_6offset___get__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_6offset___get__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_6offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_6offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_6offset_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace_6offset_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_v_self->offset = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.offset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_7z_plane_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_7z_plane_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_7z_plane___get__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_7z_plane___get__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_plane); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.z_plane.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_7z_plane_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12CircularFace_7z_plane_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_7z_plane_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12CircularFace_7z_plane_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_v_self->z_plane = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.z_plane.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12CircularFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12CircularFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12CircularFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CircularFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":192
 *         public double z_height
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":193
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":192
 *         public double z_height
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedPlanarFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":195
 *         self.z_height = kwds.get('z_height', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_max_length;
  double __pyx_v_h;
  double __pyx_v_X;
  double __pyx_v_Y;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":207
 *         """
 *         cdef:
 *             double max_length = sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             double h = (self.z_height-p1.z)/(p2.z-p1.z)
 *             double X, Y
 */
  __pyx_v_max_length = __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2);

  /* "raypier/core/cfaces.pyx":208
 *         cdef:
 *             double max_length = sep_(p1, p2)
 *             double h = (self.z_height-p1.z)/(p2.z-p1.z)             # <<<<<<<<<<<<<<
 *             double X, Y
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_h = ((__pyx_v_self->z_height - __pyx_v_p1.z) / (__pyx_v_p2.z - __pyx_v_p1.z));

  /* "raypier/core/cfaces.pyx":210
 *             double h = (self.z_height-p1.z)/(p2.z-p1.z)
 *             double X, Y
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if (h<self.tolerance) or (h>1.0):
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":212
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_2 = ((__pyx_v_h < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_h > 1.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":213
 * 
 *         if (h<self.tolerance) or (h>1.0):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         X = p1.x + h*(p2.x-p1.x)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":212
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":215
 *             return NO_INTERSECTION
 * 
 *         X = p1.x + h*(p2.x-p1.x)             # <<<<<<<<<<<<<<
 *         Y = p1.y + h*(p2.y-p1.y)
 *         if is_base_ray and not (<Shape>self.shape).point_inside_c(X,Y):
 */
  __pyx_v_X = (__pyx_v_p1.x + (__pyx_v_h * (__pyx_v_p2.x - __pyx_v_p1.x)));

  /* "raypier/core/cfaces.pyx":216
 * 
 *         X = p1.x + h*(p2.x-p1.x)
 *         Y = p1.y + h*(p2.y-p1.y)             # <<<<<<<<<<<<<<
 *         if is_base_ray and not (<Shape>self.shape).point_inside_c(X,Y):
 *             return NO_INTERSECTION
 */
  __pyx_v_Y = (__pyx_v_p1.y + (__pyx_v_h * (__pyx_v_p2.y - __pyx_v_p1.y)));

  /* "raypier/core/cfaces.pyx":217
 *         X = p1.x + h*(p2.x-p1.x)
 *         Y = p1.y + h*(p2.y-p1.y)
 *         if is_base_ray and not (<Shape>self.shape).point_inside_c(X,Y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = h*max_length
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_X, __pyx_v_Y) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":218
 *         Y = p1.y + h*(p2.y-p1.y)
 *         if is_base_ray and not (<Shape>self.shape).point_inside_c(X,Y):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = h*max_length
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":217
 *         X = p1.x + h*(p2.x-p1.x)
 *         Y = p1.y + h*(p2.y-p1.y)
 *         if is_base_ray and not (<Shape>self.shape).point_inside_c(X,Y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = h*max_length
 */
  }

  /* "raypier/core/cfaces.pyx":219
 *         if is_base_ray and not (<Shape>self.shape).point_inside_c(X,Y):
 *             return NO_INTERSECTION
 *         out.dist = h*max_length             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_h * __pyx_v_max_length);

  /* "raypier/core/cfaces.pyx":220
 *             return NO_INTERSECTION
 *         out.dist = h*max_length
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":195
 *         self.z_height = kwds.get('z_height', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":222
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":227
 *         """
 *         cdef vector_t normal
 *         normal.x=0             # <<<<<<<<<<<<<<
 *         normal.y=0
 *         normal.z=1
 */
  __pyx_v_normal.x = 0.0;

  /* "raypier/core/cfaces.pyx":228
 *         cdef vector_t normal
 *         normal.x=0
 *         normal.y=0             # <<<<<<<<<<<<<<
 *         normal.z=1
 *         return normal
 */
  __pyx_v_normal.y = 0.0;

  /* "raypier/core/cfaces.pyx":229
 *         normal.x=0
 *         normal.y=0
 *         normal.z=1             # <<<<<<<<<<<<<<
 *         return normal
 * 
 */
  __pyx_v_normal.z = 1.0;

  /* "raypier/core/cfaces.pyx":230
 *         normal.y=0
 *         normal.z=1
 *         return normal             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_v_normal;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":222
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":232
 *         return normal
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return self.z_height
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":233
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 *         return self.z_height             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 */
  __pyx_r = __pyx_v_self->z_height;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":232
 *         return normal
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return self.z_height
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":235
 *         return self.z_height
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return (z - self.z_height)
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y, double __pyx_v_z) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":236
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 *         return (z - self.z_height)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_z - __pyx_v_self->z_height);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":235
 *         return self.z_height
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return (z - self.z_height)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":190
 * cdef class ShapedPlanarFace(ShapedFace):
 *     cdef:
 *         public double z_height             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedPlanarFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedPlanarFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedPlanarFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_16ShapedPlanarFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedPlanarFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":241
 * cdef class ImplicitBoundedFace(Face):
 *     cdef:
 *         public ImplicitSurface boundary             # <<<<<<<<<<<<<<
 *         public ImplicitSurface target
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary___get__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->boundary));
  __pyx_r = ((PyObject *)__pyx_v_self->boundary);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface))))) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->boundary);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->boundary));
  __pyx_v_self->boundary = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedFace.boundary.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_4__del__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->boundary);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->boundary));
  __pyx_v_self->boundary = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":242
 *     cdef:
 *         public ImplicitSurface boundary
 *         public ImplicitSurface target             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target___get__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->target));
  __pyx_r = ((PyObject *)__pyx_v_self->target);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface))))) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->target);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->target));
  __pyx_v_self->target = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedFace.target.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_4__del__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->target);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->target));
  __pyx_v_self->target = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace___reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace___reduce_cython__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.boundary, self.count, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.target, self.tolerance)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->__pyx_base.count); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short(__pyx_v_self->__pyx_base.invert_normal); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.max_length); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_self->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.tolerance); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(10); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->boundary));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->boundary));
  PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_self->boundary));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.material));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.material));
  PyTuple_SET_ITEM(__pyx_t_7, 4, ((PyObject *)__pyx_v_self->__pyx_base.material));
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 6, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.owner);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.owner);
  PyTuple_SET_ITEM(__pyx_t_7, 7, __pyx_v_self->__pyx_base.owner);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->target));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->target));
  PyTuple_SET_ITEM(__pyx_t_7, 8, ((PyObject *)__pyx_v_self->target));
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 9, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.boundary, self.count, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.target, self.tolerance)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_7 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v__dict = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "(tree fragment)":7
 *     state = (self.boundary, self.count, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.target, self.tolerance)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_8 = (__pyx_v__dict != Py_None);
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v__dict);
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.boundary is not None or self.material is not None or self.owner is not None or self.target is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.boundary, self.count, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.target, self.tolerance)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.boundary is not None or self.material is not None or self.owner is not None or self.target is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, None), state
 */
  /*else*/ {
    __pyx_t_8 = (((PyObject *)__pyx_v_self->boundary) != Py_None);
    __pyx_t_10 = (__pyx_t_8 != 0);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_10 = (((PyObject *)__pyx_v_self->__pyx_base.material) != Py_None);
    __pyx_t_8 = (__pyx_t_10 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_9 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_self->__pyx_base.owner != Py_None);
    __pyx_t_10 = (__pyx_t_8 != 0);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_9 = __pyx_t_10;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_10 = (((PyObject *)__pyx_v_self->target) != Py_None);
    __pyx_t_8 = (__pyx_t_10 != 0);
    __pyx_t_9 = __pyx_t_8;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_9;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.boundary is not None or self.material is not None or self.owner is not None or self.target is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, None), state
 *     else:
 */
  __pyx_t_9 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_9) {

    /* "(tree fragment)":13
 *         use_setstate = self.boundary is not None or self.material is not None or self.owner is not None or self.target is not None
 *     if use_setstate:
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_ImplicitBoundedFa); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_232498138);
    __Pyx_GIVEREF(__pyx_int_232498138);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_232498138);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_7, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.boundary is not None or self.material is not None or self.owner is not None or self.target is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, None), state
 *     else:
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImplicitBoundedFace__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_ImplicitBoundedFa); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_232498138);
    __Pyx_GIVEREF(__pyx_int_232498138);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_232498138);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_state);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImplicitBoundedFace__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_2__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ImplicitBoundedFace_2__setstate_cython__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_ImplicitBoundedFace__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7raypier_4core_6cfaces___pyx_unpickle_ImplicitBoundedFace__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_ImplicitBoundedFace, (type(self), 0xddba3da, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_ImplicitBoundedFace__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":250
 *         vector_t _normal
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         target = kwds.get('target', None)
 *         from raypier.core.cimplicit_surfs import Plane, NullSurface
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_target = NULL;
  PyObject *__pyx_v_Plane = NULL;
  PyObject *__pyx_v_NullSurface = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":251
 * 
 *     def __cinit__(self, **kwds):
 *         target = kwds.get('target', None)             # <<<<<<<<<<<<<<
 *         from raypier.core.cimplicit_surfs import Plane, NullSurface
 *         if target is None:
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_target, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_target = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":252
 *     def __cinit__(self, **kwds):
 *         target = kwds.get('target', None)
 *         from raypier.core.cimplicit_surfs import Plane, NullSurface             # <<<<<<<<<<<<<<
 *         if target is None:
 *             target = Plane()
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Plane);
  __Pyx_GIVEREF(__pyx_n_s_Plane);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Plane);
  __Pyx_INCREF(__pyx_n_s_NullSurface);
  __Pyx_GIVEREF(__pyx_n_s_NullSurface);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_NullSurface);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_raypier_core_cimplicit_surfs, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Plane); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_Plane = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NullSurface); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_NullSurface = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "raypier/core/cfaces.pyx":253
 *         target = kwds.get('target', None)
 *         from raypier.core.cimplicit_surfs import Plane, NullSurface
 *         if target is None:             # <<<<<<<<<<<<<<
 *             target = Plane()
 *         if 'origin' in kwds:
 */
  __pyx_t_3 = (__pyx_v_target == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "raypier/core/cfaces.pyx":254
 *         from raypier.core.cimplicit_surfs import Plane, NullSurface
 *         if target is None:
 *             target = Plane()             # <<<<<<<<<<<<<<
 *         if 'origin' in kwds:
 *             target.origin = kwds['origin']
 */
    __Pyx_INCREF(__pyx_v_Plane);
    __pyx_t_1 = __pyx_v_Plane; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_target, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "raypier/core/cfaces.pyx":253
 *         target = kwds.get('target', None)
 *         from raypier.core.cimplicit_surfs import Plane, NullSurface
 *         if target is None:             # <<<<<<<<<<<<<<
 *             target = Plane()
 *         if 'origin' in kwds:
 */
  }

  /* "raypier/core/cfaces.pyx":255
 *         if target is None:
 *             target = Plane()
 *         if 'origin' in kwds:             # <<<<<<<<<<<<<<
 *             target.origin = kwds['origin']
 *         if 'normal' in kwds:
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_origin, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "raypier/core/cfaces.pyx":256
 *             target = Plane()
 *         if 'origin' in kwds:
 *             target.origin = kwds['origin']             # <<<<<<<<<<<<<<
 *         if 'normal' in kwds:
 *             target.normal = kwds['normal']
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_u_origin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_target, __pyx_n_s_origin, __pyx_t_2) < 0) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "raypier/core/cfaces.pyx":255
 *         if target is None:
 *             target = Plane()
 *         if 'origin' in kwds:             # <<<<<<<<<<<<<<
 *             target.origin = kwds['origin']
 *         if 'normal' in kwds:
 */
  }

  /* "raypier/core/cfaces.pyx":257
 *         if 'origin' in kwds:
 *             target.origin = kwds['origin']
 *         if 'normal' in kwds:             # <<<<<<<<<<<<<<
 *             target.normal = kwds['normal']
 *         self.target = target
 */
  __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_normal, __pyx_v_kwds, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "raypier/core/cfaces.pyx":258
 *             target.origin = kwds['origin']
 *         if 'normal' in kwds:
 *             target.normal = kwds['normal']             # <<<<<<<<<<<<<<
 *         self.target = target
 *         self.boundary = kwds.get('boundary', NullSurface())
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kwds, __pyx_n_u_normal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_target, __pyx_n_s_normal, __pyx_t_2) < 0) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "raypier/core/cfaces.pyx":257
 *         if 'origin' in kwds:
 *             target.origin = kwds['origin']
 *         if 'normal' in kwds:             # <<<<<<<<<<<<<<
 *             target.normal = kwds['normal']
 *         self.target = target
 */
  }

  /* "raypier/core/cfaces.pyx":259
 *         if 'normal' in kwds:
 *             target.normal = kwds['normal']
 *         self.target = target             # <<<<<<<<<<<<<<
 *         self.boundary = kwds.get('boundary', NullSurface())
 * 
 */
  if (!(likely(((__pyx_v_target) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_target, __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface))))) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_target;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.target);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.target));
  __pyx_v_self->__pyx_base.target = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/cfaces.pyx":260
 *             target.normal = kwds['normal']
 *         self.target = target
 *         self.boundary = kwds.get('boundary', NullSurface())             # <<<<<<<<<<<<<<
 * 
 *     def update(self):
 */
  __Pyx_INCREF(__pyx_v_NullSurface);
  __pyx_t_1 = __pyx_v_NullSurface; __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_boundary, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface))))) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.boundary);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.boundary));
  __pyx_v_self->__pyx_base.boundary = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":250
 *         vector_t _normal
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         target = kwds.get('target', None)
 *         from raypier.core.cimplicit_surfs import Plane, NullSurface
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedPlanarFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_target);
  __Pyx_XDECREF(__pyx_v_Plane);
  __Pyx_XDECREF(__pyx_v_NullSurface);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":262
 *         self.boundary = kwds.get('boundary', NullSurface())
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         super().update()
 *         n = self.target.normal
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_3update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_3update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_2update(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_2update(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "raypier/core/cfaces.pyx":263
 * 
 *     def update(self):
 *         super().update()             # <<<<<<<<<<<<<<
 *         n = self.target.normal
 *         self._normal.x = n[0]
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":264
 *     def update(self):
 *         super().update()
 *         n = self.target.normal             # <<<<<<<<<<<<<<
 *         self._normal.x = n[0]
 *         self._normal.y = n[1]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.target), __pyx_n_s_normal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_n = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":265
 *         super().update()
 *         n = self.target.normal
 *         self._normal.x = n[0]             # <<<<<<<<<<<<<<
 *         self._normal.y = n[1]
 *         self._normal.z = n[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_n, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_normal.x = __pyx_t_4;

  /* "raypier/core/cfaces.pyx":266
 *         n = self.target.normal
 *         self._normal.x = n[0]
 *         self._normal.y = n[1]             # <<<<<<<<<<<<<<
 *         self._normal.z = n[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_n, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_normal.y = __pyx_t_4;

  /* "raypier/core/cfaces.pyx":267
 *         self._normal.x = n[0]
 *         self._normal.y = n[1]
 *         self._normal.z = n[2]             # <<<<<<<<<<<<<<
 * 
 *         o = self.target.origin
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_n, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_normal.z = __pyx_t_4;

  /* "raypier/core/cfaces.pyx":269
 *         self._normal.z = n[2]
 * 
 *         o = self.target.origin             # <<<<<<<<<<<<<<
 *         self._origin.x = o[0]
 *         self._origin.y = o[1]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base.target), __pyx_n_s_origin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":270
 * 
 *         o = self.target.origin
 *         self._origin.x = o[0]             # <<<<<<<<<<<<<<
 *         self._origin.y = o[1]
 *         self._origin.z = o[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_o, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_origin.x = __pyx_t_4;

  /* "raypier/core/cfaces.pyx":271
 *         o = self.target.origin
 *         self._origin.x = o[0]
 *         self._origin.y = o[1]             # <<<<<<<<<<<<<<
 *         self._origin.z = o[2]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_o, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_origin.y = __pyx_t_4;

  /* "raypier/core/cfaces.pyx":272
 *         self._origin.x = o[0]
 *         self._origin.y = o[1]
 *         self._origin.z = o[2]             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_o, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_origin.z = __pyx_t_4;

  /* "raypier/core/cfaces.pyx":262
 *         self.boundary = kwds.get('boundary', NullSurface())
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         super().update()
 *         n = self.target.normal
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedPlanarFace.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":274
 *         self._origin.z = o[2]
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_origin;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_dp;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_po;
  double __pyx_v_h;
  double __pyx_v_max_length;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":286
 *         """
 *         cdef:
 *             vector_t normal=self._normal             # <<<<<<<<<<<<<<
 *             vector_t origin=self._origin
 *             vector_t dp = subvv_(p2, p1)
 */
  __pyx_t_1 = __pyx_v_self->_normal;
  __pyx_v_normal = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":287
 *         cdef:
 *             vector_t normal=self._normal
 *             vector_t origin=self._origin             # <<<<<<<<<<<<<<
 *             vector_t dp = subvv_(p2, p1)
 *             vector_t po = subvv_(origin, p1)
 */
  __pyx_t_1 = __pyx_v_self->_origin;
  __pyx_v_origin = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":288
 *             vector_t normal=self._normal
 *             vector_t origin=self._origin
 *             vector_t dp = subvv_(p2, p1)             # <<<<<<<<<<<<<<
 *             vector_t po = subvv_(origin, p1)
 *             double h = dotprod_(po, normal) / dotprod_(dp, normal)
 */
  __pyx_v_dp = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":289
 *             vector_t origin=self._origin
 *             vector_t dp = subvv_(p2, p1)
 *             vector_t po = subvv_(origin, p1)             # <<<<<<<<<<<<<<
 *             double h = dotprod_(po, normal) / dotprod_(dp, normal)
 *             double max_length = mag_(dp)
 */
  __pyx_v_po = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_origin, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":290
 *             vector_t dp = subvv_(p2, p1)
 *             vector_t po = subvv_(origin, p1)
 *             double h = dotprod_(po, normal) / dotprod_(dp, normal)             # <<<<<<<<<<<<<<
 *             double max_length = mag_(dp)
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_h = (__pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_po, __pyx_v_normal) / __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_dp, __pyx_v_normal));

  /* "raypier/core/cfaces.pyx":291
 *             vector_t po = subvv_(origin, p1)
 *             double h = dotprod_(po, normal) / dotprod_(dp, normal)
 *             double max_length = mag_(dp)             # <<<<<<<<<<<<<<
 *             intersect_t out=NO_INTERSECTION
 * 
 */
  __pyx_v_max_length = __pyx_f_7raypier_4core_7ctracer_mag_(__pyx_v_dp);

  /* "raypier/core/cfaces.pyx":292
 *             double h = dotprod_(po, normal) / dotprod_(dp, normal)
 *             double max_length = mag_(dp)
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if (h<self.tolerance) or (h>1.0):
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":294
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_3 = ((__pyx_v_h < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_h > 1.0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":295
 * 
 *         if (h<self.tolerance) or (h>1.0):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         po = addvv_(p1, multvs_(dp, h))
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":294
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":297
 *             return NO_INTERSECTION
 * 
 *         po = addvv_(p1, multvs_(dp, h))             # <<<<<<<<<<<<<<
 *         if is_base_ray and (<ImplicitSurface>self.boundary).evaluate_c(po) > 0.0:
 *             return NO_INTERSECTION
 */
  __pyx_v_po = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_dp, __pyx_v_h));

  /* "raypier/core/cfaces.pyx":298
 * 
 *         po = addvv_(p1, multvs_(dp, h))
 *         if is_base_ray and (<ImplicitSurface>self.boundary).evaluate_c(po) > 0.0:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = h*max_length
 */
  __pyx_t_3 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = ((((struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface *)((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_v_self->__pyx_base.boundary)->__pyx_vtab)->evaluate_c(((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_v_self->__pyx_base.boundary), __pyx_v_po) > 0.0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":299
 *         po = addvv_(p1, multvs_(dp, h))
 *         if is_base_ray and (<ImplicitSurface>self.boundary).evaluate_c(po) > 0.0:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = h*max_length
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":298
 * 
 *         po = addvv_(p1, multvs_(dp, h))
 *         if is_base_ray and (<ImplicitSurface>self.boundary).evaluate_c(po) > 0.0:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = h*max_length
 */
  }

  /* "raypier/core/cfaces.pyx":300
 *         if is_base_ray and (<ImplicitSurface>self.boundary).evaluate_c(po) > 0.0:
 *             return NO_INTERSECTION
 *         out.dist = h*max_length             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_h * __pyx_v_max_length);

  /* "raypier/core/cfaces.pyx":301
 *             return NO_INTERSECTION
 *         out.dist = h*max_length
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":274
 *         self._origin.z = o[2]
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":303
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         return self._normal
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":304
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 *         return self._normal             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_self->_normal;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":303
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         return self._normal
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_4__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedPlanarFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_6__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ImplicitBoundedPlanarFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":312
 *     params = ['diameter']
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.g_x = kwds.get('g_x', 0.0)
 *         self.g_y = kwds.get('g_y', 0.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":313
 * 
 *     def __cinit__(self, **kwds):
 *         self.g_x = kwds.get('g_x', 0.0)             # <<<<<<<<<<<<<<
 *         self.g_y = kwds.get('g_y', 0.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_g_x, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->g_x = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":314
 *     def __cinit__(self, **kwds):
 *         self.g_x = kwds.get('g_x', 0.0)
 *         self.g_y = kwds.get('g_y', 0.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_g_y, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->g_y = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":312
 *     params = ['diameter']
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.g_x = kwds.get('g_x', 0.0)
 *         self.g_y = kwds.get('g_y', 0.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":316
 *         self.g_y = kwds.get('g_y', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double max_length = sep_(p1, p2)
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_18ElipticalPlaneFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_max_length;
  double __pyx_v_h;
  double __pyx_v_X;
  double __pyx_v_Y;
  CYTHON_UNUSED double __pyx_v_Z;
  double __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":318
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 *         cdef:
 *             double max_length = sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             double h = (self.g_x*p1.x + self.g_y*p1.y - p1.z) / \
 *                         ((p2.z-p1.z) - self.g_x*(p2.x-p1.x) - self.g_y*(p2.y-p1.y))
 */
  __pyx_v_max_length = __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2);

  /* "raypier/core/cfaces.pyx":319
 *         cdef:
 *             double max_length = sep_(p1, p2)
 *             double h = (self.g_x*p1.x + self.g_y*p1.y - p1.z) / \             # <<<<<<<<<<<<<<
 *                         ((p2.z-p1.z) - self.g_x*(p2.x-p1.x) - self.g_y*(p2.y-p1.y))
 *             double X,Y,Z, d=self.diameter
 */
  __pyx_v_h = ((((__pyx_v_self->g_x * __pyx_v_p1.x) + (__pyx_v_self->g_y * __pyx_v_p1.y)) - __pyx_v_p1.z) / (((__pyx_v_p2.z - __pyx_v_p1.z) - (__pyx_v_self->g_x * (__pyx_v_p2.x - __pyx_v_p1.x))) - (__pyx_v_self->g_y * (__pyx_v_p2.y - __pyx_v_p1.y))));

  /* "raypier/core/cfaces.pyx":321
 *             double h = (self.g_x*p1.x + self.g_y*p1.y - p1.z) / \
 *                         ((p2.z-p1.z) - self.g_x*(p2.x-p1.x) - self.g_y*(p2.y-p1.y))
 *             double X,Y,Z, d=self.diameter             # <<<<<<<<<<<<<<
 *             intersect_t out=NO_INTERSECTION
 * 
 */
  __pyx_t_1 = __pyx_v_self->diameter;
  __pyx_v_d = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":322
 *                         ((p2.z-p1.z) - self.g_x*(p2.x-p1.x) - self.g_y*(p2.y-p1.y))
 *             double X,Y,Z, d=self.diameter
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if (h<self.tolerance) or (h>1.0):
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":324
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_3 = ((__pyx_v_h < __pyx_v_self->__pyx_base.tolerance) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_h > 1.0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":325
 * 
 *         if (h<self.tolerance) or (h>1.0):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         X = p1.x + h*(p2.x-p1.x)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":324
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":327
 *             return NO_INTERSECTION
 * 
 *         X = p1.x + h*(p2.x-p1.x)             # <<<<<<<<<<<<<<
 *         Y = p1.y + h*(p2.y-p1.y)
 *         Z = p1.z + h*(p2.z-p1.z)
 */
  __pyx_v_X = (__pyx_v_p1.x + (__pyx_v_h * (__pyx_v_p2.x - __pyx_v_p1.x)));

  /* "raypier/core/cfaces.pyx":328
 * 
 *         X = p1.x + h*(p2.x-p1.x)
 *         Y = p1.y + h*(p2.y-p1.y)             # <<<<<<<<<<<<<<
 *         Z = p1.z + h*(p2.z-p1.z)
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):
 */
  __pyx_v_Y = (__pyx_v_p1.y + (__pyx_v_h * (__pyx_v_p2.y - __pyx_v_p1.y)));

  /* "raypier/core/cfaces.pyx":329
 *         X = p1.x + h*(p2.x-p1.x)
 *         Y = p1.y + h*(p2.y-p1.y)
 *         Z = p1.z + h*(p2.z-p1.z)             # <<<<<<<<<<<<<<
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):
 *             #print "X", X, "Y", Y
 */
  __pyx_v_Z = (__pyx_v_p1.z + (__pyx_v_h * (__pyx_v_p2.z - __pyx_v_p1.z)));

  /* "raypier/core/cfaces.pyx":330
 *         Y = p1.y + h*(p2.y-p1.y)
 *         Z = p1.z + h*(p2.z-p1.z)
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):             # <<<<<<<<<<<<<<
 *             #print "X", X, "Y", Y
 *             return NO_INTERSECTION
 */
  __pyx_t_3 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = ((((__pyx_v_X * __pyx_v_X) + (__pyx_v_Y * __pyx_v_Y)) > ((__pyx_v_d * __pyx_v_d) / 4.0)) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":332
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):
 *             #print "X", X, "Y", Y
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         out.dist = h * max_length
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":330
 *         Y = p1.y + h*(p2.y-p1.y)
 *         Z = p1.z + h*(p2.z-p1.z)
 *         if is_base_ray and (X*X + Y*Y) > (d*d/4):             # <<<<<<<<<<<<<<
 *             #print "X", X, "Y", Y
 *             return NO_INTERSECTION
 */
  }

  /* "raypier/core/cfaces.pyx":334
 *             return NO_INTERSECTION
 * 
 *         out.dist = h * max_length             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_h * __pyx_v_max_length);

  /* "raypier/core/cfaces.pyx":335
 * 
 *         out.dist = h * max_length
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":316
 *         self.g_y = kwds.get('g_y', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double max_length = sep_(p1, p2)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":337
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_18ElipticalPlaneFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":342
 *         """
 *         cdef vector_t normal
 *         normal.x=self.g_x             # <<<<<<<<<<<<<<
 *         normal.y=self.g_y
 *         normal.z=-1
 */
  __pyx_t_1 = __pyx_v_self->g_x;
  __pyx_v_normal.x = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":343
 *         cdef vector_t normal
 *         normal.x=self.g_x
 *         normal.y=self.g_y             # <<<<<<<<<<<<<<
 *         normal.z=-1
 *         return norm_(normal)
 */
  __pyx_t_1 = __pyx_v_self->g_y;
  __pyx_v_normal.y = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":344
 *         normal.x=self.g_x
 *         normal.y=self.g_y
 *         normal.z=-1             # <<<<<<<<<<<<<<
 *         return norm_(normal)
 * 
 */
  __pyx_v_normal.z = -1.0;

  /* "raypier/core/cfaces.pyx":345
 *         normal.y=self.g_y
 *         normal.z=-1
 *         return norm_(normal)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_normal);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":337
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":308
 * 
 * cdef class ElipticalPlaneFace(Face):
 *     cdef public double g_x, g_y, diameter             # <<<<<<<<<<<<<<
 * 
 *     params = ['diameter']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x___get__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->g_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.g_x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_v_self->g_x = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.g_x.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y___get__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->g_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.g_y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_v_self->g_y = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.g_y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->diameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.diameter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
  __pyx_v_self->diameter = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.diameter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ElipticalPlaneFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ElipticalPlaneFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":353
 *     params = ['length', 'width', 'offset']
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_plane = kwds.get('z_plane', 0.0)
 *         self.width = kwds.get("width", 2.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":354
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_plane = kwds.get('z_plane', 0.0)             # <<<<<<<<<<<<<<
 *         self.width = kwds.get("width", 2.0)
 *         self.length = kwds.get("length", 5.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_plane, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_plane = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":355
 *     def __cinit__(self, **kwds):
 *         self.z_plane = kwds.get('z_plane', 0.0)
 *         self.width = kwds.get("width", 2.0)             # <<<<<<<<<<<<<<
 *         self.length = kwds.get("length", 5.0)
 *         self.offset = kwds.get("offset", 0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_width, __pyx_float_2_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->width = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":356
 *         self.z_plane = kwds.get('z_plane', 0.0)
 *         self.width = kwds.get("width", 2.0)
 *         self.length = kwds.get("length", 5.0)             # <<<<<<<<<<<<<<
 *         self.offset = kwds.get("offset", 0.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_length, __pyx_float_5_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->length = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":357
 *         self.width = kwds.get("width", 2.0)
 *         self.length = kwds.get("length", 5.0)
 *         self.offset = kwds.get("offset", 0.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_offset, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->offset = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":353
 *     params = ['length', 'width', 'offset']
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_plane = kwds.get('z_plane', 0.0)
 *         self.width = kwds.get("width", 2.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":359
 *         self.offset = kwds.get("offset", 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_15RectangularFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_max_length;
  double __pyx_v_h;
  double __pyx_v_X;
  double __pyx_v_Y;
  double __pyx_v_lngth;
  double __pyx_v_wdth;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":373
 *         """
 *         cdef:
 *             double max_length = sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y, lngth=self.length, wdth = self.width
 */
  __pyx_v_max_length = __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2);

  /* "raypier/core/cfaces.pyx":374
 *         cdef:
 *             double max_length = sep_(p1, p2)
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)             # <<<<<<<<<<<<<<
 *             double X, Y, lngth=self.length, wdth = self.width
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_h = ((__pyx_v_self->z_plane - __pyx_v_p1.z) / (__pyx_v_p2.z - __pyx_v_p1.z));

  /* "raypier/core/cfaces.pyx":375
 *             double max_length = sep_(p1, p2)
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y, lngth=self.length, wdth = self.width             # <<<<<<<<<<<<<<
 *             intersect_t out=NO_INTERSECTION
 * 
 */
  __pyx_t_1 = __pyx_v_self->length;
  __pyx_v_lngth = __pyx_t_1;
  __pyx_t_1 = __pyx_v_self->width;
  __pyx_v_wdth = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":376
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y, lngth=self.length, wdth = self.width
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if (h<self.tolerance) or (h>1.0):
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":378
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_3 = ((__pyx_v_h < __pyx_v_self->__pyx_base.tolerance) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_h > 1.0) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":379
 * 
 *         if (h<self.tolerance) or (h>1.0):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":378
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":381
 *             return NO_INTERSECTION
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             X = p1.x + h*(p2.x-p1.x) - self.offset
 *             Y = p1.y + h*(p2.y-p1.y)
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":382
 * 
 *         if is_base_ray:
 *             X = p1.x + h*(p2.x-p1.x) - self.offset             # <<<<<<<<<<<<<<
 *             Y = p1.y + h*(p2.y-p1.y)
 * 
 */
    __pyx_v_X = ((__pyx_v_p1.x + (__pyx_v_h * (__pyx_v_p2.x - __pyx_v_p1.x))) - __pyx_v_self->offset);

    /* "raypier/core/cfaces.pyx":383
 *         if is_base_ray:
 *             X = p1.x + h*(p2.x-p1.x) - self.offset
 *             Y = p1.y + h*(p2.y-p1.y)             # <<<<<<<<<<<<<<
 * 
 *             #if x or y displacement is greater than length or width of rectangle, no intersect
 */
    __pyx_v_Y = (__pyx_v_p1.y + (__pyx_v_h * (__pyx_v_p2.y - __pyx_v_p1.y)));

    /* "raypier/core/cfaces.pyx":386
 * 
 *             #if x or y displacement is greater than length or width of rectangle, no intersect
 *             if X*X > lngth*lngth/4:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             if Y*Y > wdth*wdth/4:
 */
    __pyx_t_2 = (((__pyx_v_X * __pyx_v_X) > ((__pyx_v_lngth * __pyx_v_lngth) / 4.0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":387
 *             #if x or y displacement is greater than length or width of rectangle, no intersect
 *             if X*X > lngth*lngth/4:
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *             if Y*Y > wdth*wdth/4:
 *                 return NO_INTERSECTION
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":386
 * 
 *             #if x or y displacement is greater than length or width of rectangle, no intersect
 *             if X*X > lngth*lngth/4:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             if Y*Y > wdth*wdth/4:
 */
    }

    /* "raypier/core/cfaces.pyx":388
 *             if X*X > lngth*lngth/4:
 *                 return NO_INTERSECTION
 *             if Y*Y > wdth*wdth/4:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *         out.dist = h * max_length
 */
    __pyx_t_2 = (((__pyx_v_Y * __pyx_v_Y) > ((__pyx_v_wdth * __pyx_v_wdth) / 4.0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":389
 *                 return NO_INTERSECTION
 *             if Y*Y > wdth*wdth/4:
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = h * max_length
 *         return out
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":388
 *             if X*X > lngth*lngth/4:
 *                 return NO_INTERSECTION
 *             if Y*Y > wdth*wdth/4:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *         out.dist = h * max_length
 */
    }

    /* "raypier/core/cfaces.pyx":381
 *             return NO_INTERSECTION
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             X = p1.x + h*(p2.x-p1.x) - self.offset
 *             Y = p1.y + h*(p2.y-p1.y)
 */
  }

  /* "raypier/core/cfaces.pyx":390
 *             if Y*Y > wdth*wdth/4:
 *                 return NO_INTERSECTION
 *         out.dist = h * max_length             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_h * __pyx_v_max_length);

  /* "raypier/core/cfaces.pyx":391
 *                 return NO_INTERSECTION
 *         out.dist = h * max_length
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":359
 *         self.offset = kwds.get("offset", 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":393
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_15RectangularFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":398
 *         """
 *         cdef vector_t normal
 *         normal.x=0             # <<<<<<<<<<<<<<
 *         normal.y=0
 *         normal.z=-1
 */
  __pyx_v_normal.x = 0.0;

  /* "raypier/core/cfaces.pyx":399
 *         cdef vector_t normal
 *         normal.x=0
 *         normal.y=0             # <<<<<<<<<<<<<<
 *         normal.z=-1
 *         return normal
 */
  __pyx_v_normal.y = 0.0;

  /* "raypier/core/cfaces.pyx":400
 *         normal.x=0
 *         normal.y=0
 *         normal.z=-1             # <<<<<<<<<<<<<<
 *         return normal
 * 
 */
  __pyx_v_normal.z = -1.0;

  /* "raypier/core/cfaces.pyx":401
 *         normal.y=0
 *         normal.z=-1
 *         return normal             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_normal;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":393
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":349
 * 
 * cdef class RectangularFace(Face):
 *     cdef public double length, width, offset, z_plane             # <<<<<<<<<<<<<<
 * 
 *     params = ['length', 'width', 'offset']
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6length_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6length_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6length___get__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6length___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.length.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6length_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6length_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6length_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_self->length = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.length.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_5width___get__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_5width___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->width); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_5width_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_5width_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_self->width = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6offset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6offset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6offset___get__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6offset___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.offset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6offset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6offset_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_6offset_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_self->offset = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.offset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_7z_plane_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_7z_plane_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_7z_plane___get__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_7z_plane___get__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_plane); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.z_plane.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_7z_plane_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_7z_plane_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_7z_plane_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_7z_plane_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_self->z_plane = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.z_plane.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15RectangularFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15RectangularFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.RectangularFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":411
 *     params = ['diameter',]
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.curvature = kwds.get('curvature', 25.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":412
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 *         self.curvature = kwds.get('curvature', 25.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":413
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.curvature = kwds.get('curvature', 25.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_curvature, __pyx_float_25_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->curvature = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":411
 *     params = ['diameter',]
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.curvature = kwds.get('curvature', 25.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":415
 *         self.curvature = kwds.get('curvature', 25.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_13SphericalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_D;
  double __pyx_v_cz;
  double __pyx_v_a1;
  double __pyx_v_a2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_s;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":431
 *             double A,B,C,D, cz, a1, a2
 *             vector_t s, d, pt1, pt2
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         s = subvv_(p2, r)
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":433
 *             intersect_t out=NO_INTERSECTION
 * 
 *         s = subvv_(p2, r)             # <<<<<<<<<<<<<<
 *         cz = self.z_height - self.curvature
 *         d = r
 */
  __pyx_v_s = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_r);

  /* "raypier/core/cfaces.pyx":434
 * 
 *         s = subvv_(p2, r)
 *         cz = self.z_height - self.curvature             # <<<<<<<<<<<<<<
 *         d = r
 *         d.z -= cz
 */
  __pyx_v_cz = (__pyx_v_self->z_height - __pyx_v_self->curvature);

  /* "raypier/core/cfaces.pyx":435
 *         s = subvv_(p2, r)
 *         cz = self.z_height - self.curvature
 *         d = r             # <<<<<<<<<<<<<<
 *         d.z -= cz
 * 
 */
  __pyx_v_d = __pyx_v_r;

  /* "raypier/core/cfaces.pyx":436
 *         cz = self.z_height - self.curvature
 *         d = r
 *         d.z -= cz             # <<<<<<<<<<<<<<
 * 
 *         A = mag_sq_(s)
 */
  __pyx_v_d.z = (__pyx_v_d.z - __pyx_v_cz);

  /* "raypier/core/cfaces.pyx":438
 *         d.z -= cz
 * 
 *         A = mag_sq_(s)             # <<<<<<<<<<<<<<
 *         B = 2*dotprod_(s,d)
 *         C = mag_sq_(d) - self.curvature**2
 */
  __pyx_v_A = __pyx_f_7raypier_4core_7ctracer_mag_sq_(__pyx_v_s);

  /* "raypier/core/cfaces.pyx":439
 * 
 *         A = mag_sq_(s)
 *         B = 2*dotprod_(s,d)             # <<<<<<<<<<<<<<
 *         C = mag_sq_(d) - self.curvature**2
 *         D = B*B - 4*A*C
 */
  __pyx_v_B = (2.0 * __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_s, __pyx_v_d));

  /* "raypier/core/cfaces.pyx":440
 *         A = mag_sq_(s)
 *         B = 2*dotprod_(s,d)
 *         C = mag_sq_(d) - self.curvature**2             # <<<<<<<<<<<<<<
 *         D = B*B - 4*A*C
 * 
 */
  __pyx_v_C = (__pyx_f_7raypier_4core_7ctracer_mag_sq_(__pyx_v_d) - pow(__pyx_v_self->curvature, 2.0));

  /* "raypier/core/cfaces.pyx":441
 *         B = 2*dotprod_(s,d)
 *         C = mag_sq_(d) - self.curvature**2
 *         D = B*B - 4*A*C             # <<<<<<<<<<<<<<
 * 
 *         if D < 0: #no intersection with sphere
 */
  __pyx_v_D = ((__pyx_v_B * __pyx_v_B) - ((4.0 * __pyx_v_A) * __pyx_v_C));

  /* "raypier/core/cfaces.pyx":443
 *         D = B*B - 4*A*C
 * 
 *         if D < 0: #no intersection with sphere             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_1 = ((__pyx_v_D < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":444
 * 
 *         if D < 0: #no intersection with sphere
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         D = sqrt(D)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":443
 *         D = B*B - 4*A*C
 * 
 *         if D < 0: #no intersection with sphere             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":446
 *             return NO_INTERSECTION
 * 
 *         D = sqrt(D)             # <<<<<<<<<<<<<<
 * 
 *         #1st root
 */
  __pyx_v_D = sqrt(__pyx_v_D);

  /* "raypier/core/cfaces.pyx":449
 * 
 *         #1st root
 *         a1 = (-B+D)/(2*A)             # <<<<<<<<<<<<<<
 *         pt1 = addvv_(r, multvs_(s, a1))
 *         #2nd root
 */
  __pyx_v_a1 = (((-__pyx_v_B) + __pyx_v_D) / (2.0 * __pyx_v_A));

  /* "raypier/core/cfaces.pyx":450
 *         #1st root
 *         a1 = (-B+D)/(2*A)
 *         pt1 = addvv_(r, multvs_(s, a1))             # <<<<<<<<<<<<<<
 *         #2nd root
 *         a2 = (-B-D)/(2*A)
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_s, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":452
 *         pt1 = addvv_(r, multvs_(s, a1))
 *         #2nd root
 *         a2 = (-B-D)/(2*A)             # <<<<<<<<<<<<<<
 *         pt2 = addvv_(r, multvs_(s, a2))
 * 
 */
  __pyx_v_a2 = (((-__pyx_v_B) - __pyx_v_D) / (2.0 * __pyx_v_A));

  /* "raypier/core/cfaces.pyx":453
 *         #2nd root
 *         a2 = (-B-D)/(2*A)
 *         pt2 = addvv_(r, multvs_(s, a2))             # <<<<<<<<<<<<<<
 * 
 *         if self.curvature >= 0:
 */
  __pyx_v_pt2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_s, __pyx_v_a2));

  /* "raypier/core/cfaces.pyx":455
 *         pt2 = addvv_(r, multvs_(s, a2))
 * 
 *         if self.curvature >= 0:             # <<<<<<<<<<<<<<
 *             if pt1.z < cz:
 *                 a1 = INF
 */
  __pyx_t_1 = ((__pyx_v_self->curvature >= 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":456
 * 
 *         if self.curvature >= 0:
 *             if pt1.z < cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z < cz:
 */
    __pyx_t_1 = ((__pyx_v_pt1.z < __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":457
 *         if self.curvature >= 0:
 *             if pt1.z < cz:
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if pt2.z < cz:
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":456
 * 
 *         if self.curvature >= 0:
 *             if pt1.z < cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z < cz:
 */
    }

    /* "raypier/core/cfaces.pyx":458
 *             if pt1.z < cz:
 *                 a1 = INF
 *             if pt2.z < cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_pt2.z < __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":459
 *                 a1 = INF
 *             if pt2.z < cz:
 *                 a2 = INF             # <<<<<<<<<<<<<<
 *         else:
 *             if pt1.z > cz:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":458
 *             if pt1.z < cz:
 *                 a1 = INF
 *             if pt2.z < cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 *         else:
 */
    }

    /* "raypier/core/cfaces.pyx":455
 *         pt2 = addvv_(r, multvs_(s, a2))
 * 
 *         if self.curvature >= 0:             # <<<<<<<<<<<<<<
 *             if pt1.z < cz:
 *                 a1 = INF
 */
    goto __pyx_L4;
  }

  /* "raypier/core/cfaces.pyx":461
 *                 a2 = INF
 *         else:
 *             if pt1.z > cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z > cz:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_pt1.z > __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":462
 *         else:
 *             if pt1.z > cz:
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if pt2.z > cz:
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":461
 *                 a2 = INF
 *         else:
 *             if pt1.z > cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z > cz:
 */
    }

    /* "raypier/core/cfaces.pyx":463
 *             if pt1.z > cz:
 *                 a1 = INF
 *             if pt2.z > cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_1 = ((__pyx_v_pt2.z > __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":464
 *                 a1 = INF
 *             if pt2.z > cz:
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         D = self.diameter*self.diameter/4.
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":463
 *             if pt1.z > cz:
 *                 a1 = INF
 *             if pt2.z > cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }
  }
  __pyx_L4:;

  /* "raypier/core/cfaces.pyx":466
 *                 a2 = INF
 * 
 *         D = self.diameter*self.diameter/4.             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
  __pyx_v_D = ((__pyx_v_self->diameter * __pyx_v_self->diameter) / 4.);

  /* "raypier/core/cfaces.pyx":468
 *         D = self.diameter*self.diameter/4.
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > D:
 *                 a1 = INF
 */
  __pyx_t_1 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":469
 * 
 *         if is_base_ray:
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > D:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if (pt2.x*pt2.x + pt2.y*pt2.y) > D:
 */
    __pyx_t_1 = ((((__pyx_v_pt1.x * __pyx_v_pt1.x) + (__pyx_v_pt1.y * __pyx_v_pt1.y)) > __pyx_v_D) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":470
 *         if is_base_ray:
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > D:
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if (pt2.x*pt2.x + pt2.y*pt2.y) > D:
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":469
 * 
 *         if is_base_ray:
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > D:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if (pt2.x*pt2.x + pt2.y*pt2.y) > D:
 */
    }

    /* "raypier/core/cfaces.pyx":471
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > D:
 *                 a1 = INF
 *             if (pt2.x*pt2.x + pt2.y*pt2.y) > D:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_1 = ((((__pyx_v_pt2.x * __pyx_v_pt2.x) + (__pyx_v_pt2.y * __pyx_v_pt2.y)) > __pyx_v_D) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":472
 *                 a1 = INF
 *             if (pt2.x*pt2.x + pt2.y*pt2.y) > D:
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if a2 < a1:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":471
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > D:
 *                 a1 = INF
 *             if (pt2.x*pt2.x + pt2.y*pt2.y) > D:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":468
 *         D = self.diameter*self.diameter/4.
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > D:
 *                 a1 = INF
 */
  }

  /* "raypier/core/cfaces.pyx":474
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  __pyx_t_1 = ((__pyx_v_a2 < __pyx_v_a1) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":475
 * 
 *         if a2 < a1:
 *             a1 = a2             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_v_a1 = __pyx_v_a2;

    /* "raypier/core/cfaces.pyx":474
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":477
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)
 */
  __pyx_t_2 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.tolerance) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":478
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = a1 * sep_(r, p2)
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":477
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)
 */
  }

  /* "raypier/core/cfaces.pyx":479
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_r, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":480
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":415
 *         self.curvature = kwds.get('curvature', 25.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":482
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_13SphericalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":487
 *         """
 * 
 *         p.z -= (self.z_height - self.curvature)             # <<<<<<<<<<<<<<
 *         if self.curvature < 0:
 *             p.z = -p.z
 */
  __pyx_v_p.z = (__pyx_v_p.z - (__pyx_v_self->z_height - __pyx_v_self->curvature));

  /* "raypier/core/cfaces.pyx":488
 * 
 *         p.z -= (self.z_height - self.curvature)
 *         if self.curvature < 0:             # <<<<<<<<<<<<<<
 *             p.z = -p.z
 *             p.y = -p.y
 */
  __pyx_t_1 = ((__pyx_v_self->curvature < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":489
 *         p.z -= (self.z_height - self.curvature)
 *         if self.curvature < 0:
 *             p.z = -p.z             # <<<<<<<<<<<<<<
 *             p.y = -p.y
 *             p.x = -p.x
 */
    __pyx_v_p.z = (-__pyx_v_p.z);

    /* "raypier/core/cfaces.pyx":490
 *         if self.curvature < 0:
 *             p.z = -p.z
 *             p.y = -p.y             # <<<<<<<<<<<<<<
 *             p.x = -p.x
 *         return norm_(p)
 */
    __pyx_v_p.y = (-__pyx_v_p.y);

    /* "raypier/core/cfaces.pyx":491
 *             p.z = -p.z
 *             p.y = -p.y
 *             p.x = -p.x             # <<<<<<<<<<<<<<
 *         return norm_(p)
 * 
 */
    __pyx_v_p.x = (-__pyx_v_p.x);

    /* "raypier/core/cfaces.pyx":488
 * 
 *         p.z -= (self.z_height - self.curvature)
 *         if self.curvature < 0:             # <<<<<<<<<<<<<<
 *             p.z = -p.z
 *             p.y = -p.y
 */
  }

  /* "raypier/core/cfaces.pyx":492
 *             p.y = -p.y
 *             p.x = -p.x
 *         return norm_(p)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_p);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":482
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":405
 * 
 * cdef class SphericalFace(Face):
 *     cdef public double diameter, curvature, z_height             # <<<<<<<<<<<<<<
 * 
 *     #Don't want curvature in this list in case the owner defines the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8diameter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8diameter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8diameter___get__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->diameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.diameter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8diameter_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_v_self->diameter = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.diameter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_9curvature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_9curvature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_9curvature___get__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->curvature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.curvature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_9curvature_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_v_self->curvature = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.curvature.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_13SphericalFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_13SphericalFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SphericalFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":503
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.curvature = kwds.get("curvature", 100.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":504
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 *         self.curvature = kwds.get("curvature", 100.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":505
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.curvature = kwds.get("curvature", 100.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_curvature, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->curvature = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":503
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.curvature = kwds.get("curvature", 100.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedSphericalFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":507
 *         self.curvature = kwds.get("curvature", 100.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_D;
  double __pyx_v_cz;
  double __pyx_v_a1;
  double __pyx_v_a2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_s;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":523
 *             double A,B,C,D, cz, a1, a2
 *             vector_t s, d, pt1, pt2
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         s = subvv_(p2, r)
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":525
 *             intersect_t out=NO_INTERSECTION
 * 
 *         s = subvv_(p2, r)             # <<<<<<<<<<<<<<
 *         cz = self.z_height - self.curvature
 *         d = r
 */
  __pyx_v_s = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_r);

  /* "raypier/core/cfaces.pyx":526
 * 
 *         s = subvv_(p2, r)
 *         cz = self.z_height - self.curvature             # <<<<<<<<<<<<<<
 *         d = r
 *         d.z -= cz
 */
  __pyx_v_cz = (__pyx_v_self->z_height - __pyx_v_self->curvature);

  /* "raypier/core/cfaces.pyx":527
 *         s = subvv_(p2, r)
 *         cz = self.z_height - self.curvature
 *         d = r             # <<<<<<<<<<<<<<
 *         d.z -= cz
 * 
 */
  __pyx_v_d = __pyx_v_r;

  /* "raypier/core/cfaces.pyx":528
 *         cz = self.z_height - self.curvature
 *         d = r
 *         d.z -= cz             # <<<<<<<<<<<<<<
 * 
 *         A = mag_sq_(s)
 */
  __pyx_v_d.z = (__pyx_v_d.z - __pyx_v_cz);

  /* "raypier/core/cfaces.pyx":530
 *         d.z -= cz
 * 
 *         A = mag_sq_(s)             # <<<<<<<<<<<<<<
 *         B = 2*dotprod_(s,d)
 *         C = mag_sq_(d) - self.curvature**2
 */
  __pyx_v_A = __pyx_f_7raypier_4core_7ctracer_mag_sq_(__pyx_v_s);

  /* "raypier/core/cfaces.pyx":531
 * 
 *         A = mag_sq_(s)
 *         B = 2*dotprod_(s,d)             # <<<<<<<<<<<<<<
 *         C = mag_sq_(d) - self.curvature**2
 *         D = B*B - 4*A*C
 */
  __pyx_v_B = (2.0 * __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_s, __pyx_v_d));

  /* "raypier/core/cfaces.pyx":532
 *         A = mag_sq_(s)
 *         B = 2*dotprod_(s,d)
 *         C = mag_sq_(d) - self.curvature**2             # <<<<<<<<<<<<<<
 *         D = B*B - 4*A*C
 * 
 */
  __pyx_v_C = (__pyx_f_7raypier_4core_7ctracer_mag_sq_(__pyx_v_d) - pow(__pyx_v_self->curvature, 2.0));

  /* "raypier/core/cfaces.pyx":533
 *         B = 2*dotprod_(s,d)
 *         C = mag_sq_(d) - self.curvature**2
 *         D = B*B - 4*A*C             # <<<<<<<<<<<<<<
 * 
 *         if D < 0: #no intersection with sphere
 */
  __pyx_v_D = ((__pyx_v_B * __pyx_v_B) - ((4.0 * __pyx_v_A) * __pyx_v_C));

  /* "raypier/core/cfaces.pyx":535
 *         D = B*B - 4*A*C
 * 
 *         if D < 0: #no intersection with sphere             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_1 = ((__pyx_v_D < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":536
 * 
 *         if D < 0: #no intersection with sphere
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         D = sqrt(D)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":535
 *         D = B*B - 4*A*C
 * 
 *         if D < 0: #no intersection with sphere             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":538
 *             return NO_INTERSECTION
 * 
 *         D = sqrt(D)             # <<<<<<<<<<<<<<
 * 
 *         #1st root
 */
  __pyx_v_D = sqrt(__pyx_v_D);

  /* "raypier/core/cfaces.pyx":541
 * 
 *         #1st root
 *         a1 = (-B+D)/(2*A)             # <<<<<<<<<<<<<<
 *         pt1 = addvv_(r, multvs_(s, a1))
 *         #2nd root
 */
  __pyx_v_a1 = (((-__pyx_v_B) + __pyx_v_D) / (2.0 * __pyx_v_A));

  /* "raypier/core/cfaces.pyx":542
 *         #1st root
 *         a1 = (-B+D)/(2*A)
 *         pt1 = addvv_(r, multvs_(s, a1))             # <<<<<<<<<<<<<<
 *         #2nd root
 *         a2 = (-B-D)/(2*A)
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_s, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":544
 *         pt1 = addvv_(r, multvs_(s, a1))
 *         #2nd root
 *         a2 = (-B-D)/(2*A)             # <<<<<<<<<<<<<<
 *         pt2 = addvv_(r, multvs_(s, a2))
 * 
 */
  __pyx_v_a2 = (((-__pyx_v_B) - __pyx_v_D) / (2.0 * __pyx_v_A));

  /* "raypier/core/cfaces.pyx":545
 *         #2nd root
 *         a2 = (-B-D)/(2*A)
 *         pt2 = addvv_(r, multvs_(s, a2))             # <<<<<<<<<<<<<<
 * 
 *         if self.curvature >= 0:
 */
  __pyx_v_pt2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_s, __pyx_v_a2));

  /* "raypier/core/cfaces.pyx":547
 *         pt2 = addvv_(r, multvs_(s, a2))
 * 
 *         if self.curvature >= 0:             # <<<<<<<<<<<<<<
 *             if pt1.z < cz:
 *                 a1 = INF
 */
  __pyx_t_1 = ((__pyx_v_self->curvature >= 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":548
 * 
 *         if self.curvature >= 0:
 *             if pt1.z < cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z < cz:
 */
    __pyx_t_1 = ((__pyx_v_pt1.z < __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":549
 *         if self.curvature >= 0:
 *             if pt1.z < cz:
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if pt2.z < cz:
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":548
 * 
 *         if self.curvature >= 0:
 *             if pt1.z < cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z < cz:
 */
    }

    /* "raypier/core/cfaces.pyx":550
 *             if pt1.z < cz:
 *                 a1 = INF
 *             if pt2.z < cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_pt2.z < __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":551
 *                 a1 = INF
 *             if pt2.z < cz:
 *                 a2 = INF             # <<<<<<<<<<<<<<
 *         else:
 *             if pt1.z > cz:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":550
 *             if pt1.z < cz:
 *                 a1 = INF
 *             if pt2.z < cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 *         else:
 */
    }

    /* "raypier/core/cfaces.pyx":547
 *         pt2 = addvv_(r, multvs_(s, a2))
 * 
 *         if self.curvature >= 0:             # <<<<<<<<<<<<<<
 *             if pt1.z < cz:
 *                 a1 = INF
 */
    goto __pyx_L4;
  }

  /* "raypier/core/cfaces.pyx":553
 *                 a2 = INF
 *         else:
 *             if pt1.z > cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z > cz:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_pt1.z > __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":554
 *         else:
 *             if pt1.z > cz:
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if pt2.z > cz:
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":553
 *                 a2 = INF
 *         else:
 *             if pt1.z > cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z > cz:
 */
    }

    /* "raypier/core/cfaces.pyx":555
 *             if pt1.z > cz:
 *                 a1 = INF
 *             if pt2.z > cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_1 = ((__pyx_v_pt2.z > __pyx_v_cz) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":556
 *                 a1 = INF
 *             if pt2.z > cz:
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":555
 *             if pt1.z > cz:
 *                 a1 = INF
 *             if pt2.z > cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }
  }
  __pyx_L4:;

  /* "raypier/core/cfaces.pyx":558
 *                 a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  __pyx_t_1 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":559
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":560
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":559
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    }

    /* "raypier/core/cfaces.pyx":561
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt2.x, __pyx_v_pt2.y) != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":562
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if a2 < a1:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":561
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":558
 *                 a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  }

  /* "raypier/core/cfaces.pyx":564
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  __pyx_t_1 = ((__pyx_v_a2 < __pyx_v_a1) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":565
 * 
 *         if a2 < a1:
 *             a1 = a2             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_v_a1 = __pyx_v_a2;

    /* "raypier/core/cfaces.pyx":564
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":567
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)
 */
  __pyx_t_2 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":568
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = a1 * sep_(r, p2)
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":567
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)
 */
  }

  /* "raypier/core/cfaces.pyx":569
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_r, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":570
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(r, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":507
 *         self.curvature = kwds.get("curvature", 100.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":572
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":577
 *         """
 * 
 *         p.z -= (self.z_height - self.curvature)             # <<<<<<<<<<<<<<
 *         if self.curvature < 0:
 *             p.z = -p.z
 */
  __pyx_v_p.z = (__pyx_v_p.z - (__pyx_v_self->z_height - __pyx_v_self->curvature));

  /* "raypier/core/cfaces.pyx":578
 * 
 *         p.z -= (self.z_height - self.curvature)
 *         if self.curvature < 0:             # <<<<<<<<<<<<<<
 *             p.z = -p.z
 *             p.y = -p.y
 */
  __pyx_t_1 = ((__pyx_v_self->curvature < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":579
 *         p.z -= (self.z_height - self.curvature)
 *         if self.curvature < 0:
 *             p.z = -p.z             # <<<<<<<<<<<<<<
 *             p.y = -p.y
 *             p.x = -p.x
 */
    __pyx_v_p.z = (-__pyx_v_p.z);

    /* "raypier/core/cfaces.pyx":580
 *         if self.curvature < 0:
 *             p.z = -p.z
 *             p.y = -p.y             # <<<<<<<<<<<<<<
 *             p.x = -p.x
 *         return norm_(p)
 */
    __pyx_v_p.y = (-__pyx_v_p.y);

    /* "raypier/core/cfaces.pyx":581
 *             p.z = -p.z
 *             p.y = -p.y
 *             p.x = -p.x             # <<<<<<<<<<<<<<
 *         return norm_(p)
 * 
 */
    __pyx_v_p.x = (-__pyx_v_p.x);

    /* "raypier/core/cfaces.pyx":578
 * 
 *         p.z -= (self.z_height - self.curvature)
 *         if self.curvature < 0:             # <<<<<<<<<<<<<<
 *             p.z = -p.z
 *             p.y = -p.y
 */
  }

  /* "raypier/core/cfaces.pyx":582
 *             p.y = -p.y
 *             p.x = -p.x
 *         return norm_(p)             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_p);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":572
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":584
 *         return norm_(p)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double r2 = x*x + y*y
 */

static double __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  double __pyx_v_r2;
  double __pyx_v_c;
  double __pyx_r;
  double __pyx_t_1;
  int __pyx_t_2;

  /* "raypier/core/cfaces.pyx":586
 *     cdef double eval_z_c(self, double x, double y) nogil:
 *         cdef:
 *             double r2 = x*x + y*y             # <<<<<<<<<<<<<<
 *             double c = self.curvature
 *         if c >= 0:
 */
  __pyx_v_r2 = ((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y));

  /* "raypier/core/cfaces.pyx":587
 *         cdef:
 *             double r2 = x*x + y*y
 *             double c = self.curvature             # <<<<<<<<<<<<<<
 *         if c >= 0:
 *             return self.z_height + sqrt(c*c - r2) - c
 */
  __pyx_t_1 = __pyx_v_self->curvature;
  __pyx_v_c = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":588
 *             double r2 = x*x + y*y
 *             double c = self.curvature
 *         if c >= 0:             # <<<<<<<<<<<<<<
 *             return self.z_height + sqrt(c*c - r2) - c
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_c >= 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":589
 *             double c = self.curvature
 *         if c >= 0:
 *             return self.z_height + sqrt(c*c - r2) - c             # <<<<<<<<<<<<<<
 *         else:
 *             return self.z_height - sqrt(c*c - r2) - c
 */
    __pyx_r = ((__pyx_v_self->z_height + sqrt(((__pyx_v_c * __pyx_v_c) - __pyx_v_r2))) - __pyx_v_c);
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":588
 *             double r2 = x*x + y*y
 *             double c = self.curvature
 *         if c >= 0:             # <<<<<<<<<<<<<<
 *             return self.z_height + sqrt(c*c - r2) - c
 *         else:
 */
  }

  /* "raypier/core/cfaces.pyx":591
 *             return self.z_height + sqrt(c*c - r2) - c
 *         else:
 *             return self.z_height - sqrt(c*c - r2) - c             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 */
  /*else*/ {
    __pyx_r = ((__pyx_v_self->z_height - sqrt(((__pyx_v_c * __pyx_v_c) - __pyx_v_r2))) - __pyx_v_c);
    goto __pyx_L0;
  }

  /* "raypier/core/cfaces.pyx":584
 *         return norm_(p)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double r2 = x*x + y*y
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":593
 *             return self.z_height - sqrt(c*c - r2) - c
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double cz, c=self.curvature
 */

static double __pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  double __pyx_v_cz;
  double __pyx_v_c;
  double __pyx_r;
  double __pyx_t_1;
  int __pyx_t_2;

  /* "raypier/core/cfaces.pyx":595
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 *         cdef:
 *             double cz, c=self.curvature             # <<<<<<<<<<<<<<
 * 
 *         cz = z - self.z_height + c
 */
  __pyx_t_1 = __pyx_v_self->curvature;
  __pyx_v_c = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":597
 *             double cz, c=self.curvature
 * 
 *         cz = z - self.z_height + c             # <<<<<<<<<<<<<<
 * 
 *         if c >= 0:
 */
  __pyx_v_cz = ((__pyx_v_z - __pyx_v_self->z_height) + __pyx_v_c);

  /* "raypier/core/cfaces.pyx":599
 *         cz = z - self.z_height + c
 * 
 *         if c >= 0:             # <<<<<<<<<<<<<<
 *             return ((x*x + y*y + cz*cz) - (c*c))
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_c >= 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":600
 * 
 *         if c >= 0:
 *             return ((x*x + y*y + cz*cz) - (c*c))             # <<<<<<<<<<<<<<
 *         else:
 *             return -((x*x + y*y + cz*cz) - (c*c))
 */
    __pyx_r = ((((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y)) + (__pyx_v_cz * __pyx_v_cz)) - (__pyx_v_c * __pyx_v_c));
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":599
 *         cz = z - self.z_height + c
 * 
 *         if c >= 0:             # <<<<<<<<<<<<<<
 *             return ((x*x + y*y + cz*cz) - (c*c))
 *         else:
 */
  }

  /* "raypier/core/cfaces.pyx":602
 *             return ((x*x + y*y + cz*cz) - (c*c))
 *         else:
 *             return -((x*x + y*y + cz*cz) - (c*c))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = (-((((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y)) + (__pyx_v_cz * __pyx_v_cz)) - (__pyx_v_c * __pyx_v_c)));
    goto __pyx_L0;
  }

  /* "raypier/core/cfaces.pyx":593
 *             return self.z_height - sqrt(c*c - r2) - c
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double cz, c=self.curvature
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":497
 * cdef class ShapedSphericalFace(ShapedFace):
 *     cdef:
 *         public double curvature, z_height             # <<<<<<<<<<<<<<
 * 
 *     #Don't want curvature in this list in case the owner defines the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->curvature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedSphericalFace.curvature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_v_self->curvature = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedSphericalFace.curvature.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedSphericalFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedSphericalFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedSphericalFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ShapedSphericalFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ShapedSphericalFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":611
 *         vector_t normal
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.x1 = kwds.get('x1',0)
 *         self.y1 = kwds.get('y1',0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":612
 * 
 *     def __cinit__(self, **kwds):
 *         self.x1 = kwds.get('x1',0)             # <<<<<<<<<<<<<<
 *         self.y1 = kwds.get('y1',0)
 *         self.x2 = kwds.get('x2',0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_x1, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_x1, __pyx_t_1) < 0) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":613
 *     def __cinit__(self, **kwds):
 *         self.x1 = kwds.get('x1',0)
 *         self.y1 = kwds.get('y1',0)             # <<<<<<<<<<<<<<
 *         self.x2 = kwds.get('x2',0)
 *         self.y2 = kwds.get('y2',0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_y1, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_y1, __pyx_t_1) < 0) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":614
 *         self.x1 = kwds.get('x1',0)
 *         self.y1 = kwds.get('y1',0)
 *         self.x2 = kwds.get('x2',0)             # <<<<<<<<<<<<<<
 *         self.y2 = kwds.get('y2',0)
 *         self.z1 = kwds.get('z1',0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_x2, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_x2, __pyx_t_1) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":615
 *         self.y1 = kwds.get('y1',0)
 *         self.x2 = kwds.get('x2',0)
 *         self.y2 = kwds.get('y2',0)             # <<<<<<<<<<<<<<
 *         self.z1 = kwds.get('z1',0)
 *         self.z2 = kwds.get('z2',0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_y2, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_y2, __pyx_t_1) < 0) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":616
 *         self.x2 = kwds.get('x2',0)
 *         self.y2 = kwds.get('y2',0)
 *         self.z1 = kwds.get('z1',0)             # <<<<<<<<<<<<<<
 *         self.z2 = kwds.get('z2',0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z1, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z1 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":617
 *         self.y2 = kwds.get('y2',0)
 *         self.z1 = kwds.get('z1',0)
 *         self.z2 = kwds.get('z2',0)             # <<<<<<<<<<<<<<
 * 
 *     property x1:
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z2, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z2 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":611
 *         vector_t normal
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.x1 = kwds.get('x1',0)
 *         self.y1 = kwds.get('y1',0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":620
 * 
 *     property x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1_
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":621
 *     property x1:
 *         def __get__(self):
 *             return self.x1_             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x1_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":620
 * 
 *     property x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1_
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.x1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":623
 *             return self.x1_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.x1_ = v
 *             self.calc_normal()
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.x1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":624
 * 
 *         def __set__(self, double v):
 *             self.x1_ = v             # <<<<<<<<<<<<<<
 *             self.calc_normal()
 * 
 */
  __pyx_v_self->x1_ = __pyx_v_v;

  /* "raypier/core/cfaces.pyx":625
 *         def __set__(self, double v):
 *             self.x1_ = v
 *             self.calc_normal()             # <<<<<<<<<<<<<<
 * 
 *     property y1:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_normal(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":623
 *             return self.x1_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.x1_ = v
 *             self.calc_normal()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.x1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":628
 * 
 *     property y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1_
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":629
 *     property y1:
 *         def __get__(self):
 *             return self.y1_             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y1_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":628
 * 
 *     property y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1_
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.y1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":631
 *             return self.y1_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.y1_ = v
 *             self.calc_normal()
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.y1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":632
 * 
 *         def __set__(self, double v):
 *             self.y1_ = v             # <<<<<<<<<<<<<<
 *             self.calc_normal()
 * 
 */
  __pyx_v_self->y1_ = __pyx_v_v;

  /* "raypier/core/cfaces.pyx":633
 *         def __set__(self, double v):
 *             self.y1_ = v
 *             self.calc_normal()             # <<<<<<<<<<<<<<
 * 
 *     property x2:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_normal(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":631
 *             return self.y1_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.y1_ = v
 *             self.calc_normal()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.y1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":636
 * 
 *     property x2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x2_
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":637
 *     property x2:
 *         def __get__(self):
 *             return self.x2_             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x2_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":636
 * 
 *     property x2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x2_
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.x2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":639
 *             return self.x2_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.x2_ = v
 *             self.calc_normal()
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.x2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":640
 * 
 *         def __set__(self, double v):
 *             self.x2_ = v             # <<<<<<<<<<<<<<
 *             self.calc_normal()
 * 
 */
  __pyx_v_self->x2_ = __pyx_v_v;

  /* "raypier/core/cfaces.pyx":641
 *         def __set__(self, double v):
 *             self.x2_ = v
 *             self.calc_normal()             # <<<<<<<<<<<<<<
 * 
 *     property y2:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_normal(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":639
 *             return self.x2_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.x2_ = v
 *             self.calc_normal()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.x2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":644
 * 
 *     property y2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y2_
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":645
 *     property y2:
 *         def __get__(self):
 *             return self.y2_             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y2_); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":644
 * 
 *     property y2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y2_
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.y2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":647
 *             return self.y2_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.y2_ = v
 *             self.calc_normal()
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 647, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.y2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":648
 * 
 *         def __set__(self, double v):
 *             self.y2_ = v             # <<<<<<<<<<<<<<
 *             self.calc_normal()
 * 
 */
  __pyx_v_self->y2_ = __pyx_v_v;

  /* "raypier/core/cfaces.pyx":649
 *         def __set__(self, double v):
 *             self.y2_ = v
 *             self.calc_normal()             # <<<<<<<<<<<<<<
 * 
 *     cdef calc_normal(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->calc_normal(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":647
 *             return self.y2_
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.y2_ = v
 *             self.calc_normal()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.y2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":651
 *             self.calc_normal()
 * 
 *     cdef calc_normal(self):             # <<<<<<<<<<<<<<
 *         cdef vector_t n
 * 
 */

static PyObject *__pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_calc_normal(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_normal", 0);

  /* "raypier/core/cfaces.pyx":654
 *         cdef vector_t n
 * 
 *         n.y = self.x2_ - self.x1_             # <<<<<<<<<<<<<<
 *         n.x = self.y1_ - self.y2_
 *         n.z = 0
 */
  __pyx_v_n.y = (__pyx_v_self->x2_ - __pyx_v_self->x1_);

  /* "raypier/core/cfaces.pyx":655
 * 
 *         n.y = self.x2_ - self.x1_
 *         n.x = self.y1_ - self.y2_             # <<<<<<<<<<<<<<
 *         n.z = 0
 *         self.normal = norm_(n)
 */
  __pyx_v_n.x = (__pyx_v_self->y1_ - __pyx_v_self->y2_);

  /* "raypier/core/cfaces.pyx":656
 *         n.y = self.x2_ - self.x1_
 *         n.x = self.y1_ - self.y2_
 *         n.z = 0             # <<<<<<<<<<<<<<
 *         self.normal = norm_(n)
 * 
 */
  __pyx_v_n.z = 0.0;

  /* "raypier/core/cfaces.pyx":657
 *         n.x = self.y1_ - self.y2_
 *         n.z = 0
 *         self.normal = norm_(n)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):
 */
  __pyx_v_self->normal = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_n);

  /* "raypier/core/cfaces.pyx":651
 *             self.calc_normal()
 * 
 *     cdef calc_normal(self):             # <<<<<<<<<<<<<<
 *         cdef vector_t n
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":659
 *         self.normal = norm_(n)
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t s, u, v
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_s;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_u;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_v;
  double __pyx_v_a;
  double __pyx_v_dz;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":663
 *             vector_t s, u, v
 *             double a, dz
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         u.x = self.x1_
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":665
 *             intersect_t out=NO_INTERSECTION
 * 
 *         u.x = self.x1_             # <<<<<<<<<<<<<<
 *         u.y = self.y1_
 * 
 */
  __pyx_t_1 = __pyx_v_self->x1_;
  __pyx_v_u.x = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":666
 * 
 *         u.x = self.x1_
 *         u.y = self.y1_             # <<<<<<<<<<<<<<
 * 
 *         v.x = self.x2_ - u.x
 */
  __pyx_t_1 = __pyx_v_self->y1_;
  __pyx_v_u.y = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":668
 *         u.y = self.y1_
 * 
 *         v.x = self.x2_ - u.x             # <<<<<<<<<<<<<<
 *         v.y = self.y2_ - u.y
 * 
 */
  __pyx_v_v.x = (__pyx_v_self->x2_ - __pyx_v_u.x);

  /* "raypier/core/cfaces.pyx":669
 * 
 *         v.x = self.x2_ - u.x
 *         v.y = self.y2_ - u.y             # <<<<<<<<<<<<<<
 * 
 *         s = subvv_(p2, r)
 */
  __pyx_v_v.y = (__pyx_v_self->y2_ - __pyx_v_u.y);

  /* "raypier/core/cfaces.pyx":671
 *         v.y = self.y2_ - u.y
 * 
 *         s = subvv_(p2, r)             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
  __pyx_v_s = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_r);

  /* "raypier/core/cfaces.pyx":673
 *         s = subvv_(p2, r)
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             #fractional distance of intersection along edge
 *             a = (s.y*(u.x-r.x) - s.x*(u.y-r.y)) / (s.x*v.y - s.y*v.x)
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":675
 *         if is_base_ray:
 *             #fractional distance of intersection along edge
 *             a = (s.y*(u.x-r.x) - s.x*(u.y-r.y)) / (s.x*v.y - s.y*v.x)             # <<<<<<<<<<<<<<
 * 
 *             if a<0:
 */
    __pyx_v_a = (((__pyx_v_s.y * (__pyx_v_u.x - __pyx_v_r.x)) - (__pyx_v_s.x * (__pyx_v_u.y - __pyx_v_r.y))) / ((__pyx_v_s.x * __pyx_v_v.y) - (__pyx_v_s.y * __pyx_v_v.x)));

    /* "raypier/core/cfaces.pyx":677
 *             a = (s.y*(u.x-r.x) - s.x*(u.y-r.y)) / (s.x*v.y - s.y*v.x)
 * 
 *             if a<0:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             if a>1:
 */
    __pyx_t_2 = ((__pyx_v_a < 0.0) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":678
 * 
 *             if a<0:
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *             if a>1:
 *                 return NO_INTERSECTION
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":677
 *             a = (s.y*(u.x-r.x) - s.x*(u.y-r.y)) / (s.x*v.y - s.y*v.x)
 * 
 *             if a<0:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             if a>1:
 */
    }

    /* "raypier/core/cfaces.pyx":679
 *             if a<0:
 *                 return NO_INTERSECTION
 *             if a>1:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *         #distance of intersection along ray (in XY plane)
 */
    __pyx_t_2 = ((__pyx_v_a > 1.0) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":680
 *                 return NO_INTERSECTION
 *             if a>1:
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         #distance of intersection along ray (in XY plane)
 *         a = (v.x*(r.y-u.y) - v.y*(r.x-u.x)) / (s.x*v.y - s.y*v.x)
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":679
 *             if a<0:
 *                 return NO_INTERSECTION
 *             if a>1:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *         #distance of intersection along ray (in XY plane)
 */
    }

    /* "raypier/core/cfaces.pyx":673
 *         s = subvv_(p2, r)
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             #fractional distance of intersection along edge
 *             a = (s.y*(u.x-r.x) - s.x*(u.y-r.y)) / (s.x*v.y - s.y*v.x)
 */
  }

  /* "raypier/core/cfaces.pyx":682
 *                 return NO_INTERSECTION
 *         #distance of intersection along ray (in XY plane)
 *         a = (v.x*(r.y-u.y) - v.y*(r.x-u.x)) / (s.x*v.y - s.y*v.x)             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
  __pyx_v_a = (((__pyx_v_v.x * (__pyx_v_r.y - __pyx_v_u.y)) - (__pyx_v_v.y * (__pyx_v_r.x - __pyx_v_u.x))) / ((__pyx_v_s.x * __pyx_v_v.y) - (__pyx_v_s.y * __pyx_v_v.x)));

  /* "raypier/core/cfaces.pyx":684
 *         a = (v.x*(r.y-u.y) - v.y*(r.x-u.x)) / (s.x*v.y - s.y*v.x)
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             #distance in 3D
 *             dz = a*(p2.z - r.z)
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":686
 *         if is_base_ray:
 *             #distance in 3D
 *             dz = a*(p2.z - r.z)             # <<<<<<<<<<<<<<
 *             if self.z1 < (r.z+dz) < self.z2:
 *                 out.dist = a * mag_(s)
 */
    __pyx_v_dz = (__pyx_v_a * (__pyx_v_p2.z - __pyx_v_r.z));

    /* "raypier/core/cfaces.pyx":687
 *             #distance in 3D
 *             dz = a*(p2.z - r.z)
 *             if self.z1 < (r.z+dz) < self.z2:             # <<<<<<<<<<<<<<
 *                 out.dist = a * mag_(s)
 *                 return out
 */
    __pyx_t_1 = (__pyx_v_r.z + __pyx_v_dz);
    __pyx_t_2 = (__pyx_v_self->z1 < __pyx_t_1);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_t_1 < __pyx_v_self->z2);
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "raypier/core/cfaces.pyx":688
 *             dz = a*(p2.z - r.z)
 *             if self.z1 < (r.z+dz) < self.z2:
 *                 out.dist = a * mag_(s)             # <<<<<<<<<<<<<<
 *                 return out
 *         else:
 */
      __pyx_v_out.dist = (__pyx_v_a * __pyx_f_7raypier_4core_7ctracer_mag_(__pyx_v_s));

      /* "raypier/core/cfaces.pyx":689
 *             if self.z1 < (r.z+dz) < self.z2:
 *                 out.dist = a * mag_(s)
 *                 return out             # <<<<<<<<<<<<<<
 *         else:
 *             out.dist = a * mag_(s)
 */
      __pyx_r = __pyx_v_out;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":687
 *             #distance in 3D
 *             dz = a*(p2.z - r.z)
 *             if self.z1 < (r.z+dz) < self.z2:             # <<<<<<<<<<<<<<
 *                 out.dist = a * mag_(s)
 *                 return out
 */
    }

    /* "raypier/core/cfaces.pyx":684
 *         a = (v.x*(r.y-u.y) - v.y*(r.x-u.x)) / (s.x*v.y - s.y*v.x)
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             #distance in 3D
 *             dz = a*(p2.z - r.z)
 */
    goto __pyx_L6;
  }

  /* "raypier/core/cfaces.pyx":691
 *                 return out
 *         else:
 *             out.dist = a * mag_(s)             # <<<<<<<<<<<<<<
 *             return out
 *         return NO_INTERSECTION
 */
  /*else*/ {
    __pyx_v_out.dist = (__pyx_v_a * __pyx_f_7raypier_4core_7ctracer_mag_(__pyx_v_s));

    /* "raypier/core/cfaces.pyx":692
 *         else:
 *             out.dist = a * mag_(s)
 *             return out             # <<<<<<<<<<<<<<
 *         return NO_INTERSECTION
 * 
 */
    __pyx_r = __pyx_v_out;
    goto __pyx_L0;
  }
  __pyx_L6:;

  /* "raypier/core/cfaces.pyx":693
 *             out.dist = a * mag_(s)
 *             return out
 *         return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":659
 *         self.normal = norm_(n)
 * 
 *     cdef intersect_t intersect_c(self, vector_t r, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t s, u, v
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":695
 *         return NO_INTERSECTION
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         return self.normal
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":696
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 *         return self.normal             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __pyx_r = __pyx_v_self->normal;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":695
 *         return NO_INTERSECTION
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         return self.normal
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":608
 *     cdef:
 *         double x1_, y1_, x2_, y2_
 *         public double z1, z2             # <<<<<<<<<<<<<<
 *         vector_t normal
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.z1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_v_self->z1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.z1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.z2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L1_error)
  __pyx_v_self->z2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.z2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedPlanarFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedPlanarFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":704
 * 
 * 
 * cdef double eval_bezier(double t, double cp0, double cp1, double cp2, double cp3):             # <<<<<<<<<<<<<<
 *     #just evaluate a cubic bezier spline
 *     return cp0*((1-t)**3) + 3*cp1*t*((1-t)**2) + 3*cp2*(1-t)*(t**2) + cp3*(t**3)
 */

static double __pyx_f_7raypier_4core_6cfaces_eval_bezier(double __pyx_v_t, double __pyx_v_cp0, double __pyx_v_cp1, double __pyx_v_cp2, double __pyx_v_cp3) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_bezier", 0);

  /* "raypier/core/cfaces.pyx":706
 * cdef double eval_bezier(double t, double cp0, double cp1, double cp2, double cp3):
 *     #just evaluate a cubic bezier spline
 *     return cp0*((1-t)**3) + 3*cp1*t*((1-t)**2) + 3*cp2*(1-t)*(t**2) + cp3*(t**3)             # <<<<<<<<<<<<<<
 * 
 * cdef double dif_bezier(double t, double cp0, double cp1, double cp2, double cp3):
 */
  __pyx_r = ((((__pyx_v_cp0 * pow((1.0 - __pyx_v_t), 3.0)) + (((3.0 * __pyx_v_cp1) * __pyx_v_t) * pow((1.0 - __pyx_v_t), 2.0))) + (((3.0 * __pyx_v_cp2) * (1.0 - __pyx_v_t)) * pow(__pyx_v_t, 2.0))) + (__pyx_v_cp3 * pow(__pyx_v_t, 3.0)));
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":704
 * 
 * 
 * cdef double eval_bezier(double t, double cp0, double cp1, double cp2, double cp3):             # <<<<<<<<<<<<<<
 *     #just evaluate a cubic bezier spline
 *     return cp0*((1-t)**3) + 3*cp1*t*((1-t)**2) + 3*cp2*(1-t)*(t**2) + cp3*(t**3)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":708
 *     return cp0*((1-t)**3) + 3*cp1*t*((1-t)**2) + 3*cp2*(1-t)*(t**2) + cp3*(t**3)
 * 
 * cdef double dif_bezier(double t, double cp0, double cp1, double cp2, double cp3):             # <<<<<<<<<<<<<<
 *     #calc the derivative of a cubic bezier when parameter = t
 *     cdef long double A, B, C     #just doin this old school polynomial style
 */

static double __pyx_f_7raypier_4core_6cfaces_dif_bezier(double __pyx_v_t, double __pyx_v_cp0, double __pyx_v_cp1, double __pyx_v_cp2, double __pyx_v_cp3) {
  long double __pyx_v_A;
  long double __pyx_v_B;
  long double __pyx_v_C;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dif_bezier", 0);

  /* "raypier/core/cfaces.pyx":711
 *     #calc the derivative of a cubic bezier when parameter = t
 *     cdef long double A, B, C     #just doin this old school polynomial style
 *     A = cp3-3*cp2+3*cp1-cp0             # <<<<<<<<<<<<<<
 *     B = 3*cp2-6*cp1+3*cp0
 *     C = 3*cp1-3*cp0
 */
  __pyx_v_A = (((__pyx_v_cp3 - (3.0 * __pyx_v_cp2)) + (3.0 * __pyx_v_cp1)) - __pyx_v_cp0);

  /* "raypier/core/cfaces.pyx":712
 *     cdef long double A, B, C     #just doin this old school polynomial style
 *     A = cp3-3*cp2+3*cp1-cp0
 *     B = 3*cp2-6*cp1+3*cp0             # <<<<<<<<<<<<<<
 *     C = 3*cp1-3*cp0
 *     return 3*A*t**2 + 2*B*t + C
 */
  __pyx_v_B = (((3.0 * __pyx_v_cp2) - (6.0 * __pyx_v_cp1)) + (3.0 * __pyx_v_cp0));

  /* "raypier/core/cfaces.pyx":713
 *     A = cp3-3*cp2+3*cp1-cp0
 *     B = 3*cp2-6*cp1+3*cp0
 *     C = 3*cp1-3*cp0             # <<<<<<<<<<<<<<
 *     return 3*A*t**2 + 2*B*t + C
 * 
 */
  __pyx_v_C = ((3.0 * __pyx_v_cp1) - (3.0 * __pyx_v_cp0));

  /* "raypier/core/cfaces.pyx":714
 *     B = 3*cp2-6*cp1+3*cp0
 *     C = 3*cp1-3*cp0
 *     return 3*A*t**2 + 2*B*t + C             # <<<<<<<<<<<<<<
 * 
 * cdef struct poly_roots:
 */
  __pyx_r = ((((3.0 * __pyx_v_A) * pow(__pyx_v_t, 2.0)) + ((2.0 * __pyx_v_B) * __pyx_v_t)) + __pyx_v_C);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":708
 *     return cp0*((1-t)**3) + 3*cp1*t*((1-t)**2) + 3*cp2*(1-t)*(t**2) + cp3*(t**3)
 * 
 * cdef double dif_bezier(double t, double cp0, double cp1, double cp2, double cp3):             # <<<<<<<<<<<<<<
 *     #calc the derivative of a cubic bezier when parameter = t
 *     cdef long double A, B, C     #just doin this old school polynomial style
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":722
 *     int n
 * 
 * cdef poly_roots roots_of_cubic(double a, double b, double c, double d):             # <<<<<<<<<<<<<<
 *     #this code is known not to work in the case of (x-c)^3 (triple zero)
 *     # **TODO ** fix this
 */

static struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_f_7raypier_4core_6cfaces_roots_of_cubic(double __pyx_v_a, double __pyx_v_b, double __pyx_v_c, double __pyx_v_d) {
  long double __pyx_v_a1;
  long double __pyx_v_a2;
  long double __pyx_v_a3;
  long double __pyx_v_Q;
  long double __pyx_v_R;
  long double __pyx_v_R2_Q3;
  long double __pyx_v_theta;
  struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_v_x;
  struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_t_1;
  int __pyx_t_2;
  long double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("roots_of_cubic", 0);

  /* "raypier/core/cfaces.pyx":728
 *     # using newton's root finding method could quickly polish up answer.
 *     cdef:
 *         long double a1 = b/a, a2 = c/a, a3 = d/a             # <<<<<<<<<<<<<<
 *         long double Q = (a1*a1 - 3.0*a2)/9.0
 *         long double R = (2.0*a1*a1*a1 - 9.0*a1*a2 + 27.0*a3)/54.0
 */
  __pyx_v_a1 = (__pyx_v_b / __pyx_v_a);
  __pyx_v_a2 = (__pyx_v_c / __pyx_v_a);
  __pyx_v_a3 = (__pyx_v_d / __pyx_v_a);

  /* "raypier/core/cfaces.pyx":729
 *     cdef:
 *         long double a1 = b/a, a2 = c/a, a3 = d/a
 *         long double Q = (a1*a1 - 3.0*a2)/9.0             # <<<<<<<<<<<<<<
 *         long double R = (2.0*a1*a1*a1 - 9.0*a1*a2 + 27.0*a3)/54.0
 *         long double R2_Q3 = R*R - Q*Q*Q
 */
  __pyx_v_Q = (((__pyx_v_a1 * __pyx_v_a1) - (3.0 * __pyx_v_a2)) / ((long double)9.0));

  /* "raypier/core/cfaces.pyx":730
 *         long double a1 = b/a, a2 = c/a, a3 = d/a
 *         long double Q = (a1*a1 - 3.0*a2)/9.0
 *         long double R = (2.0*a1*a1*a1 - 9.0*a1*a2 + 27.0*a3)/54.0             # <<<<<<<<<<<<<<
 *         long double R2_Q3 = R*R - Q*Q*Q
 *         long double theta
 */
  __pyx_v_R = ((((((2.0 * __pyx_v_a1) * __pyx_v_a1) * __pyx_v_a1) - ((9.0 * __pyx_v_a1) * __pyx_v_a2)) + (27.0 * __pyx_v_a3)) / ((long double)54.0));

  /* "raypier/core/cfaces.pyx":731
 *         long double Q = (a1*a1 - 3.0*a2)/9.0
 *         long double R = (2.0*a1*a1*a1 - 9.0*a1*a2 + 27.0*a3)/54.0
 *         long double R2_Q3 = R*R - Q*Q*Q             # <<<<<<<<<<<<<<
 *         long double theta
 *         poly_roots x= ((0.0,0.0,0.0),0)
 */
  __pyx_v_R2_Q3 = ((__pyx_v_R * __pyx_v_R) - ((__pyx_v_Q * __pyx_v_Q) * __pyx_v_Q));

  /* "raypier/core/cfaces.pyx":733
 *         long double R2_Q3 = R*R - Q*Q*Q
 *         long double theta
 *         poly_roots x= ((0.0,0.0,0.0),0)             # <<<<<<<<<<<<<<
 *     if fabs(a) <= 0.0000000001:
 *         #^this, precision is less than ideal here
 */
  __pyx_t_1 = __pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots(__pyx_tuple__20); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_v_x = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":734
 *         long double theta
 *         poly_roots x= ((0.0,0.0,0.0),0)
 *     if fabs(a) <= 0.0000000001:             # <<<<<<<<<<<<<<
 *         #^this, precision is less than ideal here
 *         if fabs(b) <= 0.0000000001:
 */
  __pyx_t_2 = ((fabs(__pyx_v_a) <= 0.0000000001) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":736
 *     if fabs(a) <= 0.0000000001:
 *         #^this, precision is less than ideal here
 *         if fabs(b) <= 0.0000000001:             # <<<<<<<<<<<<<<
 *             if c == 0:
 *                 #our "polynomial" is a constant
 */
    __pyx_t_2 = ((fabs(__pyx_v_b) <= 0.0000000001) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":737
 *         #^this, precision is less than ideal here
 *         if fabs(b) <= 0.0000000001:
 *             if c == 0:             # <<<<<<<<<<<<<<
 *                 #our "polynomial" is a constant
 *                 # return a nonsense answer
 */
      __pyx_t_2 = ((__pyx_v_c == 0.0) != 0);
      if (__pyx_t_2) {

        /* "raypier/core/cfaces.pyx":740
 *                 #our "polynomial" is a constant
 *                 # return a nonsense answer
 *                 x.n = 1             # <<<<<<<<<<<<<<
 *                 x.roots[0] = 0
 *             else:
 */
        __pyx_v_x.n = 1;

        /* "raypier/core/cfaces.pyx":741
 *                 # return a nonsense answer
 *                 x.n = 1
 *                 x.roots[0] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 #print "solved for line"
 */
        (__pyx_v_x.roots[0]) = 0.0;

        /* "raypier/core/cfaces.pyx":737
 *         #^this, precision is less than ideal here
 *         if fabs(b) <= 0.0000000001:
 *             if c == 0:             # <<<<<<<<<<<<<<
 *                 #our "polynomial" is a constant
 *                 # return a nonsense answer
 */
        goto __pyx_L5;
      }

      /* "raypier/core/cfaces.pyx":745
 *                 #print "solved for line"
 *                 #our polynomial is a line cx+d
 *                 x.n = 1             # <<<<<<<<<<<<<<
 *                 x.roots[0] = -d/c
 *         else:
 */
      /*else*/ {
        __pyx_v_x.n = 1;

        /* "raypier/core/cfaces.pyx":746
 *                 #our polynomial is a line cx+d
 *                 x.n = 1
 *                 x.roots[0] = -d/c             # <<<<<<<<<<<<<<
 *         else:
 *             #print "solved for quadratic"
 */
        (__pyx_v_x.roots[0]) = ((-__pyx_v_d) / __pyx_v_c);
      }
      __pyx_L5:;

      /* "raypier/core/cfaces.pyx":736
 *     if fabs(a) <= 0.0000000001:
 *         #^this, precision is less than ideal here
 *         if fabs(b) <= 0.0000000001:             # <<<<<<<<<<<<<<
 *             if c == 0:
 *                 #our "polynomial" is a constant
 */
      goto __pyx_L4;
    }

    /* "raypier/core/cfaces.pyx":750
 *             #print "solved for quadratic"
 *             #our ploynomial is quadratic, bx**2+cx+d
 *             a1 = c**2 - 4*b*d             # <<<<<<<<<<<<<<
 *             a1 = sqrt(a1)
 *             x.n = 2
 */
    /*else*/ {
      __pyx_v_a1 = (pow(__pyx_v_c, 2.0) - ((4.0 * __pyx_v_b) * __pyx_v_d));

      /* "raypier/core/cfaces.pyx":751
 *             #our ploynomial is quadratic, bx**2+cx+d
 *             a1 = c**2 - 4*b*d
 *             a1 = sqrt(a1)             # <<<<<<<<<<<<<<
 *             x.n = 2
 *             x.roots[0] = (-c+a1)/(2*b)
 */
      __pyx_v_a1 = sqrt(__pyx_v_a1);

      /* "raypier/core/cfaces.pyx":752
 *             a1 = c**2 - 4*b*d
 *             a1 = sqrt(a1)
 *             x.n = 2             # <<<<<<<<<<<<<<
 *             x.roots[0] = (-c+a1)/(2*b)
 *             x.roots[1] = (-c-a1)/(2*b)
 */
      __pyx_v_x.n = 2;

      /* "raypier/core/cfaces.pyx":753
 *             a1 = sqrt(a1)
 *             x.n = 2
 *             x.roots[0] = (-c+a1)/(2*b)             # <<<<<<<<<<<<<<
 *             x.roots[1] = (-c-a1)/(2*b)
 *             #print "roots: ",x.roots[0],x.roots[1]
 */
      (__pyx_v_x.roots[0]) = (((-__pyx_v_c) + __pyx_v_a1) / ((long double)(2.0 * __pyx_v_b)));

      /* "raypier/core/cfaces.pyx":754
 *             x.n = 2
 *             x.roots[0] = (-c+a1)/(2*b)
 *             x.roots[1] = (-c-a1)/(2*b)             # <<<<<<<<<<<<<<
 *             #print "roots: ",x.roots[0],x.roots[1]
 *     else:
 */
      (__pyx_v_x.roots[1]) = (((-__pyx_v_c) - __pyx_v_a1) / ((long double)(2.0 * __pyx_v_b)));
    }
    __pyx_L4:;

    /* "raypier/core/cfaces.pyx":734
 *         long double theta
 *         poly_roots x= ((0.0,0.0,0.0),0)
 *     if fabs(a) <= 0.0000000001:             # <<<<<<<<<<<<<<
 *         #^this, precision is less than ideal here
 *         if fabs(b) <= 0.0000000001:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":759
 *         #our polynomial is actually cubic
 *         #original code had <= here, but if determinant is 0 then only one answer
 *         if (R2_Q3 < 0):             # <<<<<<<<<<<<<<
 *             x.n = 3
 *             theta = acos(R/sqrt(Q*Q*Q))
 */
  /*else*/ {
    __pyx_t_2 = ((__pyx_v_R2_Q3 < 0.0) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":760
 *         #original code had <= here, but if determinant is 0 then only one answer
 *         if (R2_Q3 < 0):
 *             x.n = 3             # <<<<<<<<<<<<<<
 *             theta = acos(R/sqrt(Q*Q*Q))
 *             x.roots[0] = -2.0*sqrt(Q)*cos(theta/3.0) - a1/3.0;
 */
      __pyx_v_x.n = 3;

      /* "raypier/core/cfaces.pyx":761
 *         if (R2_Q3 < 0):
 *             x.n = 3
 *             theta = acos(R/sqrt(Q*Q*Q))             # <<<<<<<<<<<<<<
 *             x.roots[0] = -2.0*sqrt(Q)*cos(theta/3.0) - a1/3.0;
 *             x.roots[1] = -2.0*sqrt(Q)*cos((theta+2.0*M_PI)/3.0) - a1/3.0
 */
      __pyx_v_theta = acos((__pyx_v_R / ((long double)sqrt(((__pyx_v_Q * __pyx_v_Q) * __pyx_v_Q)))));

      /* "raypier/core/cfaces.pyx":762
 *             x.n = 3
 *             theta = acos(R/sqrt(Q*Q*Q))
 *             x.roots[0] = -2.0*sqrt(Q)*cos(theta/3.0) - a1/3.0;             # <<<<<<<<<<<<<<
 *             x.roots[1] = -2.0*sqrt(Q)*cos((theta+2.0*M_PI)/3.0) - a1/3.0
 *             x.roots[2] = -2.0*sqrt(Q)*cos((theta+4.0*M_PI)/3.0) - a1/3.0
 */
      (__pyx_v_x.roots[0]) = (((-2.0 * sqrt(__pyx_v_Q)) * cos((__pyx_v_theta / ((long double)3.0)))) - (__pyx_v_a1 / ((long double)3.0)));

      /* "raypier/core/cfaces.pyx":763
 *             theta = acos(R/sqrt(Q*Q*Q))
 *             x.roots[0] = -2.0*sqrt(Q)*cos(theta/3.0) - a1/3.0;
 *             x.roots[1] = -2.0*sqrt(Q)*cos((theta+2.0*M_PI)/3.0) - a1/3.0             # <<<<<<<<<<<<<<
 *             x.roots[2] = -2.0*sqrt(Q)*cos((theta+4.0*M_PI)/3.0) - a1/3.0
 *             #print "triple",x.roots[0],x.roots[1],x.roots[2]
 */
      (__pyx_v_x.roots[1]) = (((-2.0 * sqrt(__pyx_v_Q)) * cos(((__pyx_v_theta + (2.0 * M_PI)) / ((long double)3.0)))) - (__pyx_v_a1 / ((long double)3.0)));

      /* "raypier/core/cfaces.pyx":764
 *             x.roots[0] = -2.0*sqrt(Q)*cos(theta/3.0) - a1/3.0;
 *             x.roots[1] = -2.0*sqrt(Q)*cos((theta+2.0*M_PI)/3.0) - a1/3.0
 *             x.roots[2] = -2.0*sqrt(Q)*cos((theta+4.0*M_PI)/3.0) - a1/3.0             # <<<<<<<<<<<<<<
 *             #print "triple",x.roots[0],x.roots[1],x.roots[2]
 *         else:
 */
      (__pyx_v_x.roots[2]) = (((-2.0 * sqrt(__pyx_v_Q)) * cos(((__pyx_v_theta + (4.0 * M_PI)) / ((long double)3.0)))) - (__pyx_v_a1 / ((long double)3.0)));

      /* "raypier/core/cfaces.pyx":759
 *         #our polynomial is actually cubic
 *         #original code had <= here, but if determinant is 0 then only one answer
 *         if (R2_Q3 < 0):             # <<<<<<<<<<<<<<
 *             x.n = 3
 *             theta = acos(R/sqrt(Q*Q*Q))
 */
      goto __pyx_L6;
    }

    /* "raypier/core/cfaces.pyx":767
 *             #print "triple",x.roots[0],x.roots[1],x.roots[2]
 *         else:
 *             x.n = 1             # <<<<<<<<<<<<<<
 *             a2 = pow(sqrt(R2_Q3)+fabs(R), 1/3.0)
 *             a2 += Q/x.roots[0]
 */
    /*else*/ {
      __pyx_v_x.n = 1;

      /* "raypier/core/cfaces.pyx":768
 *         else:
 *             x.n = 1
 *             a2 = pow(sqrt(R2_Q3)+fabs(R), 1/3.0)             # <<<<<<<<<<<<<<
 *             a2 += Q/x.roots[0]
 *             a2 *= (1 if (R < 0.0) else -1)
 */
      __pyx_v_a2 = pow((sqrt(__pyx_v_R2_Q3) + fabs(__pyx_v_R)), (1.0 / 3.0));

      /* "raypier/core/cfaces.pyx":769
 *             x.n = 1
 *             a2 = pow(sqrt(R2_Q3)+fabs(R), 1/3.0)
 *             a2 += Q/x.roots[0]             # <<<<<<<<<<<<<<
 *             a2 *= (1 if (R < 0.0) else -1)
 *             a2 -= a1/3.0
 */
      __pyx_v_a2 = (__pyx_v_a2 + (__pyx_v_Q / ((long double)(__pyx_v_x.roots[0]))));

      /* "raypier/core/cfaces.pyx":770
 *             a2 = pow(sqrt(R2_Q3)+fabs(R), 1/3.0)
 *             a2 += Q/x.roots[0]
 *             a2 *= (1 if (R < 0.0) else -1)             # <<<<<<<<<<<<<<
 *             a2 -= a1/3.0
 *             x.roots[0] = a2
 */
      if (((__pyx_v_R < 0.0) != 0)) {
        __pyx_t_3 = 1.0;
      } else {
        __pyx_t_3 = -1.0;
      }
      __pyx_v_a2 = (__pyx_v_a2 * __pyx_t_3);

      /* "raypier/core/cfaces.pyx":771
 *             a2 += Q/x.roots[0]
 *             a2 *= (1 if (R < 0.0) else -1)
 *             a2 -= a1/3.0             # <<<<<<<<<<<<<<
 *             x.roots[0] = a2
 *             #print "single: ",x.roots[0]
 */
      __pyx_v_a2 = (__pyx_v_a2 - (__pyx_v_a1 / ((long double)3.0)));

      /* "raypier/core/cfaces.pyx":772
 *             a2 *= (1 if (R < 0.0) else -1)
 *             a2 -= a1/3.0
 *             x.roots[0] = a2             # <<<<<<<<<<<<<<
 *             #print "single: ",x.roots[0]
 *     return x
 */
      (__pyx_v_x.roots[0]) = __pyx_v_a2;
    }
    __pyx_L6:;
  }
  __pyx_L3:;

  /* "raypier/core/cfaces.pyx":774
 *             x.roots[0] = a2
 *             #print "single: ",x.roots[0]
 *     return x             # <<<<<<<<<<<<<<
 * 
 * cdef flatvector_t rotate2D(double phi, flatvector_t p):
 */
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":722
 *     int n
 * 
 * cdef poly_roots roots_of_cubic(double a, double b, double c, double d):             # <<<<<<<<<<<<<<
 *     #this code is known not to work in the case of (x-c)^3 (triple zero)
 *     # **TODO ** fix this
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("raypier.core.cfaces.roots_of_cubic", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":776
 *     return x
 * 
 * cdef flatvector_t rotate2D(double phi, flatvector_t p):             # <<<<<<<<<<<<<<
 *     cdef flatvector_t result
 *     result.x = p.x*cos(phi) - p.y*sin(phi)
 */

static struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_f_7raypier_4core_6cfaces_rotate2D(double __pyx_v_phi, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_p) {
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_result;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate2D", 0);

  /* "raypier/core/cfaces.pyx":778
 * cdef flatvector_t rotate2D(double phi, flatvector_t p):
 *     cdef flatvector_t result
 *     result.x = p.x*cos(phi) - p.y*sin(phi)             # <<<<<<<<<<<<<<
 *     result.y = p.x*sin(phi) + p.y*cos(phi)
 *     return result
 */
  __pyx_v_result.x = ((__pyx_v_p.x * cos(__pyx_v_phi)) - (__pyx_v_p.y * sin(__pyx_v_phi)));

  /* "raypier/core/cfaces.pyx":779
 *     cdef flatvector_t result
 *     result.x = p.x*cos(phi) - p.y*sin(phi)
 *     result.y = p.x*sin(phi) + p.y*cos(phi)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result.y = ((__pyx_v_p.x * sin(__pyx_v_phi)) + (__pyx_v_p.y * cos(__pyx_v_phi)));

  /* "raypier/core/cfaces.pyx":780
 *     result.x = p.x*cos(phi) - p.y*sin(phi)
 *     result.y = p.x*sin(phi) + p.y*cos(phi)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cdef class ExtrudedBezierFace(Face):
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":776
 *     return x
 * 
 * cdef flatvector_t rotate2D(double phi, flatvector_t p):             # <<<<<<<<<<<<<<
 *     cdef flatvector_t result
 *     result.x = p.x*cos(phi) - p.y*sin(phi)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":789
 *         np_.ndarray curves_array
 * 
 *     cdef int ccw(self, flatvector_t  A, flatvector_t  B, flatvector_t  C):             # <<<<<<<<<<<<<<
 *         #used by an ingenious line segment intersect algorithim I found.
 *         #determines counter clockwiseness of points
 */

static int __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_ccw(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_A, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_B, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_C) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ccw", 0);

  /* "raypier/core/cfaces.pyx":792
 *         #used by an ingenious line segment intersect algorithim I found.
 *         #determines counter clockwiseness of points
 *         return (C.y-A.y)*(B.x-A.x) > (B.y-A.y)*(C.x-A.x)             # <<<<<<<<<<<<<<
 * 
 *     cdef int line_seg_overlap(self, flatvector_t A, flatvector_t B, flatvector_t C, flatvector_t D):
 */
  __pyx_r = (((__pyx_v_C.y - __pyx_v_A.y) * (__pyx_v_B.x - __pyx_v_A.x)) > ((__pyx_v_B.y - __pyx_v_A.y) * (__pyx_v_C.x - __pyx_v_A.x)));
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":789
 *         np_.ndarray curves_array
 * 
 *     cdef int ccw(self, flatvector_t  A, flatvector_t  B, flatvector_t  C):             # <<<<<<<<<<<<<<
 *         #used by an ingenious line segment intersect algorithim I found.
 *         #determines counter clockwiseness of points
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":794
 *         return (C.y-A.y)*(B.x-A.x) > (B.y-A.y)*(C.x-A.x)
 * 
 *     cdef int line_seg_overlap(self, flatvector_t A, flatvector_t B, flatvector_t C, flatvector_t D):             # <<<<<<<<<<<<<<
 *         #check if two line segments overlap eachother.  Used for rough tests of
 *         #intersection before committing to much computation to the potential intersection.
 */

static int __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_line_seg_overlap(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_A, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_B, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_C, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_D) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("line_seg_overlap", 0);

  /* "raypier/core/cfaces.pyx":800
 *         # Code from http://www.bryceboe.com/2006/10/23/line-segment-intersection-algorithm/
 *         #AB crosses CD if ABCD are all cw or ccw.
 *         return self.ccw(A,C,D) != self.ccw(B,C,D) and self.ccw(A,B,C) != self.ccw(A,B,D)             # <<<<<<<<<<<<<<
 * 
 *     cdef int pnt_in_hull(self,flatvector_t p, flatvector_t A, flatvector_t B, flatvector_t C, flatvector_t D):
 */
  __pyx_t_2 = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->ccw(__pyx_v_self, __pyx_v_A, __pyx_v_C, __pyx_v_D) != ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->ccw(__pyx_v_self, __pyx_v_B, __pyx_v_C, __pyx_v_D));
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->ccw(__pyx_v_self, __pyx_v_A, __pyx_v_B, __pyx_v_C) != ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->ccw(__pyx_v_self, __pyx_v_A, __pyx_v_B, __pyx_v_D));
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":794
 *         return (C.y-A.y)*(B.x-A.x) > (B.y-A.y)*(C.x-A.x)
 * 
 *     cdef int line_seg_overlap(self, flatvector_t A, flatvector_t B, flatvector_t C, flatvector_t D):             # <<<<<<<<<<<<<<
 *         #check if two line segments overlap eachother.  Used for rough tests of
 *         #intersection before committing to much computation to the potential intersection.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":802
 *         return self.ccw(A,C,D) != self.ccw(B,C,D) and self.ccw(A,B,C) != self.ccw(A,B,D)
 * 
 *     cdef int pnt_in_hull(self,flatvector_t p, flatvector_t A, flatvector_t B, flatvector_t C, flatvector_t D):             # <<<<<<<<<<<<<<
 *         #instead of convex hull, just use xy bounding box, which is quicker to construct
 * 
 */

static int __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_pnt_in_hull(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_p, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_A, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_B, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_C, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_D) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  float __pyx_v_w;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("pnt_in_hull", 0);

  /* "raypier/core/cfaces.pyx":809
 * 
 *         #if p is bigger than atleast one but not all, the it is in the box
 *         i = p.x > A.x or p.x>B.x or p.x>C.x or p.x>D.x             # <<<<<<<<<<<<<<
 *         j = p.x > A.x and p.x>B.x and p.x>C.x and p.x>D.x
 *         k = i and not j
 */
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_A.x);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_B.x);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_C.x);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_D.x);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L3_bool_binop_done:;
  __pyx_v_i = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":810
 *         #if p is bigger than atleast one but not all, the it is in the box
 *         i = p.x > A.x or p.x>B.x or p.x>C.x or p.x>D.x
 *         j = p.x > A.x and p.x>B.x and p.x>C.x and p.x>D.x             # <<<<<<<<<<<<<<
 *         k = i and not j
 *         i = p.y > A.y or p.y>B.y or p.y>C.y or p.y>D.y
 */
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_A.x);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_B.x);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_C.x);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.x > __pyx_v_D.x);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  __pyx_v_j = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":811
 *         i = p.x > A.x or p.x>B.x or p.x>C.x or p.x>D.x
 *         j = p.x > A.x and p.x>B.x and p.x>C.x and p.x>D.x
 *         k = i and not j             # <<<<<<<<<<<<<<
 *         i = p.y > A.y or p.y>B.y or p.y>C.y or p.y>D.y
 *         j = p.y > A.y and p.y>B.y and p.y>C.y and p.y>D.y
 */
  if (__pyx_v_i) {
  } else {
    __pyx_t_1 = __pyx_v_i;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = (!(__pyx_v_j != 0));
  __pyx_t_1 = __pyx_t_2;
  __pyx_L11_bool_binop_done:;
  __pyx_v_k = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":812
 *         j = p.x > A.x and p.x>B.x and p.x>C.x and p.x>D.x
 *         k = i and not j
 *         i = p.y > A.y or p.y>B.y or p.y>C.y or p.y>D.y             # <<<<<<<<<<<<<<
 *         j = p.y > A.y and p.y>B.y and p.y>C.y and p.y>D.y
 *         i = i and not j
 */
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_A.y);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_B.y);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_C.y);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_D.y);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L13_bool_binop_done:;
  __pyx_v_i = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":813
 *         k = i and not j
 *         i = p.y > A.y or p.y>B.y or p.y>C.y or p.y>D.y
 *         j = p.y > A.y and p.y>B.y and p.y>C.y and p.y>D.y             # <<<<<<<<<<<<<<
 *         i = i and not j
 * 
 */
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_A.y);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_B.y);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_C.y);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_p.y > __pyx_v_D.y);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L17_bool_binop_done:;
  __pyx_v_j = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":814
 *         i = p.y > A.y or p.y>B.y or p.y>C.y or p.y>D.y
 *         j = p.y > A.y and p.y>B.y and p.y>C.y and p.y>D.y
 *         i = i and not j             # <<<<<<<<<<<<<<
 * 
 *         #maybe a bad idea, but this is incase bezier is actually a plane in x or y only:
 */
  if (__pyx_v_i) {
  } else {
    __pyx_t_1 = __pyx_v_i;
    goto __pyx_L21_bool_binop_done;
  }
  __pyx_t_2 = (!(__pyx_v_j != 0));
  __pyx_t_1 = __pyx_t_2;
  __pyx_L21_bool_binop_done:;
  __pyx_v_i = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":817
 * 
 *         #maybe a bad idea, but this is incase bezier is actually a plane in x or y only:
 *         w = A.x - D.x             # <<<<<<<<<<<<<<
 *         w = w*w
 *         if w <= .0005:
 */
  __pyx_v_w = (__pyx_v_A.x - __pyx_v_D.x);

  /* "raypier/core/cfaces.pyx":818
 *         #maybe a bad idea, but this is incase bezier is actually a plane in x or y only:
 *         w = A.x - D.x
 *         w = w*w             # <<<<<<<<<<<<<<
 *         if w <= .0005:
 *             w = B.x - A.x
 */
  __pyx_v_w = (__pyx_v_w * __pyx_v_w);

  /* "raypier/core/cfaces.pyx":819
 *         w = A.x - D.x
 *         w = w*w
 *         if w <= .0005:             # <<<<<<<<<<<<<<
 *             w = B.x - A.x
 *             w=w*w
 */
  __pyx_t_2 = ((__pyx_v_w <= .0005) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":820
 *         w = w*w
 *         if w <= .0005:
 *             w = B.x - A.x             # <<<<<<<<<<<<<<
 *             w=w*w
 *             if w <= .0005:
 */
    __pyx_v_w = (__pyx_v_B.x - __pyx_v_A.x);

    /* "raypier/core/cfaces.pyx":821
 *         if w <= .0005:
 *             w = B.x - A.x
 *             w=w*w             # <<<<<<<<<<<<<<
 *             if w <= .0005:
 *                 i=k=True
 */
    __pyx_v_w = (__pyx_v_w * __pyx_v_w);

    /* "raypier/core/cfaces.pyx":822
 *             w = B.x - A.x
 *             w=w*w
 *             if w <= .0005:             # <<<<<<<<<<<<<<
 *                 i=k=True
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_w <= .0005) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":823
 *             w=w*w
 *             if w <= .0005:
 *                 i=k=True             # <<<<<<<<<<<<<<
 *         else:
 *             w = A.y - D.y
 */
      __pyx_v_i = 1;
      __pyx_v_k = 1;

      /* "raypier/core/cfaces.pyx":822
 *             w = B.x - A.x
 *             w=w*w
 *             if w <= .0005:             # <<<<<<<<<<<<<<
 *                 i=k=True
 *         else:
 */
    }

    /* "raypier/core/cfaces.pyx":819
 *         w = A.x - D.x
 *         w = w*w
 *         if w <= .0005:             # <<<<<<<<<<<<<<
 *             w = B.x - A.x
 *             w=w*w
 */
    goto __pyx_L23;
  }

  /* "raypier/core/cfaces.pyx":825
 *                 i=k=True
 *         else:
 *             w = A.y - D.y             # <<<<<<<<<<<<<<
 *             w = w*w
 *             if w <= .0005:
 */
  /*else*/ {
    __pyx_v_w = (__pyx_v_A.y - __pyx_v_D.y);

    /* "raypier/core/cfaces.pyx":826
 *         else:
 *             w = A.y - D.y
 *             w = w*w             # <<<<<<<<<<<<<<
 *             if w <= .0005:
 *                 w = B.y - A.y
 */
    __pyx_v_w = (__pyx_v_w * __pyx_v_w);

    /* "raypier/core/cfaces.pyx":827
 *             w = A.y - D.y
 *             w = w*w
 *             if w <= .0005:             # <<<<<<<<<<<<<<
 *                 w = B.y - A.y
 *                 w=w*w
 */
    __pyx_t_2 = ((__pyx_v_w <= .0005) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":828
 *             w = w*w
 *             if w <= .0005:
 *                 w = B.y - A.y             # <<<<<<<<<<<<<<
 *                 w=w*w
 *                 if w <= .0005:
 */
      __pyx_v_w = (__pyx_v_B.y - __pyx_v_A.y);

      /* "raypier/core/cfaces.pyx":829
 *             if w <= .0005:
 *                 w = B.y - A.y
 *                 w=w*w             # <<<<<<<<<<<<<<
 *                 if w <= .0005:
 *                     i=k=True
 */
      __pyx_v_w = (__pyx_v_w * __pyx_v_w);

      /* "raypier/core/cfaces.pyx":830
 *                 w = B.y - A.y
 *                 w=w*w
 *                 if w <= .0005:             # <<<<<<<<<<<<<<
 *                     i=k=True
 *         return i and k
 */
      __pyx_t_2 = ((__pyx_v_w <= .0005) != 0);
      if (__pyx_t_2) {

        /* "raypier/core/cfaces.pyx":831
 *                 w=w*w
 *                 if w <= .0005:
 *                     i=k=True             # <<<<<<<<<<<<<<
 *         return i and k
 * 
 */
        __pyx_v_i = 1;
        __pyx_v_k = 1;

        /* "raypier/core/cfaces.pyx":830
 *                 w = B.y - A.y
 *                 w=w*w
 *                 if w <= .0005:             # <<<<<<<<<<<<<<
 *                     i=k=True
 *         return i and k
 */
      }

      /* "raypier/core/cfaces.pyx":827
 *             w = A.y - D.y
 *             w = w*w
 *             if w <= .0005:             # <<<<<<<<<<<<<<
 *                 w = B.y - A.y
 *                 w=w*w
 */
    }
  }
  __pyx_L23:;

  /* "raypier/core/cfaces.pyx":832
 *                 if w <= .0005:
 *                     i=k=True
 *         return i and k             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self,np_.ndarray[np_.float64_t ,ndim=3] beziercurves,double z_height_1=0,double z_height_2=0, **kwds):
 */
  if (__pyx_v_i) {
  } else {
    __pyx_t_1 = __pyx_v_i;
    goto __pyx_L27_bool_binop_done;
  }
  __pyx_t_1 = __pyx_v_k;
  __pyx_L27_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":802
 *         return self.ccw(A,C,D) != self.ccw(B,C,D) and self.ccw(A,B,C) != self.ccw(A,B,D)
 * 
 *     cdef int pnt_in_hull(self,flatvector_t p, flatvector_t A, flatvector_t B, flatvector_t C, flatvector_t D):             # <<<<<<<<<<<<<<
 *         #instead of convex hull, just use xy bounding box, which is quicker to construct
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":834
 *         return i and k
 * 
 *     def __cinit__(self,np_.ndarray[np_.float64_t ,ndim=3] beziercurves,double z_height_1=0,double z_height_2=0, **kwds):             # <<<<<<<<<<<<<<
 *         cdef flatvector_t temp1, temp2
 *         self.curves_array = beziercurves
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_beziercurves = 0;
  double __pyx_v_z_height_1;
  double __pyx_v_z_height_2;
  CYTHON_UNUSED PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_beziercurves,&__pyx_n_s_z_height_1,&__pyx_n_s_z_height_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_beziercurves)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_height_1);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_height_2);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 834, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_beziercurves = ((PyArrayObject *)values[0]);
    if (values[1]) {
      __pyx_v_z_height_1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_z_height_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L3_error)
    } else {
      __pyx_v_z_height_1 = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_z_height_2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z_height_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L3_error)
    } else {
      __pyx_v_z_height_2 = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 834, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedBezierFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_beziercurves), __pyx_ptype_5numpy_ndarray, 1, "beziercurves", 0))) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self), __pyx_v_beziercurves, __pyx_v_z_height_1, __pyx_v_z_height_2, __pyx_v_kwds);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, PyArrayObject *__pyx_v_beziercurves, double __pyx_v_z_height_1, double __pyx_v_z_height_2, CYTHON_UNUSED PyObject *__pyx_v_kwds) {
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_temp1;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_temp2;
  PyObject *__pyx_v_bezierpts = NULL;
  PyObject *__pyx_v_pair = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_beziercurves;
  __Pyx_Buffer __pyx_pybuffer_beziercurves;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  double __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_beziercurves.pybuffer.buf = NULL;
  __pyx_pybuffer_beziercurves.refcount = 0;
  __pyx_pybuffernd_beziercurves.data = NULL;
  __pyx_pybuffernd_beziercurves.rcbuffer = &__pyx_pybuffer_beziercurves;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_beziercurves.rcbuffer->pybuffer, (PyObject*)__pyx_v_beziercurves, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 3, 0, __pyx_stack) == -1)) __PYX_ERR(0, 834, __pyx_L1_error)
  }
  __pyx_pybuffernd_beziercurves.diminfo[0].strides = __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_beziercurves.diminfo[0].shape = __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_beziercurves.diminfo[1].strides = __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_beziercurves.diminfo[1].shape = __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_beziercurves.diminfo[2].strides = __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_beziercurves.diminfo[2].shape = __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.shape[2];

  /* "raypier/core/cfaces.pyx":836
 *     def __cinit__(self,np_.ndarray[np_.float64_t ,ndim=3] beziercurves,double z_height_1=0,double z_height_2=0, **kwds):
 *         cdef flatvector_t temp1, temp2
 *         self.curves_array = beziercurves             # <<<<<<<<<<<<<<
 *         self.z_height_1 = z_height_1
 *         self.z_height_2 = z_height_2
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_beziercurves));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_beziercurves));
  __Pyx_GOTREF(__pyx_v_self->curves_array);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->curves_array));
  __pyx_v_self->curves_array = ((PyArrayObject *)__pyx_v_beziercurves);

  /* "raypier/core/cfaces.pyx":837
 *         cdef flatvector_t temp1, temp2
 *         self.curves_array = beziercurves
 *         self.z_height_1 = z_height_1             # <<<<<<<<<<<<<<
 *         self.z_height_2 = z_height_2
 *         temp1.x = beziercurves[0,0,0]
 */
  __pyx_v_self->z_height_1 = __pyx_v_z_height_1;

  /* "raypier/core/cfaces.pyx":838
 *         self.curves_array = beziercurves
 *         self.z_height_1 = z_height_1
 *         self.z_height_2 = z_height_2             # <<<<<<<<<<<<<<
 *         temp1.x = beziercurves[0,0,0]
 *         temp1.y = beziercurves[0,0,1]
 */
  __pyx_v_self->z_height_2 = __pyx_v_z_height_2;

  /* "raypier/core/cfaces.pyx":839
 *         self.z_height_1 = z_height_1
 *         self.z_height_2 = z_height_2
 *         temp1.x = beziercurves[0,0,0]             # <<<<<<<<<<<<<<
 *         temp1.y = beziercurves[0,0,1]
 *         temp2.x = beziercurves[0,0,0]
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_pybuffernd_beziercurves.diminfo[0].shape;
  if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_beziercurves.diminfo[1].shape;
  if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_beziercurves.diminfo[2].shape;
  __pyx_v_temp1.x = (*__Pyx_BufPtrStrided3d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_beziercurves.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_beziercurves.diminfo[1].strides, __pyx_t_3, __pyx_pybuffernd_beziercurves.diminfo[2].strides));

  /* "raypier/core/cfaces.pyx":840
 *         self.z_height_2 = z_height_2
 *         temp1.x = beziercurves[0,0,0]
 *         temp1.y = beziercurves[0,0,1]             # <<<<<<<<<<<<<<
 *         temp2.x = beziercurves[0,0,0]
 *         temp2.y = beziercurves[0,0,1]
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 1;
  if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_beziercurves.diminfo[0].shape;
  if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_beziercurves.diminfo[1].shape;
  if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_pybuffernd_beziercurves.diminfo[2].shape;
  __pyx_v_temp1.y = (*__Pyx_BufPtrStrided3d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_beziercurves.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_beziercurves.diminfo[1].strides, __pyx_t_1, __pyx_pybuffernd_beziercurves.diminfo[2].strides));

  /* "raypier/core/cfaces.pyx":841
 *         temp1.x = beziercurves[0,0,0]
 *         temp1.y = beziercurves[0,0,1]
 *         temp2.x = beziercurves[0,0,0]             # <<<<<<<<<<<<<<
 *         temp2.y = beziercurves[0,0,1]
 * 
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_pybuffernd_beziercurves.diminfo[0].shape;
  if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_beziercurves.diminfo[1].shape;
  if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_beziercurves.diminfo[2].shape;
  __pyx_v_temp2.x = (*__Pyx_BufPtrStrided3d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_beziercurves.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_beziercurves.diminfo[1].strides, __pyx_t_3, __pyx_pybuffernd_beziercurves.diminfo[2].strides));

  /* "raypier/core/cfaces.pyx":842
 *         temp1.y = beziercurves[0,0,1]
 *         temp2.x = beziercurves[0,0,0]
 *         temp2.y = beziercurves[0,0,1]             # <<<<<<<<<<<<<<
 * 
 *         for bezierpts in beziercurves:
 */
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 1;
  if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_beziercurves.diminfo[0].shape;
  if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_beziercurves.diminfo[1].shape;
  if (__pyx_t_1 < 0) __pyx_t_1 += __pyx_pybuffernd_beziercurves.diminfo[2].shape;
  __pyx_v_temp2.y = (*__Pyx_BufPtrStrided3d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_beziercurves.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_beziercurves.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_beziercurves.diminfo[1].strides, __pyx_t_1, __pyx_pybuffernd_beziercurves.diminfo[2].strides));

  /* "raypier/core/cfaces.pyx":844
 *         temp2.y = beziercurves[0,0,1]
 * 
 *         for bezierpts in beziercurves:             # <<<<<<<<<<<<<<
 *             for pair in bezierpts:
 *                 if pair[0] < temp1.x: temp1.x=pair[0]
 */
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_beziercurves))) || PyTuple_CheckExact(((PyObject *)__pyx_v_beziercurves))) {
    __pyx_t_4 = ((PyObject *)__pyx_v_beziercurves); __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(((PyObject *)__pyx_v_beziercurves)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 844, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 844, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 844, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 844, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_bezierpts, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "raypier/core/cfaces.pyx":845
 * 
 *         for bezierpts in beziercurves:
 *             for pair in bezierpts:             # <<<<<<<<<<<<<<
 *                 if pair[0] < temp1.x: temp1.x=pair[0]
 *                 if pair[0] > temp2.x: temp2.x=pair[0]
 */
    if (likely(PyList_CheckExact(__pyx_v_bezierpts)) || PyTuple_CheckExact(__pyx_v_bezierpts)) {
      __pyx_t_7 = __pyx_v_bezierpts; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_bezierpts); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 845, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 845, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 845, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 845, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 845, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_pair, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "raypier/core/cfaces.pyx":846
 *         for bezierpts in beziercurves:
 *             for pair in bezierpts:
 *                 if pair[0] < temp1.x: temp1.x=pair[0]             # <<<<<<<<<<<<<<
 *                 if pair[0] > temp2.x: temp2.x=pair[0]
 *                 if pair[1] < temp1.y: temp1.y=pair[1]
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_temp1.x); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_10, __pyx_t_11, Py_LT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_13) {
        __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 846, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 846, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_temp1.x = __pyx_t_14;
      }

      /* "raypier/core/cfaces.pyx":847
 *             for pair in bezierpts:
 *                 if pair[0] < temp1.x: temp1.x=pair[0]
 *                 if pair[0] > temp2.x: temp2.x=pair[0]             # <<<<<<<<<<<<<<
 *                 if pair[1] < temp1.y: temp1.y=pair[1]
 *                 if pair[1] > temp2.y: temp2.y=pair[1]
 */
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_temp2.x); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = PyObject_RichCompare(__pyx_t_12, __pyx_t_11, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_13) {
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_pair, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 847, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_temp2.x = __pyx_t_14;
      }

      /* "raypier/core/cfaces.pyx":848
 *                 if pair[0] < temp1.x: temp1.x=pair[0]
 *                 if pair[0] > temp2.x: temp2.x=pair[0]
 *                 if pair[1] < temp1.y: temp1.y=pair[1]             # <<<<<<<<<<<<<<
 *                 if pair[1] > temp2.y: temp2.y=pair[1]
 * 
 */
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_temp1.y); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 848, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_10, __pyx_t_11, Py_LT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 848, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_13) {
        __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 848, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 848, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_temp1.y = __pyx_t_14;
      }

      /* "raypier/core/cfaces.pyx":849
 *                 if pair[0] > temp2.x: temp2.x=pair[0]
 *                 if pair[1] < temp1.y: temp1.y=pair[1]
 *                 if pair[1] > temp2.y: temp2.y=pair[1]             # <<<<<<<<<<<<<<
 * 
 *         self.mincorner = temp1
 */
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_temp2.y); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = PyObject_RichCompare(__pyx_t_12, __pyx_t_11, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 849, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_13) {
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_pair, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 849, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 849, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_temp2.y = __pyx_t_14;
      }

      /* "raypier/core/cfaces.pyx":845
 * 
 *         for bezierpts in beziercurves:
 *             for pair in bezierpts:             # <<<<<<<<<<<<<<
 *                 if pair[0] < temp1.x: temp1.x=pair[0]
 *                 if pair[0] > temp2.x: temp2.x=pair[0]
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "raypier/core/cfaces.pyx":844
 *         temp2.y = beziercurves[0,0,1]
 * 
 *         for bezierpts in beziercurves:             # <<<<<<<<<<<<<<
 *             for pair in bezierpts:
 *                 if pair[0] < temp1.x: temp1.x=pair[0]
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "raypier/core/cfaces.pyx":851
 *                 if pair[1] > temp2.y: temp2.y=pair[1]
 * 
 *         self.mincorner = temp1             # <<<<<<<<<<<<<<
 *         self.maxcorner = temp2
 * 
 */
  __pyx_v_self->mincorner = __pyx_v_temp1;

  /* "raypier/core/cfaces.pyx":852
 * 
 *         self.mincorner = temp1
 *         self.maxcorner = temp2             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t ar, vector_t pee2, int is_base_ray):
 */
  __pyx_v_self->maxcorner = __pyx_v_temp2;

  /* "raypier/core/cfaces.pyx":834
 *         return i and k
 * 
 *     def __cinit__(self,np_.ndarray[np_.float64_t ,ndim=3] beziercurves,double z_height_1=0,double z_height_2=0, **kwds):             # <<<<<<<<<<<<<<
 *         cdef flatvector_t temp1, temp2
 *         self.curves_array = beziercurves
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_beziercurves.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedBezierFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_beziercurves.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_bezierpts);
  __Pyx_XDECREF(__pyx_v_pair);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":854
 *         self.maxcorner = temp2
 * 
 *     cdef intersect_t intersect_c(self, vector_t ar, vector_t pee2, int is_base_ray):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_ar, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pee2, CYTHON_UNUSED int __pyx_v_is_base_ray) {
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_tempvector;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_r;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_p2;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_s;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_origin;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp0;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp1;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp2;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp3;
  double __pyx_v_result;
  double __pyx_v_dZ;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_D;
  double __pyx_v_t;
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_c;
  struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_v_ts;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_tempv;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  double __pyx_v_theta;
  PyObject *__pyx_v_curve = NULL;
  PyObject *__pyx_v_pt = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  double __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":860
 *             flatvector_t r, p2, s, origin
 *             flatvector_t cp0,cp1,cp2,cp3  #holds control points for spline segment under scrutiny
 *             double result = INF            #length of ray before it intersects surface. 0 if no valid intersection             # <<<<<<<<<<<<<<
 *             double dZ                       #rate of change of z. dZ*result+Z0 gives Z coordinate
 *             double A,B,C,D,t,a,b,c,d
 */
  __pyx_v_result = __pyx_v_7raypier_4core_6cfaces_INF;

  /* "raypier/core/cfaces.pyx":865
 *             poly_roots ts
 *             vector_t    tempv
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         #print "\ncalled intersection"
 * 
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":868
 *         #print "\ncalled intersection"
 * 
 *         origin.x = 0             # <<<<<<<<<<<<<<
 *         origin.y = 0
 *         #first off, does ray even enter the depth of the extrusion?
 */
  __pyx_v_origin.x = 0.0;

  /* "raypier/core/cfaces.pyx":869
 * 
 *         origin.x = 0
 *         origin.y = 0             # <<<<<<<<<<<<<<
 *         #first off, does ray even enter the depth of the extrusion?
 *         if (ar.z < self.z_height_1 and pee2.z <self.z_height_1) or (ar.z > self.z_height_2 and pee2.z > self.z_height_2):
 */
  __pyx_v_origin.y = 0.0;

  /* "raypier/core/cfaces.pyx":871
 *         origin.y = 0
 *         #first off, does ray even enter the depth of the extrusion?
 *         if (ar.z < self.z_height_1 and pee2.z <self.z_height_1) or (ar.z > self.z_height_2 and pee2.z > self.z_height_2):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION    #does not
 *         #print "ray passes z test"
 */
  __pyx_t_2 = ((__pyx_v_ar.z < __pyx_v_self->z_height_1) != 0);
  if (!__pyx_t_2) {
    goto __pyx_L5_next_or;
  } else {
  }
  __pyx_t_2 = ((__pyx_v_pee2.z < __pyx_v_self->z_height_1) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_L5_next_or:;
  __pyx_t_2 = ((__pyx_v_ar.z > __pyx_v_self->z_height_2) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_pee2.z > __pyx_v_self->z_height_2) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":872
 *         #first off, does ray even enter the depth of the extrusion?
 *         if (ar.z < self.z_height_1 and pee2.z <self.z_height_1) or (ar.z > self.z_height_2 and pee2.z > self.z_height_2):
 *             return NO_INTERSECTION    #does not             # <<<<<<<<<<<<<<
 *         #print "ray passes z test"
 *         #strip useless thrid dimension from ray vector
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":871
 *         origin.y = 0
 *         #first off, does ray even enter the depth of the extrusion?
 *         if (ar.z < self.z_height_1 and pee2.z <self.z_height_1) or (ar.z > self.z_height_2 and pee2.z > self.z_height_2):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION    #does not
 *         #print "ray passes z test"
 */
  }

  /* "raypier/core/cfaces.pyx":875
 *         #print "ray passes z test"
 *         #strip useless thrid dimension from ray vector
 *         r.x = ar.x             # <<<<<<<<<<<<<<
 *         r.y = ar.y
 *         p2.x = pee2.x
 */
  __pyx_t_3 = __pyx_v_ar.x;
  __pyx_v_r.x = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":876
 *         #strip useless thrid dimension from ray vector
 *         r.x = ar.x
 *         r.y = ar.y             # <<<<<<<<<<<<<<
 *         p2.x = pee2.x
 *         p2.y = pee2.y
 */
  __pyx_t_3 = __pyx_v_ar.y;
  __pyx_v_r.y = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":877
 *         r.x = ar.x
 *         r.y = ar.y
 *         p2.x = pee2.x             # <<<<<<<<<<<<<<
 *         p2.y = pee2.y
 * 
 */
  __pyx_t_3 = __pyx_v_pee2.x;
  __pyx_v_p2.x = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":878
 *         r.y = ar.y
 *         p2.x = pee2.x
 *         p2.y = pee2.y             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __pyx_v_pee2.y;
  __pyx_v_p2.y = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":882
 * 
 *         #check if ray intersects x-y bounding box of spline at all
 *         tempvector.x = self.mincorner.x             # <<<<<<<<<<<<<<
 *         tempvector.y = self.maxcorner.y
 *         if not self.line_seg_overlap(r,p2,self.mincorner,tempvector):
 */
  __pyx_t_3 = __pyx_v_self->mincorner.x;
  __pyx_v_tempvector.x = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":883
 *         #check if ray intersects x-y bounding box of spline at all
 *         tempvector.x = self.mincorner.x
 *         tempvector.y = self.maxcorner.y             # <<<<<<<<<<<<<<
 *         if not self.line_seg_overlap(r,p2,self.mincorner,tempvector):
 *             if not  self.line_seg_overlap(r,p2,tempvector,self.maxcorner):
 */
  __pyx_t_3 = __pyx_v_self->maxcorner.y;
  __pyx_v_tempvector.y = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":884
 *         tempvector.x = self.mincorner.x
 *         tempvector.y = self.maxcorner.y
 *         if not self.line_seg_overlap(r,p2,self.mincorner,tempvector):             # <<<<<<<<<<<<<<
 *             if not  self.line_seg_overlap(r,p2,tempvector,self.maxcorner):
 *                 tempvector.x = self.maxcorner.x
 */
  __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_r, __pyx_v_p2, __pyx_v_self->mincorner, __pyx_v_tempvector) != 0)) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":885
 *         tempvector.y = self.maxcorner.y
 *         if not self.line_seg_overlap(r,p2,self.mincorner,tempvector):
 *             if not  self.line_seg_overlap(r,p2,tempvector,self.maxcorner):             # <<<<<<<<<<<<<<
 *                 tempvector.x = self.maxcorner.x
 *                 tempvector.y = self.mincorner.y
 */
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_r, __pyx_v_p2, __pyx_v_tempvector, __pyx_v_self->maxcorner) != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":886
 *         if not self.line_seg_overlap(r,p2,self.mincorner,tempvector):
 *             if not  self.line_seg_overlap(r,p2,tempvector,self.maxcorner):
 *                 tempvector.x = self.maxcorner.x             # <<<<<<<<<<<<<<
 *                 tempvector.y = self.mincorner.y
 *                 if not self.line_seg_overlap(r,p2,self.maxcorner,tempvector):
 */
      __pyx_t_3 = __pyx_v_self->maxcorner.x;
      __pyx_v_tempvector.x = __pyx_t_3;

      /* "raypier/core/cfaces.pyx":887
 *             if not  self.line_seg_overlap(r,p2,tempvector,self.maxcorner):
 *                 tempvector.x = self.maxcorner.x
 *                 tempvector.y = self.mincorner.y             # <<<<<<<<<<<<<<
 *                 if not self.line_seg_overlap(r,p2,self.maxcorner,tempvector):
 *                     if not self.line_seg_overlap(r,p2,tempvector,self.mincorner):
 */
      __pyx_t_3 = __pyx_v_self->mincorner.y;
      __pyx_v_tempvector.y = __pyx_t_3;

      /* "raypier/core/cfaces.pyx":888
 *                 tempvector.x = self.maxcorner.x
 *                 tempvector.y = self.mincorner.y
 *                 if not self.line_seg_overlap(r,p2,self.maxcorner,tempvector):             # <<<<<<<<<<<<<<
 *                     if not self.line_seg_overlap(r,p2,tempvector,self.mincorner):
 *                         return NO_INTERSECTION    #no intersections
 */
      __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_r, __pyx_v_p2, __pyx_v_self->maxcorner, __pyx_v_tempvector) != 0)) != 0);
      if (__pyx_t_1) {

        /* "raypier/core/cfaces.pyx":889
 *                 tempvector.y = self.mincorner.y
 *                 if not self.line_seg_overlap(r,p2,self.maxcorner,tempvector):
 *                     if not self.line_seg_overlap(r,p2,tempvector,self.mincorner):             # <<<<<<<<<<<<<<
 *                         return NO_INTERSECTION    #no intersections
 *         #print "ray is in big bounding box"
 */
        __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_r, __pyx_v_p2, __pyx_v_tempvector, __pyx_v_self->mincorner) != 0)) != 0);
        if (__pyx_t_1) {

          /* "raypier/core/cfaces.pyx":890
 *                 if not self.line_seg_overlap(r,p2,self.maxcorner,tempvector):
 *                     if not self.line_seg_overlap(r,p2,tempvector,self.mincorner):
 *                         return NO_INTERSECTION    #no intersections             # <<<<<<<<<<<<<<
 *         #print "ray is in big bounding box"
 *         #segment intersects with gross bounding box,
 */
          __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
          goto __pyx_L0;

          /* "raypier/core/cfaces.pyx":889
 *                 tempvector.y = self.mincorner.y
 *                 if not self.line_seg_overlap(r,p2,self.maxcorner,tempvector):
 *                     if not self.line_seg_overlap(r,p2,tempvector,self.mincorner):             # <<<<<<<<<<<<<<
 *                         return NO_INTERSECTION    #no intersections
 *         #print "ray is in big bounding box"
 */
        }

        /* "raypier/core/cfaces.pyx":888
 *                 tempvector.x = self.maxcorner.x
 *                 tempvector.y = self.mincorner.y
 *                 if not self.line_seg_overlap(r,p2,self.maxcorner,tempvector):             # <<<<<<<<<<<<<<
 *                     if not self.line_seg_overlap(r,p2,tempvector,self.mincorner):
 *                         return NO_INTERSECTION    #no intersections
 */
      }

      /* "raypier/core/cfaces.pyx":885
 *         tempvector.y = self.maxcorner.y
 *         if not self.line_seg_overlap(r,p2,self.mincorner,tempvector):
 *             if not  self.line_seg_overlap(r,p2,tempvector,self.maxcorner):             # <<<<<<<<<<<<<<
 *                 tempvector.x = self.maxcorner.x
 *                 tempvector.y = self.mincorner.y
 */
    }

    /* "raypier/core/cfaces.pyx":884
 *         tempvector.x = self.mincorner.x
 *         tempvector.y = self.maxcorner.y
 *         if not self.line_seg_overlap(r,p2,self.mincorner,tempvector):             # <<<<<<<<<<<<<<
 *             if not  self.line_seg_overlap(r,p2,tempvector,self.maxcorner):
 *                 tempvector.x = self.maxcorner.x
 */
  }

  /* "raypier/core/cfaces.pyx":894
 *         #segment intersects with gross bounding box,
 *         #Calc dZ and the 2D origin adjusted ray, because they will probably be used.
 *         tempv = subvv_ (pee2,ar)             # <<<<<<<<<<<<<<
 *         dZ = tempv.z
 *         s.x=tempv.x
 */
  __pyx_v_tempv = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_pee2, __pyx_v_ar);

  /* "raypier/core/cfaces.pyx":895
 *         #Calc dZ and the 2D origin adjusted ray, because they will probably be used.
 *         tempv = subvv_ (pee2,ar)
 *         dZ = tempv.z             # <<<<<<<<<<<<<<
 *         s.x=tempv.x
 *         s.y=tempv.y
 */
  __pyx_t_3 = __pyx_v_tempv.z;
  __pyx_v_dZ = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":896
 *         tempv = subvv_ (pee2,ar)
 *         dZ = tempv.z
 *         s.x=tempv.x             # <<<<<<<<<<<<<<
 *         s.y=tempv.y
 *         theta = atan2(s.y,s.x)
 */
  __pyx_t_3 = __pyx_v_tempv.x;
  __pyx_v_s.x = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":897
 *         dZ = tempv.z
 *         s.x=tempv.x
 *         s.y=tempv.y             # <<<<<<<<<<<<<<
 *         theta = atan2(s.y,s.x)
 * 
 */
  __pyx_t_3 = __pyx_v_tempv.y;
  __pyx_v_s.y = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":898
 *         s.x=tempv.x
 *         s.y=tempv.y
 *         theta = atan2(s.y,s.x)             # <<<<<<<<<<<<<<
 * 
 *         s = rotate2D(-theta,s)
 */
  __pyx_v_theta = atan2(__pyx_v_s.y, __pyx_v_s.x);

  /* "raypier/core/cfaces.pyx":900
 *         theta = atan2(s.y,s.x)
 * 
 *         s = rotate2D(-theta,s)             # <<<<<<<<<<<<<<
 *         # now, loop through curves and see if segment 1) intersects with individual convex hulls
 *         # 2) intersects with spline (return points)
 */
  __pyx_v_s = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_s);

  /* "raypier/core/cfaces.pyx":903
 *         # now, loop through curves and see if segment 1) intersects with individual convex hulls
 *         # 2) intersects with spline (return points)
 *         for curve in self.curves_array.copy():            #load up control points             # <<<<<<<<<<<<<<
 *             for pt in curve:
 *                 pt[0]=pt[0]-ar.x
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->curves_array), __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 903, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 903, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 903, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 903, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_curve, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "raypier/core/cfaces.pyx":904
 *         # 2) intersects with spline (return points)
 *         for curve in self.curves_array.copy():            #load up control points
 *             for pt in curve:             # <<<<<<<<<<<<<<
 *                 pt[0]=pt[0]-ar.x
 *                 pt[1]=pt[1]-ar.y
 */
    if (likely(PyList_CheckExact(__pyx_v_curve)) || PyTuple_CheckExact(__pyx_v_curve)) {
      __pyx_t_4 = __pyx_v_curve; __Pyx_INCREF(__pyx_t_4); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_curve); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 904, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_6); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 904, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 904, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_9); __Pyx_INCREF(__pyx_t_6); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 904, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 904, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_10(__pyx_t_4);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 904, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_pt, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "raypier/core/cfaces.pyx":905
 *         for curve in self.curves_array.copy():            #load up control points
 *             for pt in curve:
 *                 pt[0]=pt[0]-ar.x             # <<<<<<<<<<<<<<
 *                 pt[1]=pt[1]-ar.y
 *             cp0.x,cp0.y = curve[0].copy()
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_pt, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_ar.x); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyNumber_Subtract(__pyx_t_6, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pt, 0, __pyx_t_12, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "raypier/core/cfaces.pyx":906
 *             for pt in curve:
 *                 pt[0]=pt[0]-ar.x
 *                 pt[1]=pt[1]-ar.y             # <<<<<<<<<<<<<<
 *             cp0.x,cp0.y = curve[0].copy()
 *             cp1.x,cp1.y = curve[1].copy()
 */
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_v_pt, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_ar.y); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = PyNumber_Subtract(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(__Pyx_SetItemInt(__pyx_v_pt, 1, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 906, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "raypier/core/cfaces.pyx":904
 *         # 2) intersects with spline (return points)
 *         for curve in self.curves_array.copy():            #load up control points
 *             for pt in curve:             # <<<<<<<<<<<<<<
 *                 pt[0]=pt[0]-ar.x
 *                 pt[1]=pt[1]-ar.y
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "raypier/core/cfaces.pyx":907
 *                 pt[0]=pt[0]-ar.x
 *                 pt[1]=pt[1]-ar.y
 *             cp0.x,cp0.y = curve[0].copy()             # <<<<<<<<<<<<<<
 *             cp1.x,cp1.y = curve[1].copy()
 *             cp2.x,cp2.y = curve[2].copy()
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_curve, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_copy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 907, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
      index = 0; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      index = 1; __pyx_t_6 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_6)) goto __pyx_L16_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L17_unpacking_done;
      __pyx_L16_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 907, __pyx_L1_error)
      __pyx_L17_unpacking_done:;
    }
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_cp0.x = __pyx_t_3;
    __pyx_v_cp0.y = __pyx_t_14;

    /* "raypier/core/cfaces.pyx":908
 *                 pt[1]=pt[1]-ar.y
 *             cp0.x,cp0.y = curve[0].copy()
 *             cp1.x,cp1.y = curve[1].copy()             # <<<<<<<<<<<<<<
 *             cp2.x,cp2.y = curve[2].copy()
 *             cp3.x,cp3.y = curve[3].copy()
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_curve, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_copy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 908, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
      index = 0; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L18_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      index = 1; __pyx_t_6 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_6)) goto __pyx_L18_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 908, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L19_unpacking_done;
      __pyx_L18_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 908, __pyx_L1_error)
      __pyx_L19_unpacking_done:;
    }
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_cp1.x = __pyx_t_14;
    __pyx_v_cp1.y = __pyx_t_3;

    /* "raypier/core/cfaces.pyx":909
 *             cp0.x,cp0.y = curve[0].copy()
 *             cp1.x,cp1.y = curve[1].copy()
 *             cp2.x,cp2.y = curve[2].copy()             # <<<<<<<<<<<<<<
 *             cp3.x,cp3.y = curve[3].copy()
 * 
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_curve, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_copy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 909, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 909, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
      index = 0; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      index = 1; __pyx_t_6 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_6)) goto __pyx_L20_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 909, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L21_unpacking_done;
      __pyx_L20_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 909, __pyx_L1_error)
      __pyx_L21_unpacking_done:;
    }
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_cp2.x = __pyx_t_3;
    __pyx_v_cp2.y = __pyx_t_14;

    /* "raypier/core/cfaces.pyx":910
 *             cp1.x,cp1.y = curve[1].copy()
 *             cp2.x,cp2.y = curve[2].copy()
 *             cp3.x,cp3.y = curve[3].copy()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_curve, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_copy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 910, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_12 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 910, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
      index = 0; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L22_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      index = 1; __pyx_t_6 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_6)) goto __pyx_L22_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 910, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L23_unpacking_done;
      __pyx_L22_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 910, __pyx_L1_error)
      __pyx_L23_unpacking_done:;
    }
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_cp3.x = __pyx_t_14;
    __pyx_v_cp3.y = __pyx_t_3;

    /* "raypier/core/cfaces.pyx":914
 * 
 *             #rotate ctrl points such that ray is along the x axis
 *             cp0 = rotate2D(-theta,cp0)             # <<<<<<<<<<<<<<
 *             cp1 = rotate2D(-theta,cp1)
 *             cp2 = rotate2D(-theta,cp2)
 */
    __pyx_v_cp0 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp0);

    /* "raypier/core/cfaces.pyx":915
 *             #rotate ctrl points such that ray is along the x axis
 *             cp0 = rotate2D(-theta,cp0)
 *             cp1 = rotate2D(-theta,cp1)             # <<<<<<<<<<<<<<
 *             cp2 = rotate2D(-theta,cp2)
 *             cp3 = rotate2D(-theta,cp3)
 */
    __pyx_v_cp1 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp1);

    /* "raypier/core/cfaces.pyx":916
 *             cp0 = rotate2D(-theta,cp0)
 *             cp1 = rotate2D(-theta,cp1)
 *             cp2 = rotate2D(-theta,cp2)             # <<<<<<<<<<<<<<
 *             cp3 = rotate2D(-theta,cp3)
 *             #test for intersection between ray (actually segment) and convex hull
 */
    __pyx_v_cp2 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp2);

    /* "raypier/core/cfaces.pyx":917
 *             cp1 = rotate2D(-theta,cp1)
 *             cp2 = rotate2D(-theta,cp2)
 *             cp3 = rotate2D(-theta,cp3)             # <<<<<<<<<<<<<<
 *             #test for intersection between ray (actually segment) and convex hull
 *             if self.line_seg_overlap(origin,s,cp0,cp1) or self.line_seg_overlap(origin,s,cp1,cp2) or self.line_seg_overlap(origin,s,cp2,cp3) or self.line_seg_overlap(origin,s,cp3,cp0):
 */
    __pyx_v_cp3 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp3);

    /* "raypier/core/cfaces.pyx":919
 *             cp3 = rotate2D(-theta,cp3)
 *             #test for intersection between ray (actually segment) and convex hull
 *             if self.line_seg_overlap(origin,s,cp0,cp1) or self.line_seg_overlap(origin,s,cp1,cp2) or self.line_seg_overlap(origin,s,cp2,cp3) or self.line_seg_overlap(origin,s,cp3,cp0):             # <<<<<<<<<<<<<<
 *                 #print "inside intersect hull"
 *                 #Ray does intersect this convex hull.  Find solution:
 */
    __pyx_t_2 = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_origin, __pyx_v_s, __pyx_v_cp0, __pyx_v_cp1) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_2 = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_origin, __pyx_v_s, __pyx_v_cp1, __pyx_v_cp2) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_2 = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_origin, __pyx_v_s, __pyx_v_cp2, __pyx_v_cp3) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_2 = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->line_seg_overlap(__pyx_v_self, __pyx_v_origin, __pyx_v_s, __pyx_v_cp3, __pyx_v_cp0) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L25_bool_binop_done:;
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":923
 *                 #Ray does intersect this convex hull.  Find solution:
 *                 #Setup A,B,C and D (bernstein polynomials)
 *                 A = cp3.y-3*cp2.y+3*cp1.y-cp0.y             # <<<<<<<<<<<<<<
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y
 *                 C = 3*cp1.y-3*cp0.y
 */
      __pyx_v_A = (((__pyx_v_cp3.y - (3.0 * __pyx_v_cp2.y)) + (3.0 * __pyx_v_cp1.y)) - __pyx_v_cp0.y);

      /* "raypier/core/cfaces.pyx":924
 *                 #Setup A,B,C and D (bernstein polynomials)
 *                 A = cp3.y-3*cp2.y+3*cp1.y-cp0.y
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y             # <<<<<<<<<<<<<<
 *                 C = 3*cp1.y-3*cp0.y
 *                 D = cp0.y
 */
      __pyx_v_B = (((3.0 * __pyx_v_cp2.y) - (6.0 * __pyx_v_cp1.y)) + (3.0 * __pyx_v_cp0.y));

      /* "raypier/core/cfaces.pyx":925
 *                 A = cp3.y-3*cp2.y+3*cp1.y-cp0.y
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y
 *                 C = 3*cp1.y-3*cp0.y             # <<<<<<<<<<<<<<
 *                 D = cp0.y
 *                 #solve for t
 */
      __pyx_v_C = ((3.0 * __pyx_v_cp1.y) - (3.0 * __pyx_v_cp0.y));

      /* "raypier/core/cfaces.pyx":926
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y
 *                 C = 3*cp1.y-3*cp0.y
 *                 D = cp0.y             # <<<<<<<<<<<<<<
 *                 #solve for t
 *                 #print "ABCD: ",A,B,C,D
 */
      __pyx_t_3 = __pyx_v_cp0.y;
      __pyx_v_D = __pyx_t_3;

      /* "raypier/core/cfaces.pyx":929
 *                 #solve for t
 *                 #print "ABCD: ",A,B,C,D
 *                 ts = roots_of_cubic(A,B,C,D)             # <<<<<<<<<<<<<<
 *                 while ts.n > 0:
 *                     ts.n-=1
 */
      __pyx_v_ts = __pyx_f_7raypier_4core_6cfaces_roots_of_cubic(__pyx_v_A, __pyx_v_B, __pyx_v_C, __pyx_v_D);

      /* "raypier/core/cfaces.pyx":930
 *                 #print "ABCD: ",A,B,C,D
 *                 ts = roots_of_cubic(A,B,C,D)
 *                 while ts.n > 0:             # <<<<<<<<<<<<<<
 *                     ts.n-=1
 *                     t = ts.roots[ts.n]
 */
      while (1) {
        __pyx_t_1 = ((__pyx_v_ts.n > 0) != 0);
        if (!__pyx_t_1) break;

        /* "raypier/core/cfaces.pyx":931
 *                 ts = roots_of_cubic(A,B,C,D)
 *                 while ts.n > 0:
 *                     ts.n-=1             # <<<<<<<<<<<<<<
 *                     t = ts.roots[ts.n]
 *                     #print "root: ", t
 */
        __pyx_v_ts.n = (__pyx_v_ts.n - 1);

        /* "raypier/core/cfaces.pyx":932
 *                 while ts.n > 0:
 *                     ts.n-=1
 *                     t = ts.roots[ts.n]             # <<<<<<<<<<<<<<
 *                     #print "root: ", t
 *                     #make sure solution is on valid interval
 */
        __pyx_v_t = (__pyx_v_ts.roots[__pyx_v_ts.n]);

        /* "raypier/core/cfaces.pyx":935
 *                     #print "root: ", t
 *                     #make sure solution is on valid interval
 *                     if 0.<t<1.:             # <<<<<<<<<<<<<<
 *                         #the x value will also be the length, which is the form of result
 *                         b = eval_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)
 */
        __pyx_t_1 = (0. < __pyx_v_t);
        if (__pyx_t_1) {
          __pyx_t_1 = (__pyx_v_t < 1.);
        }
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "raypier/core/cfaces.pyx":937
 *                     if 0.<t<1.:
 *                         #the x value will also be the length, which is the form of result
 *                         b = eval_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)             # <<<<<<<<<<<<<<
 *                         #print "b at t",b,t
 *                         #is x within bounds?
 */
          __pyx_v_b = __pyx_f_7raypier_4core_6cfaces_eval_bezier(__pyx_v_t, __pyx_v_cp0.x, __pyx_v_cp1.x, __pyx_v_cp2.x, __pyx_v_cp3.x);

          /* "raypier/core/cfaces.pyx":940
 *                         #print "b at t",b,t
 *                         #is x within bounds?
 *                         if 0 < b < s.x:             # <<<<<<<<<<<<<<
 *                             #print "in range"
 *                             #is point within Z bounds?
 */
          __pyx_t_2 = (0.0 < __pyx_v_b);
          if (__pyx_t_2) {
            __pyx_t_2 = (__pyx_v_b < __pyx_v_s.x);
          }
          __pyx_t_1 = (__pyx_t_2 != 0);
          if (__pyx_t_1) {

            /* "raypier/core/cfaces.pyx":943
 *                             #print "in range"
 *                             #is point within Z bounds?
 *                             c = dZ*b/s.x             # <<<<<<<<<<<<<<
 *                             a = c+ar.z
 *                             if self.z_height_1 < a < self.z_height_2:
 */
            __pyx_v_c = ((__pyx_v_dZ * __pyx_v_b) / __pyx_v_s.x);

            /* "raypier/core/cfaces.pyx":944
 *                             #is point within Z bounds?
 *                             c = dZ*b/s.x
 *                             a = c+ar.z             # <<<<<<<<<<<<<<
 *                             if self.z_height_1 < a < self.z_height_2:
 *                                 #print "in z: ",B,result
 */
            __pyx_v_a = (__pyx_v_c + __pyx_v_ar.z);

            /* "raypier/core/cfaces.pyx":945
 *                             c = dZ*b/s.x
 *                             a = c+ar.z
 *                             if self.z_height_1 < a < self.z_height_2:             # <<<<<<<<<<<<<<
 *                                 #print "in z: ",B,result
 *                                 #is this the shortest length to an intersection so far?
 */
            __pyx_t_1 = (__pyx_v_self->z_height_1 < __pyx_v_a);
            if (__pyx_t_1) {
              __pyx_t_1 = (__pyx_v_a < __pyx_v_self->z_height_2);
            }
            __pyx_t_2 = (__pyx_t_1 != 0);
            if (__pyx_t_2) {

              /* "raypier/core/cfaces.pyx":948
 *                                 #print "in z: ",B,result
 *                                 #is this the shortest length to an intersection so far?
 *                                 b = sqrt(c**2+b**2)             # <<<<<<<<<<<<<<
 *                                 #print "this: ",b
 *                                 if b < result and b > self.tolerance:
 */
              __pyx_v_b = sqrt((pow(__pyx_v_c, 2.0) + pow(__pyx_v_b, 2.0)));

              /* "raypier/core/cfaces.pyx":950
 *                                 b = sqrt(c**2+b**2)
 *                                 #print "this: ",b
 *                                 if b < result and b > self.tolerance:             # <<<<<<<<<<<<<<
 *                                     result = b
 *                                     #print "b at t",b,t
 */
              __pyx_t_1 = ((__pyx_v_b < __pyx_v_result) != 0);
              if (__pyx_t_1) {
              } else {
                __pyx_t_2 = __pyx_t_1;
                goto __pyx_L35_bool_binop_done;
              }
              __pyx_t_1 = ((__pyx_v_b > __pyx_v_self->__pyx_base.tolerance) != 0);
              __pyx_t_2 = __pyx_t_1;
              __pyx_L35_bool_binop_done:;
              if (__pyx_t_2) {

                /* "raypier/core/cfaces.pyx":951
 *                                 #print "this: ",b
 *                                 if b < result and b > self.tolerance:
 *                                     result = b             # <<<<<<<<<<<<<<
 *                                     #print "b at t",b,t
 * 
 */
                __pyx_v_result = __pyx_v_b;

                /* "raypier/core/cfaces.pyx":950
 *                                 b = sqrt(c**2+b**2)
 *                                 #print "this: ",b
 *                                 if b < result and b > self.tolerance:             # <<<<<<<<<<<<<<
 *                                     result = b
 *                                     #print "b at t",b,t
 */
              }

              /* "raypier/core/cfaces.pyx":945
 *                             c = dZ*b/s.x
 *                             a = c+ar.z
 *                             if self.z_height_1 < a < self.z_height_2:             # <<<<<<<<<<<<<<
 *                                 #print "in z: ",B,result
 *                                 #is this the shortest length to an intersection so far?
 */
            }

            /* "raypier/core/cfaces.pyx":940
 *                         #print "b at t",b,t
 *                         #is x within bounds?
 *                         if 0 < b < s.x:             # <<<<<<<<<<<<<<
 *                             #print "in range"
 *                             #is point within Z bounds?
 */
          }

          /* "raypier/core/cfaces.pyx":935
 *                     #print "root: ", t
 *                     #make sure solution is on valid interval
 *                     if 0.<t<1.:             # <<<<<<<<<<<<<<
 *                         #the x value will also be the length, which is the form of result
 *                         b = eval_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)
 */
        }
      }

      /* "raypier/core/cfaces.pyx":919
 *             cp3 = rotate2D(-theta,cp3)
 *             #test for intersection between ray (actually segment) and convex hull
 *             if self.line_seg_overlap(origin,s,cp0,cp1) or self.line_seg_overlap(origin,s,cp1,cp2) or self.line_seg_overlap(origin,s,cp2,cp3) or self.line_seg_overlap(origin,s,cp3,cp0):             # <<<<<<<<<<<<<<
 *                 #print "inside intersect hull"
 *                 #Ray does intersect this convex hull.  Find solution:
 */
    }

    /* "raypier/core/cfaces.pyx":903
 *         # now, loop through curves and see if segment 1) intersects with individual convex hulls
 *         # 2) intersects with spline (return points)
 *         for curve in self.curves_array.copy():            #load up control points             # <<<<<<<<<<<<<<
 *             for pt in curve:
 *                 pt[0]=pt[0]-ar.x
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "raypier/core/cfaces.pyx":954
 *                                     #print "b at t",b,t
 * 
 *         if result == INF:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_2 = ((__pyx_v_result == __pyx_v_7raypier_4core_6cfaces_INF) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":955
 * 
 *         if result == INF:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         out.dist = result
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":954
 *                                     #print "b at t",b,t
 * 
 *         if result == INF:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":957
 *             return NO_INTERSECTION
 * 
 *         out.dist = result             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = __pyx_v_result;

  /* "raypier/core/cfaces.pyx":958
 * 
 *         out.dist = result
 *         return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":854
 *         self.maxcorner = temp2
 * 
 *     cdef intersect_t intersect_c(self, vector_t ar, vector_t pee2, int is_base_ray):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("raypier.core.cfaces.ExtrudedBezierFace.intersect_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_curve);
  __Pyx_XDECREF(__pyx_v_pt);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":962
 * 
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef:
 *             flatvector_t ray,cp0,cp1,cp2,cp3,rotated
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_ray;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp0;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp1;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp2;
  struct __pyx_t_7raypier_4core_6cfaces_flatvector_t __pyx_v_cp3;
  double __pyx_v_theta;
  double __pyx_v_tmp;
  double __pyx_v_t;
  struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_v_ts;
  PyObject *__pyx_v_curve = NULL;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_D;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":969
 *             np_.ndarray box
 *         #print "called looking for normal",p.x,p.y
 *         ray.x = p.x             # <<<<<<<<<<<<<<
 *         ray.y = p.y
 *         theta = atan2(p.y,p.x)
 */
  __pyx_t_1 = __pyx_v_p.x;
  __pyx_v_ray.x = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":970
 *         #print "called looking for normal",p.x,p.y
 *         ray.x = p.x
 *         ray.y = p.y             # <<<<<<<<<<<<<<
 *         theta = atan2(p.y,p.x)
 *         #find which curve this point is in
 */
  __pyx_t_1 = __pyx_v_p.y;
  __pyx_v_ray.y = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":971
 *         ray.x = p.x
 *         ray.y = p.y
 *         theta = atan2(p.y,p.x)             # <<<<<<<<<<<<<<
 *         #find which curve this point is in
 *         for curve in self.curves_array.copy():            #load up control points
 */
  __pyx_v_theta = atan2(__pyx_v_p.y, __pyx_v_p.x);

  /* "raypier/core/cfaces.pyx":973
 *         theta = atan2(p.y,p.x)
 *         #find which curve this point is in
 *         for curve in self.curves_array.copy():            #load up control points             # <<<<<<<<<<<<<<
 *             cp0.x,cp0.y = curve[0].copy()
 *             cp1.x,cp1.y = curve[1].copy()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->curves_array), __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 973, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 973, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 973, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 973, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_curve, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "raypier/core/cfaces.pyx":974
 *         #find which curve this point is in
 *         for curve in self.curves_array.copy():            #load up control points
 *             cp0.x,cp0.y = curve[0].copy()             # <<<<<<<<<<<<<<
 *             cp1.x,cp1.y = curve[1].copy()
 *             cp2.x,cp2.y = curve[2].copy()
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_curve, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 974, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 974, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 974, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 974, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_cp0.x = __pyx_t_1;
    __pyx_v_cp0.y = __pyx_t_10;

    /* "raypier/core/cfaces.pyx":975
 *         for curve in self.curves_array.copy():            #load up control points
 *             cp0.x,cp0.y = curve[0].copy()
 *             cp1.x,cp1.y = curve[1].copy()             # <<<<<<<<<<<<<<
 *             cp2.x,cp2.y = curve[2].copy()
 *             cp3.x,cp3.y = curve[3].copy()
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_curve, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 975, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 975, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 975, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_cp1.x = __pyx_t_10;
    __pyx_v_cp1.y = __pyx_t_1;

    /* "raypier/core/cfaces.pyx":976
 *             cp0.x,cp0.y = curve[0].copy()
 *             cp1.x,cp1.y = curve[1].copy()
 *             cp2.x,cp2.y = curve[2].copy()             # <<<<<<<<<<<<<<
 *             cp3.x,cp3.y = curve[3].copy()
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_curve, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 976, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 976, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L9_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L10_unpacking_done;
      __pyx_L9_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 976, __pyx_L1_error)
      __pyx_L10_unpacking_done:;
    }
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_cp2.x = __pyx_t_1;
    __pyx_v_cp2.y = __pyx_t_10;

    /* "raypier/core/cfaces.pyx":977
 *             cp1.x,cp1.y = curve[1].copy()
 *             cp2.x,cp2.y = curve[2].copy()
 *             cp3.x,cp3.y = curve[3].copy()             # <<<<<<<<<<<<<<
 * 
 *             #is point even in this hull?
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_curve, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_copy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 977, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 977, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_4)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 977, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_cp3.x = __pyx_t_10;
    __pyx_v_cp3.y = __pyx_t_1;

    /* "raypier/core/cfaces.pyx":981
 *             #is point even in this hull?
 *             #print "tried at least"
 *             if self.pnt_in_hull(ray,cp0,cp1,cp2,cp3):             # <<<<<<<<<<<<<<
 *                 #then, solve for t
 *                 #print "in hull"
 */
    __pyx_t_11 = (((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self->__pyx_base.__pyx_vtab)->pnt_in_hull(__pyx_v_self, __pyx_v_ray, __pyx_v_cp0, __pyx_v_cp1, __pyx_v_cp2, __pyx_v_cp3) != 0);
    if (__pyx_t_11) {

      /* "raypier/core/cfaces.pyx":984
 *                 #then, solve for t
 *                 #print "in hull"
 *                 cp0 = rotate2D(-theta,cp0)             # <<<<<<<<<<<<<<
 *                 cp1 = rotate2D(-theta,cp1)
 *                 cp2 = rotate2D(-theta,cp2)
 */
      __pyx_v_cp0 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp0);

      /* "raypier/core/cfaces.pyx":985
 *                 #print "in hull"
 *                 cp0 = rotate2D(-theta,cp0)
 *                 cp1 = rotate2D(-theta,cp1)             # <<<<<<<<<<<<<<
 *                 cp2 = rotate2D(-theta,cp2)
 *                 cp3 = rotate2D(-theta,cp3)
 */
      __pyx_v_cp1 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp1);

      /* "raypier/core/cfaces.pyx":986
 *                 cp0 = rotate2D(-theta,cp0)
 *                 cp1 = rotate2D(-theta,cp1)
 *                 cp2 = rotate2D(-theta,cp2)             # <<<<<<<<<<<<<<
 *                 cp3 = rotate2D(-theta,cp3)
 * 
 */
      __pyx_v_cp2 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp2);

      /* "raypier/core/cfaces.pyx":987
 *                 cp1 = rotate2D(-theta,cp1)
 *                 cp2 = rotate2D(-theta,cp2)
 *                 cp3 = rotate2D(-theta,cp3)             # <<<<<<<<<<<<<<
 * 
 *                 #Setup A,B,C and D (bernstein polynomials)
 */
      __pyx_v_cp3 = __pyx_f_7raypier_4core_6cfaces_rotate2D((-__pyx_v_theta), __pyx_v_cp3);

      /* "raypier/core/cfaces.pyx":990
 * 
 *                 #Setup A,B,C and D (bernstein polynomials)
 *                 A = cp3.y-3*cp2.y+3*cp1.y-cp0.y             # <<<<<<<<<<<<<<
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y
 *                 C = 3*cp1.y-3*cp0.y
 */
      __pyx_v_A = (((__pyx_v_cp3.y - (3.0 * __pyx_v_cp2.y)) + (3.0 * __pyx_v_cp1.y)) - __pyx_v_cp0.y);

      /* "raypier/core/cfaces.pyx":991
 *                 #Setup A,B,C and D (bernstein polynomials)
 *                 A = cp3.y-3*cp2.y+3*cp1.y-cp0.y
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y             # <<<<<<<<<<<<<<
 *                 C = 3*cp1.y-3*cp0.y
 *                 D = cp0.y
 */
      __pyx_v_B = (((3.0 * __pyx_v_cp2.y) - (6.0 * __pyx_v_cp1.y)) + (3.0 * __pyx_v_cp0.y));

      /* "raypier/core/cfaces.pyx":992
 *                 A = cp3.y-3*cp2.y+3*cp1.y-cp0.y
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y
 *                 C = 3*cp1.y-3*cp0.y             # <<<<<<<<<<<<<<
 *                 D = cp0.y
 *                 ts = roots_of_cubic(A,B,C,D)
 */
      __pyx_v_C = ((3.0 * __pyx_v_cp1.y) - (3.0 * __pyx_v_cp0.y));

      /* "raypier/core/cfaces.pyx":993
 *                 B = 3*cp2.y-6*cp1.y+3*cp0.y
 *                 C = 3*cp1.y-3*cp0.y
 *                 D = cp0.y             # <<<<<<<<<<<<<<
 *                 ts = roots_of_cubic(A,B,C,D)
 * 
 */
      __pyx_t_1 = __pyx_v_cp0.y;
      __pyx_v_D = __pyx_t_1;

      /* "raypier/core/cfaces.pyx":994
 *                 C = 3*cp1.y-3*cp0.y
 *                 D = cp0.y
 *                 ts = roots_of_cubic(A,B,C,D)             # <<<<<<<<<<<<<<
 * 
 *                 #print "normal roots: ",ts.n,ts.roots[0],ts.roots[1],ts.roots[2]
 */
      __pyx_v_ts = __pyx_f_7raypier_4core_6cfaces_roots_of_cubic(__pyx_v_A, __pyx_v_B, __pyx_v_C, __pyx_v_D);

      /* "raypier/core/cfaces.pyx":997
 * 
 *                 #print "normal roots: ",ts.n,ts.roots[0],ts.roots[1],ts.roots[2]
 *                 while ts.n > 0:             # <<<<<<<<<<<<<<
 *                     ts.n -=1
 *                     t = ts.roots[ts.n]
 */
      while (1) {
        __pyx_t_11 = ((__pyx_v_ts.n > 0) != 0);
        if (!__pyx_t_11) break;

        /* "raypier/core/cfaces.pyx":998
 *                 #print "normal roots: ",ts.n,ts.roots[0],ts.roots[1],ts.roots[2]
 *                 while ts.n > 0:
 *                     ts.n -=1             # <<<<<<<<<<<<<<
 *                     t = ts.roots[ts.n]
 *                     #make sure solution is within interval
 */
        __pyx_v_ts.n = (__pyx_v_ts.n - 1);

        /* "raypier/core/cfaces.pyx":999
 *                 while ts.n > 0:
 *                     ts.n -=1
 *                     t = ts.roots[ts.n]             # <<<<<<<<<<<<<<
 *                     #make sure solution is within interval
 *                     #print "normal t: ",t
 */
        __pyx_v_t = (__pyx_v_ts.roots[__pyx_v_ts.n]);

        /* "raypier/core/cfaces.pyx":1002
 *                     #make sure solution is within interval
 *                     #print "normal t: ",t
 *                     if 0<=t<=1:             # <<<<<<<<<<<<<<
 *                         #ok, then is this the t to the same point p?
 *                         tmp = eval_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)
 */
        __pyx_t_11 = (0.0 <= __pyx_v_t);
        if (__pyx_t_11) {
          __pyx_t_11 = (__pyx_v_t <= 1.0);
        }
        __pyx_t_12 = (__pyx_t_11 != 0);
        if (__pyx_t_12) {

          /* "raypier/core/cfaces.pyx":1004
 *                     if 0<=t<=1:
 *                         #ok, then is this the t to the same point p?
 *                         tmp = eval_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)             # <<<<<<<<<<<<<<
 *                         #print "normal b at t: ",tmp,t
 *                         #I will generously allow for rounding error
 */
          __pyx_v_tmp = __pyx_f_7raypier_4core_6cfaces_eval_bezier(__pyx_v_t, __pyx_v_cp0.x, __pyx_v_cp1.x, __pyx_v_cp2.x, __pyx_v_cp3.x);

          /* "raypier/core/cfaces.pyx":1008
 *                         #I will generously allow for rounding error
 *                         #print "got here with point: ",tmp,
 *                         if tmp**2 - (ray.x**2+ray.y**2) < .0001:             # <<<<<<<<<<<<<<
 *                             #this is the single solution. return the derivative dy/dx = dy/dt / dx/dt
 *                             #print "that was it!"
 */
          __pyx_t_12 = (((pow(__pyx_v_tmp, 2.0) - (pow(__pyx_v_ray.x, 2.0) + pow(__pyx_v_ray.y, 2.0))) < .0001) != 0);
          if (__pyx_t_12) {

            /* "raypier/core/cfaces.pyx":1011
 *                             #this is the single solution. return the derivative dy/dx = dy/dt / dx/dt
 *                             #print "that was it!"
 *                             ray.x = dif_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)             # <<<<<<<<<<<<<<
 *                             ray.y = dif_bezier(t,cp0.y,cp1.y,cp2.y,cp3.y)
 *                             ray = rotate2D(theta,ray)
 */
            __pyx_v_ray.x = __pyx_f_7raypier_4core_6cfaces_dif_bezier(__pyx_v_t, __pyx_v_cp0.x, __pyx_v_cp1.x, __pyx_v_cp2.x, __pyx_v_cp3.x);

            /* "raypier/core/cfaces.pyx":1012
 *                             #print "that was it!"
 *                             ray.x = dif_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)
 *                             ray.y = dif_bezier(t,cp0.y,cp1.y,cp2.y,cp3.y)             # <<<<<<<<<<<<<<
 *                             ray = rotate2D(theta,ray)
 *                             p.z = 0     #trough has no slope in z
 */
            __pyx_v_ray.y = __pyx_f_7raypier_4core_6cfaces_dif_bezier(__pyx_v_t, __pyx_v_cp0.y, __pyx_v_cp1.y, __pyx_v_cp2.y, __pyx_v_cp3.y);

            /* "raypier/core/cfaces.pyx":1013
 *                             ray.x = dif_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)
 *                             ray.y = dif_bezier(t,cp0.y,cp1.y,cp2.y,cp3.y)
 *                             ray = rotate2D(theta,ray)             # <<<<<<<<<<<<<<
 *                             p.z = 0     #trough has no slope in z
 *                             #direction of normal is to the left of the parametric curve
 */
            __pyx_v_ray = __pyx_f_7raypier_4core_6cfaces_rotate2D(__pyx_v_theta, __pyx_v_ray);

            /* "raypier/core/cfaces.pyx":1014
 *                             ray.y = dif_bezier(t,cp0.y,cp1.y,cp2.y,cp3.y)
 *                             ray = rotate2D(theta,ray)
 *                             p.z = 0     #trough has no slope in z             # <<<<<<<<<<<<<<
 *                             #direction of normal is to the left of the parametric curve
 *                             #slope of normal is -dx/dy
 */
            __pyx_v_p.z = 0.0;

            /* "raypier/core/cfaces.pyx":1018
 *                             #slope of normal is -dx/dy
 * 
 *                             if ray.y==0:             # <<<<<<<<<<<<<<
 *                                 p.x=0
 *                                 p.y = (1 if ray.x>0 else -1)
 */
            __pyx_t_12 = ((__pyx_v_ray.y == 0.0) != 0);
            if (__pyx_t_12) {

              /* "raypier/core/cfaces.pyx":1019
 * 
 *                             if ray.y==0:
 *                                 p.x=0             # <<<<<<<<<<<<<<
 *                                 p.y = (1 if ray.x>0 else -1)
 *                             elif ray.y>0:
 */
              __pyx_v_p.x = 0.0;

              /* "raypier/core/cfaces.pyx":1020
 *                             if ray.y==0:
 *                                 p.x=0
 *                                 p.y = (1 if ray.x>0 else -1)             # <<<<<<<<<<<<<<
 *                             elif ray.y>0:
 *                                 p.x=-1
 */
              if (((__pyx_v_ray.x > 0.0) != 0)) {
                __pyx_t_1 = 1.0;
              } else {
                __pyx_t_1 = -1.0;
              }
              __pyx_v_p.y = __pyx_t_1;

              /* "raypier/core/cfaces.pyx":1018
 *                             #slope of normal is -dx/dy
 * 
 *                             if ray.y==0:             # <<<<<<<<<<<<<<
 *                                 p.x=0
 *                                 p.y = (1 if ray.x>0 else -1)
 */
              goto __pyx_L18;
            }

            /* "raypier/core/cfaces.pyx":1021
 *                                 p.x=0
 *                                 p.y = (1 if ray.x>0 else -1)
 *                             elif ray.y>0:             # <<<<<<<<<<<<<<
 *                                 p.x=-1
 *                                 p.y = ray.x/ray.y
 */
            __pyx_t_12 = ((__pyx_v_ray.y > 0.0) != 0);
            if (__pyx_t_12) {

              /* "raypier/core/cfaces.pyx":1022
 *                                 p.y = (1 if ray.x>0 else -1)
 *                             elif ray.y>0:
 *                                 p.x=-1             # <<<<<<<<<<<<<<
 *                                 p.y = ray.x/ray.y
 *                             elif ray.y<0:
 */
              __pyx_v_p.x = -1.0;

              /* "raypier/core/cfaces.pyx":1023
 *                             elif ray.y>0:
 *                                 p.x=-1
 *                                 p.y = ray.x/ray.y             # <<<<<<<<<<<<<<
 *                             elif ray.y<0:
 *                                 p.x = 1
 */
              __pyx_v_p.y = (__pyx_v_ray.x / __pyx_v_ray.y);

              /* "raypier/core/cfaces.pyx":1021
 *                                 p.x=0
 *                                 p.y = (1 if ray.x>0 else -1)
 *                             elif ray.y>0:             # <<<<<<<<<<<<<<
 *                                 p.x=-1
 *                                 p.y = ray.x/ray.y
 */
              goto __pyx_L18;
            }

            /* "raypier/core/cfaces.pyx":1024
 *                                 p.x=-1
 *                                 p.y = ray.x/ray.y
 *                             elif ray.y<0:             # <<<<<<<<<<<<<<
 *                                 p.x = 1
 *                                 p.y = -ray.x/ray.y
 */
            __pyx_t_12 = ((__pyx_v_ray.y < 0.0) != 0);
            if (__pyx_t_12) {

              /* "raypier/core/cfaces.pyx":1025
 *                                 p.y = ray.x/ray.y
 *                             elif ray.y<0:
 *                                 p.x = 1             # <<<<<<<<<<<<<<
 *                                 p.y = -ray.x/ray.y
 *                             return norm_(p)
 */
              __pyx_v_p.x = 1.0;

              /* "raypier/core/cfaces.pyx":1026
 *                             elif ray.y<0:
 *                                 p.x = 1
 *                                 p.y = -ray.x/ray.y             # <<<<<<<<<<<<<<
 *                             return norm_(p)
 * 
 */
              __pyx_v_p.y = ((-__pyx_v_ray.x) / __pyx_v_ray.y);

              /* "raypier/core/cfaces.pyx":1024
 *                                 p.x=-1
 *                                 p.y = ray.x/ray.y
 *                             elif ray.y<0:             # <<<<<<<<<<<<<<
 *                                 p.x = 1
 *                                 p.y = -ray.x/ray.y
 */
            }
            __pyx_L18:;

            /* "raypier/core/cfaces.pyx":1027
 *                                 p.x = 1
 *                                 p.y = -ray.x/ray.y
 *                             return norm_(p)             # <<<<<<<<<<<<<<
 * 
 * 
 */
            __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_p);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            goto __pyx_L0;

            /* "raypier/core/cfaces.pyx":1008
 *                         #I will generously allow for rounding error
 *                         #print "got here with point: ",tmp,
 *                         if tmp**2 - (ray.x**2+ray.y**2) < .0001:             # <<<<<<<<<<<<<<
 *                             #this is the single solution. return the derivative dy/dx = dy/dt / dx/dt
 *                             #print "that was it!"
 */
          }

          /* "raypier/core/cfaces.pyx":1002
 *                     #make sure solution is within interval
 *                     #print "normal t: ",t
 *                     if 0<=t<=1:             # <<<<<<<<<<<<<<
 *                         #ok, then is this the t to the same point p?
 *                         tmp = eval_bezier(t,cp0.x,cp1.x,cp2.x,cp3.x)
 */
        }
      }

      /* "raypier/core/cfaces.pyx":981
 *             #is point even in this hull?
 *             #print "tried at least"
 *             if self.pnt_in_hull(ray,cp0,cp1,cp2,cp3):             # <<<<<<<<<<<<<<
 *                 #then, solve for t
 *                 #print "in hull"
 */
    }

    /* "raypier/core/cfaces.pyx":973
 *         theta = atan2(p.y,p.x)
 *         #find which curve this point is in
 *         for curve in self.curves_array.copy():            #load up control points             # <<<<<<<<<<<<<<
 *             cp0.x,cp0.y = curve[0].copy()
 *             cp1.x,cp1.y = curve[1].copy()
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":1031
 * 
 *         #how did you get here?  p was supposed to be a point on the curve!
 *         print("error: Bezier normal not found, point not actually on curve!")             # <<<<<<<<<<<<<<
 *         p.x=p.y=p.z = 0
 *         return p
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":1032
 *         #how did you get here?  p was supposed to be a point on the curve!
 *         print("error: Bezier normal not found, point not actually on curve!")
 *         p.x=p.y=p.z = 0             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
  __pyx_v_p.x = 0.0;
  __pyx_v_p.y = 0.0;
  __pyx_v_p.z = 0.0;

  /* "raypier/core/cfaces.pyx":1033
 *         print("error: Bezier normal not found, point not actually on curve!")
 *         p.x=p.y=p.z = 0
 *         return p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":962
 * 
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef:
 *             flatvector_t ray,cp0,cp1,cp2,cp3,rotated
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("raypier.core.cfaces.ExtrudedBezierFace.compute_normal_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_curve);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedBezierFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_18ExtrudedBezierFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtrudedBezierFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1037
 * 
 * 
 * cdef int point_in_polygon_c(double X, double Y, object obj):             # <<<<<<<<<<<<<<
 *     cdef int i, size, ct=0
 *     cdef double y1, y2, h, x, x1, x2
 */

static int __pyx_f_7raypier_4core_6cfaces_point_in_polygon_c(double __pyx_v_X, double __pyx_v_Y, PyObject *__pyx_v_obj) {
  int __pyx_v_i;
  int __pyx_v_size;
  int __pyx_v_ct;
  double __pyx_v_y1;
  double __pyx_v_y2;
  double __pyx_v_h;
  double __pyx_v_x;
  double __pyx_v_x1;
  double __pyx_v_x2;
  PyArrayObject *__pyx_v_pts = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pts;
  __Pyx_Buffer __pyx_pybuffer_pts;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("point_in_polygon_c", 0);
  __pyx_pybuffer_pts.pybuffer.buf = NULL;
  __pyx_pybuffer_pts.refcount = 0;
  __pyx_pybuffernd_pts.data = NULL;
  __pyx_pybuffernd_pts.rcbuffer = &__pyx_pybuffer_pts;

  /* "raypier/core/cfaces.pyx":1038
 * 
 * cdef int point_in_polygon_c(double X, double Y, object obj):
 *     cdef int i, size, ct=0             # <<<<<<<<<<<<<<
 *     cdef double y1, y2, h, x, x1, x2
 *     cdef np_.ndarray[np_.float64_t, ndim=2] pts=obj
 */
  __pyx_v_ct = 0;

  /* "raypier/core/cfaces.pyx":1040
 *     cdef int i, size, ct=0
 *     cdef double y1, y2, h, x, x1, x2
 *     cdef np_.ndarray[np_.float64_t, ndim=2] pts=obj             # <<<<<<<<<<<<<<
 * 
 *     size = pts.shape[0]
 */
  if (!(likely(((__pyx_v_obj) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_obj, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1040, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_obj;
  __Pyx_INCREF(__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pts.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_pts = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_pts.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1040, __pyx_L1_error)
    } else {__pyx_pybuffernd_pts.diminfo[0].strides = __pyx_pybuffernd_pts.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pts.diminfo[0].shape = __pyx_pybuffernd_pts.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pts.diminfo[1].strides = __pyx_pybuffernd_pts.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pts.diminfo[1].shape = __pyx_pybuffernd_pts.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_v_pts = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1042
 *     cdef np_.ndarray[np_.float64_t, ndim=2] pts=obj
 * 
 *     size = pts.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     y1 = pts[size-1,1]
 */
  __pyx_v_size = (__pyx_v_pts->dimensions[0]);

  /* "raypier/core/cfaces.pyx":1044
 *     size = pts.shape[0]
 * 
 *     y1 = pts[size-1,1]             # <<<<<<<<<<<<<<
 *     x1 = pts[size-1,0]
 *     for i in xrange(size):
 */
  __pyx_t_2 = (__pyx_v_size - 1);
  __pyx_t_3 = 1;
  if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_pts.diminfo[0].shape;
  if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_pts.diminfo[1].shape;
  __pyx_v_y1 = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pts.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_pts.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_pts.diminfo[1].strides));

  /* "raypier/core/cfaces.pyx":1045
 * 
 *     y1 = pts[size-1,1]
 *     x1 = pts[size-1,0]             # <<<<<<<<<<<<<<
 *     for i in xrange(size):
 *         y2 = pts[i,1]
 */
  __pyx_t_3 = (__pyx_v_size - 1);
  __pyx_t_2 = 0;
  if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_pts.diminfo[0].shape;
  if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_pts.diminfo[1].shape;
  __pyx_v_x1 = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_pts.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_pts.diminfo[1].strides));

  /* "raypier/core/cfaces.pyx":1046
 *     y1 = pts[size-1,1]
 *     x1 = pts[size-1,0]
 *     for i in xrange(size):             # <<<<<<<<<<<<<<
 *         y2 = pts[i,1]
 *         x2 = pts[i,0]
 */
  __pyx_t_4 = __pyx_v_size;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "raypier/core/cfaces.pyx":1047
 *     x1 = pts[size-1,0]
 *     for i in xrange(size):
 *         y2 = pts[i,1]             # <<<<<<<<<<<<<<
 *         x2 = pts[i,0]
 *         h = (Y - y1) / (y2 - y1)
 */
    __pyx_t_2 = __pyx_v_i;
    __pyx_t_3 = 1;
    if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_pts.diminfo[0].shape;
    if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_pts.diminfo[1].shape;
    __pyx_v_y2 = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pts.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_pts.diminfo[0].strides, __pyx_t_3, __pyx_pybuffernd_pts.diminfo[1].strides));

    /* "raypier/core/cfaces.pyx":1048
 *     for i in xrange(size):
 *         y2 = pts[i,1]
 *         x2 = pts[i,0]             # <<<<<<<<<<<<<<
 *         h = (Y - y1) / (y2 - y1)
 *         if 0 < h <= 1.0:
 */
    __pyx_t_3 = __pyx_v_i;
    __pyx_t_2 = 0;
    if (__pyx_t_3 < 0) __pyx_t_3 += __pyx_pybuffernd_pts.diminfo[0].shape;
    if (__pyx_t_2 < 0) __pyx_t_2 += __pyx_pybuffernd_pts.diminfo[1].shape;
    __pyx_v_x2 = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pts.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_pts.diminfo[0].strides, __pyx_t_2, __pyx_pybuffernd_pts.diminfo[1].strides));

    /* "raypier/core/cfaces.pyx":1049
 *         y2 = pts[i,1]
 *         x2 = pts[i,0]
 *         h = (Y - y1) / (y2 - y1)             # <<<<<<<<<<<<<<
 *         if 0 < h <= 1.0:
 *             x = x1 + h*(x2 - x1)
 */
    __pyx_v_h = ((__pyx_v_Y - __pyx_v_y1) / (__pyx_v_y2 - __pyx_v_y1));

    /* "raypier/core/cfaces.pyx":1050
 *         x2 = pts[i,0]
 *         h = (Y - y1) / (y2 - y1)
 *         if 0 < h <= 1.0:             # <<<<<<<<<<<<<<
 *             x = x1 + h*(x2 - x1)
 *             if x > X:
 */
    __pyx_t_7 = (0.0 < __pyx_v_h);
    if (__pyx_t_7) {
      __pyx_t_7 = (__pyx_v_h <= 1.0);
    }
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "raypier/core/cfaces.pyx":1051
 *         h = (Y - y1) / (y2 - y1)
 *         if 0 < h <= 1.0:
 *             x = x1 + h*(x2 - x1)             # <<<<<<<<<<<<<<
 *             if x > X:
 *                 ct = not ct
 */
      __pyx_v_x = (__pyx_v_x1 + (__pyx_v_h * (__pyx_v_x2 - __pyx_v_x1)));

      /* "raypier/core/cfaces.pyx":1052
 *         if 0 < h <= 1.0:
 *             x = x1 + h*(x2 - x1)
 *             if x > X:             # <<<<<<<<<<<<<<
 *                 ct = not ct
 *         y1 = y2
 */
      __pyx_t_8 = ((__pyx_v_x > __pyx_v_X) != 0);
      if (__pyx_t_8) {

        /* "raypier/core/cfaces.pyx":1053
 *             x = x1 + h*(x2 - x1)
 *             if x > X:
 *                 ct = not ct             # <<<<<<<<<<<<<<
 *         y1 = y2
 *         x1 = x2
 */
        __pyx_v_ct = (!(__pyx_v_ct != 0));

        /* "raypier/core/cfaces.pyx":1052
 *         if 0 < h <= 1.0:
 *             x = x1 + h*(x2 - x1)
 *             if x > X:             # <<<<<<<<<<<<<<
 *                 ct = not ct
 *         y1 = y2
 */
      }

      /* "raypier/core/cfaces.pyx":1050
 *         x2 = pts[i,0]
 *         h = (Y - y1) / (y2 - y1)
 *         if 0 < h <= 1.0:             # <<<<<<<<<<<<<<
 *             x = x1 + h*(x2 - x1)
 *             if x > X:
 */
    }

    /* "raypier/core/cfaces.pyx":1054
 *             if x > X:
 *                 ct = not ct
 *         y1 = y2             # <<<<<<<<<<<<<<
 *         x1 = x2
 *     return ct
 */
    __pyx_v_y1 = __pyx_v_y2;

    /* "raypier/core/cfaces.pyx":1055
 *                 ct = not ct
 *         y1 = y2
 *         x1 = x2             # <<<<<<<<<<<<<<
 *     return ct
 * 
 */
    __pyx_v_x1 = __pyx_v_x2;
  }

  /* "raypier/core/cfaces.pyx":1056
 *         y1 = y2
 *         x1 = x2
 *     return ct             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_ct;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1037
 * 
 * 
 * cdef int point_in_polygon_c(double X, double Y, object obj):             # <<<<<<<<<<<<<<
 *     cdef int i, size, ct=0
 *     cdef double y1, y2, h, x, x1, x2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pts.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("raypier.core.cfaces.point_in_polygon_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pts.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pts);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1059
 * 
 * 
 * def point_in_polygon(double X, double Y, point_list):             # <<<<<<<<<<<<<<
 *     pts = np.ascontiguousarray(point_list, dtype=np.float64)
 *     assert pts.shape[1]==2
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_1point_in_polygon(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_6cfaces_1point_in_polygon = {"point_in_polygon", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_6cfaces_1point_in_polygon, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_6cfaces_1point_in_polygon(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_X;
  double __pyx_v_Y;
  PyObject *__pyx_v_point_list = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("point_in_polygon (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,&__pyx_n_s_Y,&__pyx_n_s_point_list,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("point_in_polygon", 1, 3, 3, 1); __PYX_ERR(0, 1059, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_point_list)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("point_in_polygon", 1, 3, 3, 2); __PYX_ERR(0, 1059, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "point_in_polygon") < 0)) __PYX_ERR(0, 1059, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_X = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_X == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1059, __pyx_L3_error)
    __pyx_v_Y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1059, __pyx_L3_error)
    __pyx_v_point_list = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("point_in_polygon", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1059, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.point_in_polygon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_point_in_polygon(__pyx_self, __pyx_v_X, __pyx_v_Y, __pyx_v_point_list);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_point_in_polygon(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_X, double __pyx_v_Y, PyObject *__pyx_v_point_list) {
  PyObject *__pyx_v_pts = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("point_in_polygon", 0);

  /* "raypier/core/cfaces.pyx":1060
 * 
 * def point_in_polygon(double X, double Y, point_list):
 *     pts = np.ascontiguousarray(point_list, dtype=np.float64)             # <<<<<<<<<<<<<<
 *     assert pts.shape[1]==2
 *     return bool(point_in_polygon_c(X, Y, pts))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_point_list);
  __Pyx_GIVEREF(__pyx_v_point_list);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_point_list);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pts = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "raypier/core/cfaces.pyx":1061
 * def point_in_polygon(double X, double Y, point_list):
 *     pts = np.ascontiguousarray(point_list, dtype=np.float64)
 *     assert pts.shape[1]==2             # <<<<<<<<<<<<<<
 *     return bool(point_in_polygon_c(X, Y, pts))
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pts, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1061, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1061, __pyx_L1_error)
    }
  }
  #endif

  /* "raypier/core/cfaces.pyx":1062
 *     pts = np.ascontiguousarray(point_list, dtype=np.float64)
 *     assert pts.shape[1]==2
 *     return bool(point_in_polygon_c(X, Y, pts))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_f_7raypier_4core_6cfaces_point_in_polygon_c(__pyx_v_X, __pyx_v_Y, __pyx_v_pts)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyBool_FromLong((!(!__pyx_t_6))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1059
 * 
 * 
 * def point_in_polygon(double X, double Y, point_list):             # <<<<<<<<<<<<<<
 *     pts = np.ascontiguousarray(point_list, dtype=np.float64)
 *     assert pts.shape[1]==2
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.cfaces.point_in_polygon", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1069
 *     cdef object _xy_points
 * 
 *     def __cinit__(self, z_plane=0.0, xy_points=[[]], **kwds):             # <<<<<<<<<<<<<<
 *         self.z_plane = z_plane
 *         self.xy_points = xy_points
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_z_plane = 0;
  PyObject *__pyx_v_xy_points = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwds = PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_z_plane,&__pyx_n_s_xy_points,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_float_0_0);
    values[1] = __pyx_k__24;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_plane);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xy_points);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwds, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1069, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_z_plane = values[0];
    __pyx_v_xy_points = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1069, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwds); __pyx_v_kwds = 0;
  __Pyx_AddTraceback("raypier.core.cfaces.PolygonFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_11PolygonFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)__pyx_v_self), __pyx_v_z_plane, __pyx_v_xy_points, __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_11PolygonFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, PyObject *__pyx_v_z_plane, PyObject *__pyx_v_xy_points, CYTHON_UNUSED PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":1070
 * 
 *     def __cinit__(self, z_plane=0.0, xy_points=[[]], **kwds):
 *         self.z_plane = z_plane             # <<<<<<<<<<<<<<
 *         self.xy_points = xy_points
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_z_plane); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L1_error)
  __pyx_v_self->z_plane = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1071
 *     def __cinit__(self, z_plane=0.0, xy_points=[[]], **kwds):
 *         self.z_plane = z_plane
 *         self.xy_points = xy_points             # <<<<<<<<<<<<<<
 * 
 *     property xy_points:
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_xy_points, __pyx_v_xy_points) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)

  /* "raypier/core/cfaces.pyx":1069
 *     cdef object _xy_points
 * 
 *     def __cinit__(self, z_plane=0.0, xy_points=[[]], **kwds):             # <<<<<<<<<<<<<<
 *         self.z_plane = z_plane
 *         self.xy_points = xy_points
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.PolygonFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1074
 * 
 *     property xy_points:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._xy_points
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_9xy_points_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_9xy_points_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_9xy_points___get__(((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_9xy_points___get__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":1075
 *     property xy_points:
 *         def __get__(self):
 *             return self._xy_points             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, pts):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_xy_points);
  __pyx_r = __pyx_v_self->_xy_points;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1074
 * 
 *     property xy_points:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._xy_points
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1077
 *             return self._xy_points
 * 
 *         def __set__(self, pts):             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(pts, dtype=np.float64).reshape(-1,2)
 *             self._xy_points=data
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_9xy_points_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pts); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_9xy_points_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_pts) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_9xy_points_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)__pyx_v_self), ((PyObject *)__pyx_v_pts));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_9xy_points_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, PyObject *__pyx_v_pts) {
  PyObject *__pyx_v_data = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":1078
 * 
 *         def __set__(self, pts):
 *             data = np.ascontiguousarray(pts, dtype=np.float64).reshape(-1,2)             # <<<<<<<<<<<<<<
 *             self._xy_points=data
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_pts);
  __Pyx_GIVEREF(__pyx_v_pts);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pts);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reshape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_data = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "raypier/core/cfaces.pyx":1079
 *         def __set__(self, pts):
 *             data = np.ascontiguousarray(pts, dtype=np.float64).reshape(-1,2)
 *             self._xy_points=data             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __Pyx_INCREF(__pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  __Pyx_GOTREF(__pyx_v_self->_xy_points);
  __Pyx_DECREF(__pyx_v_self->_xy_points);
  __pyx_v_self->_xy_points = __pyx_v_data;

  /* "raypier/core/cfaces.pyx":1077
 *             return self._xy_points
 * 
 *         def __set__(self, pts):             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(pts, dtype=np.float64).reshape(-1,2)
 *             self._xy_points=data
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.cfaces.PolygonFace.xy_points.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1081
 *             self._xy_points=data
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double max_length = sep_(p1, p2)
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_11PolygonFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_max_length;
  double __pyx_v_h;
  double __pyx_v_X;
  double __pyx_v_Y;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1083
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 *         cdef:
 *             double max_length = sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y
 */
  __pyx_v_max_length = __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2);

  /* "raypier/core/cfaces.pyx":1084
 *         cdef:
 *             double max_length = sep_(p1, p2)
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)             # <<<<<<<<<<<<<<
 *             double X, Y
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_h = ((__pyx_v_self->z_plane - __pyx_v_p1.z) / (__pyx_v_p2.z - __pyx_v_p1.z));

  /* "raypier/core/cfaces.pyx":1086
 *             double h = (self.z_plane-p1.z)/(p2.z-p1.z)
 *             double X, Y
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if (h<self.tolerance) or (h>1.0):
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1088
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             #print "H", h
 *             return NO_INTERSECTION
 */
  __pyx_t_2 = ((__pyx_v_h < __pyx_v_self->__pyx_base.tolerance) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_h > 1.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1090
 *         if (h<self.tolerance) or (h>1.0):
 *             #print "H", h
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         X = p1.x + h*(p2.x-p1.x)
 *         Y = p1.y + h*(p2.y-p1.y)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1088
 *             intersect_t out=NO_INTERSECTION
 * 
 *         if (h<self.tolerance) or (h>1.0):             # <<<<<<<<<<<<<<
 *             #print "H", h
 *             return NO_INTERSECTION
 */
  }

  /* "raypier/core/cfaces.pyx":1091
 *             #print "H", h
 *             return NO_INTERSECTION
 *         X = p1.x + h*(p2.x-p1.x)             # <<<<<<<<<<<<<<
 *         Y = p1.y + h*(p2.y-p1.y)
 *         #test for (X,Y) in polygon
 */
  __pyx_v_X = (__pyx_v_p1.x + (__pyx_v_h * (__pyx_v_p2.x - __pyx_v_p1.x)));

  /* "raypier/core/cfaces.pyx":1092
 *             return NO_INTERSECTION
 *         X = p1.x + h*(p2.x-p1.x)
 *         Y = p1.y + h*(p2.y-p1.y)             # <<<<<<<<<<<<<<
 *         #test for (X,Y) in polygon
 *         if is_base_ray and point_in_polygon_c(X,Y, self._xy_points)==1:
 */
  __pyx_v_Y = (__pyx_v_p1.y + (__pyx_v_h * (__pyx_v_p2.y - __pyx_v_p1.y)));

  /* "raypier/core/cfaces.pyx":1094
 *         Y = p1.y + h*(p2.y-p1.y)
 *         #test for (X,Y) in polygon
 *         if is_base_ray and point_in_polygon_c(X,Y, self._xy_points)==1:             # <<<<<<<<<<<<<<
 *             out.dist = h * max_length
 *         return out
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __pyx_v_self->_xy_points;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = ((__pyx_f_7raypier_4core_6cfaces_point_in_polygon_c(__pyx_v_X, __pyx_v_Y, __pyx_t_3) == 1) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1095
 *         #test for (X,Y) in polygon
 *         if is_base_ray and point_in_polygon_c(X,Y, self._xy_points)==1:
 *             out.dist = h * max_length             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
    __pyx_v_out.dist = (__pyx_v_h * __pyx_v_max_length);

    /* "raypier/core/cfaces.pyx":1094
 *         Y = p1.y + h*(p2.y-p1.y)
 *         #test for (X,Y) in polygon
 *         if is_base_ray and point_in_polygon_c(X,Y, self._xy_points)==1:             # <<<<<<<<<<<<<<
 *             out.dist = h * max_length
 *         return out
 */
  }

  /* "raypier/core/cfaces.pyx":1096
 *         if is_base_ray and point_in_polygon_c(X,Y, self._xy_points)==1:
 *             out.dist = h * max_length
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1081
 *             self._xy_points=data
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double max_length = sep_(p1, p2)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1098
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_11PolygonFace_compute_normal_c(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, CYTHON_UNUSED struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1103
 *         """
 *         cdef vector_t normal
 *         normal.x=0             # <<<<<<<<<<<<<<
 *         normal.y=0
 *         normal.z=-1
 */
  __pyx_v_normal.x = 0.0;

  /* "raypier/core/cfaces.pyx":1104
 *         cdef vector_t normal
 *         normal.x=0
 *         normal.y=0             # <<<<<<<<<<<<<<
 *         normal.z=-1
 *         return normal
 */
  __pyx_v_normal.y = 0.0;

  /* "raypier/core/cfaces.pyx":1105
 *         normal.x=0
 *         normal.y=0
 *         normal.z=-1             # <<<<<<<<<<<<<<
 *         return normal
 * 
 */
  __pyx_v_normal.z = -1.0;

  /* "raypier/core/cfaces.pyx":1106
 *         normal.y=0
 *         normal.z=-1
 *         return normal             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_normal;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1098
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1066
 * 
 * cdef class PolygonFace(Face):
 *     cdef public double z_plane             # <<<<<<<<<<<<<<
 *     cdef object _xy_points
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_7z_plane_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_7z_plane_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_7z_plane___get__(((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_7z_plane___get__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_plane); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.PolygonFace.z_plane.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_7z_plane_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_7z_plane_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_7z_plane_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_7z_plane_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_v_self->z_plane = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.PolygonFace.z_plane.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.PolygonFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_11PolygonFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_11PolygonFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.PolygonFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1113
 *         public double EFL, diameter, height
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_20OffAxisParabolicFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  CYTHON_UNUSED double __pyx_v_max_length;
  double __pyx_v_A;
  double __pyx_v_efl;
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_c;
  double __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_s;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  double __pyx_v_a1;
  double __pyx_v_a2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1125
 *         """
 *         cdef:
 *             double max_length = sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             double A = 1 / (2*self.EFL), efl = self.EFL
 *             double a,b,c,d
 */
  __pyx_v_max_length = __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2);

  /* "raypier/core/cfaces.pyx":1126
 *         cdef:
 *             double max_length = sep_(p1, p2)
 *             double A = 1 / (2*self.EFL), efl = self.EFL             # <<<<<<<<<<<<<<
 *             double a,b,c,d
 *             vector_t s, r, pt1, pt2
 */
  __pyx_v_A = (1.0 / (2.0 * __pyx_v_self->EFL));
  __pyx_t_1 = __pyx_v_self->EFL;
  __pyx_v_efl = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1129
 *             double a,b,c,d
 *             vector_t s, r, pt1, pt2
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         s = subvv_(p2,p1)
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1131
 *             intersect_t out=NO_INTERSECTION
 * 
 *         s = subvv_(p2,p1)             # <<<<<<<<<<<<<<
 *         r = p1
 *         r.z += efl/2.
 */
  __pyx_v_s = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1132
 * 
 *         s = subvv_(p2,p1)
 *         r = p1             # <<<<<<<<<<<<<<
 *         r.z += efl/2.
 * 
 */
  __pyx_v_r = __pyx_v_p1;

  /* "raypier/core/cfaces.pyx":1133
 *         s = subvv_(p2,p1)
 *         r = p1
 *         r.z += efl/2.             # <<<<<<<<<<<<<<
 * 
 *         a = A*(s.x**2 + s.y**2)
 */
  __pyx_v_r.z = (__pyx_v_r.z + (__pyx_v_efl / 2.));

  /* "raypier/core/cfaces.pyx":1135
 *         r.z += efl/2.
 * 
 *         a = A*(s.x**2 + s.y**2)             # <<<<<<<<<<<<<<
 *         b = 2*A*(r.x*s.x + r.y*s.y) - s.z
 *         c = A*(r.x**2 + r.y**2) - r.z
 */
  __pyx_v_a = (__pyx_v_A * (pow(__pyx_v_s.x, 2.0) + pow(__pyx_v_s.y, 2.0)));

  /* "raypier/core/cfaces.pyx":1136
 * 
 *         a = A*(s.x**2 + s.y**2)
 *         b = 2*A*(r.x*s.x + r.y*s.y) - s.z             # <<<<<<<<<<<<<<
 *         c = A*(r.x**2 + r.y**2) - r.z
 *         d = b**2 - 4*a*c
 */
  __pyx_v_b = (((2.0 * __pyx_v_A) * ((__pyx_v_r.x * __pyx_v_s.x) + (__pyx_v_r.y * __pyx_v_s.y))) - __pyx_v_s.z);

  /* "raypier/core/cfaces.pyx":1137
 *         a = A*(s.x**2 + s.y**2)
 *         b = 2*A*(r.x*s.x + r.y*s.y) - s.z
 *         c = A*(r.x**2 + r.y**2) - r.z             # <<<<<<<<<<<<<<
 *         d = b**2 - 4*a*c
 * 
 */
  __pyx_v_c = ((__pyx_v_A * (pow(__pyx_v_r.x, 2.0) + pow(__pyx_v_r.y, 2.0))) - __pyx_v_r.z);

  /* "raypier/core/cfaces.pyx":1138
 *         b = 2*A*(r.x*s.x + r.y*s.y) - s.z
 *         c = A*(r.x**2 + r.y**2) - r.z
 *         d = b**2 - 4*a*c             # <<<<<<<<<<<<<<
 * 
 *         ###FIXME
 */
  __pyx_v_d = (pow(__pyx_v_b, 2.0) - ((4.0 * __pyx_v_a) * __pyx_v_c));

  /* "raypier/core/cfaces.pyx":1141
 * 
 *         ###FIXME
 *         if d<0: #no intersection ###BROKEN             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_2 = ((__pyx_v_d < 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1142
 *         ###FIXME
 *         if d<0: #no intersection ###BROKEN
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if a < 1e-10: #approximate to zero if we're close to the parabolic axis
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1141
 * 
 *         ###FIXME
 *         if d<0: #no intersection ###BROKEN             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1144
 *             return NO_INTERSECTION
 * 
 *         if a < 1e-10: #approximate to zero if we're close to the parabolic axis             # <<<<<<<<<<<<<<
 *             a1 = -c/b
 *             pt1 = addvv_(r, multvs_(s, a1))
 */
  __pyx_t_2 = ((__pyx_v_a < 1e-10) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1145
 * 
 *         if a < 1e-10: #approximate to zero if we're close to the parabolic axis
 *             a1 = -c/b             # <<<<<<<<<<<<<<
 *             pt1 = addvv_(r, multvs_(s, a1))
 *             pt1.x -= efl
 */
    __pyx_v_a1 = ((-__pyx_v_c) / __pyx_v_b);

    /* "raypier/core/cfaces.pyx":1146
 *         if a < 1e-10: #approximate to zero if we're close to the parabolic axis
 *             a1 = -c/b
 *             pt1 = addvv_(r, multvs_(s, a1))             # <<<<<<<<<<<<<<
 *             pt1.x -= efl
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > (self.diameter/2):
 */
    __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_s, __pyx_v_a1));

    /* "raypier/core/cfaces.pyx":1147
 *             a1 = -c/b
 *             pt1 = addvv_(r, multvs_(s, a1))
 *             pt1.x -= efl             # <<<<<<<<<<<<<<
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > (self.diameter/2):
 *                 return NO_INTERSECTION
 */
    __pyx_v_pt1.x = (__pyx_v_pt1.x - __pyx_v_efl);

    /* "raypier/core/cfaces.pyx":1148
 *             pt1 = addvv_(r, multvs_(s, a1))
 *             pt1.x -= efl
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > (self.diameter/2):             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             if a1>1.0 or a1<self.tolerance:
 */
    __pyx_t_2 = ((((__pyx_v_pt1.x * __pyx_v_pt1.x) + (__pyx_v_pt1.y * __pyx_v_pt1.y)) > (__pyx_v_self->diameter / 2.0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1149
 *             pt1.x -= efl
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > (self.diameter/2):
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *             if a1>1.0 or a1<self.tolerance:
 *                 return NO_INTERSECTION
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":1148
 *             pt1 = addvv_(r, multvs_(s, a1))
 *             pt1.x -= efl
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > (self.diameter/2):             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             if a1>1.0 or a1<self.tolerance:
 */
    }

    /* "raypier/core/cfaces.pyx":1150
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > (self.diameter/2):
 *                 return NO_INTERSECTION
 *             if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)
 */
    __pyx_t_3 = ((__pyx_v_a1 > 1.0) != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.tolerance) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1151
 *                 return NO_INTERSECTION
 *             if a1>1.0 or a1<self.tolerance:
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *             out.dist = a1 * sep_(p1, p2)
 *             return out
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":1150
 *             if (pt1.x*pt1.x + pt1.y*pt1.y) > (self.diameter/2):
 *                 return NO_INTERSECTION
 *             if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)
 */
    }

    /* "raypier/core/cfaces.pyx":1152
 *             if a1>1.0 or a1<self.tolerance:
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             return out
 * 
 */
    __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

    /* "raypier/core/cfaces.pyx":1153
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)
 *             return out             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_r = __pyx_v_out;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1144
 *             return NO_INTERSECTION
 * 
 *         if a < 1e-10: #approximate to zero if we're close to the parabolic axis             # <<<<<<<<<<<<<<
 *             a1 = -c/b
 *             pt1 = addvv_(r, multvs_(s, a1))
 */
  }

  /* "raypier/core/cfaces.pyx":1156
 * 
 *         else:
 *             d = sqrt(d)             # <<<<<<<<<<<<<<
 * 
 *             #1st root
 */
  /*else*/ {
    __pyx_v_d = sqrt(__pyx_v_d);

    /* "raypier/core/cfaces.pyx":1159
 * 
 *             #1st root
 *             a1 = (-b+d)/(2*a)             # <<<<<<<<<<<<<<
 *             pt1 = addvv_(r, multvs_(s, a1))
 *             #2nd root
 */
    __pyx_v_a1 = (((-__pyx_v_b) + __pyx_v_d) / (2.0 * __pyx_v_a));

    /* "raypier/core/cfaces.pyx":1160
 *             #1st root
 *             a1 = (-b+d)/(2*a)
 *             pt1 = addvv_(r, multvs_(s, a1))             # <<<<<<<<<<<<<<
 *             #2nd root
 *             a2 = (-b-d)/(2*a)
 */
    __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_s, __pyx_v_a1));

    /* "raypier/core/cfaces.pyx":1162
 *             pt1 = addvv_(r, multvs_(s, a1))
 *             #2nd root
 *             a2 = (-b-d)/(2*a)             # <<<<<<<<<<<<<<
 *             pt2 = addvv_(r, multvs_(s, a2))
 * 
 */
    __pyx_v_a2 = (((-__pyx_v_b) - __pyx_v_d) / (2.0 * __pyx_v_a));

    /* "raypier/core/cfaces.pyx":1163
 *             #2nd root
 *             a2 = (-b-d)/(2*a)
 *             pt2 = addvv_(r, multvs_(s, a2))             # <<<<<<<<<<<<<<
 * 
 *             pt1.x -= efl
 */
    __pyx_v_pt2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_r, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_s, __pyx_v_a2));

    /* "raypier/core/cfaces.pyx":1165
 *             pt2 = addvv_(r, multvs_(s, a2))
 * 
 *             pt1.x -= efl             # <<<<<<<<<<<<<<
 *             pt2.x -= efl
 * 
 */
    __pyx_v_pt1.x = (__pyx_v_pt1.x - __pyx_v_efl);

    /* "raypier/core/cfaces.pyx":1166
 * 
 *             pt1.x -= efl
 *             pt2.x -= efl             # <<<<<<<<<<<<<<
 * 
 *             if is_base_ray:
 */
    __pyx_v_pt2.x = (__pyx_v_pt2.x - __pyx_v_efl);

    /* "raypier/core/cfaces.pyx":1168
 *             pt2.x -= efl
 * 
 *             if is_base_ray:             # <<<<<<<<<<<<<<
 *                 d = self.diameter
 *                 d *= d/4.
 */
    __pyx_t_2 = (__pyx_v_is_base_ray != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1169
 * 
 *             if is_base_ray:
 *                 d = self.diameter             # <<<<<<<<<<<<<<
 *                 d *= d/4.
 * 
 */
      __pyx_t_1 = __pyx_v_self->diameter;
      __pyx_v_d = __pyx_t_1;

      /* "raypier/core/cfaces.pyx":1170
 *             if is_base_ray:
 *                 d = self.diameter
 *                 d *= d/4.             # <<<<<<<<<<<<<<
 * 
 *                 if (pt1.x*pt1.x + pt1.y*pt1.y) > d:
 */
      __pyx_v_d = (__pyx_v_d * (__pyx_v_d / 4.));

      /* "raypier/core/cfaces.pyx":1172
 *                 d *= d/4.
 * 
 *                 if (pt1.x*pt1.x + pt1.y*pt1.y) > d:             # <<<<<<<<<<<<<<
 *                     a1 = INF
 *                 if (pt2.x*pt2.x + pt2.y*pt2.y) > d:
 */
      __pyx_t_2 = ((((__pyx_v_pt1.x * __pyx_v_pt1.x) + (__pyx_v_pt1.y * __pyx_v_pt1.y)) > __pyx_v_d) != 0);
      if (__pyx_t_2) {

        /* "raypier/core/cfaces.pyx":1173
 * 
 *                 if (pt1.x*pt1.x + pt1.y*pt1.y) > d:
 *                     a1 = INF             # <<<<<<<<<<<<<<
 *                 if (pt2.x*pt2.x + pt2.y*pt2.y) > d:
 *                     a2 = INF
 */
        __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

        /* "raypier/core/cfaces.pyx":1172
 *                 d *= d/4.
 * 
 *                 if (pt1.x*pt1.x + pt1.y*pt1.y) > d:             # <<<<<<<<<<<<<<
 *                     a1 = INF
 *                 if (pt2.x*pt2.x + pt2.y*pt2.y) > d:
 */
      }

      /* "raypier/core/cfaces.pyx":1174
 *                 if (pt1.x*pt1.x + pt1.y*pt1.y) > d:
 *                     a1 = INF
 *                 if (pt2.x*pt2.x + pt2.y*pt2.y) > d:             # <<<<<<<<<<<<<<
 *                     a2 = INF
 * 
 */
      __pyx_t_2 = ((((__pyx_v_pt2.x * __pyx_v_pt2.x) + (__pyx_v_pt2.y * __pyx_v_pt2.y)) > __pyx_v_d) != 0);
      if (__pyx_t_2) {

        /* "raypier/core/cfaces.pyx":1175
 *                     a1 = INF
 *                 if (pt2.x*pt2.x + pt2.y*pt2.y) > d:
 *                     a2 = INF             # <<<<<<<<<<<<<<
 * 
 *             if a2 < a1:
 */
        __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

        /* "raypier/core/cfaces.pyx":1174
 *                 if (pt1.x*pt1.x + pt1.y*pt1.y) > d:
 *                     a1 = INF
 *                 if (pt2.x*pt2.x + pt2.y*pt2.y) > d:             # <<<<<<<<<<<<<<
 *                     a2 = INF
 * 
 */
      }

      /* "raypier/core/cfaces.pyx":1168
 *             pt2.x -= efl
 * 
 *             if is_base_ray:             # <<<<<<<<<<<<<<
 *                 d = self.diameter
 *                 d *= d/4.
 */
    }

    /* "raypier/core/cfaces.pyx":1177
 *                     a2 = INF
 * 
 *             if a2 < a1:             # <<<<<<<<<<<<<<
 *                 a1 = a2
 * 
 */
    __pyx_t_2 = ((__pyx_v_a2 < __pyx_v_a1) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1178
 * 
 *             if a2 < a1:
 *                 a1 = a2             # <<<<<<<<<<<<<<
 * 
 *             if a1>1.0 or a1<self.tolerance:
 */
      __pyx_v_a1 = __pyx_v_a2;

      /* "raypier/core/cfaces.pyx":1177
 *                     a2 = INF
 * 
 *             if a2 < a1:             # <<<<<<<<<<<<<<
 *                 a1 = a2
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":1180
 *                 a1 = a2
 * 
 *             if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)
 */
    __pyx_t_3 = ((__pyx_v_a1 > 1.0) != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_3 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.tolerance) != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L14_bool_binop_done:;
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1181
 * 
 *             if a1>1.0 or a1<self.tolerance:
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *             out.dist = a1 * sep_(p1, p2)
 *             return out
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":1180
 *                 a1 = a2
 * 
 *             if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)
 */
    }

    /* "raypier/core/cfaces.pyx":1182
 *             if a1>1.0 or a1<self.tolerance:
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *             return out
 * #
 */
    __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

    /* "raypier/core/cfaces.pyx":1183
 *                 return NO_INTERSECTION
 *             out.dist = a1 * sep_(p1, p2)
 *             return out             # <<<<<<<<<<<<<<
 * #
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
    __pyx_r = __pyx_v_out;
    goto __pyx_L0;
  }

  /* "raypier/core/cfaces.pyx":1113
 *         public double EFL, diameter, height
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1185
 *             return out
 * #
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_20OffAxisParabolicFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_normal;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_dz;
  double __pyx_v_m2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1191
 *         cdef:
 *             vector_t normal
 *             double A = 1 / (2*self.EFL)             # <<<<<<<<<<<<<<
 *             double B, dz, m2
 * 
 */
  __pyx_v_A = (1.0 / (2.0 * __pyx_v_self->EFL));

  /* "raypier/core/cfaces.pyx":1194
 *             double B, dz, m2
 * 
 *         m2 = p.x*p.x + p.y*p.y             # <<<<<<<<<<<<<<
 *         B = 4*m2*A*A
 *         dz = -sqrt( B/(B+1) )
 */
  __pyx_v_m2 = ((__pyx_v_p.x * __pyx_v_p.x) + (__pyx_v_p.y * __pyx_v_p.y));

  /* "raypier/core/cfaces.pyx":1195
 * 
 *         m2 = p.x*p.x + p.y*p.y
 *         B = 4*m2*A*A             # <<<<<<<<<<<<<<
 *         dz = -sqrt( B/(B+1) )
 *         m2 = sqrt(m2)
 */
  __pyx_v_B = (((4.0 * __pyx_v_m2) * __pyx_v_A) * __pyx_v_A);

  /* "raypier/core/cfaces.pyx":1196
 *         m2 = p.x*p.x + p.y*p.y
 *         B = 4*m2*A*A
 *         dz = -sqrt( B/(B+1) )             # <<<<<<<<<<<<<<
 *         m2 = sqrt(m2)
 * 
 */
  __pyx_v_dz = (-sqrt((__pyx_v_B / (__pyx_v_B + 1.0))));

  /* "raypier/core/cfaces.pyx":1197
 *         B = 4*m2*A*A
 *         dz = -sqrt( B/(B+1) )
 *         m2 = sqrt(m2)             # <<<<<<<<<<<<<<
 * 
 *         normal.x= -(dz * p.x)/m2
 */
  __pyx_v_m2 = sqrt(__pyx_v_m2);

  /* "raypier/core/cfaces.pyx":1199
 *         m2 = sqrt(m2)
 * 
 *         normal.x= -(dz * p.x)/m2             # <<<<<<<<<<<<<<
 *         normal.y= -(dz * p.y)/m2
 *         normal.z= -1 / sqrt( B+1 )
 */
  __pyx_v_normal.x = ((-(__pyx_v_dz * __pyx_v_p.x)) / __pyx_v_m2);

  /* "raypier/core/cfaces.pyx":1200
 * 
 *         normal.x= -(dz * p.x)/m2
 *         normal.y= -(dz * p.y)/m2             # <<<<<<<<<<<<<<
 *         normal.z= -1 / sqrt( B+1 )
 *         return normal
 */
  __pyx_v_normal.y = ((-(__pyx_v_dz * __pyx_v_p.y)) / __pyx_v_m2);

  /* "raypier/core/cfaces.pyx":1201
 *         normal.x= -(dz * p.x)/m2
 *         normal.y= -(dz * p.y)/m2
 *         normal.z= -1 / sqrt( B+1 )             # <<<<<<<<<<<<<<
 *         return normal
 * 
 */
  __pyx_v_normal.z = (-1.0 / sqrt((__pyx_v_B + 1.0)));

  /* "raypier/core/cfaces.pyx":1202
 *         normal.y= -(dz * p.y)/m2
 *         normal.z= -1 / sqrt( B+1 )
 *         return normal             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_normal;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1185
 *             return out
 * #
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1111
 * cdef class OffAxisParabolicFace(Face):
 *     cdef:
 *         public double EFL, diameter, height             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL___get__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL___get__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->EFL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.EFL.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_v_self->EFL = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.EFL.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter___get__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter___get__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->diameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.diameter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_v_self->diameter = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.diameter.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height___get__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_v_self->height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace___reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace___reduce_cython__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.EFL, self.count, self.diameter, self.height, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.tolerance)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->EFL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->__pyx_base.count); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->diameter); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->height); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->__pyx_base.idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_short(__pyx_v_self->__pyx_base.invert_normal); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.max_length); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyBytes_FromString(__pyx_v_self->__pyx_base.name); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.tolerance); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(11); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx_base.material));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->__pyx_base.material));
  PyTuple_SET_ITEM(__pyx_t_10, 6, ((PyObject *)__pyx_v_self->__pyx_base.material));
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 8, __pyx_t_8);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.owner);
  __Pyx_GIVEREF(__pyx_v_self->__pyx_base.owner);
  PyTuple_SET_ITEM(__pyx_t_10, 9, __pyx_v_self->__pyx_base.owner);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 10, __pyx_t_9);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.EFL, self.count, self.diameter, self.height, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.tolerance)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_10 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v__dict = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "(tree fragment)":7
 *     state = (self.EFL, self.count, self.diameter, self.height, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.tolerance)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_11 = (__pyx_v__dict != Py_None);
  __pyx_t_12 = (__pyx_t_11 != 0);
  if (__pyx_t_12) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v__dict);
    __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.material is not None or self.owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.EFL, self.count, self.diameter, self.height, self.idx, self.invert_normal, self.material, self.max_length, self.name, self.owner, self.tolerance)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.material is not None or self.owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, None), state
 */
  /*else*/ {
    __pyx_t_11 = (((PyObject *)__pyx_v_self->__pyx_base.material) != Py_None);
    __pyx_t_13 = (__pyx_t_11 != 0);
    if (!__pyx_t_13) {
    } else {
      __pyx_t_12 = __pyx_t_13;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_13 = (__pyx_v_self->__pyx_base.owner != Py_None);
    __pyx_t_11 = (__pyx_t_13 != 0);
    __pyx_t_12 = __pyx_t_11;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_12;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.material is not None or self.owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, None), state
 *     else:
 */
  __pyx_t_12 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_12) {

    /* "(tree fragment)":13
 *         use_setstate = self.material is not None or self.owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_pyx_unpickle_OffAxisParabolicF); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_38528712);
    __Pyx_GIVEREF(__pyx_int_38528712);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_int_38528712);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_10, 2, Py_None);
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_v_state);
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.material is not None or self.owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, None), state
 *     else:
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OffAxisParabolicFace__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pyx_unpickle_OffAxisParabolicF); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_38528712);
    __Pyx_GIVEREF(__pyx_int_38528712);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_int_38528712);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_v_state);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_10);
    __pyx_t_8 = 0;
    __pyx_t_10 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OffAxisParabolicFace__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_2__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_20OffAxisParabolicFace_2__setstate_cython__(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OffAxisParabolicFace__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_7raypier_4core_6cfaces___pyx_unpickle_OffAxisParabolicFace__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OffAxisParabolicFace, (type(self), 0x24be6c8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OffAxisParabolicFace__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.OffAxisParabolicFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1212
 * 
 *     property transform:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             t = Transform()
 *             t.trans = self.trans
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_9transform___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_9transform___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":1213
 *     property transform:
 *         def __get__(self):
 *             t = Transform()             # <<<<<<<<<<<<<<
 *             t.trans = self.trans
 *             return t
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1214
 *         def __get__(self):
 *             t = Transform()
 *             t.trans = self.trans             # <<<<<<<<<<<<<<
 *             return t
 * 
 */
  __pyx_t_2 = __pyx_v_self->trans;
  __pyx_v_t->trans = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1215
 *             t = Transform()
 *             t.trans = self.trans
 *             return t             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, Transform t):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1212
 * 
 *     property transform:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             t = Transform()
 *             t.trans = self.trans
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.transform.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1217
 *             return t
 * 
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.trans = t.trans
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_ptype_7raypier_4core_7ctracer_Transform, 1, "t", 0))) __PYX_ERR(0, 1217, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_t));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":1218
 * 
 *         def __set__(self, Transform t):
 *             self.trans = t.trans             # <<<<<<<<<<<<<<
 * 
 *     property inverse_transform:
 */
  __pyx_t_1 = __pyx_v_t->trans;
  __pyx_v_self->trans = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1217
 *             return t
 * 
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.trans = t.trans
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1221
 * 
 *     property inverse_transform:
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.inv_trans = t.trans
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_ptype_7raypier_4core_7ctracer_Transform, 1, "t", 0))) __PYX_ERR(0, 1221, __pyx_L1_error)
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform___set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_v_t));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform___set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":1222
 *     property inverse_transform:
 *         def __set__(self, Transform t):
 *             self.inv_trans = t.trans             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  __pyx_t_1 = __pyx_v_t->trans;
  __pyx_v_self->inv_trans = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1221
 * 
 *     property inverse_transform:
 *         def __set__(self, Transform t):             # <<<<<<<<<<<<<<
 *             self.inv_trans = t.trans
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1224
 *             self.inv_trans = t.trans
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_2__get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_2__get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  struct __pyx_obj_7raypier_4core_7ctracer_Transform *__pyx_v_t = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_t_7raypier_4core_7ctracer_transform_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":1225
 * 
 *         def __get__(self):
 *             cdef Transform t=Transform()             # <<<<<<<<<<<<<<
 *             t.trans = self.inv_trans
 *             return t
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((struct __pyx_obj_7raypier_4core_7ctracer_Transform *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1226
 *         def __get__(self):
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans             # <<<<<<<<<<<<<<
 *             return t
 * 
 */
  __pyx_t_2 = __pyx_v_self->inv_trans;
  __pyx_v_t->trans = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1227
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans
 *             return t             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_t));
  __pyx_r = ((PyObject *)__pyx_v_t);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1224
 *             self.inv_trans = t.trans
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Transform t=Transform()
 *             t.trans = self.inv_trans
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.inverse_transform.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1229
 *             return t
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double B,A, a, b, c, d
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_15EllipsoidalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_B;
  double __pyx_v_A;
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_c;
  double __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_S;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_r;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_s;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  double __pyx_v_root1;
  double __pyx_v_root2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1233
 *             double B,A, a, b, c, d
 * 
 *             vector_t S = subvv_(p2, p1)             # <<<<<<<<<<<<<<
 *             vector_t r = transform_c(self.trans, p1)
 *             vector_t s = transform_c(self.trans, p2)
 */
  __pyx_v_S = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1234
 * 
 *             vector_t S = subvv_(p2, p1)
 *             vector_t r = transform_c(self.trans, p1)             # <<<<<<<<<<<<<<
 *             vector_t s = transform_c(self.trans, p2)
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_r = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->trans, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1235
 *             vector_t S = subvv_(p2, p1)
 *             vector_t r = transform_c(self.trans, p1)
 *             vector_t s = transform_c(self.trans, p2)             # <<<<<<<<<<<<<<
 *             intersect_t out=NO_INTERSECTION
 * 
 */
  __pyx_v_s = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->trans, __pyx_v_p2);

  /* "raypier/core/cfaces.pyx":1236
 *             vector_t r = transform_c(self.trans, p1)
 *             vector_t s = transform_c(self.trans, p2)
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         s = subvv_(s, r)
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1238
 *             intersect_t out=NO_INTERSECTION
 * 
 *         s = subvv_(s, r)             # <<<<<<<<<<<<<<
 * 
 *         B = self.minor**2
 */
  __pyx_v_s = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_s, __pyx_v_r);

  /* "raypier/core/cfaces.pyx":1240
 *         s = subvv_(s, r)
 * 
 *         B = self.minor**2             # <<<<<<<<<<<<<<
 *         A = self.major**2
 * 
 */
  __pyx_v_B = pow(__pyx_v_self->minor, 2.0);

  /* "raypier/core/cfaces.pyx":1241
 * 
 *         B = self.minor**2
 *         A = self.major**2             # <<<<<<<<<<<<<<
 * 
 *         a = A*(s.z*s.z + s.y*s.y) + B*s.x*s.x
 */
  __pyx_v_A = pow(__pyx_v_self->major, 2.0);

  /* "raypier/core/cfaces.pyx":1243
 *         A = self.major**2
 * 
 *         a = A*(s.z*s.z + s.y*s.y) + B*s.x*s.x             # <<<<<<<<<<<<<<
 *         b = 2*( A*(r.z*s.z + r.y*s.y) + B*r.x*s.x )
 *         c = A*(r.z*r.z + r.y*r.y) + B*r.x*r.x - A*B
 */
  __pyx_v_a = ((__pyx_v_A * ((__pyx_v_s.z * __pyx_v_s.z) + (__pyx_v_s.y * __pyx_v_s.y))) + ((__pyx_v_B * __pyx_v_s.x) * __pyx_v_s.x));

  /* "raypier/core/cfaces.pyx":1244
 * 
 *         a = A*(s.z*s.z + s.y*s.y) + B*s.x*s.x
 *         b = 2*( A*(r.z*s.z + r.y*s.y) + B*r.x*s.x )             # <<<<<<<<<<<<<<
 *         c = A*(r.z*r.z + r.y*r.y) + B*r.x*r.x - A*B
 * 
 */
  __pyx_v_b = (2.0 * ((__pyx_v_A * ((__pyx_v_r.z * __pyx_v_s.z) + (__pyx_v_r.y * __pyx_v_s.y))) + ((__pyx_v_B * __pyx_v_r.x) * __pyx_v_s.x)));

  /* "raypier/core/cfaces.pyx":1245
 *         a = A*(s.z*s.z + s.y*s.y) + B*s.x*s.x
 *         b = 2*( A*(r.z*s.z + r.y*s.y) + B*r.x*s.x )
 *         c = A*(r.z*r.z + r.y*r.y) + B*r.x*r.x - A*B             # <<<<<<<<<<<<<<
 * 
 *         d = b*b - 4*a*c
 */
  __pyx_v_c = (((__pyx_v_A * ((__pyx_v_r.z * __pyx_v_r.z) + (__pyx_v_r.y * __pyx_v_r.y))) + ((__pyx_v_B * __pyx_v_r.x) * __pyx_v_r.x)) - (__pyx_v_A * __pyx_v_B));

  /* "raypier/core/cfaces.pyx":1247
 *         c = A*(r.z*r.z + r.y*r.y) + B*r.x*r.x - A*B
 * 
 *         d = b*b - 4*a*c             # <<<<<<<<<<<<<<
 *         d = sqrt(d)
 *         root1 = (-b + d)/(2*a)
 */
  __pyx_v_d = ((__pyx_v_b * __pyx_v_b) - ((4.0 * __pyx_v_a) * __pyx_v_c));

  /* "raypier/core/cfaces.pyx":1248
 * 
 *         d = b*b - 4*a*c
 *         d = sqrt(d)             # <<<<<<<<<<<<<<
 *         root1 = (-b + d)/(2*a)
 *         root2 = (-b - d)/(2*a)
 */
  __pyx_v_d = sqrt(__pyx_v_d);

  /* "raypier/core/cfaces.pyx":1249
 *         d = b*b - 4*a*c
 *         d = sqrt(d)
 *         root1 = (-b + d)/(2*a)             # <<<<<<<<<<<<<<
 *         root2 = (-b - d)/(2*a)
 *         p2 = addvv_(p1, multvs_(S, root2))
 */
  __pyx_v_root1 = (((-__pyx_v_b) + __pyx_v_d) / (2.0 * __pyx_v_a));

  /* "raypier/core/cfaces.pyx":1250
 *         d = sqrt(d)
 *         root1 = (-b + d)/(2*a)
 *         root2 = (-b - d)/(2*a)             # <<<<<<<<<<<<<<
 *         p2 = addvv_(p1, multvs_(S, root2))
 *         p1 = addvv_(p1, multvs_(S, root1))
 */
  __pyx_v_root2 = (((-__pyx_v_b) - __pyx_v_d) / (2.0 * __pyx_v_a));

  /* "raypier/core/cfaces.pyx":1251
 *         root1 = (-b + d)/(2*a)
 *         root2 = (-b - d)/(2*a)
 *         p2 = addvv_(p1, multvs_(S, root2))             # <<<<<<<<<<<<<<
 *         p1 = addvv_(p1, multvs_(S, root1))
 * 
 */
  __pyx_v_p2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_S, __pyx_v_root2));

  /* "raypier/core/cfaces.pyx":1252
 *         root2 = (-b - d)/(2*a)
 *         p2 = addvv_(p1, multvs_(S, root2))
 *         p1 = addvv_(p1, multvs_(S, root1))             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
  __pyx_v_p1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_S, __pyx_v_root1));

  /* "raypier/core/cfaces.pyx":1254
 *         p1 = addvv_(p1, multvs_(S, root1))
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not self.x1 < p2.x < self.x2:
 *                 root2 = 2
 */
  __pyx_t_1 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1255
 * 
 *         if is_base_ray:
 *             if not self.x1 < p2.x < self.x2:             # <<<<<<<<<<<<<<
 *                 root2 = 2
 *             if not self.y1 < p2.y < self.y2:
 */
    __pyx_t_1 = (__pyx_v_self->x1 < __pyx_v_p2.x);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_p2.x < __pyx_v_self->x2);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1256
 *         if is_base_ray:
 *             if not self.x1 < p2.x < self.x2:
 *                 root2 = 2             # <<<<<<<<<<<<<<
 *             if not self.y1 < p2.y < self.y2:
 *                 root2 = 2
 */
      __pyx_v_root2 = 2.0;

      /* "raypier/core/cfaces.pyx":1255
 * 
 *         if is_base_ray:
 *             if not self.x1 < p2.x < self.x2:             # <<<<<<<<<<<<<<
 *                 root2 = 2
 *             if not self.y1 < p2.y < self.y2:
 */
    }

    /* "raypier/core/cfaces.pyx":1257
 *             if not self.x1 < p2.x < self.x2:
 *                 root2 = 2
 *             if not self.y1 < p2.y < self.y2:             # <<<<<<<<<<<<<<
 *                 root2 = 2
 *             if not self.z1 < p2.z < self.z2:
 */
    __pyx_t_2 = (__pyx_v_self->y1 < __pyx_v_p2.y);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_p2.y < __pyx_v_self->y2);
    }
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":1258
 *                 root2 = 2
 *             if not self.y1 < p2.y < self.y2:
 *                 root2 = 2             # <<<<<<<<<<<<<<
 *             if not self.z1 < p2.z < self.z2:
 *                 root2 = 2
 */
      __pyx_v_root2 = 2.0;

      /* "raypier/core/cfaces.pyx":1257
 *             if not self.x1 < p2.x < self.x2:
 *                 root2 = 2
 *             if not self.y1 < p2.y < self.y2:             # <<<<<<<<<<<<<<
 *                 root2 = 2
 *             if not self.z1 < p2.z < self.z2:
 */
    }

    /* "raypier/core/cfaces.pyx":1259
 *             if not self.y1 < p2.y < self.y2:
 *                 root2 = 2
 *             if not self.z1 < p2.z < self.z2:             # <<<<<<<<<<<<<<
 *                 root2 = 2
 * 
 */
    __pyx_t_1 = (__pyx_v_self->z1 < __pyx_v_p2.z);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_p2.z < __pyx_v_self->z2);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1260
 *                 root2 = 2
 *             if not self.z1 < p2.z < self.z2:
 *                 root2 = 2             # <<<<<<<<<<<<<<
 * 
 *             if not self.x1 < p1.x < self.x2:
 */
      __pyx_v_root2 = 2.0;

      /* "raypier/core/cfaces.pyx":1259
 *             if not self.y1 < p2.y < self.y2:
 *                 root2 = 2
 *             if not self.z1 < p2.z < self.z2:             # <<<<<<<<<<<<<<
 *                 root2 = 2
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":1262
 *                 root2 = 2
 * 
 *             if not self.x1 < p1.x < self.x2:             # <<<<<<<<<<<<<<
 *                 root1 = 2
 *             if not self.y1 < p1.y < self.y2:
 */
    __pyx_t_2 = (__pyx_v_self->x1 < __pyx_v_p1.x);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_p1.x < __pyx_v_self->x2);
    }
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":1263
 * 
 *             if not self.x1 < p1.x < self.x2:
 *                 root1 = 2             # <<<<<<<<<<<<<<
 *             if not self.y1 < p1.y < self.y2:
 *                 root1 = 2
 */
      __pyx_v_root1 = 2.0;

      /* "raypier/core/cfaces.pyx":1262
 *                 root2 = 2
 * 
 *             if not self.x1 < p1.x < self.x2:             # <<<<<<<<<<<<<<
 *                 root1 = 2
 *             if not self.y1 < p1.y < self.y2:
 */
    }

    /* "raypier/core/cfaces.pyx":1264
 *             if not self.x1 < p1.x < self.x2:
 *                 root1 = 2
 *             if not self.y1 < p1.y < self.y2:             # <<<<<<<<<<<<<<
 *                 root1 = 2
 *             if not self.z1 < p1.z < self.z2:
 */
    __pyx_t_1 = (__pyx_v_self->y1 < __pyx_v_p1.y);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_p1.y < __pyx_v_self->y2);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1265
 *                 root1 = 2
 *             if not self.y1 < p1.y < self.y2:
 *                 root1 = 2             # <<<<<<<<<<<<<<
 *             if not self.z1 < p1.z < self.z2:
 *                 root1 = 2
 */
      __pyx_v_root1 = 2.0;

      /* "raypier/core/cfaces.pyx":1264
 *             if not self.x1 < p1.x < self.x2:
 *                 root1 = 2
 *             if not self.y1 < p1.y < self.y2:             # <<<<<<<<<<<<<<
 *                 root1 = 2
 *             if not self.z1 < p1.z < self.z2:
 */
    }

    /* "raypier/core/cfaces.pyx":1266
 *             if not self.y1 < p1.y < self.y2:
 *                 root1 = 2
 *             if not self.z1 < p1.z < self.z2:             # <<<<<<<<<<<<<<
 *                 root1 = 2
 * 
 */
    __pyx_t_2 = (__pyx_v_self->z1 < __pyx_v_p1.z);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_p1.z < __pyx_v_self->z2);
    }
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":1267
 *                 root1 = 2
 *             if not self.z1 < p1.z < self.z2:
 *                 root1 = 2             # <<<<<<<<<<<<<<
 * 
 *         if root1 < self.tolerance:
 */
      __pyx_v_root1 = 2.0;

      /* "raypier/core/cfaces.pyx":1266
 *             if not self.y1 < p1.y < self.y2:
 *                 root1 = 2
 *             if not self.z1 < p1.z < self.z2:             # <<<<<<<<<<<<<<
 *                 root1 = 2
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":1254
 *         p1 = addvv_(p1, multvs_(S, root1))
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not self.x1 < p2.x < self.x2:
 *                 root2 = 2
 */
  }

  /* "raypier/core/cfaces.pyx":1269
 *                 root1 = 2
 * 
 *         if root1 < self.tolerance:             # <<<<<<<<<<<<<<
 *             root1 = 2
 *         if root2 < self.tolerance:
 */
  __pyx_t_1 = ((__pyx_v_root1 < __pyx_v_self->__pyx_base.tolerance) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1270
 * 
 *         if root1 < self.tolerance:
 *             root1 = 2             # <<<<<<<<<<<<<<
 *         if root2 < self.tolerance:
 *             root2 = 2
 */
    __pyx_v_root1 = 2.0;

    /* "raypier/core/cfaces.pyx":1269
 *                 root1 = 2
 * 
 *         if root1 < self.tolerance:             # <<<<<<<<<<<<<<
 *             root1 = 2
 *         if root2 < self.tolerance:
 */
  }

  /* "raypier/core/cfaces.pyx":1271
 *         if root1 < self.tolerance:
 *             root1 = 2
 *         if root2 < self.tolerance:             # <<<<<<<<<<<<<<
 *             root2 = 2
 *         if root1 > root2:
 */
  __pyx_t_1 = ((__pyx_v_root2 < __pyx_v_self->__pyx_base.tolerance) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1272
 *             root1 = 2
 *         if root2 < self.tolerance:
 *             root2 = 2             # <<<<<<<<<<<<<<
 *         if root1 > root2:
 *             root1 = root2
 */
    __pyx_v_root2 = 2.0;

    /* "raypier/core/cfaces.pyx":1271
 *         if root1 < self.tolerance:
 *             root1 = 2
 *         if root2 < self.tolerance:             # <<<<<<<<<<<<<<
 *             root2 = 2
 *         if root1 > root2:
 */
  }

  /* "raypier/core/cfaces.pyx":1273
 *         if root2 < self.tolerance:
 *             root2 = 2
 *         if root1 > root2:             # <<<<<<<<<<<<<<
 *             root1 = root2
 *         if root1 > 1:
 */
  __pyx_t_1 = ((__pyx_v_root1 > __pyx_v_root2) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1274
 *             root2 = 2
 *         if root1 > root2:
 *             root1 = root2             # <<<<<<<<<<<<<<
 *         if root1 > 1:
 *             return NO_INTERSECTION
 */
    __pyx_v_root1 = __pyx_v_root2;

    /* "raypier/core/cfaces.pyx":1273
 *         if root2 < self.tolerance:
 *             root2 = 2
 *         if root1 > root2:             # <<<<<<<<<<<<<<
 *             root1 = root2
 *         if root1 > 1:
 */
  }

  /* "raypier/core/cfaces.pyx":1275
 *         if root1 > root2:
 *             root1 = root2
 *         if root1 > 1:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = root1*mag_(S)
 */
  __pyx_t_1 = ((__pyx_v_root1 > 1.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1276
 *             root1 = root2
 *         if root1 > 1:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = root1*mag_(S)
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1275
 *         if root1 > root2:
 *             root1 = root2
 *         if root1 > 1:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = root1*mag_(S)
 */
  }

  /* "raypier/core/cfaces.pyx":1277
 *         if root1 > 1:
 *             return NO_INTERSECTION
 *         out.dist = root1*mag_(S)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_root1 * __pyx_f_7raypier_4core_7ctracer_mag_(__pyx_v_S));

  /* "raypier/core/cfaces.pyx":1278
 *             return NO_INTERSECTION
 *         out.dist = root1*mag_(S)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1229
 *             return t
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double B,A, a, b, c, d
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1280
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef vector_t n
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_15EllipsoidalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_n;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1283
 *         cdef vector_t n
 * 
 *         p = transform_c(self.trans, p)             # <<<<<<<<<<<<<<
 * 
 *         n.x = p.x/-(self.major**2)
 */
  __pyx_v_p = __pyx_f_7raypier_4core_7ctracer_transform_c(__pyx_v_self->trans, __pyx_v_p);

  /* "raypier/core/cfaces.pyx":1285
 *         p = transform_c(self.trans, p)
 * 
 *         n.x = p.x/-(self.major**2)             # <<<<<<<<<<<<<<
 *         n.y = p.y/-(self.minor**2)
 *         n.z = p.z/-(self.minor**2)
 */
  __pyx_v_n.x = (__pyx_v_p.x / (-pow(__pyx_v_self->major, 2.0)));

  /* "raypier/core/cfaces.pyx":1286
 * 
 *         n.x = p.x/-(self.major**2)
 *         n.y = p.y/-(self.minor**2)             # <<<<<<<<<<<<<<
 *         n.z = p.z/-(self.minor**2)
 * 
 */
  __pyx_v_n.y = (__pyx_v_p.y / (-pow(__pyx_v_self->minor, 2.0)));

  /* "raypier/core/cfaces.pyx":1287
 *         n.x = p.x/-(self.major**2)
 *         n.y = p.y/-(self.minor**2)
 *         n.z = p.z/-(self.minor**2)             # <<<<<<<<<<<<<<
 * 
 *         n = rotate_c(self.inv_trans, n)
 */
  __pyx_v_n.z = (__pyx_v_p.z / (-pow(__pyx_v_self->minor, 2.0)));

  /* "raypier/core/cfaces.pyx":1289
 *         n.z = p.z/-(self.minor**2)
 * 
 *         n = rotate_c(self.inv_trans, n)             # <<<<<<<<<<<<<<
 *         return norm_(n)
 * 
 */
  __pyx_v_n = __pyx_f_7raypier_4core_7ctracer_rotate_c(__pyx_v_self->inv_trans, __pyx_v_n);

  /* "raypier/core/cfaces.pyx":1290
 * 
 *         n = rotate_c(self.inv_trans, n)
 *         return norm_(n)             # <<<<<<<<<<<<<<
 * 
 *     def update(self):
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_n);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1280
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef vector_t n
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1292
 *         return norm_(n)
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         super(EllipsoidalFace, self).update()
 *         owner = self.owner
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_1update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_1update(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_update(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_update(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_v_owner = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "raypier/core/cfaces.pyx":1293
 * 
 *     def update(self):
 *         super(EllipsoidalFace, self).update()             # <<<<<<<<<<<<<<
 *         owner = self.owner
 *         self.sync_transform(owner.ellipse_trans)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_EllipsoidalFace));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_EllipsoidalFace));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_EllipsoidalFace));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1294
 *     def update(self):
 *         super(EllipsoidalFace, self).update()
 *         owner = self.owner             # <<<<<<<<<<<<<<
 *         self.sync_transform(owner.ellipse_trans)
 *         self.major, self.minor = owner.axes
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.owner;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_owner = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1295
 *         super(EllipsoidalFace, self).update()
 *         owner = self.owner
 *         self.sync_transform(owner.ellipse_trans)             # <<<<<<<<<<<<<<
 *         self.major, self.minor = owner.axes
 *         self.x1, self.x2 = owner.X_bounds
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_sync_transform); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_owner, __pyx_n_s_ellipse_trans); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1296
 *         owner = self.owner
 *         self.sync_transform(owner.ellipse_trans)
 *         self.major, self.minor = owner.axes             # <<<<<<<<<<<<<<
 *         self.x1, self.x2 = owner.X_bounds
 *         self.y1, self.y2 = owner.Y_bounds
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_owner, __pyx_n_s_axes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1296, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1296, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1296, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->major = __pyx_t_6;
  __pyx_v_self->minor = __pyx_t_7;

  /* "raypier/core/cfaces.pyx":1297
 *         self.sync_transform(owner.ellipse_trans)
 *         self.major, self.minor = owner.axes
 *         self.x1, self.x2 = owner.X_bounds             # <<<<<<<<<<<<<<
 *         self.y1, self.y2 = owner.Y_bounds
 *         self.z1, self.z2 = owner.Z_bounds
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_owner, __pyx_n_s_X_bounds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1297, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L5_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L6_unpacking_done;
    __pyx_L5_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1297, __pyx_L1_error)
    __pyx_L6_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->x1 = __pyx_t_7;
  __pyx_v_self->x2 = __pyx_t_6;

  /* "raypier/core/cfaces.pyx":1298
 *         self.major, self.minor = owner.axes
 *         self.x1, self.x2 = owner.X_bounds
 *         self.y1, self.y2 = owner.Y_bounds             # <<<<<<<<<<<<<<
 *         self.z1, self.z2 = owner.Z_bounds
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_owner, __pyx_n_s_Y_bounds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1298, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L8_unpacking_done;
    __pyx_L7_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1298, __pyx_L1_error)
    __pyx_L8_unpacking_done:;
  }
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_self->y1 = __pyx_t_6;
  __pyx_v_self->y2 = __pyx_t_7;

  /* "raypier/core/cfaces.pyx":1299
 *         self.x1, self.x2 = owner.X_bounds
 *         self.y1, self.y2 = owner.Y_bounds
 *         self.z1, self.z2 = owner.Z_bounds             # <<<<<<<<<<<<<<
 * 
 *     def sync_transform(self, vtk_trans):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_owner, __pyx_n_s_Z_bounds); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1299, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L9_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L9_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 2) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L10_unpacking_done;
    __pyx_L9_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1299, __pyx_L1_error)
    __pyx_L10_unpacking_done:;
  }
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->z1 = __pyx_t_7;
  __pyx_v_self->z2 = __pyx_t_6;

  /* "raypier/core/cfaces.pyx":1292
 *         return norm_(n)
 * 
 *     def update(self):             # <<<<<<<<<<<<<<
 *         super(EllipsoidalFace, self).update()
 *         owner = self.owner
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_owner);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1301
 *         self.z1, self.z2 = owner.Z_bounds
 * 
 *     def sync_transform(self, vtk_trans):             # <<<<<<<<<<<<<<
 *         m = vtk_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_3sync_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_vtk_trans); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_3sync_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_vtk_trans) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sync_transform (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2sync_transform(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_vtk_trans));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2sync_transform(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_vtk_trans) {
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_rot = NULL;
  PyObject *__pyx_v_dt = NULL;
  PyObject *__pyx_v_inv_trans = NULL;
  long __pyx_7genexpr__pyx_v_i;
  long __pyx_8genexpr1__pyx_v_j;
  long __pyx_8genexpr2__pyx_v_i;
  long __pyx_8genexpr3__pyx_v_i;
  long __pyx_8genexpr4__pyx_v_j;
  long __pyx_8genexpr5__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  long __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sync_transform", 0);

  /* "raypier/core/cfaces.pyx":1302
 * 
 *     def sync_transform(self, vtk_trans):
 *         m = vtk_trans.matrix             # <<<<<<<<<<<<<<
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_vtk_trans, __pyx_n_s_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_m = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1303
 *     def sync_transform(self, vtk_trans):
 *         m = vtk_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         #print "TRANS", rot, dt
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
      __pyx_7genexpr__pyx_v_i = __pyx_t_2;
      { /* enter inner scope */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
          __pyx_8genexpr1__pyx_v_j = __pyx_t_4;
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1303, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_7genexpr__pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1303, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_8genexpr1__pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1303, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_6, function);
              __pyx_t_10 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
            PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_8};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          } else
          #endif
          {
            __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1303, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (__pyx_t_9) {
              __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_8);
            PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_t_8);
            __pyx_t_7 = 0;
            __pyx_t_8 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1303, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      } /* exit inner scope */
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1303, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  __pyx_v_rot = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1304
 *         m = vtk_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         #print "TRANS", rot, dt
 *         self.transform = Transform(rotation=rot, translation=dt)
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
      __pyx_8genexpr2__pyx_v_i = __pyx_t_2;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_8genexpr2__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_6, __pyx_int_3};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_6, __pyx_int_3};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1304, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_11) {
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11); __pyx_t_11 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_t_6);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, __pyx_int_3);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  } /* exit inner scope */
  __pyx_v_dt = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1306
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         #print "TRANS", rot, dt
 *         self.transform = Transform(rotation=rot, translation=dt)             # <<<<<<<<<<<<<<
 *         inv_trans = vtk_trans.linear_inverse
 *         m = inv_trans.matrix
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_rotation, __pyx_v_rot) < 0) __PYX_ERR(0, 1306, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_translation, __pyx_v_dt) < 0) __PYX_ERR(0, 1306, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_transform, __pyx_t_3) < 0) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":1307
 *         #print "TRANS", rot, dt
 *         self.transform = Transform(rotation=rot, translation=dt)
 *         inv_trans = vtk_trans.linear_inverse             # <<<<<<<<<<<<<<
 *         m = inv_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_vtk_trans, __pyx_n_s_linear_inverse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_inv_trans = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":1308
 *         self.transform = Transform(rotation=rot, translation=dt)
 *         inv_trans = vtk_trans.linear_inverse
 *         m = inv_trans.matrix             # <<<<<<<<<<<<<<
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_inv_trans, __pyx_n_s_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_m, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":1309
 *         inv_trans = vtk_trans.linear_inverse
 *         m = inv_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         self.inverse_transform = Transform(rotation=rot, translation=dt)
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
      __pyx_8genexpr3__pyx_v_i = __pyx_t_2;
      { /* enter inner scope */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
          __pyx_8genexpr4__pyx_v_j = __pyx_t_4;
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1309, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_8genexpr3__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1309, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_8genexpr4__pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1309, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_7 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_7)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_7);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
              __pyx_t_10 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_11};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
            PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_t_11};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          {
            __pyx_t_9 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1309, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            if (__pyx_t_7) {
              __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_6);
            PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_10, __pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_10, __pyx_t_11);
            __pyx_t_6 = 0;
            __pyx_t_11 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1309, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1309, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      } /* exit inner scope */
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1309, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_rot, ((PyObject*)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":1310
 *         m = inv_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]             # <<<<<<<<<<<<<<
 *         self.inverse_transform = Transform(rotation=rot, translation=dt)
 * 
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
      __pyx_8genexpr5__pyx_v_i = __pyx_t_2;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_get_element); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_8genexpr5__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_8, __pyx_int_3};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_t_8, __pyx_int_3};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1310, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_10, __pyx_t_8);
        __Pyx_INCREF(__pyx_int_3);
        __Pyx_GIVEREF(__pyx_int_3);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_10, __pyx_int_3);
        __pyx_t_8 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1310, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_dt, ((PyObject*)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "raypier/core/cfaces.pyx":1311
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 *         dt = [m.get_element(i,3) for i in xrange(3)]
 *         self.inverse_transform = Transform(rotation=rot, translation=dt)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_rotation, __pyx_v_rot) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_translation, __pyx_v_dt) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7raypier_4core_7ctracer_Transform), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inverse_transform, __pyx_t_1) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1301
 *         self.z1, self.z2 = owner.Z_bounds
 * 
 *     def sync_transform(self, vtk_trans):             # <<<<<<<<<<<<<<
 *         m = vtk_trans.matrix
 *         rot = [[m.get_element(i,j) for j in xrange(3)] for i in xrange(3)]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.sync_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_rot);
  __Pyx_XDECREF(__pyx_v_dt);
  __Pyx_XDECREF(__pyx_v_inv_trans);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1207
 * cdef class EllipsoidalFace(Face):
 *     cdef:
 *         public double major, minor #axis lengths             # <<<<<<<<<<<<<<
 *         transform_t trans, inv_trans
 *         public double x1, x2, y1, y2, z1, z2 #local bounds of the ellpsoid block
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5major_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5major_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5major___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5major___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->major); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.major.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5major_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5major_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5major_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5major_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1207, __pyx_L1_error)
  __pyx_v_self->major = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.major.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5minor___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5minor___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->minor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.minor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1207, __pyx_L1_error)
  __pyx_v_self->minor = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.minor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1209
 *         public double major, minor #axis lengths
 *         transform_t trans, inv_trans
 *         public double x1, x2, y1, y2, z1, z2 #local bounds of the ellpsoid block             # <<<<<<<<<<<<<<
 * 
 *     property transform:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x1___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x1___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.x1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
  __pyx_v_self->x1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.x1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x2___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x2___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.x2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
  __pyx_v_self->x2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.x2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y1___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y1___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.y1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
  __pyx_v_self->y1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.y1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y2___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y2___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.y2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
  __pyx_v_self->y2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.y2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z1___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z1___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.z1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
  __pyx_v_self->z1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.z1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z2___get__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z2___get__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.z2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1209, __pyx_L1_error)
  __pyx_v_self->z2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.z2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_4__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_6__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_15EllipsoidalFace_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.EllipsoidalFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1320
 *     params=[]
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get("z_height", 0.0)
 *         self.curvature = kwds.get("curvature", 0.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10SaddleFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10SaddleFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":1321
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get("z_height", 0.0)             # <<<<<<<<<<<<<<
 *         self.curvature = kwds.get("curvature", 0.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1322
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get("z_height", 0.0)
 *         self.curvature = kwds.get("curvature", 0.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_curvature, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->curvature = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1320
 *     params=[]
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get("z_height", 0.0)
 *         self.curvature = kwds.get("curvature", 0.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SaddleFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1324
 *         self.curvature = kwds.get("curvature", 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double A=sqrt(6.0), root, denom, a1, a2
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_10SaddleFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_A;
  double __pyx_v_root;
  double __pyx_v_denom;
  double __pyx_v_a1;
  double __pyx_v_a2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1326
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 *         cdef:
 *             double A=sqrt(6.0), root, denom, a1, a2             # <<<<<<<<<<<<<<
 *             vector_t d,p, pt1, pt2
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_A = sqrt(6.0);

  /* "raypier/core/cfaces.pyx":1328
 *             double A=sqrt(6.0), root, denom, a1, a2
 *             vector_t d,p, pt1, pt2
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         A *= self.curvature
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1330
 *             intersect_t out=NO_INTERSECTION
 * 
 *         A *= self.curvature             # <<<<<<<<<<<<<<
 *         p = p1
 *         p.z -= self.z_height
 */
  __pyx_v_A = (__pyx_v_A * __pyx_v_self->curvature);

  /* "raypier/core/cfaces.pyx":1331
 * 
 *         A *= self.curvature
 *         p = p1             # <<<<<<<<<<<<<<
 *         p.z -= self.z_height
 *         d = subvv_(p2,p1)
 */
  __pyx_v_p = __pyx_v_p1;

  /* "raypier/core/cfaces.pyx":1332
 *         A *= self.curvature
 *         p = p1
 *         p.z -= self.z_height             # <<<<<<<<<<<<<<
 *         d = subvv_(p2,p1)
 * 
 */
  __pyx_v_p.z = (__pyx_v_p.z - __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1333
 *         p = p1
 *         p.z -= self.z_height
 *         d = subvv_(p2,p1)             # <<<<<<<<<<<<<<
 * 
 *         if d.x==0.0:
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1335
 *         d = subvv_(p2,p1)
 * 
 *         if d.x==0.0:             # <<<<<<<<<<<<<<
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.y*p.x - d.z)
 *             a2 = INF
 */
  __pyx_t_1 = ((__pyx_v_d.x == 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1336
 * 
 *         if d.x==0.0:
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.y*p.x - d.z)             # <<<<<<<<<<<<<<
 *             a2 = INF
 *         elif d.y==0.0:
 */
    __pyx_v_a1 = ((((-__pyx_v_A) * (__pyx_v_p.x * __pyx_v_p.y)) + __pyx_v_p.z) / (((__pyx_v_A * __pyx_v_d.y) * __pyx_v_p.x) - __pyx_v_d.z));

    /* "raypier/core/cfaces.pyx":1337
 *         if d.x==0.0:
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.y*p.x - d.z)
 *             a2 = INF             # <<<<<<<<<<<<<<
 *         elif d.y==0.0:
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.x*p.y - d.z)
 */
    __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

    /* "raypier/core/cfaces.pyx":1335
 *         d = subvv_(p2,p1)
 * 
 *         if d.x==0.0:             # <<<<<<<<<<<<<<
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.y*p.x - d.z)
 *             a2 = INF
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":1338
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.y*p.x - d.z)
 *             a2 = INF
 *         elif d.y==0.0:             # <<<<<<<<<<<<<<
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.x*p.y - d.z)
 *             a2 = INF
 */
  __pyx_t_1 = ((__pyx_v_d.y == 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1339
 *             a2 = INF
 *         elif d.y==0.0:
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.x*p.y - d.z)             # <<<<<<<<<<<<<<
 *             a2 = INF
 *         else:
 */
    __pyx_v_a1 = ((((-__pyx_v_A) * (__pyx_v_p.x * __pyx_v_p.y)) + __pyx_v_p.z) / (((__pyx_v_A * __pyx_v_d.x) * __pyx_v_p.y) - __pyx_v_d.z));

    /* "raypier/core/cfaces.pyx":1340
 *         elif d.y==0.0:
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.x*p.y - d.z)
 *             a2 = INF             # <<<<<<<<<<<<<<
 *         else:
 *             root = (A**2)*(d.x**2)*(p.y**2) - 2*(A**2)*d.x*d.y*p.x*p.y + (A**2)*(d.y**2)*(p.x**2) + \
 */
    __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

    /* "raypier/core/cfaces.pyx":1338
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.y*p.x - d.z)
 *             a2 = INF
 *         elif d.y==0.0:             # <<<<<<<<<<<<<<
 *             a1 = (-A*(p.x*p.y) + p.z)/(A*d.x*p.y - d.z)
 *             a2 = INF
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":1342
 *             a2 = INF
 *         else:
 *             root = (A**2)*(d.x**2)*(p.y**2) - 2*(A**2)*d.x*d.y*p.x*p.y + (A**2)*(d.y**2)*(p.x**2) + \             # <<<<<<<<<<<<<<
 *                     4*A*d.x*d.y*p.z - 2*A*d.x*d.z*p.y - 2*A*d.y*d.z*p.x + d.z**2
 * 
 */
  /*else*/ {

    /* "raypier/core/cfaces.pyx":1343
 *         else:
 *             root = (A**2)*(d.x**2)*(p.y**2) - 2*(A**2)*d.x*d.y*p.x*p.y + (A**2)*(d.y**2)*(p.x**2) + \
 *                     4*A*d.x*d.y*p.z - 2*A*d.x*d.z*p.y - 2*A*d.y*d.z*p.x + d.z**2             # <<<<<<<<<<<<<<
 * 
 *             if root < 0:
 */
    __pyx_v_root = ((((((((pow(__pyx_v_A, 2.0) * pow(__pyx_v_d.x, 2.0)) * pow(__pyx_v_p.y, 2.0)) - (((((2.0 * pow(__pyx_v_A, 2.0)) * __pyx_v_d.x) * __pyx_v_d.y) * __pyx_v_p.x) * __pyx_v_p.y)) + ((pow(__pyx_v_A, 2.0) * pow(__pyx_v_d.y, 2.0)) * pow(__pyx_v_p.x, 2.0))) + ((((4.0 * __pyx_v_A) * __pyx_v_d.x) * __pyx_v_d.y) * __pyx_v_p.z)) - ((((2.0 * __pyx_v_A) * __pyx_v_d.x) * __pyx_v_d.z) * __pyx_v_p.y)) - ((((2.0 * __pyx_v_A) * __pyx_v_d.y) * __pyx_v_d.z) * __pyx_v_p.x)) + pow(__pyx_v_d.z, 2.0));

    /* "raypier/core/cfaces.pyx":1345
 *                     4*A*d.x*d.y*p.z - 2*A*d.x*d.z*p.y - 2*A*d.y*d.z*p.x + d.z**2
 * 
 *             if root < 0:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 * 
 */
    __pyx_t_1 = ((__pyx_v_root < 0.0) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":1346
 * 
 *             if root < 0:
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *             root = sqrt(root)
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":1345
 *                     4*A*d.x*d.y*p.z - 2*A*d.x*d.z*p.y - 2*A*d.y*d.z*p.x + d.z**2
 * 
 *             if root < 0:             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":1348
 *                 return NO_INTERSECTION
 * 
 *             root = sqrt(root)             # <<<<<<<<<<<<<<
 *             denom = 2*A*(d.x*d.y)
 * 
 */
    __pyx_v_root = sqrt(__pyx_v_root);

    /* "raypier/core/cfaces.pyx":1349
 * 
 *             root = sqrt(root)
 *             denom = 2*A*(d.x*d.y)             # <<<<<<<<<<<<<<
 * 
 *             a1 = a2 = -A*d.x*p.y - A*d.y*p.x + d.z
 */
    __pyx_v_denom = ((2.0 * __pyx_v_A) * (__pyx_v_d.x * __pyx_v_d.y));

    /* "raypier/core/cfaces.pyx":1351
 *             denom = 2*A*(d.x*d.y)
 * 
 *             a1 = a2 = -A*d.x*p.y - A*d.y*p.x + d.z             # <<<<<<<<<<<<<<
 *             a1 += root
 *             a2 -= root
 */
    __pyx_t_2 = (((((-__pyx_v_A) * __pyx_v_d.x) * __pyx_v_p.y) - ((__pyx_v_A * __pyx_v_d.y) * __pyx_v_p.x)) + __pyx_v_d.z);
    __pyx_v_a1 = __pyx_t_2;
    __pyx_v_a2 = __pyx_t_2;

    /* "raypier/core/cfaces.pyx":1352
 * 
 *             a1 = a2 = -A*d.x*p.y - A*d.y*p.x + d.z
 *             a1 += root             # <<<<<<<<<<<<<<
 *             a2 -= root
 *             a1 /= denom
 */
    __pyx_v_a1 = (__pyx_v_a1 + __pyx_v_root);

    /* "raypier/core/cfaces.pyx":1353
 *             a1 = a2 = -A*d.x*p.y - A*d.y*p.x + d.z
 *             a1 += root
 *             a2 -= root             # <<<<<<<<<<<<<<
 *             a1 /= denom
 *             a2 /= denom
 */
    __pyx_v_a2 = (__pyx_v_a2 - __pyx_v_root);

    /* "raypier/core/cfaces.pyx":1354
 *             a1 += root
 *             a2 -= root
 *             a1 /= denom             # <<<<<<<<<<<<<<
 *             a2 /= denom
 * 
 */
    __pyx_v_a1 = (__pyx_v_a1 / __pyx_v_denom);

    /* "raypier/core/cfaces.pyx":1355
 *             a2 -= root
 *             a1 /= denom
 *             a2 /= denom             # <<<<<<<<<<<<<<
 * 
 *         #print("a1:", a1, "a2:", a2, "root:", root, "sep:", sep_(p1,p2))
 */
    __pyx_v_a2 = (__pyx_v_a2 / __pyx_v_denom);
  }
  __pyx_L3:;

  /* "raypier/core/cfaces.pyx":1359
 *         #print("a1:", a1, "a2:", a2, "root:", root, "sep:", sep_(p1,p2))
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))             # <<<<<<<<<<<<<<
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":1360
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))
 *         pt2 = addvv_(p1, multvs_(d, a2))             # <<<<<<<<<<<<<<
 * 
 *         if a1 < 0.0:
 */
  __pyx_v_pt2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a2));

  /* "raypier/core/cfaces.pyx":1362
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 *         if a1 < 0.0:             # <<<<<<<<<<<<<<
 *             a1 = INF
 *         if a2 < 0.0:
 */
  __pyx_t_1 = ((__pyx_v_a1 < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1363
 * 
 *         if a1 < 0.0:
 *             a1 = INF             # <<<<<<<<<<<<<<
 *         if a2 < 0.0:
 *             a2 = INF
 */
    __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

    /* "raypier/core/cfaces.pyx":1362
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 *         if a1 < 0.0:             # <<<<<<<<<<<<<<
 *             a1 = INF
 *         if a2 < 0.0:
 */
  }

  /* "raypier/core/cfaces.pyx":1364
 *         if a1 < 0.0:
 *             a1 = INF
 *         if a2 < 0.0:             # <<<<<<<<<<<<<<
 *             a2 = INF
 * 
 */
  __pyx_t_1 = ((__pyx_v_a2 < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1365
 *             a1 = INF
 *         if a2 < 0.0:
 *             a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
    __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

    /* "raypier/core/cfaces.pyx":1364
 *         if a1 < 0.0:
 *             a1 = INF
 *         if a2 < 0.0:             # <<<<<<<<<<<<<<
 *             a2 = INF
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1367
 *             a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  __pyx_t_1 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1368
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":1369
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1368
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    }

    /* "raypier/core/cfaces.pyx":1370
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_1 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt2.x, __pyx_v_pt2.y) != 0)) != 0);
    if (__pyx_t_1) {

      /* "raypier/core/cfaces.pyx":1371
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if a2 < a1:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1370
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":1367
 *             a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  }

  /* "raypier/core/cfaces.pyx":1373
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  __pyx_t_1 = ((__pyx_v_a2 < __pyx_v_a1) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1374
 * 
 *         if a2 < a1:
 *             a1 = a2             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_v_a1 = __pyx_v_a2;

    /* "raypier/core/cfaces.pyx":1373
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1376
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_3 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1377
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         out.dist = a1 * sep_(p1, p2)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1376
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1379
 *             return NO_INTERSECTION
 * 
 *         out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":1380
 * 
 *         out.dist = a1 * sep_(p1, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1324
 *         self.curvature = kwds.get("curvature", 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double A=sqrt(6.0), root, denom, a1, a2
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1382
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_10SaddleFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_n;
  double __pyx_v_rt6;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1388
 *         cdef:
 *             vector_t n
 *             double rt6 = sqrt(6)*self.curvature             # <<<<<<<<<<<<<<
 * 
 *         n.z = 1.0
 */
  __pyx_v_rt6 = (sqrt(6.0) * __pyx_v_self->curvature);

  /* "raypier/core/cfaces.pyx":1390
 *             double rt6 = sqrt(6)*self.curvature
 * 
 *         n.z = 1.0             # <<<<<<<<<<<<<<
 *         n.x = -rt6*p.y
 *         n.y = -rt6*p.x
 */
  __pyx_v_n.z = 1.0;

  /* "raypier/core/cfaces.pyx":1391
 * 
 *         n.z = 1.0
 *         n.x = -rt6*p.y             # <<<<<<<<<<<<<<
 *         n.y = -rt6*p.x
 *         return norm_(n)
 */
  __pyx_v_n.x = ((-__pyx_v_rt6) * __pyx_v_p.y);

  /* "raypier/core/cfaces.pyx":1392
 *         n.z = 1.0
 *         n.x = -rt6*p.y
 *         n.y = -rt6*p.x             # <<<<<<<<<<<<<<
 *         return norm_(n)
 * 
 */
  __pyx_v_n.y = ((-__pyx_v_rt6) * __pyx_v_p.x);

  /* "raypier/core/cfaces.pyx":1393
 *         n.x = -rt6*p.y
 *         n.y = -rt6*p.x
 *         return norm_(n)             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_n);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1382
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1395
 *         return norm_(n)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return sqrt(6) * self.curvature * x * y
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_10SaddleFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":1396
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 *         return sqrt(6) * self.curvature * x * y             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (((sqrt(6.0) * __pyx_v_self->curvature) * __pyx_v_x) * __pyx_v_y);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1395
 *         return norm_(n)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return sqrt(6) * self.curvature * x * y
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1316
 * cdef class SaddleFace(ShapedFace):
 *     cdef:
 *         public double z_height, curvature             # <<<<<<<<<<<<<<
 * 
 *     params=[]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SaddleFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1316, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.SaddleFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_9curvature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_9curvature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_9curvature___get__(((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->curvature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SaddleFace.curvature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_9curvature_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1316, __pyx_L1_error)
  __pyx_v_self->curvature = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.SaddleFace.curvature.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SaddleFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10SaddleFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10SaddleFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.SaddleFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1407
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.radius = kwds.get("radius", 100.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":1408
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 *         self.radius = kwds.get("radius", 100.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1409
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.radius = kwds.get("radius", 100.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_radius, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->radius = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1407
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.radius = kwds.get("radius", 100.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CylindericalFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1411
 *         self.radius = kwds.get("radius", 100.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double a1, a2, cz, ox2, oz2, dx2, dz2, denom, R=self.radius
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_16CylindericalFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_a1;
  double __pyx_v_a2;
  double __pyx_v_cz;
  double __pyx_v_ox2;
  double __pyx_v_oz2;
  double __pyx_v_dx2;
  double __pyx_v_dz2;
  double __pyx_v_denom;
  double __pyx_v_R;
  double __pyx_v_R2;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_o;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  double __pyx_v_root;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1413
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 *         cdef:
 *             double a1, a2, cz, ox2, oz2, dx2, dz2, denom, R=self.radius             # <<<<<<<<<<<<<<
 *             double R2 = R*R
 *             vector_t d,o, pt1, pt2
 */
  __pyx_t_1 = __pyx_v_self->radius;
  __pyx_v_R = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1414
 *         cdef:
 *             double a1, a2, cz, ox2, oz2, dx2, dz2, denom, R=self.radius
 *             double R2 = R*R             # <<<<<<<<<<<<<<
 *             vector_t d,o, pt1, pt2
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_v_R2 = (__pyx_v_R * __pyx_v_R);

  /* "raypier/core/cfaces.pyx":1416
 *             double R2 = R*R
 *             vector_t d,o, pt1, pt2
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         o = p1
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1418
 *             intersect_t out=NO_INTERSECTION
 * 
 *         o = p1             # <<<<<<<<<<<<<<
 *         o.z -= self.z_height
 *         d = subvv_(p2,p1)
 */
  __pyx_v_o = __pyx_v_p1;

  /* "raypier/core/cfaces.pyx":1419
 * 
 *         o = p1
 *         o.z -= self.z_height             # <<<<<<<<<<<<<<
 *         d = subvv_(p2,p1)
 * 
 */
  __pyx_v_o.z = (__pyx_v_o.z - __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1420
 *         o = p1
 *         o.z -= self.z_height
 *         d = subvv_(p2,p1)             # <<<<<<<<<<<<<<
 * 
 *         ox2 = o.x*o.x
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1422
 *         d = subvv_(p2,p1)
 * 
 *         ox2 = o.x*o.x             # <<<<<<<<<<<<<<
 *         oz2 = o.z*o.z
 *         dx2 = d.x*d.x
 */
  __pyx_v_ox2 = (__pyx_v_o.x * __pyx_v_o.x);

  /* "raypier/core/cfaces.pyx":1423
 * 
 *         ox2 = o.x*o.x
 *         oz2 = o.z*o.z             # <<<<<<<<<<<<<<
 *         dx2 = d.x*d.x
 *         dz2 = d.z*d.z
 */
  __pyx_v_oz2 = (__pyx_v_o.z * __pyx_v_o.z);

  /* "raypier/core/cfaces.pyx":1424
 *         ox2 = o.x*o.x
 *         oz2 = o.z*o.z
 *         dx2 = d.x*d.x             # <<<<<<<<<<<<<<
 *         dz2 = d.z*d.z
 * 
 */
  __pyx_v_dx2 = (__pyx_v_d.x * __pyx_v_d.x);

  /* "raypier/core/cfaces.pyx":1425
 *         oz2 = o.z*o.z
 *         dx2 = d.x*d.x
 *         dz2 = d.z*d.z             # <<<<<<<<<<<<<<
 * 
 *         root = R2*dz2 - 2*R*dx2*o.z + 2*R*d.x*d.z*o.x - dx2*oz2 + 2*d.x*d.z*o.x*o.z - dz2*ox2
 */
  __pyx_v_dz2 = (__pyx_v_d.z * __pyx_v_d.z);

  /* "raypier/core/cfaces.pyx":1427
 *         dz2 = d.z*d.z
 * 
 *         root = R2*dz2 - 2*R*dx2*o.z + 2*R*d.x*d.z*o.x - dx2*oz2 + 2*d.x*d.z*o.x*o.z - dz2*ox2             # <<<<<<<<<<<<<<
 * 
 *         if root < 0:
 */
  __pyx_v_root = ((((((__pyx_v_R2 * __pyx_v_dz2) - (((2.0 * __pyx_v_R) * __pyx_v_dx2) * __pyx_v_o.z)) + ((((2.0 * __pyx_v_R) * __pyx_v_d.x) * __pyx_v_d.z) * __pyx_v_o.x)) - (__pyx_v_dx2 * __pyx_v_oz2)) + ((((2.0 * __pyx_v_d.x) * __pyx_v_d.z) * __pyx_v_o.x) * __pyx_v_o.z)) - (__pyx_v_dz2 * __pyx_v_ox2));

  /* "raypier/core/cfaces.pyx":1429
 *         root = R2*dz2 - 2*R*dx2*o.z + 2*R*d.x*d.z*o.x - dx2*oz2 + 2*d.x*d.z*o.x*o.z - dz2*ox2
 * 
 *         if root < 0:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_2 = ((__pyx_v_root < 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1430
 * 
 *         if root < 0:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         root = sqrt(root)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1429
 *         root = R2*dz2 - 2*R*dx2*o.z + 2*R*d.x*d.z*o.x - dx2*oz2 + 2*d.x*d.z*o.x*o.z - dz2*ox2
 * 
 *         if root < 0:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1432
 *             return NO_INTERSECTION
 * 
 *         root = sqrt(root)             # <<<<<<<<<<<<<<
 *         denom = dx2 + dz2
 * 
 */
  __pyx_v_root = sqrt(__pyx_v_root);

  /* "raypier/core/cfaces.pyx":1433
 * 
 *         root = sqrt(root)
 *         denom = dx2 + dz2             # <<<<<<<<<<<<<<
 * 
 *         a1 = a2 = -R*d.z - d.x*o.x - d.z*o.z
 */
  __pyx_v_denom = (__pyx_v_dx2 + __pyx_v_dz2);

  /* "raypier/core/cfaces.pyx":1435
 *         denom = dx2 + dz2
 * 
 *         a1 = a2 = -R*d.z - d.x*o.x - d.z*o.z             # <<<<<<<<<<<<<<
 *         a1 += root
 *         a2 -= root
 */
  __pyx_t_1 = ((((-__pyx_v_R) * __pyx_v_d.z) - (__pyx_v_d.x * __pyx_v_o.x)) - (__pyx_v_d.z * __pyx_v_o.z));
  __pyx_v_a1 = __pyx_t_1;
  __pyx_v_a2 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1436
 * 
 *         a1 = a2 = -R*d.z - d.x*o.x - d.z*o.z
 *         a1 += root             # <<<<<<<<<<<<<<
 *         a2 -= root
 *         a1 /= denom
 */
  __pyx_v_a1 = (__pyx_v_a1 + __pyx_v_root);

  /* "raypier/core/cfaces.pyx":1437
 *         a1 = a2 = -R*d.z - d.x*o.x - d.z*o.z
 *         a1 += root
 *         a2 -= root             # <<<<<<<<<<<<<<
 *         a1 /= denom
 *         a2 /= denom
 */
  __pyx_v_a2 = (__pyx_v_a2 - __pyx_v_root);

  /* "raypier/core/cfaces.pyx":1438
 *         a1 += root
 *         a2 -= root
 *         a1 /= denom             # <<<<<<<<<<<<<<
 *         a2 /= denom
 * 
 */
  __pyx_v_a1 = (__pyx_v_a1 / __pyx_v_denom);

  /* "raypier/core/cfaces.pyx":1439
 *         a2 -= root
 *         a1 /= denom
 *         a2 /= denom             # <<<<<<<<<<<<<<
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))
 */
  __pyx_v_a2 = (__pyx_v_a2 / __pyx_v_denom);

  /* "raypier/core/cfaces.pyx":1441
 *         a2 /= denom
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))             # <<<<<<<<<<<<<<
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":1442
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))
 *         pt2 = addvv_(p1, multvs_(d, a2))             # <<<<<<<<<<<<<<
 * 
 *         cz = self.z_height - self.radius
 */
  __pyx_v_pt2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a2));

  /* "raypier/core/cfaces.pyx":1444
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 *         cz = self.z_height - self.radius             # <<<<<<<<<<<<<<
 * 
 *         if R >= 0:
 */
  __pyx_v_cz = (__pyx_v_self->z_height - __pyx_v_self->radius);

  /* "raypier/core/cfaces.pyx":1446
 *         cz = self.z_height - self.radius
 * 
 *         if R >= 0:             # <<<<<<<<<<<<<<
 *             if pt1.z < cz:
 *                 a1 = INF
 */
  __pyx_t_2 = ((__pyx_v_R >= 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1447
 * 
 *         if R >= 0:
 *             if pt1.z < cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z < cz:
 */
    __pyx_t_2 = ((__pyx_v_pt1.z < __pyx_v_cz) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1448
 *         if R >= 0:
 *             if pt1.z < cz:
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if pt2.z < cz:
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1447
 * 
 *         if R >= 0:
 *             if pt1.z < cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z < cz:
 */
    }

    /* "raypier/core/cfaces.pyx":1449
 *             if pt1.z < cz:
 *                 a1 = INF
 *             if pt2.z < cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 *         else:
 */
    __pyx_t_2 = ((__pyx_v_pt2.z < __pyx_v_cz) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1450
 *                 a1 = INF
 *             if pt2.z < cz:
 *                 a2 = INF             # <<<<<<<<<<<<<<
 *         else:
 *             if pt1.z > cz:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1449
 *             if pt1.z < cz:
 *                 a1 = INF
 *             if pt2.z < cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 *         else:
 */
    }

    /* "raypier/core/cfaces.pyx":1446
 *         cz = self.z_height - self.radius
 * 
 *         if R >= 0:             # <<<<<<<<<<<<<<
 *             if pt1.z < cz:
 *                 a1 = INF
 */
    goto __pyx_L4;
  }

  /* "raypier/core/cfaces.pyx":1452
 *                 a2 = INF
 *         else:
 *             if pt1.z > cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z > cz:
 */
  /*else*/ {
    __pyx_t_2 = ((__pyx_v_pt1.z > __pyx_v_cz) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1453
 *         else:
 *             if pt1.z > cz:
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if pt2.z > cz:
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1452
 *                 a2 = INF
 *         else:
 *             if pt1.z > cz:             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if pt2.z > cz:
 */
    }

    /* "raypier/core/cfaces.pyx":1454
 *             if pt1.z > cz:
 *                 a1 = INF
 *             if pt2.z > cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_2 = ((__pyx_v_pt2.z > __pyx_v_cz) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1455
 *                 a1 = INF
 *             if pt2.z > cz:
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1454
 *             if pt1.z > cz:
 *                 a1 = INF
 *             if pt2.z > cz:             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }
  }
  __pyx_L4:;

  /* "raypier/core/cfaces.pyx":1457
 *                 a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1458
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    __pyx_t_2 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1459
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1458
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    }

    /* "raypier/core/cfaces.pyx":1460
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_2 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt2.x, __pyx_v_pt2.y) != 0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1461
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if a2 < a1:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1460
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":1457
 *                 a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  }

  /* "raypier/core/cfaces.pyx":1463
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  __pyx_t_2 = ((__pyx_v_a2 < __pyx_v_a1) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1464
 * 
 *         if a2 < a1:
 *             a1 = a2             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_v_a1 = __pyx_v_a2;

    /* "raypier/core/cfaces.pyx":1463
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1466
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)
 */
  __pyx_t_3 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1467
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = a1 * sep_(p1, p2)
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1466
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)
 */
  }

  /* "raypier/core/cfaces.pyx":1468
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":1469
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1411
 *         self.radius = kwds.get("radius", 100.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double a1, a2, cz, ox2, oz2, dx2, dz2, denom, R=self.radius
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1471
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_16CylindericalFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1476
 *         """
 * 
 *         p.z -= (self.z_height - self.radius)             # <<<<<<<<<<<<<<
 *         if self.radius < 0:
 *             p.z = -p.z
 */
  __pyx_v_p.z = (__pyx_v_p.z - (__pyx_v_self->z_height - __pyx_v_self->radius));

  /* "raypier/core/cfaces.pyx":1477
 * 
 *         p.z -= (self.z_height - self.radius)
 *         if self.radius < 0:             # <<<<<<<<<<<<<<
 *             p.z = -p.z
 *             p.x = -p.x
 */
  __pyx_t_1 = ((__pyx_v_self->radius < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1478
 *         p.z -= (self.z_height - self.radius)
 *         if self.radius < 0:
 *             p.z = -p.z             # <<<<<<<<<<<<<<
 *             p.x = -p.x
 *         p.y = 0
 */
    __pyx_v_p.z = (-__pyx_v_p.z);

    /* "raypier/core/cfaces.pyx":1479
 *         if self.radius < 0:
 *             p.z = -p.z
 *             p.x = -p.x             # <<<<<<<<<<<<<<
 *         p.y = 0
 *         return norm_(p)
 */
    __pyx_v_p.x = (-__pyx_v_p.x);

    /* "raypier/core/cfaces.pyx":1477
 * 
 *         p.z -= (self.z_height - self.radius)
 *         if self.radius < 0:             # <<<<<<<<<<<<<<
 *             p.z = -p.z
 *             p.x = -p.x
 */
  }

  /* "raypier/core/cfaces.pyx":1480
 *             p.z = -p.z
 *             p.x = -p.x
 *         p.y = 0             # <<<<<<<<<<<<<<
 *         return norm_(p)
 * 
 */
  __pyx_v_p.y = 0.0;

  /* "raypier/core/cfaces.pyx":1481
 *             p.x = -p.x
 *         p.y = 0
 *         return norm_(p)             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_p);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1471
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1483
 *         return norm_(p)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double R = self.radius
 */

static double __pyx_f_7raypier_4core_6cfaces_16CylindericalFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, double __pyx_v_x, CYTHON_UNUSED double __pyx_v_y) {
  double __pyx_v_R;
  double __pyx_r;
  double __pyx_t_1;
  int __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1485
 *     cdef double eval_z_c(self, double x, double y) nogil:
 *         cdef:
 *             double R = self.radius             # <<<<<<<<<<<<<<
 *         if R>=0:
 *             return self.z_height + sqrt(R*R - x*x) - R
 */
  __pyx_t_1 = __pyx_v_self->radius;
  __pyx_v_R = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1486
 *         cdef:
 *             double R = self.radius
 *         if R>=0:             # <<<<<<<<<<<<<<
 *             return self.z_height + sqrt(R*R - x*x) - R
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_R >= 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1487
 *             double R = self.radius
 *         if R>=0:
 *             return self.z_height + sqrt(R*R - x*x) - R             # <<<<<<<<<<<<<<
 *         else:
 *             return self.z_height - sqrt(R*R - x*x) - R
 */
    __pyx_r = ((__pyx_v_self->z_height + sqrt(((__pyx_v_R * __pyx_v_R) - (__pyx_v_x * __pyx_v_x)))) - __pyx_v_R);
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1486
 *         cdef:
 *             double R = self.radius
 *         if R>=0:             # <<<<<<<<<<<<<<
 *             return self.z_height + sqrt(R*R - x*x) - R
 *         else:
 */
  }

  /* "raypier/core/cfaces.pyx":1489
 *             return self.z_height + sqrt(R*R - x*x) - R
 *         else:
 *             return self.z_height - sqrt(R*R - x*x) - R             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = ((__pyx_v_self->z_height - sqrt(((__pyx_v_R * __pyx_v_R) - (__pyx_v_x * __pyx_v_x)))) - __pyx_v_R);
    goto __pyx_L0;
  }

  /* "raypier/core/cfaces.pyx":1483
 *         return norm_(p)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double R = self.radius
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1403
 * cdef class CylindericalFace(ShapedFace):
 *     cdef:
 *         public double z_height, radius             # <<<<<<<<<<<<<<
 * 
 *     params = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CylindericalFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.CylindericalFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_6radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_6radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_6radius___get__(((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_6radius___get__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CylindericalFace.radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_6radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_6radius_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_6radius_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_v_self->radius = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.CylindericalFace.radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CylindericalFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_16CylindericalFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.CylindericalFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1502
 *         public double z_height, gradient
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.gradient = kwds.get('gradient', 0.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10AxiconFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10AxiconFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":1503
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 *         self.gradient = kwds.get('gradient', 0.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1504
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.gradient = kwds.get('gradient', 0.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_gradient, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->gradient = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1502
 *         public double z_height, gradient
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.gradient = kwds.get('gradient', 0.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AxiconFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1506
 *         self.gradient = kwds.get('gradient', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double a1, a2, root, ox2, oy2, oz2, dx2, dy2, dz2, beta2, denom
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_10AxiconFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_a1;
  double __pyx_v_a2;
  double __pyx_v_root;
  double __pyx_v_ox2;
  double __pyx_v_oy2;
  double __pyx_v_oz2;
  double __pyx_v_dx2;
  double __pyx_v_dy2;
  double __pyx_v_dz2;
  double __pyx_v_beta2;
  double __pyx_v_denom;
  double __pyx_v_beta;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_o;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt2;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1509
 *         cdef:
 *             double a1, a2, root, ox2, oy2, oz2, dx2, dy2, dz2, beta2, denom
 *             double beta = self.gradient             # <<<<<<<<<<<<<<
 *             vector_t o, d, pt1, pt2
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_t_1 = __pyx_v_self->gradient;
  __pyx_v_beta = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1511
 *             double beta = self.gradient
 *             vector_t o, d, pt1, pt2
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         d = subvv_(p2, p1)
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1513
 *             intersect_t out=NO_INTERSECTION
 * 
 *         d = subvv_(p2, p1)             # <<<<<<<<<<<<<<
 *         o = p1
 *         o.z -= self.z_height
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1514
 * 
 *         d = subvv_(p2, p1)
 *         o = p1             # <<<<<<<<<<<<<<
 *         o.z -= self.z_height
 * 
 */
  __pyx_v_o = __pyx_v_p1;

  /* "raypier/core/cfaces.pyx":1515
 *         d = subvv_(p2, p1)
 *         o = p1
 *         o.z -= self.z_height             # <<<<<<<<<<<<<<
 * 
 *         beta2 = beta*beta
 */
  __pyx_v_o.z = (__pyx_v_o.z - __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1517
 *         o.z -= self.z_height
 * 
 *         beta2 = beta*beta             # <<<<<<<<<<<<<<
 *         ox2 = o.x*o.x
 *         oy2 = o.y*o.y
 */
  __pyx_v_beta2 = (__pyx_v_beta * __pyx_v_beta);

  /* "raypier/core/cfaces.pyx":1518
 * 
 *         beta2 = beta*beta
 *         ox2 = o.x*o.x             # <<<<<<<<<<<<<<
 *         oy2 = o.y*o.y
 *         oz2 = o.z*o.z
 */
  __pyx_v_ox2 = (__pyx_v_o.x * __pyx_v_o.x);

  /* "raypier/core/cfaces.pyx":1519
 *         beta2 = beta*beta
 *         ox2 = o.x*o.x
 *         oy2 = o.y*o.y             # <<<<<<<<<<<<<<
 *         oz2 = o.z*o.z
 *         dx2 = d.x*d.x
 */
  __pyx_v_oy2 = (__pyx_v_o.y * __pyx_v_o.y);

  /* "raypier/core/cfaces.pyx":1520
 *         ox2 = o.x*o.x
 *         oy2 = o.y*o.y
 *         oz2 = o.z*o.z             # <<<<<<<<<<<<<<
 *         dx2 = d.x*d.x
 *         dy2 = d.y*d.y
 */
  __pyx_v_oz2 = (__pyx_v_o.z * __pyx_v_o.z);

  /* "raypier/core/cfaces.pyx":1521
 *         oy2 = o.y*o.y
 *         oz2 = o.z*o.z
 *         dx2 = d.x*d.x             # <<<<<<<<<<<<<<
 *         dy2 = d.y*d.y
 *         dz2 = d.z*d.z
 */
  __pyx_v_dx2 = (__pyx_v_d.x * __pyx_v_d.x);

  /* "raypier/core/cfaces.pyx":1522
 *         oz2 = o.z*o.z
 *         dx2 = d.x*d.x
 *         dy2 = d.y*d.y             # <<<<<<<<<<<<<<
 *         dz2 = d.z*d.z
 * 
 */
  __pyx_v_dy2 = (__pyx_v_d.y * __pyx_v_d.y);

  /* "raypier/core/cfaces.pyx":1523
 *         dx2 = d.x*d.x
 *         dy2 = d.y*d.y
 *         dz2 = d.z*d.z             # <<<<<<<<<<<<<<
 * 
 *         root = -beta2*dx2*oy2 + 2*beta2*d.x*d.y*o.x*o.y - beta2*dy2*ox2 + dx2*oz2 - 2*d.x*d.z*o.x*o.z + \
 */
  __pyx_v_dz2 = (__pyx_v_d.z * __pyx_v_d.z);

  /* "raypier/core/cfaces.pyx":1526
 * 
 *         root = -beta2*dx2*oy2 + 2*beta2*d.x*d.y*o.x*o.y - beta2*dy2*ox2 + dx2*oz2 - 2*d.x*d.z*o.x*o.z + \
 *                 dy2*oz2 - 2*d.y*d.z*o.y*o.z + dz2*ox2 + dz2*oy2             # <<<<<<<<<<<<<<
 *         denom = (beta2*dx2 + beta2*dy2 - dz2)
 * 
 */
  __pyx_v_root = (((((((((((-__pyx_v_beta2) * __pyx_v_dx2) * __pyx_v_oy2) + (((((2.0 * __pyx_v_beta2) * __pyx_v_d.x) * __pyx_v_d.y) * __pyx_v_o.x) * __pyx_v_o.y)) - ((__pyx_v_beta2 * __pyx_v_dy2) * __pyx_v_ox2)) + (__pyx_v_dx2 * __pyx_v_oz2)) - ((((2.0 * __pyx_v_d.x) * __pyx_v_d.z) * __pyx_v_o.x) * __pyx_v_o.z)) + (__pyx_v_dy2 * __pyx_v_oz2)) - ((((2.0 * __pyx_v_d.y) * __pyx_v_d.z) * __pyx_v_o.y) * __pyx_v_o.z)) + (__pyx_v_dz2 * __pyx_v_ox2)) + (__pyx_v_dz2 * __pyx_v_oy2));

  /* "raypier/core/cfaces.pyx":1527
 *         root = -beta2*dx2*oy2 + 2*beta2*d.x*d.y*o.x*o.y - beta2*dy2*ox2 + dx2*oz2 - 2*d.x*d.z*o.x*o.z + \
 *                 dy2*oz2 - 2*d.y*d.z*o.y*o.z + dz2*ox2 + dz2*oy2
 *         denom = (beta2*dx2 + beta2*dy2 - dz2)             # <<<<<<<<<<<<<<
 * 
 *         if root < 0: #no intersection
 */
  __pyx_v_denom = (((__pyx_v_beta2 * __pyx_v_dx2) + (__pyx_v_beta2 * __pyx_v_dy2)) - __pyx_v_dz2);

  /* "raypier/core/cfaces.pyx":1529
 *         denom = (beta2*dx2 + beta2*dy2 - dz2)
 * 
 *         if root < 0: #no intersection             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_2 = ((__pyx_v_root < 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1530
 * 
 *         if root < 0: #no intersection
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         root = beta*sqrt(root)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1529
 *         denom = (beta2*dx2 + beta2*dy2 - dz2)
 * 
 *         if root < 0: #no intersection             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1532
 *             return NO_INTERSECTION
 * 
 *         root = beta*sqrt(root)             # <<<<<<<<<<<<<<
 * 
 *         a1 = -beta2*d.x*o.x - beta2*d.y*o.y + d.z*o.z
 */
  __pyx_v_root = (__pyx_v_beta * sqrt(__pyx_v_root));

  /* "raypier/core/cfaces.pyx":1534
 *         root = beta*sqrt(root)
 * 
 *         a1 = -beta2*d.x*o.x - beta2*d.y*o.y + d.z*o.z             # <<<<<<<<<<<<<<
 *         a2 = a1 + root
 *         a1 -= root
 */
  __pyx_v_a1 = (((((-__pyx_v_beta2) * __pyx_v_d.x) * __pyx_v_o.x) - ((__pyx_v_beta2 * __pyx_v_d.y) * __pyx_v_o.y)) + (__pyx_v_d.z * __pyx_v_o.z));

  /* "raypier/core/cfaces.pyx":1535
 * 
 *         a1 = -beta2*d.x*o.x - beta2*d.y*o.y + d.z*o.z
 *         a2 = a1 + root             # <<<<<<<<<<<<<<
 *         a1 -= root
 *         a1 /= denom
 */
  __pyx_v_a2 = (__pyx_v_a1 + __pyx_v_root);

  /* "raypier/core/cfaces.pyx":1536
 *         a1 = -beta2*d.x*o.x - beta2*d.y*o.y + d.z*o.z
 *         a2 = a1 + root
 *         a1 -= root             # <<<<<<<<<<<<<<
 *         a1 /= denom
 *         a2 /= denom
 */
  __pyx_v_a1 = (__pyx_v_a1 - __pyx_v_root);

  /* "raypier/core/cfaces.pyx":1537
 *         a2 = a1 + root
 *         a1 -= root
 *         a1 /= denom             # <<<<<<<<<<<<<<
 *         a2 /= denom
 * 
 */
  __pyx_v_a1 = (__pyx_v_a1 / __pyx_v_denom);

  /* "raypier/core/cfaces.pyx":1538
 *         a1 -= root
 *         a1 /= denom
 *         a2 /= denom             # <<<<<<<<<<<<<<
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))
 */
  __pyx_v_a2 = (__pyx_v_a2 / __pyx_v_denom);

  /* "raypier/core/cfaces.pyx":1540
 *         a2 /= denom
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))             # <<<<<<<<<<<<<<
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":1541
 * 
 *         pt1 = addvv_(p1, multvs_(d, a1))
 *         pt2 = addvv_(p1, multvs_(d, a2))             # <<<<<<<<<<<<<<
 * 
 *         if pt1.z > self.z_height:
 */
  __pyx_v_pt2 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a2));

  /* "raypier/core/cfaces.pyx":1543
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 *         if pt1.z > self.z_height:             # <<<<<<<<<<<<<<
 *             a1 = INF
 *         if pt2.z > self.z_height:
 */
  __pyx_t_2 = ((__pyx_v_pt1.z > __pyx_v_self->z_height) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1544
 * 
 *         if pt1.z > self.z_height:
 *             a1 = INF             # <<<<<<<<<<<<<<
 *         if pt2.z > self.z_height:
 *             a2 = INF
 */
    __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

    /* "raypier/core/cfaces.pyx":1543
 *         pt2 = addvv_(p1, multvs_(d, a2))
 * 
 *         if pt1.z > self.z_height:             # <<<<<<<<<<<<<<
 *             a1 = INF
 *         if pt2.z > self.z_height:
 */
  }

  /* "raypier/core/cfaces.pyx":1545
 *         if pt1.z > self.z_height:
 *             a1 = INF
 *         if pt2.z > self.z_height:             # <<<<<<<<<<<<<<
 *             a2 = INF
 * 
 */
  __pyx_t_2 = ((__pyx_v_pt2.z > __pyx_v_self->z_height) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1546
 *             a1 = INF
 *         if pt2.z > self.z_height:
 *             a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray:
 */
    __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

    /* "raypier/core/cfaces.pyx":1545
 *         if pt1.z > self.z_height:
 *             a1 = INF
 *         if pt2.z > self.z_height:             # <<<<<<<<<<<<<<
 *             a2 = INF
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1548
 *             a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1549
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    __pyx_t_2 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1550
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF
 */
      __pyx_v_a1 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1549
 * 
 *         if is_base_ray:
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):             # <<<<<<<<<<<<<<
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 */
    }

    /* "raypier/core/cfaces.pyx":1551
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    __pyx_t_2 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt2.x, __pyx_v_pt2.y) != 0)) != 0);
    if (__pyx_t_2) {

      /* "raypier/core/cfaces.pyx":1552
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):
 *                 a2 = INF             # <<<<<<<<<<<<<<
 * 
 *         if a2 < a1:
 */
      __pyx_v_a2 = __pyx_v_7raypier_4core_6cfaces_INF;

      /* "raypier/core/cfaces.pyx":1551
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 *             if not (<Shape>self.shape).point_inside_c( pt2.x, pt2.y ):             # <<<<<<<<<<<<<<
 *                 a2 = INF
 * 
 */
    }

    /* "raypier/core/cfaces.pyx":1548
 *             a2 = INF
 * 
 *         if is_base_ray:             # <<<<<<<<<<<<<<
 *             if not (<Shape>self.shape).point_inside_c( pt1.x, pt1.y ):
 *                 a1 = INF
 */
  }

  /* "raypier/core/cfaces.pyx":1554
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  __pyx_t_2 = ((__pyx_v_a2 < __pyx_v_a1) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1555
 * 
 *         if a2 < a1:
 *             a1 = a2             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_v_a1 = __pyx_v_a2;

    /* "raypier/core/cfaces.pyx":1554
 *                 a2 = INF
 * 
 *         if a2 < a1:             # <<<<<<<<<<<<<<
 *             a1 = a2
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1557
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)
 */
  __pyx_t_3 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1558
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         out.dist = a1 * sep_(p1, p2)
 *         return out
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1557
 *             a1 = a2
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)
 */
  }

  /* "raypier/core/cfaces.pyx":1559
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":1560
 *             return NO_INTERSECTION
 *         out.dist = a1 * sep_(p1, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1506
 *         self.gradient = kwds.get('gradient', 0.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double a1, a2, root, ox2, oy2, oz2, dx2, dy2, dz2, beta2, denom
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1562
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_10AxiconFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  double __pyx_v_r;
  double __pyx_v_beta;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1569
 *             double r, beta
 * 
 *         beta = self.gradient             # <<<<<<<<<<<<<<
 *         r = sqrt(p.x*p.x + p.y*p.y)
 *         p.z = 1.0
 */
  __pyx_t_1 = __pyx_v_self->gradient;
  __pyx_v_beta = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1570
 * 
 *         beta = self.gradient
 *         r = sqrt(p.x*p.x + p.y*p.y)             # <<<<<<<<<<<<<<
 *         p.z = 1.0
 *         p.x = beta * p.x/r
 */
  __pyx_v_r = sqrt(((__pyx_v_p.x * __pyx_v_p.x) + (__pyx_v_p.y * __pyx_v_p.y)));

  /* "raypier/core/cfaces.pyx":1571
 *         beta = self.gradient
 *         r = sqrt(p.x*p.x + p.y*p.y)
 *         p.z = 1.0             # <<<<<<<<<<<<<<
 *         p.x = beta * p.x/r
 *         p.y = beta * p.y/r
 */
  __pyx_v_p.z = 1.0;

  /* "raypier/core/cfaces.pyx":1572
 *         r = sqrt(p.x*p.x + p.y*p.y)
 *         p.z = 1.0
 *         p.x = beta * p.x/r             # <<<<<<<<<<<<<<
 *         p.y = beta * p.y/r
 *         return p
 */
  __pyx_v_p.x = ((__pyx_v_beta * __pyx_v_p.x) / __pyx_v_r);

  /* "raypier/core/cfaces.pyx":1573
 *         p.z = 1.0
 *         p.x = beta * p.x/r
 *         p.y = beta * p.y/r             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
  __pyx_v_p.y = ((__pyx_v_beta * __pyx_v_p.y) / __pyx_v_r);

  /* "raypier/core/cfaces.pyx":1574
 *         p.x = beta * p.x/r
 *         p.y = beta * p.y/r
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1562
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1576
 *         return p
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return self.z_height - (self.gradient * sqrt(x*x + y*y))
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_10AxiconFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":1577
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 *         return self.z_height - (self.gradient * sqrt(x*x + y*y))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_self->z_height - (__pyx_v_self->gradient * sqrt(((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y)))));
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1576
 *         return p
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         return self.z_height - (self.gradient * sqrt(x*x + y*y))
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1500
 *     """
 *     cdef:
 *         public double z_height, gradient             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AxiconFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1500, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AxiconFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8gradient_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8gradient_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8gradient___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8gradient___get__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->gradient); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AxiconFace.gradient.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8gradient_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8gradient_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8gradient_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_8gradient_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1500, __pyx_L1_error)
  __pyx_v_self->gradient = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AxiconFace.gradient.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AxiconFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_10AxiconFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_10AxiconFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AxiconFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1580
 * 
 * 
 * cdef double intersect_conic(vector_t a, vector_t d, double curvature, double conic_const):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double beta = 1 + conic_const
 */

static double __pyx_f_7raypier_4core_6cfaces_intersect_conic(struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d, double __pyx_v_curvature, double __pyx_v_conic_const) {
  double __pyx_v_beta;
  double __pyx_v_R;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_C;
  double __pyx_v_D;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("intersect_conic", 0);

  /* "raypier/core/cfaces.pyx":1582
 * cdef double intersect_conic(vector_t a, vector_t d, double curvature, double conic_const):
 *     cdef:
 *         double beta = 1 + conic_const             # <<<<<<<<<<<<<<
 *         double R = -curvature
 *         double A,B,C,D
 */
  __pyx_v_beta = (1.0 + __pyx_v_conic_const);

  /* "raypier/core/cfaces.pyx":1583
 *     cdef:
 *         double beta = 1 + conic_const
 *         double R = -curvature             # <<<<<<<<<<<<<<
 *         double A,B,C,D
 *         #double pt1, pt2
 */
  __pyx_v_R = (-__pyx_v_curvature);

  /* "raypier/core/cfaces.pyx":1590
 *     ###Obtained by sympy evaluation of the equations
 *     ### Arranged into quadratic form i.e. A*(alpha**2) + B*alpha + C = 0
 *     A = beta**2*d.z**2 + beta*d.x**2 + beta*d.y**2             # <<<<<<<<<<<<<<
 *     B = -2*R*beta*d.z + 2*a.x*beta*d.x + 2*a.y*beta*d.y + 2*a.z*beta**2*d.z
 *     C = -2*R*a.z*beta + a.x**2*beta + a.y**2*beta + a.z**2*beta**2
 */
  __pyx_v_A = (((pow(__pyx_v_beta, 2.0) * pow(__pyx_v_d.z, 2.0)) + (__pyx_v_beta * pow(__pyx_v_d.x, 2.0))) + (__pyx_v_beta * pow(__pyx_v_d.y, 2.0)));

  /* "raypier/core/cfaces.pyx":1591
 *     ### Arranged into quadratic form i.e. A*(alpha**2) + B*alpha + C = 0
 *     A = beta**2*d.z**2 + beta*d.x**2 + beta*d.y**2
 *     B = -2*R*beta*d.z + 2*a.x*beta*d.x + 2*a.y*beta*d.y + 2*a.z*beta**2*d.z             # <<<<<<<<<<<<<<
 *     C = -2*R*a.z*beta + a.x**2*beta + a.y**2*beta + a.z**2*beta**2
 * 
 */
  __pyx_v_B = ((((((-2.0 * __pyx_v_R) * __pyx_v_beta) * __pyx_v_d.z) + (((2.0 * __pyx_v_a.x) * __pyx_v_beta) * __pyx_v_d.x)) + (((2.0 * __pyx_v_a.y) * __pyx_v_beta) * __pyx_v_d.y)) + (((2.0 * __pyx_v_a.z) * pow(__pyx_v_beta, 2.0)) * __pyx_v_d.z));

  /* "raypier/core/cfaces.pyx":1592
 *     A = beta**2*d.z**2 + beta*d.x**2 + beta*d.y**2
 *     B = -2*R*beta*d.z + 2*a.x*beta*d.x + 2*a.y*beta*d.y + 2*a.z*beta**2*d.z
 *     C = -2*R*a.z*beta + a.x**2*beta + a.y**2*beta + a.z**2*beta**2             # <<<<<<<<<<<<<<
 * 
 *     ##Get roots
 */
  __pyx_v_C = ((((((-2.0 * __pyx_v_R) * __pyx_v_a.z) * __pyx_v_beta) + (pow(__pyx_v_a.x, 2.0) * __pyx_v_beta)) + (pow(__pyx_v_a.y, 2.0) * __pyx_v_beta)) + (pow(__pyx_v_a.z, 2.0) * pow(__pyx_v_beta, 2.0)));

  /* "raypier/core/cfaces.pyx":1595
 * 
 *     ##Get roots
 *     D = B*B - 4*A*C             # <<<<<<<<<<<<<<
 *     if D < 0: #no solution
 *         return -1
 */
  __pyx_v_D = ((__pyx_v_B * __pyx_v_B) - ((4.0 * __pyx_v_A) * __pyx_v_C));

  /* "raypier/core/cfaces.pyx":1596
 *     ##Get roots
 *     D = B*B - 4*A*C
 *     if D < 0: #no solution             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
  __pyx_t_1 = ((__pyx_v_D < 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1597
 *     D = B*B - 4*A*C
 *     if D < 0: #no solution
 *         return -1             # <<<<<<<<<<<<<<
 * 
 *     D = sqrt(D)
 */
    __pyx_r = -1.0;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1596
 *     ##Get roots
 *     D = B*B - 4*A*C
 *     if D < 0: #no solution             # <<<<<<<<<<<<<<
 *         return -1
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1599
 *         return -1
 * 
 *     D = sqrt(D)             # <<<<<<<<<<<<<<
 * 
 * ### This turns out to not be necessary
 */
  __pyx_v_D = sqrt(__pyx_v_D);

  /* "raypier/core/cfaces.pyx":1627
 * 
 *     #print("R.beta.dz:", R*beta*d.z)
 *     if R*beta*d.z <= 0:             # <<<<<<<<<<<<<<
 *         #1st root
 *         return (-B+D)/(2*A)
 */
  __pyx_t_1 = ((((__pyx_v_R * __pyx_v_beta) * __pyx_v_d.z) <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1629
 *     if R*beta*d.z <= 0:
 *         #1st root
 *         return (-B+D)/(2*A)             # <<<<<<<<<<<<<<
 *     else:
 *         #2nd root
 */
    __pyx_r = (((-__pyx_v_B) + __pyx_v_D) / (2.0 * __pyx_v_A));
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1627
 * 
 *     #print("R.beta.dz:", R*beta*d.z)
 *     if R*beta*d.z <= 0:             # <<<<<<<<<<<<<<
 *         #1st root
 *         return (-B+D)/(2*A)
 */
  }

  /* "raypier/core/cfaces.pyx":1632
 *     else:
 *         #2nd root
 *         return (-B-D)/(2*A)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_r = (((-__pyx_v_B) - __pyx_v_D) / (2.0 * __pyx_v_A));
    goto __pyx_L0;
  }

  /* "raypier/core/cfaces.pyx":1580
 * 
 * 
 * cdef double intersect_conic(vector_t a, vector_t d, double curvature, double conic_const):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double beta = 1 + conic_const
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1647
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":1648
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 10.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1649
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)             # <<<<<<<<<<<<<<
 *         self.curvature = kwds.get('curvature', 10.0)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_conic_const, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->conic_const = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1650
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 10.0)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_curvature, __pyx_float_10_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1650, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->curvature = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1647
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1652
 *         self.curvature = kwds.get('curvature', 10.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_a1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1666
 *             double a1
 *             vector_t d, a, pt1
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1668
 *             intersect_t out=NO_INTERSECTION
 * 
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.             # <<<<<<<<<<<<<<
 *         a = p1
 *         a.z -= self.z_height
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1669
 * 
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.
 *         a = p1             # <<<<<<<<<<<<<<
 *         a.z -= self.z_height
 * 
 */
  __pyx_v_a = __pyx_v_p1;

  /* "raypier/core/cfaces.pyx":1670
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.
 *         a = p1
 *         a.z -= self.z_height             # <<<<<<<<<<<<<<
 * 
 *         a1 = intersect_conic(a, d, self.curvature, self.conic_const)
 */
  __pyx_v_a.z = (__pyx_v_a.z - __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1672
 *         a.z -= self.z_height
 * 
 *         a1 = intersect_conic(a, d, self.curvature, self.conic_const)             # <<<<<<<<<<<<<<
 * 
 *         pt1 = addvv_(a, multvs_(d, a1))
 */
  __pyx_v_a1 = __pyx_f_7raypier_4core_6cfaces_intersect_conic(__pyx_v_a, __pyx_v_d, __pyx_v_self->curvature, __pyx_v_self->conic_const);

  /* "raypier/core/cfaces.pyx":1674
 *         a1 = intersect_conic(a, d, self.curvature, self.conic_const)
 * 
 *         pt1 = addvv_(a, multvs_(d, a1))             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_a, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":1676
 *         pt1 = addvv_(a, multvs_(d, a1))
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_2 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1677
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1676
 *         pt1 = addvv_(a, multvs_(d, a1))
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1679
 *             return NO_INTERSECTION
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_2 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "raypier/core/cfaces.pyx":1680
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         out.dist = a1 * sep_(p1, p2)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1679
 *             return NO_INTERSECTION
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1682
 *             return NO_INTERSECTION
 * 
 *         out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":1683
 * 
 *         out.dist = a1 * sep_(p1, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1652
 *         self.curvature = kwds.get('curvature', 10.0)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1685
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  double __pyx_v_R;
  double __pyx_v_beta;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_g;
  int __pyx_v_sign;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1690
 *         """
 *         cdef:
 *             double R = -self.curvature             # <<<<<<<<<<<<<<
 *             double beta = 1 + self.conic_const
 *             vector_t g #output gradient vector
 */
  __pyx_v_R = (-__pyx_v_self->curvature);

  /* "raypier/core/cfaces.pyx":1691
 *         cdef:
 *             double R = -self.curvature
 *             double beta = 1 + self.conic_const             # <<<<<<<<<<<<<<
 *             vector_t g #output gradient vector
 *             int sign = -1 if self.invert_normals else 1
 */
  __pyx_v_beta = (1.0 + __pyx_v_self->conic_const);

  /* "raypier/core/cfaces.pyx":1693
 *             double beta = 1 + self.conic_const
 *             vector_t g #output gradient vector
 *             int sign = -1 if self.invert_normals else 1             # <<<<<<<<<<<<<<
 * 
 *         p.z -= self.z_height
 */
  if ((__pyx_v_self->__pyx_base.invert_normals != 0)) {
    __pyx_t_1 = -1;
  } else {
    __pyx_t_1 = 1;
  }
  __pyx_v_sign = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1695
 *             int sign = -1 if self.invert_normals else 1
 * 
 *         p.z -= self.z_height             # <<<<<<<<<<<<<<
 * 
 *         g.z = 2*beta*(R-beta*p.z)
 */
  __pyx_v_p.z = (__pyx_v_p.z - __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1697
 *         p.z -= self.z_height
 * 
 *         g.z = 2*beta*(R-beta*p.z)             # <<<<<<<<<<<<<<
 *         g.x = - p.x * 2 * beta
 *         g.y = - p.y * 2 * beta
 */
  __pyx_v_g.z = ((2.0 * __pyx_v_beta) * (__pyx_v_R - (__pyx_v_beta * __pyx_v_p.z)));

  /* "raypier/core/cfaces.pyx":1698
 * 
 *         g.z = 2*beta*(R-beta*p.z)
 *         g.x = - p.x * 2 * beta             # <<<<<<<<<<<<<<
 *         g.y = - p.y * 2 * beta
 * 
 */
  __pyx_v_g.x = (((-__pyx_v_p.x) * 2.0) * __pyx_v_beta);

  /* "raypier/core/cfaces.pyx":1699
 *         g.z = 2*beta*(R-beta*p.z)
 *         g.x = - p.x * 2 * beta
 *         g.y = - p.y * 2 * beta             # <<<<<<<<<<<<<<
 * 
 *         if (R*beta) < 0:
 */
  __pyx_v_g.y = (((-__pyx_v_p.y) * 2.0) * __pyx_v_beta);

  /* "raypier/core/cfaces.pyx":1701
 *         g.y = - p.y * 2 * beta
 * 
 *         if (R*beta) < 0:             # <<<<<<<<<<<<<<
 *             sign *= -1
 * 
 */
  __pyx_t_2 = (((__pyx_v_R * __pyx_v_beta) < 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1702
 * 
 *         if (R*beta) < 0:
 *             sign *= -1             # <<<<<<<<<<<<<<
 * 
 *         g.z *= sign
 */
    __pyx_v_sign = (__pyx_v_sign * -1L);

    /* "raypier/core/cfaces.pyx":1701
 *         g.y = - p.y * 2 * beta
 * 
 *         if (R*beta) < 0:             # <<<<<<<<<<<<<<
 *             sign *= -1
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1704
 *             sign *= -1
 * 
 *         g.z *= sign             # <<<<<<<<<<<<<<
 *         g.y *= sign
 *         g.x *= sign
 */
  __pyx_v_g.z = (__pyx_v_g.z * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":1705
 * 
 *         g.z *= sign
 *         g.y *= sign             # <<<<<<<<<<<<<<
 *         g.x *= sign
 * 
 */
  __pyx_v_g.y = (__pyx_v_g.y * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":1706
 *         g.z *= sign
 *         g.y *= sign
 *         g.x *= sign             # <<<<<<<<<<<<<<
 * 
 *         return norm_(g)
 */
  __pyx_v_g.x = (__pyx_v_g.x * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":1708
 *         g.x *= sign
 * 
 *         return norm_(g)             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_g);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1685
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1710
 *         return norm_(g)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double r2 = (x*x) + (y*y)
 */

static double __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  double __pyx_v_r2;
  double __pyx_v_R;
  double __pyx_v_R2;
  double __pyx_r;
  double __pyx_t_1;
  int __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1712
 *     cdef double eval_z_c(self, double x, double y) nogil:
 *         cdef:
 *             double r2 = (x*x) + (y*y)             # <<<<<<<<<<<<<<
 *             double R = self.curvature
 *             double R2 = R*R
 */
  __pyx_v_r2 = ((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y));

  /* "raypier/core/cfaces.pyx":1713
 *         cdef:
 *             double r2 = (x*x) + (y*y)
 *             double R = self.curvature             # <<<<<<<<<<<<<<
 *             double R2 = R*R
 * 
 */
  __pyx_t_1 = __pyx_v_self->curvature;
  __pyx_v_R = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1714
 *             double r2 = (x*x) + (y*y)
 *             double R = self.curvature
 *             double R2 = R*R             # <<<<<<<<<<<<<<
 * 
 *         if R>=0:
 */
  __pyx_v_R2 = (__pyx_v_R * __pyx_v_R);

  /* "raypier/core/cfaces.pyx":1716
 *             double R2 = R*R
 * 
 *         if R>=0:             # <<<<<<<<<<<<<<
 *             return self.z_height  - (r2/(R + sqrt(R2 - (1+self.conic_const)*r2)))
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_R >= 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1717
 * 
 *         if R>=0:
 *             return self.z_height  - (r2/(R + sqrt(R2 - (1+self.conic_const)*r2)))             # <<<<<<<<<<<<<<
 *         else:
 *             return self.z_height  - (r2/(R - sqrt(R2 - (1+self.conic_const)*r2)))
 */
    __pyx_r = (__pyx_v_self->z_height - (__pyx_v_r2 / (__pyx_v_R + sqrt((__pyx_v_R2 - ((1.0 + __pyx_v_self->conic_const) * __pyx_v_r2))))));
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1716
 *             double R2 = R*R
 * 
 *         if R>=0:             # <<<<<<<<<<<<<<
 *             return self.z_height  - (r2/(R + sqrt(R2 - (1+self.conic_const)*r2)))
 *         else:
 */
  }

  /* "raypier/core/cfaces.pyx":1719
 *             return self.z_height  - (r2/(R + sqrt(R2 - (1+self.conic_const)*r2)))
 *         else:
 *             return self.z_height  - (r2/(R - sqrt(R2 - (1+self.conic_const)*r2)))             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 */
  /*else*/ {
    __pyx_r = (__pyx_v_self->z_height - (__pyx_v_r2 / (__pyx_v_R - sqrt((__pyx_v_R2 - ((1.0 + __pyx_v_self->conic_const) * __pyx_v_r2))))));
    goto __pyx_L0;
  }

  /* "raypier/core/cfaces.pyx":1710
 *         return norm_(g)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double r2 = (x*x) + (y*y)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1721
 *             return self.z_height  - (r2/(R - sqrt(R2 - (1+self.conic_const)*r2)))
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":1722
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 *         return z - self.eval_z_c(x,y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_z - ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.eval_z_c(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_x, __pyx_v_y));
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1721
 *             return self.z_height  - (r2/(R - sqrt(R2 - (1+self.conic_const)*r2)))
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1643
 *     """
 *     cdef:
 *         public double curvature, z_height, conic_const             # <<<<<<<<<<<<<<
 * 
 *     params = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->curvature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.curvature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1643, __pyx_L1_error)
  __pyx_v_self->curvature = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.curvature.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1643, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const___get__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->conic_const); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.conic_const.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1643, __pyx_L1_error)
  __pyx_v_self->conic_const = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.conic_const.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_19ConicRevolutionFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ConicRevolutionFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1739
 * 
 * 
 * cdef double eval_aspheric_impf(aspheric_t A, double alpha):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double out
 */

static double __pyx_f_7raypier_4core_6cfaces_eval_aspheric_impf(struct __pyx_t_7raypier_4core_6cfaces_aspheric_t __pyx_v_A, double __pyx_v_alpha) {
  double __pyx_v_out;
  double __pyx_v_r2;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_aspheric_impf", 0);

  /* "raypier/core/cfaces.pyx":1742
 *     cdef:
 *         double out
 *         double r2 = ((A.a.x + alpha*A.d.x)**2 + (A.a.y + alpha*A.d.y)**2)             # <<<<<<<<<<<<<<
 * 
 *     out = r2
 */
  __pyx_v_r2 = (pow((__pyx_v_A.a.x + (__pyx_v_alpha * __pyx_v_A.d.x)), 2.0) + pow((__pyx_v_A.a.y + (__pyx_v_alpha * __pyx_v_A.d.y)), 2.0));

  /* "raypier/core/cfaces.pyx":1744
 *         double r2 = ((A.a.x + alpha*A.d.x)**2 + (A.a.y + alpha*A.d.y)**2)
 * 
 *     out = r2             # <<<<<<<<<<<<<<
 *     out /= A.R*(1 + sqrt(1 - A.beta*r2/(A.R**2)) )
 *     out -= A.a.z + alpha*A.d.z
 */
  __pyx_v_out = __pyx_v_r2;

  /* "raypier/core/cfaces.pyx":1745
 * 
 *     out = r2
 *     out /= A.R*(1 + sqrt(1 - A.beta*r2/(A.R**2)) )             # <<<<<<<<<<<<<<
 *     out -= A.a.z + alpha*A.d.z
 *     out += A.A4*(r2**2) + A.A6*(r2**3) + A.A8*(r2**4) + A.A10*(r2**5) + A.A12*(r2**6) + A.A14*(r2**7) + A.A16*(r2**8)
 */
  __pyx_v_out = (__pyx_v_out / (__pyx_v_A.R * (1.0 + sqrt((1.0 - ((__pyx_v_A.beta * __pyx_v_r2) / pow(__pyx_v_A.R, 2.0)))))));

  /* "raypier/core/cfaces.pyx":1746
 *     out = r2
 *     out /= A.R*(1 + sqrt(1 - A.beta*r2/(A.R**2)) )
 *     out -= A.a.z + alpha*A.d.z             # <<<<<<<<<<<<<<
 *     out += A.A4*(r2**2) + A.A6*(r2**3) + A.A8*(r2**4) + A.A10*(r2**5) + A.A12*(r2**6) + A.A14*(r2**7) + A.A16*(r2**8)
 *     return out
 */
  __pyx_v_out = (__pyx_v_out - (__pyx_v_A.a.z + (__pyx_v_alpha * __pyx_v_A.d.z)));

  /* "raypier/core/cfaces.pyx":1747
 *     out /= A.R*(1 + sqrt(1 - A.beta*r2/(A.R**2)) )
 *     out -= A.a.z + alpha*A.d.z
 *     out += A.A4*(r2**2) + A.A6*(r2**3) + A.A8*(r2**4) + A.A10*(r2**5) + A.A12*(r2**6) + A.A14*(r2**7) + A.A16*(r2**8)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out = (__pyx_v_out + (((((((__pyx_v_A.A4 * pow(__pyx_v_r2, 2.0)) + (__pyx_v_A.A6 * pow(__pyx_v_r2, 3.0))) + (__pyx_v_A.A8 * pow(__pyx_v_r2, 4.0))) + (__pyx_v_A.A10 * pow(__pyx_v_r2, 5.0))) + (__pyx_v_A.A12 * pow(__pyx_v_r2, 6.0))) + (__pyx_v_A.A14 * pow(__pyx_v_r2, 7.0))) + (__pyx_v_A.A16 * pow(__pyx_v_r2, 8.0))));

  /* "raypier/core/cfaces.pyx":1748
 *     out -= A.a.z + alpha*A.d.z
 *     out += A.A4*(r2**2) + A.A6*(r2**3) + A.A8*(r2**4) + A.A10*(r2**5) + A.A12*(r2**6) + A.A14*(r2**7) + A.A16*(r2**8)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1739
 * 
 * 
 * cdef double eval_aspheric_impf(aspheric_t A, double alpha):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double out
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1751
 * 
 * 
 * cdef double eval_aspheric_grad(aspheric_t A, double alpha):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double out
 */

static double __pyx_f_7raypier_4core_6cfaces_eval_aspheric_grad(struct __pyx_t_7raypier_4core_6cfaces_aspheric_t __pyx_v_A, double __pyx_v_alpha) {
  double __pyx_v_out;
  double __pyx_v_r2;
  double __pyx_v_dx;
  double __pyx_v_dy;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("eval_aspheric_grad", 0);

  /* "raypier/core/cfaces.pyx":1754
 *     cdef:
 *         double out
 *         double r2 = ((A.a.x + alpha*A.d.x)**2 + (A.a.y + alpha*A.d.y)**2)             # <<<<<<<<<<<<<<
 *         double dx = A.d.x*(A.a.x + alpha*A.d.x)
 *         double dy = A.d.y*(A.a.y + alpha*A.d.y)
 */
  __pyx_v_r2 = (pow((__pyx_v_A.a.x + (__pyx_v_alpha * __pyx_v_A.d.x)), 2.0) + pow((__pyx_v_A.a.y + (__pyx_v_alpha * __pyx_v_A.d.y)), 2.0));

  /* "raypier/core/cfaces.pyx":1755
 *         double out
 *         double r2 = ((A.a.x + alpha*A.d.x)**2 + (A.a.y + alpha*A.d.y)**2)
 *         double dx = A.d.x*(A.a.x + alpha*A.d.x)             # <<<<<<<<<<<<<<
 *         double dy = A.d.y*(A.a.y + alpha*A.d.y)
 * 
 */
  __pyx_v_dx = (__pyx_v_A.d.x * (__pyx_v_A.a.x + (__pyx_v_alpha * __pyx_v_A.d.x)));

  /* "raypier/core/cfaces.pyx":1756
 *         double r2 = ((A.a.x + alpha*A.d.x)**2 + (A.a.y + alpha*A.d.y)**2)
 *         double dx = A.d.x*(A.a.x + alpha*A.d.x)
 *         double dy = A.d.y*(A.a.y + alpha*A.d.y)             # <<<<<<<<<<<<<<
 * 
 *     out = A.A10*(10*dx + 10*dy) *(r2**4)
 */
  __pyx_v_dy = (__pyx_v_A.d.y * (__pyx_v_A.a.y + (__pyx_v_alpha * __pyx_v_A.d.y)));

  /* "raypier/core/cfaces.pyx":1758
 *         double dy = A.d.y*(A.a.y + alpha*A.d.y)
 * 
 *     out = A.A10*(10*dx + 10*dy) *(r2**4)             # <<<<<<<<<<<<<<
 *     out += A.A12*(12*dx + 12*dy) *(r2**5)
 *     out += A.A14*(14*dx + 14*dy) *(r2**6)
 */
  __pyx_v_out = ((__pyx_v_A.A10 * ((10.0 * __pyx_v_dx) + (10.0 * __pyx_v_dy))) * pow(__pyx_v_r2, 4.0));

  /* "raypier/core/cfaces.pyx":1759
 * 
 *     out = A.A10*(10*dx + 10*dy) *(r2**4)
 *     out += A.A12*(12*dx + 12*dy) *(r2**5)             # <<<<<<<<<<<<<<
 *     out += A.A14*(14*dx + 14*dy) *(r2**6)
 *     out += A.A16*(16*dx + 16*dy) *(r2**7)
 */
  __pyx_v_out = (__pyx_v_out + ((__pyx_v_A.A12 * ((12.0 * __pyx_v_dx) + (12.0 * __pyx_v_dy))) * pow(__pyx_v_r2, 5.0)));

  /* "raypier/core/cfaces.pyx":1760
 *     out = A.A10*(10*dx + 10*dy) *(r2**4)
 *     out += A.A12*(12*dx + 12*dy) *(r2**5)
 *     out += A.A14*(14*dx + 14*dy) *(r2**6)             # <<<<<<<<<<<<<<
 *     out += A.A16*(16*dx + 16*dy) *(r2**7)
 *     out +=  A.A4*(4*dx + 4*dy)*(r2)
 */
  __pyx_v_out = (__pyx_v_out + ((__pyx_v_A.A14 * ((14.0 * __pyx_v_dx) + (14.0 * __pyx_v_dy))) * pow(__pyx_v_r2, 6.0)));

  /* "raypier/core/cfaces.pyx":1761
 *     out += A.A12*(12*dx + 12*dy) *(r2**5)
 *     out += A.A14*(14*dx + 14*dy) *(r2**6)
 *     out += A.A16*(16*dx + 16*dy) *(r2**7)             # <<<<<<<<<<<<<<
 *     out +=  A.A4*(4*dx + 4*dy)*(r2)
 *     out +=  A.A6*(6*dx + 6*dy)*(r2**2)
 */
  __pyx_v_out = (__pyx_v_out + ((__pyx_v_A.A16 * ((16.0 * __pyx_v_dx) + (16.0 * __pyx_v_dy))) * pow(__pyx_v_r2, 7.0)));

  /* "raypier/core/cfaces.pyx":1762
 *     out += A.A14*(14*dx + 14*dy) *(r2**6)
 *     out += A.A16*(16*dx + 16*dy) *(r2**7)
 *     out +=  A.A4*(4*dx + 4*dy)*(r2)             # <<<<<<<<<<<<<<
 *     out +=  A.A6*(6*dx + 6*dy)*(r2**2)
 *     out +=  A.A8*(8*dx + 8*dy)*(r2**3) - A.d.z
 */
  __pyx_v_out = (__pyx_v_out + ((__pyx_v_A.A4 * ((4.0 * __pyx_v_dx) + (4.0 * __pyx_v_dy))) * __pyx_v_r2));

  /* "raypier/core/cfaces.pyx":1763
 *     out += A.A16*(16*dx + 16*dy) *(r2**7)
 *     out +=  A.A4*(4*dx + 4*dy)*(r2)
 *     out +=  A.A6*(6*dx + 6*dy)*(r2**2)             # <<<<<<<<<<<<<<
 *     out +=  A.A8*(8*dx + 8*dy)*(r2**3) - A.d.z
 *     out += (2*dx + 2*dy)/(A.R*(sqrt(1 - A.beta*(r2)/A.R**2) + 1))
 */
  __pyx_v_out = (__pyx_v_out + ((__pyx_v_A.A6 * ((6.0 * __pyx_v_dx) + (6.0 * __pyx_v_dy))) * pow(__pyx_v_r2, 2.0)));

  /* "raypier/core/cfaces.pyx":1764
 *     out +=  A.A4*(4*dx + 4*dy)*(r2)
 *     out +=  A.A6*(6*dx + 6*dy)*(r2**2)
 *     out +=  A.A8*(8*dx + 8*dy)*(r2**3) - A.d.z             # <<<<<<<<<<<<<<
 *     out += (2*dx + 2*dy)/(A.R*(sqrt(1 - A.beta*(r2)/A.R**2) + 1))
 *     out += A.beta*(2*dx + 2*dy)*(r2)/(2*(A.R**3)*sqrt(1 - A.beta*r2/(A.R**2))*(sqrt(1 - A.beta*r2/(A.R**2)) + 1)**2)
 */
  __pyx_v_out = (__pyx_v_out + (((__pyx_v_A.A8 * ((8.0 * __pyx_v_dx) + (8.0 * __pyx_v_dy))) * pow(__pyx_v_r2, 3.0)) - __pyx_v_A.d.z));

  /* "raypier/core/cfaces.pyx":1765
 *     out +=  A.A6*(6*dx + 6*dy)*(r2**2)
 *     out +=  A.A8*(8*dx + 8*dy)*(r2**3) - A.d.z
 *     out += (2*dx + 2*dy)/(A.R*(sqrt(1 - A.beta*(r2)/A.R**2) + 1))             # <<<<<<<<<<<<<<
 *     out += A.beta*(2*dx + 2*dy)*(r2)/(2*(A.R**3)*sqrt(1 - A.beta*r2/(A.R**2))*(sqrt(1 - A.beta*r2/(A.R**2)) + 1)**2)
 *     return out
 */
  __pyx_v_out = (__pyx_v_out + (((2.0 * __pyx_v_dx) + (2.0 * __pyx_v_dy)) / (__pyx_v_A.R * (sqrt((1.0 - ((__pyx_v_A.beta * __pyx_v_r2) / pow(__pyx_v_A.R, 2.0)))) + 1.0))));

  /* "raypier/core/cfaces.pyx":1766
 *     out +=  A.A8*(8*dx + 8*dy)*(r2**3) - A.d.z
 *     out += (2*dx + 2*dy)/(A.R*(sqrt(1 - A.beta*(r2)/A.R**2) + 1))
 *     out += A.beta*(2*dx + 2*dy)*(r2)/(2*(A.R**3)*sqrt(1 - A.beta*r2/(A.R**2))*(sqrt(1 - A.beta*r2/(A.R**2)) + 1)**2)             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  __pyx_v_out = (__pyx_v_out + (((__pyx_v_A.beta * ((2.0 * __pyx_v_dx) + (2.0 * __pyx_v_dy))) * __pyx_v_r2) / (((2.0 * pow(__pyx_v_A.R, 3.0)) * sqrt((1.0 - ((__pyx_v_A.beta * __pyx_v_r2) / pow(__pyx_v_A.R, 2.0))))) * pow((sqrt((1.0 - ((__pyx_v_A.beta * __pyx_v_r2) / pow(__pyx_v_A.R, 2.0)))) + 1.0), 2.0))));

  /* "raypier/core/cfaces.pyx":1767
 *     out += (2*dx + 2*dy)/(A.R*(sqrt(1 - A.beta*(r2)/A.R**2) + 1))
 *     out += A.beta*(2*dx + 2*dy)*(r2)/(2*(A.R**3)*sqrt(1 - A.beta*r2/(A.R**2))*(sqrt(1 - A.beta*r2/(A.R**2)) + 1)**2)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1751
 * 
 * 
 * cdef double eval_aspheric_grad(aspheric_t A, double alpha):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double out
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1781
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":1782
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 25.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->z_height = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1783
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)             # <<<<<<<<<<<<<<
 *         self.curvature = kwds.get('curvature', 25.0)
 *         self.A4 = kwds.get('A4',0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_conic_const, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1783, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->conic_const = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1784
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 25.0)             # <<<<<<<<<<<<<<
 *         self.A4 = kwds.get('A4',0.0)
 *         self.A6 = kwds.get('A6',0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_curvature, __pyx_float_25_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->curvature = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1785
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 25.0)
 *         self.A4 = kwds.get('A4',0.0)             # <<<<<<<<<<<<<<
 *         self.A6 = kwds.get('A6',0.0)
 *         self.A8 = kwds.get('A8',0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_A4, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1785, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->A4 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1786
 *         self.curvature = kwds.get('curvature', 25.0)
 *         self.A4 = kwds.get('A4',0.0)
 *         self.A6 = kwds.get('A6',0.0)             # <<<<<<<<<<<<<<
 *         self.A8 = kwds.get('A8',0.0)
 *         self.A10 = kwds.get('A10',0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_A6, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->A6 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1787
 *         self.A4 = kwds.get('A4',0.0)
 *         self.A6 = kwds.get('A6',0.0)
 *         self.A8 = kwds.get('A8',0.0)             # <<<<<<<<<<<<<<
 *         self.A10 = kwds.get('A10',0.0)
 *         self.A12 = kwds.get('A12',0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_A8, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->A8 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1788
 *         self.A6 = kwds.get('A6',0.0)
 *         self.A8 = kwds.get('A8',0.0)
 *         self.A10 = kwds.get('A10',0.0)             # <<<<<<<<<<<<<<
 *         self.A12 = kwds.get('A12',0.0)
 *         self.A14 = kwds.get('A14',0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_A10, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->A10 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1789
 *         self.A8 = kwds.get('A8',0.0)
 *         self.A10 = kwds.get('A10',0.0)
 *         self.A12 = kwds.get('A12',0.0)             # <<<<<<<<<<<<<<
 *         self.A14 = kwds.get('A14',0.0)
 *         self.A16 = kwds.get('A16',0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_A12, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1789, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->A12 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1790
 *         self.A10 = kwds.get('A10',0.0)
 *         self.A12 = kwds.get('A12',0.0)
 *         self.A14 = kwds.get('A14',0.0)             # <<<<<<<<<<<<<<
 *         self.A16 = kwds.get('A16',0.0)
 *         self.atol = kwds.get("atol", 1.0e-8)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_A14, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->A14 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1791
 *         self.A12 = kwds.get('A12',0.0)
 *         self.A14 = kwds.get('A14',0.0)
 *         self.A16 = kwds.get('A16',0.0)             # <<<<<<<<<<<<<<
 *         self.atol = kwds.get("atol", 1.0e-8)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_A16, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->A16 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1792
 *         self.A14 = kwds.get('A14',0.0)
 *         self.A16 = kwds.get('A16',0.0)
 *         self.atol = kwds.get("atol", 1.0e-8)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_atol, __pyx_float_1_0eneg_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->atol = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1781
 *     params = []
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1794
 *         self.atol = kwds.get("atol", 1.0e-8)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_12AsphericFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_a1;
  double __pyx_v_dz;
  double __pyx_v_f;
  double __pyx_v_f_last;
  double __pyx_v_tol;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_6cfaces_aspheric_t __pyx_v_A;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  CYTHON_UNUSED long __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  long __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":1807
 *         cdef:
 *             double a1, dz, f, f_last
 *             double tol = self.atol**2             # <<<<<<<<<<<<<<
 *             vector_t d, a, pt1
 *             aspheric_t A
 */
  __pyx_v_tol = pow(__pyx_v_self->atol, 2.0);

  /* "raypier/core/cfaces.pyx":1810
 *             vector_t d, a, pt1
 *             aspheric_t A
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":1812
 *             intersect_t out=NO_INTERSECTION
 * 
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.             # <<<<<<<<<<<<<<
 *         a = p1
 *         a.z -= self.z_height
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":1813
 * 
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.
 *         a = p1             # <<<<<<<<<<<<<<
 *         a.z -= self.z_height
 * 
 */
  __pyx_v_a = __pyx_v_p1;

  /* "raypier/core/cfaces.pyx":1814
 *         d = subvv_(p2, p1) #the input ray direction, in local coords.
 *         a = p1
 *         a.z -= self.z_height             # <<<<<<<<<<<<<<
 * 
 *         a1 = intersect_conic(a, d, self.curvature, self.conic_const)
 */
  __pyx_v_a.z = (__pyx_v_a.z - __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1816
 *         a.z -= self.z_height
 * 
 *         a1 = intersect_conic(a, d, self.curvature, self.conic_const)             # <<<<<<<<<<<<<<
 * 
 *         A.R = -self.curvature
 */
  __pyx_v_a1 = __pyx_f_7raypier_4core_6cfaces_intersect_conic(__pyx_v_a, __pyx_v_d, __pyx_v_self->curvature, __pyx_v_self->conic_const);

  /* "raypier/core/cfaces.pyx":1818
 *         a1 = intersect_conic(a, d, self.curvature, self.conic_const)
 * 
 *         A.R = -self.curvature             # <<<<<<<<<<<<<<
 *         A.beta = 1 + self.conic_const
 *         A.A4 = self.A4
 */
  __pyx_v_A.R = (-__pyx_v_self->curvature);

  /* "raypier/core/cfaces.pyx":1819
 * 
 *         A.R = -self.curvature
 *         A.beta = 1 + self.conic_const             # <<<<<<<<<<<<<<
 *         A.A4 = self.A4
 *         A.A6 = self.A6
 */
  __pyx_v_A.beta = (1.0 + __pyx_v_self->conic_const);

  /* "raypier/core/cfaces.pyx":1820
 *         A.R = -self.curvature
 *         A.beta = 1 + self.conic_const
 *         A.A4 = self.A4             # <<<<<<<<<<<<<<
 *         A.A6 = self.A6
 *         A.A8 = self.A8
 */
  __pyx_t_1 = __pyx_v_self->A4;
  __pyx_v_A.A4 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1821
 *         A.beta = 1 + self.conic_const
 *         A.A4 = self.A4
 *         A.A6 = self.A6             # <<<<<<<<<<<<<<
 *         A.A8 = self.A8
 *         A.A10 = self.A10
 */
  __pyx_t_1 = __pyx_v_self->A6;
  __pyx_v_A.A6 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1822
 *         A.A4 = self.A4
 *         A.A6 = self.A6
 *         A.A8 = self.A8             # <<<<<<<<<<<<<<
 *         A.A10 = self.A10
 *         A.A12 = self.A12
 */
  __pyx_t_1 = __pyx_v_self->A8;
  __pyx_v_A.A8 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1823
 *         A.A6 = self.A6
 *         A.A8 = self.A8
 *         A.A10 = self.A10             # <<<<<<<<<<<<<<
 *         A.A12 = self.A12
 *         A.A14 = self.A14
 */
  __pyx_t_1 = __pyx_v_self->A10;
  __pyx_v_A.A10 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1824
 *         A.A8 = self.A8
 *         A.A10 = self.A10
 *         A.A12 = self.A12             # <<<<<<<<<<<<<<
 *         A.A14 = self.A14
 *         A.A16 = self.A16
 */
  __pyx_t_1 = __pyx_v_self->A12;
  __pyx_v_A.A12 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1825
 *         A.A10 = self.A10
 *         A.A12 = self.A12
 *         A.A14 = self.A14             # <<<<<<<<<<<<<<
 *         A.A16 = self.A16
 *         A.a = a
 */
  __pyx_t_1 = __pyx_v_self->A14;
  __pyx_v_A.A14 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1826
 *         A.A12 = self.A12
 *         A.A14 = self.A14
 *         A.A16 = self.A16             # <<<<<<<<<<<<<<
 *         A.a = a
 *         A.d = d
 */
  __pyx_t_1 = __pyx_v_self->A16;
  __pyx_v_A.A16 = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1827
 *         A.A14 = self.A14
 *         A.A16 = self.A16
 *         A.a = a             # <<<<<<<<<<<<<<
 *         A.d = d
 * 
 */
  __pyx_v_A.a = __pyx_v_a;

  /* "raypier/core/cfaces.pyx":1828
 *         A.A16 = self.A16
 *         A.a = a
 *         A.d = d             # <<<<<<<<<<<<<<
 * 
 *         ### Find root using Newton's method. Typically only a 3-4 iterations are required.
 */
  __pyx_v_A.d = __pyx_v_d;

  /* "raypier/core/cfaces.pyx":1832
 *         ### Find root using Newton's method. Typically only a 3-4 iterations are required.
 * 
 *         f = f_last = eval_aspheric_impf(A, a1)             # <<<<<<<<<<<<<<
 *         dz = - f / eval_aspheric_grad(A, a1)
 *         #print("Start:", dz, a1)
 */
  __pyx_t_1 = __pyx_f_7raypier_4core_6cfaces_eval_aspheric_impf(__pyx_v_A, __pyx_v_a1);
  __pyx_v_f = __pyx_t_1;
  __pyx_v_f_last = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1833
 * 
 *         f = f_last = eval_aspheric_impf(A, a1)
 *         dz = - f / eval_aspheric_grad(A, a1)             # <<<<<<<<<<<<<<
 *         #print("Start:", dz, a1)
 * 
 */
  __pyx_v_dz = ((-__pyx_v_f) / __pyx_f_7raypier_4core_6cfaces_eval_aspheric_grad(__pyx_v_A, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":1837
 * 
 *         #### If we've not converged after 100 iterations, then it ain't going converge ever.
 *         for i in range(100):             # <<<<<<<<<<<<<<
 *             a1 += dz
 *             if dz*dz < tol:
 */
  for (__pyx_t_2 = 0; __pyx_t_2 < 0x64; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "raypier/core/cfaces.pyx":1838
 *         #### If we've not converged after 100 iterations, then it ain't going converge ever.
 *         for i in range(100):
 *             a1 += dz             # <<<<<<<<<<<<<<
 *             if dz*dz < tol:
 *                 break
 */
    __pyx_v_a1 = (__pyx_v_a1 + __pyx_v_dz);

    /* "raypier/core/cfaces.pyx":1839
 *         for i in range(100):
 *             a1 += dz
 *             if dz*dz < tol:             # <<<<<<<<<<<<<<
 *                 break
 *             f = eval_aspheric_impf(A, a1)
 */
    __pyx_t_3 = (((__pyx_v_dz * __pyx_v_dz) < __pyx_v_tol) != 0);
    if (__pyx_t_3) {

      /* "raypier/core/cfaces.pyx":1840
 *             a1 += dz
 *             if dz*dz < tol:
 *                 break             # <<<<<<<<<<<<<<
 *             f = eval_aspheric_impf(A, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging
 */
      goto __pyx_L4_break;

      /* "raypier/core/cfaces.pyx":1839
 *         for i in range(100):
 *             a1 += dz
 *             if dz*dz < tol:             # <<<<<<<<<<<<<<
 *                 break
 *             f = eval_aspheric_impf(A, a1)
 */
    }

    /* "raypier/core/cfaces.pyx":1841
 *             if dz*dz < tol:
 *                 break
 *             f = eval_aspheric_impf(A, a1)             # <<<<<<<<<<<<<<
 *             if fabs(f) > fabs(f_last): #We're not converging
 *                 return NO_INTERSECTION
 */
    __pyx_v_f = __pyx_f_7raypier_4core_6cfaces_eval_aspheric_impf(__pyx_v_A, __pyx_v_a1);

    /* "raypier/core/cfaces.pyx":1842
 *                 break
 *             f = eval_aspheric_impf(A, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             f_last = f
 */
    __pyx_t_3 = ((fabs(__pyx_v_f) > fabs(__pyx_v_f_last)) != 0);
    if (__pyx_t_3) {

      /* "raypier/core/cfaces.pyx":1843
 *             f = eval_aspheric_impf(A, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *             f_last = f
 *             dz = - f / eval_aspheric_grad(A, a1)
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":1842
 *                 break
 *             f = eval_aspheric_impf(A, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             f_last = f
 */
    }

    /* "raypier/core/cfaces.pyx":1844
 *             if fabs(f) > fabs(f_last): #We're not converging
 *                 return NO_INTERSECTION
 *             f_last = f             # <<<<<<<<<<<<<<
 *             dz = - f / eval_aspheric_grad(A, a1)
 *         else:
 */
    __pyx_v_f_last = __pyx_v_f;

    /* "raypier/core/cfaces.pyx":1845
 *                 return NO_INTERSECTION
 *             f_last = f
 *             dz = - f / eval_aspheric_grad(A, a1)             # <<<<<<<<<<<<<<
 *         else:
 *             return NO_INTERSECTION
 */
    __pyx_v_dz = ((-__pyx_v_f) / __pyx_f_7raypier_4core_6cfaces_eval_aspheric_grad(__pyx_v_A, __pyx_v_a1));
  }
  /*else*/ {

    /* "raypier/core/cfaces.pyx":1847
 *             dz = - f / eval_aspheric_grad(A, a1)
 *         else:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         #print("Converged:", dz, a1, i)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;
  }
  __pyx_L4_break:;

  /* "raypier/core/cfaces.pyx":1851
 *         #print("Converged:", dz, a1, i)
 * 
 *         pt1 = addvv_(a, multvs_(d, a1))             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_a, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":1853
 *         pt1 = addvv_(a, multvs_(d, a1))
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_4 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_3) {

    /* "raypier/core/cfaces.pyx":1854
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1853
 *         pt1 = addvv_(a, multvs_(d, a1))
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1856
 *             return NO_INTERSECTION
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_4 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_3) {

    /* "raypier/core/cfaces.pyx":1857
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         #print("Ret:", a1 * sep_(p1, p2))
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":1856
 *             return NO_INTERSECTION
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":1860
 * 
 *         #print("Ret:", a1 * sep_(p1, p2))
 *         out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":1861
 *         #print("Ret:", a1 * sep_(p1, p2))
 *         out.dist = a1 * sep_(p1, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1794
 *         self.atol = kwds.get("atol", 1.0e-8)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1863
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_12AsphericFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  double __pyx_v_R;
  double __pyx_v_beta;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_g;
  int __pyx_v_sign;
  double __pyx_v_r2;
  CYTHON_UNUSED double __pyx_v_r;
  double __pyx_v_df;
  double __pyx_v_root;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":1868
 *         """
 *         cdef:
 *             double R = -self.curvature             # <<<<<<<<<<<<<<
 *             double beta = 1 + self.conic_const
 *             vector_t g #output gradient vector
 */
  __pyx_v_R = (-__pyx_v_self->curvature);

  /* "raypier/core/cfaces.pyx":1869
 *         cdef:
 *             double R = -self.curvature
 *             double beta = 1 + self.conic_const             # <<<<<<<<<<<<<<
 *             vector_t g #output gradient vector
 *             int sign = -1 if self.invert_normals else 1
 */
  __pyx_v_beta = (1.0 + __pyx_v_self->conic_const);

  /* "raypier/core/cfaces.pyx":1871
 *             double beta = 1 + self.conic_const
 *             vector_t g #output gradient vector
 *             int sign = -1 if self.invert_normals else 1             # <<<<<<<<<<<<<<
 *             double r2, r, df, root
 * 
 */
  if ((__pyx_v_self->__pyx_base.invert_normals != 0)) {
    __pyx_t_1 = -1;
  } else {
    __pyx_t_1 = 1;
  }
  __pyx_v_sign = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1874
 *             double r2, r, df, root
 * 
 *         p.z -= self.z_height             # <<<<<<<<<<<<<<
 * 
 *         r2 = p.x*p.x + p.y*p.y
 */
  __pyx_v_p.z = (__pyx_v_p.z - __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1876
 *         p.z -= self.z_height
 * 
 *         r2 = p.x*p.x + p.y*p.y             # <<<<<<<<<<<<<<
 *         r = sqrt(r2)
 *         root = sqrt(1-(beta*(r2)/(R*R)))
 */
  __pyx_v_r2 = ((__pyx_v_p.x * __pyx_v_p.x) + (__pyx_v_p.y * __pyx_v_p.y));

  /* "raypier/core/cfaces.pyx":1877
 * 
 *         r2 = p.x*p.x + p.y*p.y
 *         r = sqrt(r2)             # <<<<<<<<<<<<<<
 *         root = sqrt(1-(beta*(r2)/(R*R)))
 *         df = 10*self.A10*(r2**4) + 8*self.A8*(r2**3) + 6*self.A6*(r2**2) + 4*self.A4*r2
 */
  __pyx_v_r = sqrt(__pyx_v_r2);

  /* "raypier/core/cfaces.pyx":1878
 *         r2 = p.x*p.x + p.y*p.y
 *         r = sqrt(r2)
 *         root = sqrt(1-(beta*(r2)/(R*R)))             # <<<<<<<<<<<<<<
 *         df = 10*self.A10*(r2**4) + 8*self.A8*(r2**3) + 6*self.A6*(r2**2) + 4*self.A4*r2
 *         df += 16*self.A16*(r2**7) + 14*self.A14*(r2**6) + 12*self.A12*(r2**5)
 */
  __pyx_v_root = sqrt((1.0 - ((__pyx_v_beta * __pyx_v_r2) / (__pyx_v_R * __pyx_v_R))));

  /* "raypier/core/cfaces.pyx":1879
 *         r = sqrt(r2)
 *         root = sqrt(1-(beta*(r2)/(R*R)))
 *         df = 10*self.A10*(r2**4) + 8*self.A8*(r2**3) + 6*self.A6*(r2**2) + 4*self.A4*r2             # <<<<<<<<<<<<<<
 *         df += 16*self.A16*(r2**7) + 14*self.A14*(r2**6) + 12*self.A12*(r2**5)
 *         df += 2/(R*(1+root))
 */
  __pyx_v_df = (((((10.0 * __pyx_v_self->A10) * pow(__pyx_v_r2, 4.0)) + ((8.0 * __pyx_v_self->A8) * pow(__pyx_v_r2, 3.0))) + ((6.0 * __pyx_v_self->A6) * pow(__pyx_v_r2, 2.0))) + ((4.0 * __pyx_v_self->A4) * __pyx_v_r2));

  /* "raypier/core/cfaces.pyx":1880
 *         root = sqrt(1-(beta*(r2)/(R*R)))
 *         df = 10*self.A10*(r2**4) + 8*self.A8*(r2**3) + 6*self.A6*(r2**2) + 4*self.A4*r2
 *         df += 16*self.A16*(r2**7) + 14*self.A14*(r2**6) + 12*self.A12*(r2**5)             # <<<<<<<<<<<<<<
 *         df += 2/(R*(1+root))
 *         df += beta*(r2)/((R**3)*root*((1+root)**2))
 */
  __pyx_v_df = (__pyx_v_df + ((((16.0 * __pyx_v_self->A16) * pow(__pyx_v_r2, 7.0)) + ((14.0 * __pyx_v_self->A14) * pow(__pyx_v_r2, 6.0))) + ((12.0 * __pyx_v_self->A12) * pow(__pyx_v_r2, 5.0))));

  /* "raypier/core/cfaces.pyx":1881
 *         df = 10*self.A10*(r2**4) + 8*self.A8*(r2**3) + 6*self.A6*(r2**2) + 4*self.A4*r2
 *         df += 16*self.A16*(r2**7) + 14*self.A14*(r2**6) + 12*self.A12*(r2**5)
 *         df += 2/(R*(1+root))             # <<<<<<<<<<<<<<
 *         df += beta*(r2)/((R**3)*root*((1+root)**2))
 * 
 */
  __pyx_v_df = (__pyx_v_df + (2.0 / (__pyx_v_R * (1.0 + __pyx_v_root))));

  /* "raypier/core/cfaces.pyx":1882
 *         df += 16*self.A16*(r2**7) + 14*self.A14*(r2**6) + 12*self.A12*(r2**5)
 *         df += 2/(R*(1+root))
 *         df += beta*(r2)/((R**3)*root*((1+root)**2))             # <<<<<<<<<<<<<<
 * 
 *         g.z = 1.0
 */
  __pyx_v_df = (__pyx_v_df + ((__pyx_v_beta * __pyx_v_r2) / ((pow(__pyx_v_R, 3.0) * __pyx_v_root) * pow((1.0 + __pyx_v_root), 2.0))));

  /* "raypier/core/cfaces.pyx":1884
 *         df += beta*(r2)/((R**3)*root*((1+root)**2))
 * 
 *         g.z = 1.0             # <<<<<<<<<<<<<<
 *         g.x = - df*p.x
 *         g.y = - df*p.y
 */
  __pyx_v_g.z = 1.0;

  /* "raypier/core/cfaces.pyx":1885
 * 
 *         g.z = 1.0
 *         g.x = - df*p.x             # <<<<<<<<<<<<<<
 *         g.y = - df*p.y
 * 
 */
  __pyx_v_g.x = ((-__pyx_v_df) * __pyx_v_p.x);

  /* "raypier/core/cfaces.pyx":1886
 *         g.z = 1.0
 *         g.x = - df*p.x
 *         g.y = - df*p.y             # <<<<<<<<<<<<<<
 * 
 *         g.z *= sign
 */
  __pyx_v_g.y = ((-__pyx_v_df) * __pyx_v_p.y);

  /* "raypier/core/cfaces.pyx":1888
 *         g.y = - df*p.y
 * 
 *         g.z *= sign             # <<<<<<<<<<<<<<
 *         g.y *= sign
 *         g.x *= sign
 */
  __pyx_v_g.z = (__pyx_v_g.z * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":1889
 * 
 *         g.z *= sign
 *         g.y *= sign             # <<<<<<<<<<<<<<
 *         g.x *= sign
 * 
 */
  __pyx_v_g.y = (__pyx_v_g.y * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":1890
 *         g.z *= sign
 *         g.y *= sign
 *         g.x *= sign             # <<<<<<<<<<<<<<
 * 
 *         return norm_(g)
 */
  __pyx_v_g.x = (__pyx_v_g.x * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":1892
 *         g.x *= sign
 * 
 *         return norm_(g)             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_g);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1863
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1894
 *         return norm_(g)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double out
 */

static double __pyx_f_7raypier_4core_6cfaces_12AsphericFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  double __pyx_v_out;
  double __pyx_v_r2;
  double __pyx_v_R;
  double __pyx_r;
  double __pyx_t_1;
  int __pyx_t_2;

  /* "raypier/core/cfaces.pyx":1897
 *         cdef:
 *             double out
 *             double r2 = (x*x) + (y*y)             # <<<<<<<<<<<<<<
 *             double R = self.curvature
 * 
 */
  __pyx_v_r2 = ((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y));

  /* "raypier/core/cfaces.pyx":1898
 *             double out
 *             double r2 = (x*x) + (y*y)
 *             double R = self.curvature             # <<<<<<<<<<<<<<
 * 
 *         out = r2
 */
  __pyx_t_1 = __pyx_v_self->curvature;
  __pyx_v_R = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1900
 *             double R = self.curvature
 * 
 *         out = r2             # <<<<<<<<<<<<<<
 *         if R>=0.0:
 *             out /= (-R - sqrt(R*R - (1+self.conic_const)*r2) )
 */
  __pyx_v_out = __pyx_v_r2;

  /* "raypier/core/cfaces.pyx":1901
 * 
 *         out = r2
 *         if R>=0.0:             # <<<<<<<<<<<<<<
 *             out /= (-R - sqrt(R*R - (1+self.conic_const)*r2) )
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_R >= 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1902
 *         out = r2
 *         if R>=0.0:
 *             out /= (-R - sqrt(R*R - (1+self.conic_const)*r2) )             # <<<<<<<<<<<<<<
 *         else:
 *             out /= (-R + sqrt(R*R - (1+self.conic_const)*r2) )
 */
    __pyx_v_out = (__pyx_v_out / ((-__pyx_v_R) - sqrt(((__pyx_v_R * __pyx_v_R) - ((1.0 + __pyx_v_self->conic_const) * __pyx_v_r2)))));

    /* "raypier/core/cfaces.pyx":1901
 * 
 *         out = r2
 *         if R>=0.0:             # <<<<<<<<<<<<<<
 *             out /= (-R - sqrt(R*R - (1+self.conic_const)*r2) )
 *         else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":1904
 *             out /= (-R - sqrt(R*R - (1+self.conic_const)*r2) )
 *         else:
 *             out /= (-R + sqrt(R*R - (1+self.conic_const)*r2) )             # <<<<<<<<<<<<<<
 *         out += self.A4*(r2**2) + self.A6*(r2**3) + self.A8*(r2**4) + self.A10*(r2**5) + self.A12*(r2**6) + self.A14*(r2**7) + self.A16*(r2**8)
 *         out += self.z_height
 */
  /*else*/ {
    __pyx_v_out = (__pyx_v_out / ((-__pyx_v_R) + sqrt(((__pyx_v_R * __pyx_v_R) - ((1.0 + __pyx_v_self->conic_const) * __pyx_v_r2)))));
  }
  __pyx_L3:;

  /* "raypier/core/cfaces.pyx":1905
 *         else:
 *             out /= (-R + sqrt(R*R - (1+self.conic_const)*r2) )
 *         out += self.A4*(r2**2) + self.A6*(r2**3) + self.A8*(r2**4) + self.A10*(r2**5) + self.A12*(r2**6) + self.A14*(r2**7) + self.A16*(r2**8)             # <<<<<<<<<<<<<<
 *         out += self.z_height
 *         return out
 */
  __pyx_v_out = (__pyx_v_out + (((((((__pyx_v_self->A4 * pow(__pyx_v_r2, 2.0)) + (__pyx_v_self->A6 * pow(__pyx_v_r2, 3.0))) + (__pyx_v_self->A8 * pow(__pyx_v_r2, 4.0))) + (__pyx_v_self->A10 * pow(__pyx_v_r2, 5.0))) + (__pyx_v_self->A12 * pow(__pyx_v_r2, 6.0))) + (__pyx_v_self->A14 * pow(__pyx_v_r2, 7.0))) + (__pyx_v_self->A16 * pow(__pyx_v_r2, 8.0))));

  /* "raypier/core/cfaces.pyx":1906
 *             out /= (-R + sqrt(R*R - (1+self.conic_const)*r2) )
 *         out += self.A4*(r2**2) + self.A6*(r2**3) + self.A8*(r2**4) + self.A10*(r2**5) + self.A12*(r2**6) + self.A14*(r2**7) + self.A16*(r2**8)
 *         out += self.z_height             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out = (__pyx_v_out + __pyx_v_self->z_height);

  /* "raypier/core/cfaces.pyx":1907
 *         out += self.A4*(r2**2) + self.A6*(r2**3) + self.A8*(r2**4) + self.A10*(r2**5) + self.A12*(r2**6) + self.A14*(r2**7) + self.A16*(r2**8)
 *         out += self.z_height
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1894
 *         return norm_(g)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double out
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1909
 *         return out
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_12AsphericFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":1910
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 *         return z - self.eval_z_c(x,y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_z - ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.eval_z_c(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_x, __pyx_v_y));
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1909
 *         return out
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1776
 *     """
 *     cdef:
 *         public double curvature, z_height, conic_const, A4, A6, A8, A10, A12, A14, A16             # <<<<<<<<<<<<<<
 *         public double atol
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_9curvature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_9curvature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_9curvature___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->curvature); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.curvature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_9curvature_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->curvature = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.curvature.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->z_height = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_11conic_const_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_11conic_const_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_11conic_const___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_11conic_const___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->conic_const); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.conic_const.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_11conic_const_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_11conic_const_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_11conic_const_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_11conic_const_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->conic_const = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.conic_const.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A4_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A4_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A4___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A4___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A4.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A4_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A4_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A4_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->A4 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A4.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A6_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A6_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A6___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A6___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A6.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A6_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A6_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A6_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A6_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->A6 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A6.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A8_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A8_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A8___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A8___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A8.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A8_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A8_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A8_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2A8_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->A8 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A8.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A10_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A10_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A10___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A10___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A10.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A10_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A10_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A10_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A10_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->A10 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A10.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A12_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A12_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A12___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A12___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A12.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A12_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A12_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A12_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A12_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->A12 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A12.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A14_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A14_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A14___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A14___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A14.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A14_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A14_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A14_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A14_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->A14 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A14.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A16_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A16_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A16___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A16___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->A16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A16.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A16_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A16_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A16_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_3A16_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1776, __pyx_L1_error)
  __pyx_v_self->A16 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.A16.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1777
 *     cdef:
 *         public double curvature, z_height, conic_const, A4, A6, A8, A10, A12, A14, A16
 *         public double atol             # <<<<<<<<<<<<<<
 * 
 *     params = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_4atol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_4atol_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4atol___get__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4atol___get__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->atol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.atol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_4atol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_4atol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4atol_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4atol_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1777, __pyx_L1_error)
  __pyx_v_self->atol = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.atol.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_12AsphericFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.AsphericFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1928
 * 
 * # return the z-value
 * cdef double eval_extpoly_impf(extpoly_t EP, double[:,:] coefs, vector_t a, vector_t d, double alpha):             # <<<<<<<<<<<<<<
 *     """
 *     EP - polynomial definition
 */

static double __pyx_f_7raypier_4core_6cfaces_eval_extpoly_impf(struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_v_EP, __Pyx_memviewslice __pyx_v_coefs, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d, double __pyx_v_alpha) {
  double __pyx_v_out;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_r2;
  double __pyx_v_R;
  __Pyx_memviewslice __pyx_v_E = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_Nx;
  int __pyx_v_Ny;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("eval_extpoly_impf", 0);

  /* "raypier/core/cfaces.pyx":1941
 *     cdef:
 *         double out
 *         double x = a.x + alpha*d.x             # <<<<<<<<<<<<<<
 *         double y = a.y + alpha*d.y
 *         double r2 = x**2 + y**2
 */
  __pyx_v_x = (__pyx_v_a.x + (__pyx_v_alpha * __pyx_v_d.x));

  /* "raypier/core/cfaces.pyx":1942
 *         double out
 *         double x = a.x + alpha*d.x
 *         double y = a.y + alpha*d.y             # <<<<<<<<<<<<<<
 *         double r2 = x**2 + y**2
 *         double R = EP.R
 */
  __pyx_v_y = (__pyx_v_a.y + (__pyx_v_alpha * __pyx_v_d.y));

  /* "raypier/core/cfaces.pyx":1943
 *         double x = a.x + alpha*d.x
 *         double y = a.y + alpha*d.y
 *         double r2 = x**2 + y**2             # <<<<<<<<<<<<<<
 *         double R = EP.R
 *         double[:,:] E = coefs
 */
  __pyx_v_r2 = (pow(__pyx_v_x, 2.0) + pow(__pyx_v_y, 2.0));

  /* "raypier/core/cfaces.pyx":1944
 *         double y = a.y + alpha*d.y
 *         double r2 = x**2 + y**2
 *         double R = EP.R             # <<<<<<<<<<<<<<
 *         double[:,:] E = coefs
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]
 */
  __pyx_t_1 = __pyx_v_EP.R;
  __pyx_v_R = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":1945
 *         double r2 = x**2 + y**2
 *         double R = EP.R
 *         double[:,:] E = coefs             # <<<<<<<<<<<<<<
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_coefs, 0);
  __pyx_v_E = __pyx_v_coefs;

  /* "raypier/core/cfaces.pyx":1946
 *         double R = EP.R
 *         double[:,:] E = coefs
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]             # <<<<<<<<<<<<<<
 * 
 *     out = r2
 */
  __pyx_v_Nx = (__pyx_v_E.shape[0]);
  __pyx_v_Ny = (__pyx_v_E.shape[1]);

  /* "raypier/core/cfaces.pyx":1948
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 *     out = r2             # <<<<<<<<<<<<<<
 *     if R>=0:
 *         out /= (R + sqrt(R*R - EP.beta*r2))
 */
  __pyx_v_out = __pyx_v_r2;

  /* "raypier/core/cfaces.pyx":1949
 * 
 *     out = r2
 *     if R>=0:             # <<<<<<<<<<<<<<
 *         out /= (R + sqrt(R*R - EP.beta*r2))
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_R >= 0.0) != 0);
  if (__pyx_t_2) {

    /* "raypier/core/cfaces.pyx":1950
 *     out = r2
 *     if R>=0:
 *         out /= (R + sqrt(R*R - EP.beta*r2))             # <<<<<<<<<<<<<<
 *     else:
 *         out /= (R - sqrt(R*R - EP.beta*r2))
 */
    __pyx_v_out = (__pyx_v_out / (__pyx_v_R + sqrt(((__pyx_v_R * __pyx_v_R) - (__pyx_v_EP.beta * __pyx_v_r2)))));

    /* "raypier/core/cfaces.pyx":1949
 * 
 *     out = r2
 *     if R>=0:             # <<<<<<<<<<<<<<
 *         out /= (R + sqrt(R*R - EP.beta*r2))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":1952
 *         out /= (R + sqrt(R*R - EP.beta*r2))
 *     else:
 *         out /= (R - sqrt(R*R - EP.beta*r2))             # <<<<<<<<<<<<<<
 * 
 *     out -= a.z + alpha*d.z
 */
  /*else*/ {
    __pyx_v_out = (__pyx_v_out / (__pyx_v_R - sqrt(((__pyx_v_R * __pyx_v_R) - (__pyx_v_EP.beta * __pyx_v_r2)))));
  }
  __pyx_L3:;

  /* "raypier/core/cfaces.pyx":1954
 *         out /= (R - sqrt(R*R - EP.beta*r2))
 * 
 *     out -= a.z + alpha*d.z             # <<<<<<<<<<<<<<
 * 
 *     # normalization
 */
  __pyx_v_out = (__pyx_v_out - (__pyx_v_a.z + (__pyx_v_alpha * __pyx_v_d.z)));

  /* "raypier/core/cfaces.pyx":1957
 * 
 *     # normalization
 *     x /= EP.norm_radius             # <<<<<<<<<<<<<<
 *     y /= EP.norm_radius
 * 
 */
  __pyx_v_x = (__pyx_v_x / __pyx_v_EP.norm_radius);

  /* "raypier/core/cfaces.pyx":1958
 *     # normalization
 *     x /= EP.norm_radius
 *     y /= EP.norm_radius             # <<<<<<<<<<<<<<
 * 
 *     for i in range(Nx):
 */
  __pyx_v_y = (__pyx_v_y / __pyx_v_EP.norm_radius);

  /* "raypier/core/cfaces.pyx":1960
 *     y /= EP.norm_radius
 * 
 *     for i in range(Nx):             # <<<<<<<<<<<<<<
 *         for j in range(Ny):
 *             out += E[i,j]*(x**i)*(y**j)
 */
  __pyx_t_3 = __pyx_v_Nx;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "raypier/core/cfaces.pyx":1961
 * 
 *     for i in range(Nx):
 *         for j in range(Ny):             # <<<<<<<<<<<<<<
 *             out += E[i,j]*(x**i)*(y**j)
 * 
 */
    __pyx_t_6 = __pyx_v_Ny;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "raypier/core/cfaces.pyx":1962
 *     for i in range(Nx):
 *         for j in range(Ny):
 *             out += E[i,j]*(x**i)*(y**j)             # <<<<<<<<<<<<<<
 * 
 *     out += EP.z_height
 */
      __pyx_t_9 = __pyx_v_i;
      __pyx_t_10 = __pyx_v_j;
      if (__pyx_t_9 < 0) __pyx_t_9 += __pyx_v_E.shape[0];
      if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_E.shape[1];
      __pyx_v_out = (__pyx_v_out + (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_9 * __pyx_v_E.strides[0]) ) + __pyx_t_10 * __pyx_v_E.strides[1]) ))) * pow(__pyx_v_x, ((double)__pyx_v_i))) * pow(__pyx_v_y, ((double)__pyx_v_j))));
    }
  }

  /* "raypier/core/cfaces.pyx":1964
 *             out += E[i,j]*(x**i)*(y**j)
 * 
 *     out += EP.z_height             # <<<<<<<<<<<<<<
 *     #print("imp", out)
 *     return out
 */
  __pyx_v_out = (__pyx_v_out + __pyx_v_EP.z_height);

  /* "raypier/core/cfaces.pyx":1966
 *     out += EP.z_height
 *     #print("imp", out)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1928
 * 
 * # return the z-value
 * cdef double eval_extpoly_impf(extpoly_t EP, double[:,:] coefs, vector_t a, vector_t d, double alpha):             # <<<<<<<<<<<<<<
 *     """
 *     EP - polynomial definition
 */

  /* function exit code */
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_E, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":1969
 * 
 * 
 * cdef double eval_extpoly_grad(extpoly_t EP, double[:,:] coefs, vector_t a, vector_t d, double alpha):             # <<<<<<<<<<<<<<
 *     """
 *     1st derivative of eval_extpoly_impf w.r.t. alpha
 */

static double __pyx_f_7raypier_4core_6cfaces_eval_extpoly_grad(struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_v_EP, __Pyx_memviewslice __pyx_v_coefs, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d, double __pyx_v_alpha) {
  double __pyx_v_out;
  double __pyx_v_dEdx;
  double __pyx_v_dEdy;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_r2;
  double __pyx_v_R2;
  double __pyx_v_rt;
  double __pyx_v_denom;
  double __pyx_v_nom;
  double __pyx_v_inv_rad;
  __Pyx_memviewslice __pyx_v_E = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_Nx;
  int __pyx_v_Ny;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  __Pyx_RefNannySetupContext("eval_extpoly_grad", 0);

  /* "raypier/core/cfaces.pyx":1975
 *     ### This is too tedious to write out. Need sympy...
 *     cdef:
 *         double out, dEdx=0.0, dEdy=0.0             # <<<<<<<<<<<<<<
 *         double x = a.x + alpha*d.x
 *         double y = a.y + alpha*d.y
 */
  __pyx_v_dEdx = 0.0;
  __pyx_v_dEdy = 0.0;

  /* "raypier/core/cfaces.pyx":1976
 *     cdef:
 *         double out, dEdx=0.0, dEdy=0.0
 *         double x = a.x + alpha*d.x             # <<<<<<<<<<<<<<
 *         double y = a.y + alpha*d.y
 *         double r2 = x**2 + y**2
 */
  __pyx_v_x = (__pyx_v_a.x + (__pyx_v_alpha * __pyx_v_d.x));

  /* "raypier/core/cfaces.pyx":1977
 *         double out, dEdx=0.0, dEdy=0.0
 *         double x = a.x + alpha*d.x
 *         double y = a.y + alpha*d.y             # <<<<<<<<<<<<<<
 *         double r2 = x**2 + y**2
 *         double R2 = EP.R * EP.R
 */
  __pyx_v_y = (__pyx_v_a.y + (__pyx_v_alpha * __pyx_v_d.y));

  /* "raypier/core/cfaces.pyx":1978
 *         double x = a.x + alpha*d.x
 *         double y = a.y + alpha*d.y
 *         double r2 = x**2 + y**2             # <<<<<<<<<<<<<<
 *         double R2 = EP.R * EP.R
 *         double rt = sqrt(1 - (EP.beta * r2 / R2))
 */
  __pyx_v_r2 = (pow(__pyx_v_x, 2.0) + pow(__pyx_v_y, 2.0));

  /* "raypier/core/cfaces.pyx":1979
 *         double y = a.y + alpha*d.y
 *         double r2 = x**2 + y**2
 *         double R2 = EP.R * EP.R             # <<<<<<<<<<<<<<
 *         double rt = sqrt(1 - (EP.beta * r2 / R2))
 *         double denom = EP.R * (rt + 1)
 */
  __pyx_v_R2 = (__pyx_v_EP.R * __pyx_v_EP.R);

  /* "raypier/core/cfaces.pyx":1980
 *         double r2 = x**2 + y**2
 *         double R2 = EP.R * EP.R
 *         double rt = sqrt(1 - (EP.beta * r2 / R2))             # <<<<<<<<<<<<<<
 *         double denom = EP.R * (rt + 1)
 *         double nom = (2*d.x*x + 2*d.y*y)
 */
  __pyx_v_rt = sqrt((1.0 - ((__pyx_v_EP.beta * __pyx_v_r2) / __pyx_v_R2)));

  /* "raypier/core/cfaces.pyx":1981
 *         double R2 = EP.R * EP.R
 *         double rt = sqrt(1 - (EP.beta * r2 / R2))
 *         double denom = EP.R * (rt + 1)             # <<<<<<<<<<<<<<
 *         double nom = (2*d.x*x + 2*d.y*y)
 *         double inv_rad = 1./EP.norm_radius
 */
  __pyx_v_denom = (__pyx_v_EP.R * (__pyx_v_rt + 1.0));

  /* "raypier/core/cfaces.pyx":1982
 *         double rt = sqrt(1 - (EP.beta * r2 / R2))
 *         double denom = EP.R * (rt + 1)
 *         double nom = (2*d.x*x + 2*d.y*y)             # <<<<<<<<<<<<<<
 *         double inv_rad = 1./EP.norm_radius
 *         double[:,:] E = coefs
 */
  __pyx_v_nom = (((2.0 * __pyx_v_d.x) * __pyx_v_x) + ((2.0 * __pyx_v_d.y) * __pyx_v_y));

  /* "raypier/core/cfaces.pyx":1983
 *         double denom = EP.R * (rt + 1)
 *         double nom = (2*d.x*x + 2*d.y*y)
 *         double inv_rad = 1./EP.norm_radius             # <<<<<<<<<<<<<<
 *         double[:,:] E = coefs
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]
 */
  __pyx_v_inv_rad = (1. / __pyx_v_EP.norm_radius);

  /* "raypier/core/cfaces.pyx":1984
 *         double nom = (2*d.x*x + 2*d.y*y)
 *         double inv_rad = 1./EP.norm_radius
 *         double[:,:] E = coefs             # <<<<<<<<<<<<<<
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_coefs, 0);
  __pyx_v_E = __pyx_v_coefs;

  /* "raypier/core/cfaces.pyx":1985
 *         double inv_rad = 1./EP.norm_radius
 *         double[:,:] E = coefs
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]             # <<<<<<<<<<<<<<
 * 
 *     out = -d.z
 */
  __pyx_v_Nx = (__pyx_v_E.shape[0]);
  __pyx_v_Ny = (__pyx_v_E.shape[1]);

  /* "raypier/core/cfaces.pyx":1987
 *         int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 *     out = -d.z             # <<<<<<<<<<<<<<
 * 
 *     ### gradient of conic surface w.r.t. alpha
 */
  __pyx_v_out = (-__pyx_v_d.z);

  /* "raypier/core/cfaces.pyx":1990
 * 
 *     ### gradient of conic surface w.r.t. alpha
 *     out += nom / denom             # <<<<<<<<<<<<<<
 *     out += EP.beta * nom * r2 /(2*EP.R*rt*denom*denom)
 * 
 */
  __pyx_v_out = (__pyx_v_out + (__pyx_v_nom / __pyx_v_denom));

  /* "raypier/core/cfaces.pyx":1991
 *     ### gradient of conic surface w.r.t. alpha
 *     out += nom / denom
 *     out += EP.beta * nom * r2 /(2*EP.R*rt*denom*denom)             # <<<<<<<<<<<<<<
 * 
 *     # normalization
 */
  __pyx_v_out = (__pyx_v_out + (((__pyx_v_EP.beta * __pyx_v_nom) * __pyx_v_r2) / ((((2.0 * __pyx_v_EP.R) * __pyx_v_rt) * __pyx_v_denom) * __pyx_v_denom)));

  /* "raypier/core/cfaces.pyx":1994
 * 
 *     # normalization
 *     x *= inv_rad             # <<<<<<<<<<<<<<
 *     y *= inv_rad
 * 
 */
  __pyx_v_x = (__pyx_v_x * __pyx_v_inv_rad);

  /* "raypier/core/cfaces.pyx":1995
 *     # normalization
 *     x *= inv_rad
 *     y *= inv_rad             # <<<<<<<<<<<<<<
 * 
 *     for i in range(1,Nx):
 */
  __pyx_v_y = (__pyx_v_y * __pyx_v_inv_rad);

  /* "raypier/core/cfaces.pyx":1997
 *     y *= inv_rad
 * 
 *     for i in range(1,Nx):             # <<<<<<<<<<<<<<
 *         for j in range(Ny):
 *             dEdx += (i)*E[i,j]*(x**(i-1))*(y**j)
 */
  __pyx_t_1 = __pyx_v_Nx;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/cfaces.pyx":1998
 * 
 *     for i in range(1,Nx):
 *         for j in range(Ny):             # <<<<<<<<<<<<<<
 *             dEdx += (i)*E[i,j]*(x**(i-1))*(y**j)
 * 
 */
    __pyx_t_4 = __pyx_v_Ny;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "raypier/core/cfaces.pyx":1999
 *     for i in range(1,Nx):
 *         for j in range(Ny):
 *             dEdx += (i)*E[i,j]*(x**(i-1))*(y**j)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(Nx):
 */
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_8 = __pyx_v_j;
      if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_E.shape[0];
      if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_E.shape[1];
      __pyx_v_dEdx = (__pyx_v_dEdx + (((__pyx_v_i * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_7 * __pyx_v_E.strides[0]) ) + __pyx_t_8 * __pyx_v_E.strides[1]) )))) * pow(__pyx_v_x, ((double)(__pyx_v_i - 1)))) * pow(__pyx_v_y, ((double)__pyx_v_j))));
    }
  }

  /* "raypier/core/cfaces.pyx":2001
 *             dEdx += (i)*E[i,j]*(x**(i-1))*(y**j)
 * 
 *     for i in range(Nx):             # <<<<<<<<<<<<<<
 *         for j in range(1,Ny):
 *             dEdy += (j)*E[i,j]*(x**i)*(y**(j-1))
 */
  __pyx_t_1 = __pyx_v_Nx;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "raypier/core/cfaces.pyx":2002
 * 
 *     for i in range(Nx):
 *         for j in range(1,Ny):             # <<<<<<<<<<<<<<
 *             dEdy += (j)*E[i,j]*(x**i)*(y**(j-1))
 * 
 */
    __pyx_t_4 = __pyx_v_Ny;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 1; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "raypier/core/cfaces.pyx":2003
 *     for i in range(Nx):
 *         for j in range(1,Ny):
 *             dEdy += (j)*E[i,j]*(x**i)*(y**(j-1))             # <<<<<<<<<<<<<<
 * 
 *     dEdx *= inv_rad
 */
      __pyx_t_8 = __pyx_v_i;
      __pyx_t_7 = __pyx_v_j;
      if (__pyx_t_8 < 0) __pyx_t_8 += __pyx_v_E.shape[0];
      if (__pyx_t_7 < 0) __pyx_t_7 += __pyx_v_E.shape[1];
      __pyx_v_dEdy = (__pyx_v_dEdy + (((__pyx_v_j * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_8 * __pyx_v_E.strides[0]) ) + __pyx_t_7 * __pyx_v_E.strides[1]) )))) * pow(__pyx_v_x, ((double)__pyx_v_i))) * pow(__pyx_v_y, ((double)(__pyx_v_j - 1)))));
    }
  }

  /* "raypier/core/cfaces.pyx":2005
 *             dEdy += (j)*E[i,j]*(x**i)*(y**(j-1))
 * 
 *     dEdx *= inv_rad             # <<<<<<<<<<<<<<
 *     dEdy *= inv_rad
 * 
 */
  __pyx_v_dEdx = (__pyx_v_dEdx * __pyx_v_inv_rad);

  /* "raypier/core/cfaces.pyx":2006
 * 
 *     dEdx *= inv_rad
 *     dEdy *= inv_rad             # <<<<<<<<<<<<<<
 * 
 *     out += dEdx*d.x
 */
  __pyx_v_dEdy = (__pyx_v_dEdy * __pyx_v_inv_rad);

  /* "raypier/core/cfaces.pyx":2008
 *     dEdy *= inv_rad
 * 
 *     out += dEdx*d.x             # <<<<<<<<<<<<<<
 *     out += dEdy*d.y
 *     #print("grad", out)
 */
  __pyx_v_out = (__pyx_v_out + (__pyx_v_dEdx * __pyx_v_d.x));

  /* "raypier/core/cfaces.pyx":2009
 * 
 *     out += dEdx*d.x
 *     out += dEdy*d.y             # <<<<<<<<<<<<<<
 *     #print("grad", out)
 *     return out
 */
  __pyx_v_out = (__pyx_v_out + (__pyx_v_dEdy * __pyx_v_d.y));

  /* "raypier/core/cfaces.pyx":2011
 *     out += dEdy*d.y
 *     #print("grad", out)
 *     return out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":1969
 * 
 * 
 * cdef double eval_extpoly_grad(extpoly_t EP, double[:,:] coefs, vector_t a, vector_t d, double alpha):             # <<<<<<<<<<<<<<
 *     """
 *     1st derivative of eval_extpoly_impf w.r.t. alpha
 */

  /* function exit code */
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_E, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2027
 * 
 *     property curvature:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return -self.ext_poly.R
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":2028
 *     property curvature:
 *         def __get__(self):
 *             return -self.ext_poly.R             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((-__pyx_v_self->ext_poly.R)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2027
 * 
 *     property curvature:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return -self.ext_poly.R
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.curvature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2030
 *             return -self.ext_poly.R
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.R = -v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2030, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.curvature.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":2031
 * 
 *         def __set__(self, double v):
 *             self.ext_poly.R = -v             # <<<<<<<<<<<<<<
 * 
 *     property conic_const:
 */
  __pyx_v_self->ext_poly.R = (-__pyx_v_v);

  /* "raypier/core/cfaces.pyx":2030
 *             return -self.ext_poly.R
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.R = -v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2034
 * 
 *     property conic_const:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ext_poly.beta - 1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":2035
 *     property conic_const:
 *         def __get__(self):
 *             return self.ext_poly.beta - 1             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->ext_poly.beta - 1.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2034
 * 
 *     property conic_const:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ext_poly.beta - 1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.conic_const.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2037
 *             return self.ext_poly.beta - 1
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.beta = v + 1.0
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2037, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.conic_const.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":2038
 * 
 *         def __set__(self, double v):
 *             self.ext_poly.beta = v + 1.0             # <<<<<<<<<<<<<<
 * 
 *     property norm_radius:
 */
  __pyx_v_self->ext_poly.beta = (__pyx_v_v + 1.0);

  /* "raypier/core/cfaces.pyx":2037
 *             return self.ext_poly.beta - 1
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.beta = v + 1.0
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2041
 * 
 *     property norm_radius:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ext_poly.norm_radius
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":2042
 *     property norm_radius:
 *         def __get__(self):
 *             return self.ext_poly.norm_radius             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ext_poly.norm_radius); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2041
 * 
 *     property norm_radius:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ext_poly.norm_radius
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.norm_radius.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2044
 *             return self.ext_poly.norm_radius
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.norm_radius = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2044, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.norm_radius.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":2045
 * 
 *         def __set__(self, double v):
 *             self.ext_poly.norm_radius = v             # <<<<<<<<<<<<<<
 * 
 *     property z_height:
 */
  __pyx_v_self->ext_poly.norm_radius = __pyx_v_v;

  /* "raypier/core/cfaces.pyx":2044
 *             return self.ext_poly.norm_radius
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.norm_radius = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2048
 * 
 *     property z_height:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ext_poly.z_height
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":2049
 *     property z_height:
 *         def __get__(self):
 *             return self.ext_poly.z_height             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->ext_poly.z_height); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2048
 * 
 *     property z_height:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ext_poly.z_height
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.z_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2051
 *             return self.ext_poly.z_height
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.z_height = v
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_v) {
  double __pyx_v_v;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_v); {
    __pyx_v_v = __pyx_PyFloat_AsDouble(__pyx_arg_v); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2051, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.z_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self), ((double)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":2052
 * 
 *         def __set__(self, double v):
 *             self.ext_poly.z_height = v             # <<<<<<<<<<<<<<
 * 
 *     property coefs:
 */
  __pyx_v_self->ext_poly.z_height = __pyx_v_v;

  /* "raypier/core/cfaces.pyx":2051
 *             return self.ext_poly.z_height
 * 
 *         def __set__(self, double v):             # <<<<<<<<<<<<<<
 *             self.ext_poly.z_height = v
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2055
 * 
 *     property coefs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.asarray(self._coefs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs___get__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs___get__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "raypier/core/cfaces.pyx":2056
 *     property coefs:
 *         def __get__(self):
 *             return np.asarray(self._coefs)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double[:,:] coefs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_v_self->_coefs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2056, __pyx_L1_error)}
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_self->_coefs, 2, (PyObject *(*)(char *)) __pyx_memview_get_double, (int (*)(char *, PyObject *)) __pyx_memview_set_double, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2055
 * 
 *     property coefs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.asarray(self._coefs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.coefs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2058
 *             return np.asarray(self._coefs)
 * 
 *         def __set__(self, double[:,:] coefs):             # <<<<<<<<<<<<<<
 *             self._coefs = coefs
 * 
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_coefs); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_coefs) {
  __Pyx_memviewslice __pyx_v_coefs = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_coefs); {
    __pyx_v_coefs = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_arg_coefs, PyBUF_WRITABLE); if (unlikely(!__pyx_v_coefs.memview)) __PYX_ERR(0, 2058, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.coefs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self), __pyx_v_coefs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, __Pyx_memviewslice __pyx_v_coefs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "raypier/core/cfaces.pyx":2059
 * 
 *         def __set__(self, double[:,:] coefs):
 *             self._coefs = coefs             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->_coefs, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_coefs, 0);
  __pyx_v_self->_coefs = __pyx_v_coefs;

  /* "raypier/core/cfaces.pyx":2058
 *             return np.asarray(self._coefs)
 * 
 *         def __set__(self, double[:,:] coefs):             # <<<<<<<<<<<<<<
 *             self._coefs = coefs
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_coefs, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2061
 *             self._coefs = coefs
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":2062
 * 
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)             # <<<<<<<<<<<<<<
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 0.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_z_height, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_z_height, __pyx_t_1) < 0) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2063
 *     def __cinit__(self, **kwds):
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)             # <<<<<<<<<<<<<<
 *         self.curvature = kwds.get('curvature', 0.0)
 *         self.nterms = kwds.get('nterms', 0.0) ###What is this? Why not integer?
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_conic_const, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_conic_const, __pyx_t_1) < 0) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2064
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 0.0)             # <<<<<<<<<<<<<<
 *         self.nterms = kwds.get('nterms', 0.0) ###What is this? Why not integer?
 *         self.norm_radius = kwds.get('norm_radius', 100.0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_curvature, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_curvature, __pyx_t_1) < 0) __PYX_ERR(0, 2064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2065
 *         self.conic_const = kwds.get('conic_const', 0.0)
 *         self.curvature = kwds.get('curvature', 0.0)
 *         self.nterms = kwds.get('nterms', 0.0) ###What is this? Why not integer?             # <<<<<<<<<<<<<<
 *         self.norm_radius = kwds.get('norm_radius', 100.0)
 *         self.coefs = kwds.get('coefs', np.array([[0.0]]))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_nterms, __pyx_float_0_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->nterms = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":2066
 *         self.curvature = kwds.get('curvature', 0.0)
 *         self.nterms = kwds.get('nterms', 0.0) ###What is this? Why not integer?
 *         self.norm_radius = kwds.get('norm_radius', 100.0)             # <<<<<<<<<<<<<<
 *         self.coefs = kwds.get('coefs', np.array([[0.0]]))
 *         self.atol = kwds.get("atol", 1.0e-8)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_norm_radius, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_norm_radius, __pyx_t_1) < 0) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2067
 *         self.nterms = kwds.get('nterms', 0.0) ###What is this? Why not integer?
 *         self.norm_radius = kwds.get('norm_radius', 100.0)
 *         self.coefs = kwds.get('coefs', np.array([[0.0]]))             # <<<<<<<<<<<<<<
 *         self.atol = kwds.get("atol", 1.0e-8)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_float_0_0);
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_coefs, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coefs, __pyx_t_4) < 0) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "raypier/core/cfaces.pyx":2068
 *         self.norm_radius = kwds.get('norm_radius', 100.0)
 *         self.coefs = kwds.get('coefs', np.array([[0.0]]))
 *         self.atol = kwds.get("atol", 1.0e-8)             # <<<<<<<<<<<<<<
 * 
 *      # a line-surface intersection
 */
  __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_atol, __pyx_float_1_0eneg_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2068, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_self->atol = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":2061
 *             self._coefs = coefs
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         self.z_height = kwds.get('z_height', 0.0)
 *         self.conic_const = kwds.get('conic_const', 0.0)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2071
 * 
 *      # a line-surface intersection
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, int __pyx_v_is_base_ray) {
  double __pyx_v_a1;
  double __pyx_v_f;
  double __pyx_v_dz;
  double __pyx_v_tol;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_a;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_v_E;
  __Pyx_memviewslice __pyx_v_coefs = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_out;
  double __pyx_v_f_last;
  CYTHON_UNUSED long __pyx_v_i;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_t_1;
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  double __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":2084
 *         cdef:
 *             double a1, f, dz
 *             double tol = self.atol**2             # <<<<<<<<<<<<<<
 *             vector_t d, a, pt1
 *             extpoly_t E = self.ext_poly
 */
  __pyx_v_tol = pow(__pyx_v_self->atol, 2.0);

  /* "raypier/core/cfaces.pyx":2086
 *             double tol = self.atol**2
 *             vector_t d, a, pt1
 *             extpoly_t E = self.ext_poly             # <<<<<<<<<<<<<<
 *             double[:,:] coefs = self._coefs
 *             intersect_t out=NO_INTERSECTION
 */
  __pyx_t_1 = __pyx_v_self->ext_poly;
  __pyx_v_E = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":2087
 *             vector_t d, a, pt1
 *             extpoly_t E = self.ext_poly
 *             double[:,:] coefs = self._coefs             # <<<<<<<<<<<<<<
 *             intersect_t out=NO_INTERSECTION
 * 
 */
  if (unlikely(!__pyx_v_self->_coefs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2087, __pyx_L1_error)}
  __pyx_t_2 = __pyx_v_self->_coefs;
  __PYX_INC_MEMVIEW(&__pyx_t_2, 1);
  __pyx_v_coefs = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;

  /* "raypier/core/cfaces.pyx":2088
 *             extpoly_t E = self.ext_poly
 *             double[:,:] coefs = self._coefs
 *             intersect_t out=NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         d = subvv_(p2, p1)      #the input ray direction, in local coords.
 */
  __pyx_v_out = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;

  /* "raypier/core/cfaces.pyx":2090
 *             intersect_t out=NO_INTERSECTION
 * 
 *         d = subvv_(p2, p1)      #the input ray direction, in local coords.             # <<<<<<<<<<<<<<
 *         a = p1                  # the origin of the input ray
 *         a.z -= E.z_height    # z height in local coordinates
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":2091
 * 
 *         d = subvv_(p2, p1)      #the input ray direction, in local coords.
 *         a = p1                  # the origin of the input ray             # <<<<<<<<<<<<<<
 *         a.z -= E.z_height    # z height in local coordinates
 * 
 */
  __pyx_v_a = __pyx_v_p1;

  /* "raypier/core/cfaces.pyx":2092
 *         d = subvv_(p2, p1)      #the input ray direction, in local coords.
 *         a = p1                  # the origin of the input ray
 *         a.z -= E.z_height    # z height in local coordinates             # <<<<<<<<<<<<<<
 * 
 *         a1 = intersect_conic(a, d, -E.R, E.beta-1.0)
 */
  __pyx_v_a.z = (__pyx_v_a.z - __pyx_v_E.z_height);

  /* "raypier/core/cfaces.pyx":2094
 *         a.z -= E.z_height    # z height in local coordinates
 * 
 *         a1 = intersect_conic(a, d, -E.R, E.beta-1.0)             # <<<<<<<<<<<<<<
 * 
 *         ### Don't want to use fsolve or scipy.optimise. Just use Newton-Raphson...
 */
  __pyx_v_a1 = __pyx_f_7raypier_4core_6cfaces_intersect_conic(__pyx_v_a, __pyx_v_d, (-__pyx_v_E.R), (__pyx_v_E.beta - 1.0));

  /* "raypier/core/cfaces.pyx":2097
 * 
 *         ### Don't want to use fsolve or scipy.optimise. Just use Newton-Raphson...
 *         f = f_last = eval_extpoly_impf(E, coefs, p1, d, a1)             # <<<<<<<<<<<<<<
 *         dz = - f / eval_extpoly_grad(E, coefs, p1, d, a1)
 * 
 */
  __pyx_t_3 = __pyx_f_7raypier_4core_6cfaces_eval_extpoly_impf(__pyx_v_E, __pyx_v_coefs, __pyx_v_p1, __pyx_v_d, __pyx_v_a1);
  __pyx_v_f = __pyx_t_3;
  __pyx_v_f_last = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":2098
 *         ### Don't want to use fsolve or scipy.optimise. Just use Newton-Raphson...
 *         f = f_last = eval_extpoly_impf(E, coefs, p1, d, a1)
 *         dz = - f / eval_extpoly_grad(E, coefs, p1, d, a1)             # <<<<<<<<<<<<<<
 * 
 *         #### If we've not converged after 100 iterations, then it ain't going converge ever.
 */
  __pyx_v_dz = ((-__pyx_v_f) / __pyx_f_7raypier_4core_6cfaces_eval_extpoly_grad(__pyx_v_E, __pyx_v_coefs, __pyx_v_p1, __pyx_v_d, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":2101
 * 
 *         #### If we've not converged after 100 iterations, then it ain't going converge ever.
 *         for i in range(100):             # <<<<<<<<<<<<<<
 *             a1 += dz
 *             if dz*dz < tol:
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 0x64; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "raypier/core/cfaces.pyx":2102
 *         #### If we've not converged after 100 iterations, then it ain't going converge ever.
 *         for i in range(100):
 *             a1 += dz             # <<<<<<<<<<<<<<
 *             if dz*dz < tol:
 *                 break
 */
    __pyx_v_a1 = (__pyx_v_a1 + __pyx_v_dz);

    /* "raypier/core/cfaces.pyx":2103
 *         for i in range(100):
 *             a1 += dz
 *             if dz*dz < tol:             # <<<<<<<<<<<<<<
 *                 break
 *             f = eval_extpoly_impf(E, coefs, p1, d, a1)
 */
    __pyx_t_5 = (((__pyx_v_dz * __pyx_v_dz) < __pyx_v_tol) != 0);
    if (__pyx_t_5) {

      /* "raypier/core/cfaces.pyx":2104
 *             a1 += dz
 *             if dz*dz < tol:
 *                 break             # <<<<<<<<<<<<<<
 *             f = eval_extpoly_impf(E, coefs, p1, d, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging
 */
      goto __pyx_L4_break;

      /* "raypier/core/cfaces.pyx":2103
 *         for i in range(100):
 *             a1 += dz
 *             if dz*dz < tol:             # <<<<<<<<<<<<<<
 *                 break
 *             f = eval_extpoly_impf(E, coefs, p1, d, a1)
 */
    }

    /* "raypier/core/cfaces.pyx":2105
 *             if dz*dz < tol:
 *                 break
 *             f = eval_extpoly_impf(E, coefs, p1, d, a1)             # <<<<<<<<<<<<<<
 *             if fabs(f) > fabs(f_last): #We're not converging
 *                 return NO_INTERSECTION
 */
    __pyx_v_f = __pyx_f_7raypier_4core_6cfaces_eval_extpoly_impf(__pyx_v_E, __pyx_v_coefs, __pyx_v_p1, __pyx_v_d, __pyx_v_a1);

    /* "raypier/core/cfaces.pyx":2106
 *                 break
 *             f = eval_extpoly_impf(E, coefs, p1, d, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             f_last = f
 */
    __pyx_t_5 = ((fabs(__pyx_v_f) > fabs(__pyx_v_f_last)) != 0);
    if (__pyx_t_5) {

      /* "raypier/core/cfaces.pyx":2107
 *             f = eval_extpoly_impf(E, coefs, p1, d, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging
 *                 return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *             f_last = f
 *             dz = - f / eval_extpoly_grad(E, coefs, p1, d, a1)
 */
      __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
      goto __pyx_L0;

      /* "raypier/core/cfaces.pyx":2106
 *                 break
 *             f = eval_extpoly_impf(E, coefs, p1, d, a1)
 *             if fabs(f) > fabs(f_last): #We're not converging             # <<<<<<<<<<<<<<
 *                 return NO_INTERSECTION
 *             f_last = f
 */
    }

    /* "raypier/core/cfaces.pyx":2108
 *             if fabs(f) > fabs(f_last): #We're not converging
 *                 return NO_INTERSECTION
 *             f_last = f             # <<<<<<<<<<<<<<
 *             dz = - f / eval_extpoly_grad(E, coefs, p1, d, a1)
 *         else:
 */
    __pyx_v_f_last = __pyx_v_f;

    /* "raypier/core/cfaces.pyx":2109
 *                 return NO_INTERSECTION
 *             f_last = f
 *             dz = - f / eval_extpoly_grad(E, coefs, p1, d, a1)             # <<<<<<<<<<<<<<
 *         else:
 *             return NO_INTERSECTION
 */
    __pyx_v_dz = ((-__pyx_v_f) / __pyx_f_7raypier_4core_6cfaces_eval_extpoly_grad(__pyx_v_E, __pyx_v_coefs, __pyx_v_p1, __pyx_v_d, __pyx_v_a1));
  }
  /*else*/ {

    /* "raypier/core/cfaces.pyx":2111
 *             dz = - f / eval_extpoly_grad(E, coefs, p1, d, a1)
 *         else:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         pt1 = addvv_(a, multvs_(d, a1))        # check if inside shape.
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;
  }
  __pyx_L4_break:;

  /* "raypier/core/cfaces.pyx":2113
 *             return NO_INTERSECTION
 * 
 *         pt1 = addvv_(a, multvs_(d, a1))        # check if inside shape.             # <<<<<<<<<<<<<<
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_a, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, __pyx_v_a1));

  /* "raypier/core/cfaces.pyx":2115
 *         pt1 = addvv_(a, multvs_(d, a1))        # check if inside shape.
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_6 = (__pyx_v_is_base_ray != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_6 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape)->__pyx_vtab)->point_inside_c(((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_v_self->__pyx_base.shape), __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_5) {

    /* "raypier/core/cfaces.pyx":2116
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         if a1>1.0 or a1<self.tolerance:
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":2115
 *         pt1 = addvv_(a, multvs_(d, a1))        # check if inside shape.
 * 
 *         if is_base_ray and not (<Shape>(self.shape)).point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":2118
 *             return NO_INTERSECTION
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  __pyx_t_6 = ((__pyx_v_a1 > 1.0) != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_a1 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_5) {

    /* "raypier/core/cfaces.pyx":2119
 * 
 *         if a1>1.0 or a1<self.tolerance:
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         out.dist = a1 * sep_(p1, p2)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":2118
 *             return NO_INTERSECTION
 * 
 *         if a1>1.0 or a1<self.tolerance:             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":2121
 *             return NO_INTERSECTION
 * 
 *         out.dist = a1 * sep_(p1, p2)             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out.dist = (__pyx_v_a1 * __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p1, __pyx_v_p2));

  /* "raypier/core/cfaces.pyx":2122
 * 
 *         out.dist = a1 * sep_(p1, p2)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2071
 * 
 *      # a line-surface intersection
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         """Intersects the given ray with this face.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 1);
  __Pyx_WriteUnraisable("raypier.core.cfaces.ExtendedPolynomialFace.intersect_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_coefs, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2124
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, CYTHON_UNUSED int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_v_EP;
  double __pyx_v_R;
  double __pyx_v_beta;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_g;
  int __pyx_v_sign;
  double __pyx_v_inv_rad;
  double __pyx_v_x;
  double __pyx_v_y;
  __Pyx_memviewslice __pyx_v_E = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_Nx;
  int __pyx_v_Ny;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":2129
 *         """
 *         cdef:
 *             extpoly_t EP = self.ext_poly             # <<<<<<<<<<<<<<
 *             double R = EP.R
 *             double beta = EP.beta
 */
  __pyx_t_1 = __pyx_v_self->ext_poly;
  __pyx_v_EP = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":2130
 *         cdef:
 *             extpoly_t EP = self.ext_poly
 *             double R = EP.R             # <<<<<<<<<<<<<<
 *             double beta = EP.beta
 *             vector_t g #output gradient vector
 */
  __pyx_t_2 = __pyx_v_EP.R;
  __pyx_v_R = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":2131
 *             extpoly_t EP = self.ext_poly
 *             double R = EP.R
 *             double beta = EP.beta             # <<<<<<<<<<<<<<
 *             vector_t g #output gradient vector
 *             int sign = -1 if self.invert_normals else 1
 */
  __pyx_t_2 = __pyx_v_EP.beta;
  __pyx_v_beta = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":2133
 *             double beta = EP.beta
 *             vector_t g #output gradient vector
 *             int sign = -1 if self.invert_normals else 1             # <<<<<<<<<<<<<<
 *             double inv_rad = 1./EP.norm_radius
 *             double x = p.x * inv_rad
 */
  if ((__pyx_v_self->__pyx_base.invert_normals != 0)) {
    __pyx_t_3 = -1;
  } else {
    __pyx_t_3 = 1;
  }
  __pyx_v_sign = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":2134
 *             vector_t g #output gradient vector
 *             int sign = -1 if self.invert_normals else 1
 *             double inv_rad = 1./EP.norm_radius             # <<<<<<<<<<<<<<
 *             double x = p.x * inv_rad
 *             double y = p.y * inv_rad
 */
  __pyx_v_inv_rad = (1. / __pyx_v_EP.norm_radius);

  /* "raypier/core/cfaces.pyx":2135
 *             int sign = -1 if self.invert_normals else 1
 *             double inv_rad = 1./EP.norm_radius
 *             double x = p.x * inv_rad             # <<<<<<<<<<<<<<
 *             double y = p.y * inv_rad
 *             double[:,:] E = self._coefs
 */
  __pyx_v_x = (__pyx_v_p.x * __pyx_v_inv_rad);

  /* "raypier/core/cfaces.pyx":2136
 *             double inv_rad = 1./EP.norm_radius
 *             double x = p.x * inv_rad
 *             double y = p.y * inv_rad             # <<<<<<<<<<<<<<
 *             double[:,:] E = self._coefs
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]
 */
  __pyx_v_y = (__pyx_v_p.y * __pyx_v_inv_rad);

  /* "raypier/core/cfaces.pyx":2137
 *             double x = p.x * inv_rad
 *             double y = p.y * inv_rad
 *             double[:,:] E = self._coefs             # <<<<<<<<<<<<<<
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 */
  if (unlikely(!__pyx_v_self->_coefs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2137, __pyx_L1_error)}
  __pyx_t_4 = __pyx_v_self->_coefs;
  __PYX_INC_MEMVIEW(&__pyx_t_4, 1);
  __pyx_v_E = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "raypier/core/cfaces.pyx":2138
 *             double y = p.y * inv_rad
 *             double[:,:] E = self._coefs
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]             # <<<<<<<<<<<<<<
 * 
 *         p.z -= EP.z_height
 */
  __pyx_v_Nx = (__pyx_v_E.shape[0]);
  __pyx_v_Ny = (__pyx_v_E.shape[1]);

  /* "raypier/core/cfaces.pyx":2140
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 *         p.z -= EP.z_height             # <<<<<<<<<<<<<<
 * 
 *          # compute gradient of conic
 */
  __pyx_v_p.z = (__pyx_v_p.z - __pyx_v_EP.z_height);

  /* "raypier/core/cfaces.pyx":2144
 *          # compute gradient of conic
 *          # in pyrate: gradient = np.vstack((-curv * x, -curv * y, 1. - curv * z * (1 + cc)))
 *         g.z = 2*beta*(R-beta*p.z)             # <<<<<<<<<<<<<<
 *         g.x = - p.x * 2 * beta        # why 2? --> see: notebook "Raytracing Aspheric Lens.iynb"
 *         g.y = - p.y * 2 * beta
 */
  __pyx_v_g.z = ((2.0 * __pyx_v_beta) * (__pyx_v_R - (__pyx_v_beta * __pyx_v_p.z)));

  /* "raypier/core/cfaces.pyx":2145
 *          # in pyrate: gradient = np.vstack((-curv * x, -curv * y, 1. - curv * z * (1 + cc)))
 *         g.z = 2*beta*(R-beta*p.z)
 *         g.x = - p.x * 2 * beta        # why 2? --> see: notebook "Raytracing Aspheric Lens.iynb"             # <<<<<<<<<<<<<<
 *         g.y = - p.y * 2 * beta
 * 
 */
  __pyx_v_g.x = (((-__pyx_v_p.x) * 2.0) * __pyx_v_beta);

  /* "raypier/core/cfaces.pyx":2146
 *         g.z = 2*beta*(R-beta*p.z)
 *         g.x = - p.x * 2 * beta        # why 2? --> see: notebook "Raytracing Aspheric Lens.iynb"
 *         g.y = - p.y * 2 * beta             # <<<<<<<<<<<<<<
 * 
 *         if (R*beta) < 0:
 */
  __pyx_v_g.y = (((-__pyx_v_p.y) * 2.0) * __pyx_v_beta);

  /* "raypier/core/cfaces.pyx":2148
 *         g.y = - p.y * 2 * beta
 * 
 *         if (R*beta) < 0:             # <<<<<<<<<<<<<<
 *             sign *= -1
 * 
 */
  __pyx_t_5 = (((__pyx_v_R * __pyx_v_beta) < 0.0) != 0);
  if (__pyx_t_5) {

    /* "raypier/core/cfaces.pyx":2149
 * 
 *         if (R*beta) < 0:
 *             sign *= -1             # <<<<<<<<<<<<<<
 * 
 *         g.z *= sign
 */
    __pyx_v_sign = (__pyx_v_sign * -1L);

    /* "raypier/core/cfaces.pyx":2148
 *         g.y = - p.y * 2 * beta
 * 
 *         if (R*beta) < 0:             # <<<<<<<<<<<<<<
 *             sign *= -1
 * 
 */
  }

  /* "raypier/core/cfaces.pyx":2151
 *             sign *= -1
 * 
 *         g.z *= sign             # <<<<<<<<<<<<<<
 *         g.y *= sign
 *         g.x *= sign
 */
  __pyx_v_g.z = (__pyx_v_g.z * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":2152
 * 
 *         g.z *= sign
 *         g.y *= sign             # <<<<<<<<<<<<<<
 *         g.x *= sign
 * 
 */
  __pyx_v_g.y = (__pyx_v_g.y * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":2153
 *         g.z *= sign
 *         g.y *= sign
 *         g.x *= sign             # <<<<<<<<<<<<<<
 * 
 *         g = norm_(g)
 */
  __pyx_v_g.x = (__pyx_v_g.x * __pyx_v_sign);

  /* "raypier/core/cfaces.pyx":2155
 *         g.x *= sign
 * 
 *         g = norm_(g)             # <<<<<<<<<<<<<<
 * 
 *         if self.invert_normals:
 */
  __pyx_v_g = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_g);

  /* "raypier/core/cfaces.pyx":2157
 *         g = norm_(g)
 * 
 *         if self.invert_normals:             # <<<<<<<<<<<<<<
 *             for i in range(1,Nx):
 *                 for j in range(Ny):
 */
  __pyx_t_5 = (__pyx_v_self->__pyx_base.invert_normals != 0);
  if (__pyx_t_5) {

    /* "raypier/core/cfaces.pyx":2158
 * 
 *         if self.invert_normals:
 *             for i in range(1,Nx):             # <<<<<<<<<<<<<<
 *                 for j in range(Ny):
 *                     g.x += i*E[i,j]*inv_rad*(x**(i-1))*(y**j)
 */
    __pyx_t_3 = __pyx_v_Nx;
    __pyx_t_6 = __pyx_t_3;
    for (__pyx_t_7 = 1; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "raypier/core/cfaces.pyx":2159
 *         if self.invert_normals:
 *             for i in range(1,Nx):
 *                 for j in range(Ny):             # <<<<<<<<<<<<<<
 *                     g.x += i*E[i,j]*inv_rad*(x**(i-1))*(y**j)
 * 
 */
      __pyx_t_8 = __pyx_v_Ny;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_j = __pyx_t_10;

        /* "raypier/core/cfaces.pyx":2160
 *             for i in range(1,Nx):
 *                 for j in range(Ny):
 *                     g.x += i*E[i,j]*inv_rad*(x**(i-1))*(y**j)             # <<<<<<<<<<<<<<
 * 
 *             for i in range(Nx):
 */
        __pyx_t_11 = __pyx_v_i;
        __pyx_t_12 = __pyx_v_j;
        if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_E.shape[0];
        if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_E.shape[1];
        __pyx_v_g.x = (__pyx_v_g.x + ((((__pyx_v_i * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_11 * __pyx_v_E.strides[0]) ) + __pyx_t_12 * __pyx_v_E.strides[1]) )))) * __pyx_v_inv_rad) * pow(__pyx_v_x, ((double)(__pyx_v_i - 1)))) * pow(__pyx_v_y, ((double)__pyx_v_j))));
      }
    }

    /* "raypier/core/cfaces.pyx":2162
 *                     g.x += i*E[i,j]*inv_rad*(x**(i-1))*(y**j)
 * 
 *             for i in range(Nx):             # <<<<<<<<<<<<<<
 *                 for j in range(1,Ny):
 *                     g.y += j*E[i,j]*inv_rad*(x**i)*(y**(j-1))
 */
    __pyx_t_3 = __pyx_v_Nx;
    __pyx_t_6 = __pyx_t_3;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "raypier/core/cfaces.pyx":2163
 * 
 *             for i in range(Nx):
 *                 for j in range(1,Ny):             # <<<<<<<<<<<<<<
 *                     g.y += j*E[i,j]*inv_rad*(x**i)*(y**(j-1))
 *         else:
 */
      __pyx_t_8 = __pyx_v_Ny;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_j = __pyx_t_10;

        /* "raypier/core/cfaces.pyx":2164
 *             for i in range(Nx):
 *                 for j in range(1,Ny):
 *                     g.y += j*E[i,j]*inv_rad*(x**i)*(y**(j-1))             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(1,Nx):
 */
        __pyx_t_12 = __pyx_v_i;
        __pyx_t_11 = __pyx_v_j;
        if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_E.shape[0];
        if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_E.shape[1];
        __pyx_v_g.y = (__pyx_v_g.y + ((((__pyx_v_j * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_12 * __pyx_v_E.strides[0]) ) + __pyx_t_11 * __pyx_v_E.strides[1]) )))) * __pyx_v_inv_rad) * pow(__pyx_v_x, ((double)__pyx_v_i))) * pow(__pyx_v_y, ((double)(__pyx_v_j - 1)))));
      }
    }

    /* "raypier/core/cfaces.pyx":2157
 *         g = norm_(g)
 * 
 *         if self.invert_normals:             # <<<<<<<<<<<<<<
 *             for i in range(1,Nx):
 *                 for j in range(Ny):
 */
    goto __pyx_L4;
  }

  /* "raypier/core/cfaces.pyx":2166
 *                     g.y += j*E[i,j]*inv_rad*(x**i)*(y**(j-1))
 *         else:
 *             for i in range(1,Nx):             # <<<<<<<<<<<<<<
 *                 for j in range(Ny):
 *                     g.x -= i*E[i,j]*inv_rad*(x**(i-1))*(y**j)
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_Nx;
    __pyx_t_6 = __pyx_t_3;
    for (__pyx_t_7 = 1; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "raypier/core/cfaces.pyx":2167
 *         else:
 *             for i in range(1,Nx):
 *                 for j in range(Ny):             # <<<<<<<<<<<<<<
 *                     g.x -= i*E[i,j]*inv_rad*(x**(i-1))*(y**j)
 * 
 */
      __pyx_t_8 = __pyx_v_Ny;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_j = __pyx_t_10;

        /* "raypier/core/cfaces.pyx":2168
 *             for i in range(1,Nx):
 *                 for j in range(Ny):
 *                     g.x -= i*E[i,j]*inv_rad*(x**(i-1))*(y**j)             # <<<<<<<<<<<<<<
 * 
 *             for i in range(Nx):
 */
        __pyx_t_11 = __pyx_v_i;
        __pyx_t_12 = __pyx_v_j;
        if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_E.shape[0];
        if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_E.shape[1];
        __pyx_v_g.x = (__pyx_v_g.x - ((((__pyx_v_i * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_11 * __pyx_v_E.strides[0]) ) + __pyx_t_12 * __pyx_v_E.strides[1]) )))) * __pyx_v_inv_rad) * pow(__pyx_v_x, ((double)(__pyx_v_i - 1)))) * pow(__pyx_v_y, ((double)__pyx_v_j))));
      }
    }

    /* "raypier/core/cfaces.pyx":2170
 *                     g.x -= i*E[i,j]*inv_rad*(x**(i-1))*(y**j)
 * 
 *             for i in range(Nx):             # <<<<<<<<<<<<<<
 *                 for j in range(1,Ny):
 *                     g.y -= j*E[i,j]*inv_rad*(x**i)*(y**(j-1))
 */
    __pyx_t_3 = __pyx_v_Nx;
    __pyx_t_6 = __pyx_t_3;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "raypier/core/cfaces.pyx":2171
 * 
 *             for i in range(Nx):
 *                 for j in range(1,Ny):             # <<<<<<<<<<<<<<
 *                     g.y -= j*E[i,j]*inv_rad*(x**i)*(y**(j-1))
 * 
 */
      __pyx_t_8 = __pyx_v_Ny;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 1; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_j = __pyx_t_10;

        /* "raypier/core/cfaces.pyx":2172
 *             for i in range(Nx):
 *                 for j in range(1,Ny):
 *                     g.y -= j*E[i,j]*inv_rad*(x**i)*(y**(j-1))             # <<<<<<<<<<<<<<
 * 
 *         #g.z += 1
 */
        __pyx_t_12 = __pyx_v_i;
        __pyx_t_11 = __pyx_v_j;
        if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_v_E.shape[0];
        if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_E.shape[1];
        __pyx_v_g.y = (__pyx_v_g.y - ((((__pyx_v_j * (*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_12 * __pyx_v_E.strides[0]) ) + __pyx_t_11 * __pyx_v_E.strides[1]) )))) * __pyx_v_inv_rad) * pow(__pyx_v_x, ((double)__pyx_v_i))) * pow(__pyx_v_y, ((double)(__pyx_v_j - 1)))));
      }
    }
  }
  __pyx_L4:;

  /* "raypier/core/cfaces.pyx":2176
 *         #g.z += 1
 * 
 *         return norm_(g)  # normalized to length 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_g);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2124
 *         return out
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         """Compute the surface normal in local coordinates,
 *         given a point on the surface (also in local coords).
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_WriteUnraisable("raypier.core.cfaces.ExtendedPolynomialFace.compute_normal_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_E, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2179
 * 
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double out
 */

static double __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  double __pyx_v_out;
  double __pyx_v_r2;
  struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_v_EP;
  double __pyx_v_R;
  __Pyx_memviewslice __pyx_v_E = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_Nx;
  int __pyx_v_Ny;
  double __pyx_r;
  struct __pyx_t_7raypier_4core_6cfaces_extpoly_t __pyx_t_1;
  __Pyx_memviewslice __pyx_t_2 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "raypier/core/cfaces.pyx":2182
 *         cdef:
 *             double out
 *             double r2 = (x*x) + (y*y)             # <<<<<<<<<<<<<<
 *             extpoly_t EP = self.ext_poly
 *             double R = -EP.R
 */
  __pyx_v_r2 = ((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y));

  /* "raypier/core/cfaces.pyx":2183
 *             double out
 *             double r2 = (x*x) + (y*y)
 *             extpoly_t EP = self.ext_poly             # <<<<<<<<<<<<<<
 *             double R = -EP.R
 *             double[:,:] E = self._coefs
 */
  __pyx_t_1 = __pyx_v_self->ext_poly;
  __pyx_v_EP = __pyx_t_1;

  /* "raypier/core/cfaces.pyx":2184
 *             double r2 = (x*x) + (y*y)
 *             extpoly_t EP = self.ext_poly
 *             double R = -EP.R             # <<<<<<<<<<<<<<
 *             double[:,:] E = self._coefs
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]
 */
  __pyx_v_R = (-__pyx_v_EP.R);

  /* "raypier/core/cfaces.pyx":2185
 *             extpoly_t EP = self.ext_poly
 *             double R = -EP.R
 *             double[:,:] E = self._coefs             # <<<<<<<<<<<<<<
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 */
  if (unlikely(!__pyx_v_self->_coefs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2185, __pyx_L1_error)}
  __pyx_t_2 = __pyx_v_self->_coefs;
  __PYX_INC_MEMVIEW(&__pyx_t_2, 0);
  __pyx_v_E = __pyx_t_2;
  __pyx_t_2.memview = NULL;
  __pyx_t_2.data = NULL;

  /* "raypier/core/cfaces.pyx":2186
 *             double R = -EP.R
 *             double[:,:] E = self._coefs
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]             # <<<<<<<<<<<<<<
 * 
 *         x = x/EP.norm_radius
 */
  __pyx_v_Nx = (__pyx_v_E.shape[0]);
  __pyx_v_Ny = (__pyx_v_E.shape[1]);

  /* "raypier/core/cfaces.pyx":2188
 *             int i,j, Nx=E.shape[0], Ny=E.shape[1]
 * 
 *         x = x/EP.norm_radius             # <<<<<<<<<<<<<<
 *         y = y/EP.norm_radius
 * 
 */
  __pyx_v_x = (__pyx_v_x / __pyx_v_EP.norm_radius);

  /* "raypier/core/cfaces.pyx":2189
 * 
 *         x = x/EP.norm_radius
 *         y = y/EP.norm_radius             # <<<<<<<<<<<<<<
 * 
 *         out = -r2
 */
  __pyx_v_y = (__pyx_v_y / __pyx_v_EP.norm_radius);

  /* "raypier/core/cfaces.pyx":2191
 *         y = y/EP.norm_radius
 * 
 *         out = -r2             # <<<<<<<<<<<<<<
 *         if R>=0.0:
 *             out /= (R + sqrt(R*R - (EP.beta)*r2) )
 */
  __pyx_v_out = (-__pyx_v_r2);

  /* "raypier/core/cfaces.pyx":2192
 * 
 *         out = -r2
 *         if R>=0.0:             # <<<<<<<<<<<<<<
 *             out /= (R + sqrt(R*R - (EP.beta)*r2) )
 *         else:
 */
  __pyx_t_3 = ((__pyx_v_R >= 0.0) != 0);
  if (__pyx_t_3) {

    /* "raypier/core/cfaces.pyx":2193
 *         out = -r2
 *         if R>=0.0:
 *             out /= (R + sqrt(R*R - (EP.beta)*r2) )             # <<<<<<<<<<<<<<
 *         else:
 *             out /= (R - sqrt(R*R - (EP.beta)*r2) )
 */
    __pyx_v_out = (__pyx_v_out / (__pyx_v_R + sqrt(((__pyx_v_R * __pyx_v_R) - (__pyx_v_EP.beta * __pyx_v_r2)))));

    /* "raypier/core/cfaces.pyx":2192
 * 
 *         out = -r2
 *         if R>=0.0:             # <<<<<<<<<<<<<<
 *             out /= (R + sqrt(R*R - (EP.beta)*r2) )
 *         else:
 */
    goto __pyx_L3;
  }

  /* "raypier/core/cfaces.pyx":2195
 *             out /= (R + sqrt(R*R - (EP.beta)*r2) )
 *         else:
 *             out /= (R - sqrt(R*R - (EP.beta)*r2) )             # <<<<<<<<<<<<<<
 * 
 *         for i in range(Nx):
 */
  /*else*/ {
    __pyx_v_out = (__pyx_v_out / (__pyx_v_R - sqrt(((__pyx_v_R * __pyx_v_R) - (__pyx_v_EP.beta * __pyx_v_r2)))));
  }
  __pyx_L3:;

  /* "raypier/core/cfaces.pyx":2197
 *             out /= (R - sqrt(R*R - (EP.beta)*r2) )
 * 
 *         for i in range(Nx):             # <<<<<<<<<<<<<<
 *             for j in range(Ny):
 *                 out += E[i,j]*(x**i)*(y**j)
 */
  __pyx_t_4 = __pyx_v_Nx;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "raypier/core/cfaces.pyx":2198
 * 
 *         for i in range(Nx):
 *             for j in range(Ny):             # <<<<<<<<<<<<<<
 *                 out += E[i,j]*(x**i)*(y**j)
 * 
 */
    __pyx_t_7 = __pyx_v_Ny;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "raypier/core/cfaces.pyx":2199
 *         for i in range(Nx):
 *             for j in range(Ny):
 *                 out += E[i,j]*(x**i)*(y**j)             # <<<<<<<<<<<<<<
 * 
 *         out += EP.z_height
 */
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      if (__pyx_t_10 < 0) __pyx_t_10 += __pyx_v_E.shape[0];
      if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_v_E.shape[1];
      __pyx_v_out = (__pyx_v_out + (((*((double *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_E.data + __pyx_t_10 * __pyx_v_E.strides[0]) ) + __pyx_t_11 * __pyx_v_E.strides[1]) ))) * pow(__pyx_v_x, ((double)__pyx_v_i))) * pow(__pyx_v_y, ((double)__pyx_v_j))));
    }
  }

  /* "raypier/core/cfaces.pyx":2201
 *                 out += E[i,j]*(x**i)*(y**j)
 * 
 *         out += EP.z_height             # <<<<<<<<<<<<<<
 *         return out
 * 
 */
  __pyx_v_out = (__pyx_v_out + __pyx_v_EP.z_height);

  /* "raypier/core/cfaces.pyx":2202
 * 
 *         out += EP.z_height
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2179
 * 
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double out
 */

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_2, 0);
  __Pyx_WriteUnraisable("raypier.core.cfaces.ExtendedPolynomialFace.eval_z_c", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_E, 0);
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2204
 *         return out
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

static double __pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_eval_implicit_c(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":2205
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:
 *         return z - self.eval_z_c(x,y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_z - ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.eval_z_c(((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self), __pyx_v_x, __pyx_v_y));
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2204
 *         return out
 * 
 *     cdef double eval_implicit_c(self, double x, double y, double z) nogil:             # <<<<<<<<<<<<<<
 *         return z - self.eval_z_c(x,y)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_22ExtendedPolynomialFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.ExtendedPolynomialFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2217
 *         public double accuracy
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         face = kwds.get("base_face")
 *         self.base_face = face
 */

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwds = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __pyx_v_kwds = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwds)) return -1;
  __Pyx_GOTREF(__pyx_v_kwds);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace___cinit__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self), __pyx_v_kwds);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwds);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace___cinit__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_kwds) {
  PyObject *__pyx_v_face = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "raypier/core/cfaces.pyx":2218
 * 
 *     def __cinit__(self, **kwds):
 *         face = kwds.get("base_face")             # <<<<<<<<<<<<<<
 *         self.base_face = face
 *         self.distortion = kwds.get("distortion")
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_base_face, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_face = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2219
 *     def __cinit__(self, **kwds):
 *         face = kwds.get("base_face")
 *         self.base_face = face             # <<<<<<<<<<<<<<
 *         self.distortion = kwds.get("distortion")
 *         self.shape = kwds.get('shape', face.shape)
 */
  if (!(likely(((__pyx_v_face) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_face, __pyx_ptype_7raypier_4core_6cfaces_ShapedFace))))) __PYX_ERR(0, 2219, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_face;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->base_face);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->base_face));
  __pyx_v_self->base_face = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2220
 *         face = kwds.get("base_face")
 *         self.base_face = face
 *         self.distortion = kwds.get("distortion")             # <<<<<<<<<<<<<<
 *         self.shape = kwds.get('shape', face.shape)
 *         self.accuracy = kwds.get("accuracy", 1e-6)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_distortion, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_7raypier_4core_7ctracer_Distortion))))) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->distortion);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->distortion));
  __pyx_v_self->distortion = ((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2221
 *         self.base_face = face
 *         self.distortion = kwds.get("distortion")
 *         self.shape = kwds.get('shape', face.shape)             # <<<<<<<<<<<<<<
 *         self.accuracy = kwds.get("accuracy", 1e-6)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_face, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_shape, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7raypier_4core_7ctracer_Shape))))) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.shape);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx_base.shape));
  __pyx_v_self->__pyx_base.shape = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/cfaces.pyx":2222
 *         self.distortion = kwds.get("distortion")
 *         self.shape = kwds.get('shape', face.shape)
 *         self.accuracy = kwds.get("accuracy", 1e-6)             # <<<<<<<<<<<<<<
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 */
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwds, __pyx_n_u_accuracy, __pyx_float_1eneg_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->accuracy = __pyx_t_3;

  /* "raypier/core/cfaces.pyx":2217
 *         public double accuracy
 * 
 *     def __cinit__(self, **kwds):             # <<<<<<<<<<<<<<
 *         face = kwds.get("base_face")
 *         self.base_face = face
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("raypier.core.cfaces.DistortionFace.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_face);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2224
 *         self.accuracy = kwds.get("accuracy", 1e-6)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ShapedFace face=self.base_face
 */

static struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_f_7raypier_4core_6cfaces_14DistortionFace_intersect_c(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p2, CYTHON_UNUSED int __pyx_v_is_base_ray) {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *__pyx_v_face = 0;
  double __pyx_v_z_shift;
  double __pyx_v_tolerance;
  double __pyx_v_a1;
  double __pyx_v_a2;
  double __pyx_v_h;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_dxdyz;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_pt1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_d;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_n;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_o;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_q1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_q2;
  CYTHON_UNUSED int __pyx_v_i;
  struct __pyx_obj_7raypier_4core_7ctracer_Distortion *__pyx_v_dist = 0;
  struct __pyx_obj_7raypier_4core_7ctracer_Shape *__pyx_v_shape = 0;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_v_fout;
  struct __pyx_t_7raypier_4core_7ctracer_intersect_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("intersect_c", 0);

  /* "raypier/core/cfaces.pyx":2226
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):
 *         cdef:
 *             ShapedFace face=self.base_face             # <<<<<<<<<<<<<<
 *             double z_shift=0.0, tolerance, a1, a2, h=sep_(p2,p1)
 *             vector_t dxdyz, pt1, d, n, o, q1, q2
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->base_face);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_face = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2227
 *         cdef:
 *             ShapedFace face=self.base_face
 *             double z_shift=0.0, tolerance, a1, a2, h=sep_(p2,p1)             # <<<<<<<<<<<<<<
 *             vector_t dxdyz, pt1, d, n, o, q1, q2
 *             int i
 */
  __pyx_v_z_shift = 0.0;
  __pyx_v_h = __pyx_f_7raypier_4core_7ctracer_sep_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":2230
 *             vector_t dxdyz, pt1, d, n, o, q1, q2
 *             int i
 *             Distortion dist=self.distortion             # <<<<<<<<<<<<<<
 *             Shape shape = self.shape
 *             intersect_t fout
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->distortion);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_dist = ((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2231
 *             int i
 *             Distortion dist=self.distortion
 *             Shape shape = self.shape             # <<<<<<<<<<<<<<
 *             intersect_t fout
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.shape);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_shape = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":2234
 *             intersect_t fout
 * 
 *         tolerance = self.accuracy             # <<<<<<<<<<<<<<
 * 
 *         fout = face.intersect_c(p1,p2,0) #Don't check the shape yet
 */
  __pyx_t_2 = __pyx_v_self->accuracy;
  __pyx_v_tolerance = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":2236
 *         tolerance = self.accuracy
 * 
 *         fout = face.intersect_c(p1,p2,0) #Don't check the shape yet             # <<<<<<<<<<<<<<
 *         a2 = fout.dist
 *         if a2>h or a2<self.tolerance: #If no intersection, then, no intersection
 */
  __pyx_v_fout = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_face->__pyx_base.__pyx_vtab)->__pyx_base.intersect_c(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_face), __pyx_v_p1, __pyx_v_p2, 0);

  /* "raypier/core/cfaces.pyx":2237
 * 
 *         fout = face.intersect_c(p1,p2,0) #Don't check the shape yet
 *         a2 = fout.dist             # <<<<<<<<<<<<<<
 *         if a2>h or a2<self.tolerance: #If no intersection, then, no intersection
 *             #print("NO intersection", a2, p1.z, p2.z)
 */
  __pyx_t_2 = __pyx_v_fout.dist;
  __pyx_v_a2 = __pyx_t_2;

  /* "raypier/core/cfaces.pyx":2238
 *         fout = face.intersect_c(p1,p2,0) #Don't check the shape yet
 *         a2 = fout.dist
 *         if a2>h or a2<self.tolerance: #If no intersection, then, no intersection             # <<<<<<<<<<<<<<
 *             #print("NO intersection", a2, p1.z, p2.z)
 *             return NO_INTERSECTION
 */
  __pyx_t_4 = ((__pyx_v_a2 > __pyx_v_h) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_a2 < __pyx_v_self->__pyx_base.__pyx_base.tolerance) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "raypier/core/cfaces.pyx":2240
 *         if a2>h or a2<self.tolerance: #If no intersection, then, no intersection
 *             #print("NO intersection", a2, p1.z, p2.z)
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         #print("start estimate:", a2)
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":2238
 *         fout = face.intersect_c(p1,p2,0) #Don't check the shape yet
 *         a2 = fout.dist
 *         if a2>h or a2<self.tolerance: #If no intersection, then, no intersection             # <<<<<<<<<<<<<<
 *             #print("NO intersection", a2, p1.z, p2.z)
 *             return NO_INTERSECTION
 */
  }

  /* "raypier/core/cfaces.pyx":2244
 *         #print("start estimate:", a2)
 *         #starting estimate of intersection
 *         d = subvv_(p2,p1)             # <<<<<<<<<<<<<<
 *         pt1 = addvv_(p1, multvs_(d,a2/h))
 *         dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)
 */
  __pyx_v_d = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p2, __pyx_v_p1);

  /* "raypier/core/cfaces.pyx":2245
 *         #starting estimate of intersection
 *         d = subvv_(p2,p1)
 *         pt1 = addvv_(p1, multvs_(d,a2/h))             # <<<<<<<<<<<<<<
 *         dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)
 * 
 */
  __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, (__pyx_v_a2 / __pyx_v_h)));

  /* "raypier/core/cfaces.pyx":2246
 *         d = subvv_(p2,p1)
 *         pt1 = addvv_(p1, multvs_(d,a2/h))
 *         dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)             # <<<<<<<<<<<<<<
 * 
 *         n = face.compute_normal_c(pt1, fout.piece_idx)
 */
  __pyx_v_dxdyz = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *)__pyx_v_dist->__pyx_vtab)->z_offset_and_gradient_c(__pyx_v_dist, __pyx_v_pt1.x, __pyx_v_pt1.y);

  /* "raypier/core/cfaces.pyx":2248
 *         dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)
 * 
 *         n = face.compute_normal_c(pt1, fout.piece_idx)             # <<<<<<<<<<<<<<
 *         #print("base normal:", n.x, n.y, n.z)
 *         #print("pt1:", pt1.x, pt1.y, pt1.z)
 */
  __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_face->__pyx_base.__pyx_vtab)->__pyx_base.compute_normal_c(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_face), __pyx_v_pt1, __pyx_v_fout.piece_idx);

  /* "raypier/core/cfaces.pyx":2253
 *         #print("dx:", dxdyz.x, "dy:", dxdyz.y, "z:", dxdyz.z)
 * 
 *         pt1.z += dxdyz.z             # <<<<<<<<<<<<<<
 * 
 *         n.x /= n.z
 */
  __pyx_v_pt1.z = (__pyx_v_pt1.z + __pyx_v_dxdyz.z);

  /* "raypier/core/cfaces.pyx":2255
 *         pt1.z += dxdyz.z
 * 
 *         n.x /= n.z             # <<<<<<<<<<<<<<
 *         n.y /= n.z
 *         n.x -= dxdyz.x
 */
  __pyx_v_n.x = (__pyx_v_n.x / __pyx_v_n.z);

  /* "raypier/core/cfaces.pyx":2256
 * 
 *         n.x /= n.z
 *         n.y /= n.z             # <<<<<<<<<<<<<<
 *         n.x -= dxdyz.x
 *         n.y -= dxdyz.y
 */
  __pyx_v_n.y = (__pyx_v_n.y / __pyx_v_n.z);

  /* "raypier/core/cfaces.pyx":2257
 *         n.x /= n.z
 *         n.y /= n.z
 *         n.x -= dxdyz.x             # <<<<<<<<<<<<<<
 *         n.y -= dxdyz.y
 * 
 */
  __pyx_v_n.x = (__pyx_v_n.x - __pyx_v_dxdyz.x);

  /* "raypier/core/cfaces.pyx":2258
 *         n.y /= n.z
 *         n.x -= dxdyz.x
 *         n.y -= dxdyz.y             # <<<<<<<<<<<<<<
 * 
 *         o=subvv_(p1, pt1)
 */
  __pyx_v_n.y = (__pyx_v_n.y - __pyx_v_dxdyz.y);

  /* "raypier/core/cfaces.pyx":2260
 *         n.y -= dxdyz.y
 * 
 *         o=subvv_(p1, pt1)             # <<<<<<<<<<<<<<
 *         ### Better estimate for a
 *         a1 = -h*dotprod_(o,n)/dotprod_(d,n)
 */
  __pyx_v_o = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p1, __pyx_v_pt1);

  /* "raypier/core/cfaces.pyx":2262
 *         o=subvv_(p1, pt1)
 *         ### Better estimate for a
 *         a1 = -h*dotprod_(o,n)/dotprod_(d,n)             # <<<<<<<<<<<<<<
 *         #print("better estimate", a1)
 *         if a1 < fabs(dxdyz.z):
 */
  __pyx_v_a1 = (((-__pyx_v_h) * __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_o, __pyx_v_n)) / __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_d, __pyx_v_n));

  /* "raypier/core/cfaces.pyx":2264
 *         a1 = -h*dotprod_(o,n)/dotprod_(d,n)
 *         #print("better estimate", a1)
 *         if a1 < fabs(dxdyz.z):             # <<<<<<<<<<<<<<
 *             #print("self-intersection. bailing.")
 *             return NO_INTERSECTION
 */
  __pyx_t_3 = ((__pyx_v_a1 < fabs(__pyx_v_dxdyz.z)) != 0);
  if (__pyx_t_3) {

    /* "raypier/core/cfaces.pyx":2266
 *         if a1 < fabs(dxdyz.z):
 *             #print("self-intersection. bailing.")
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 * 
 *         for i in range(20):
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":2264
 *         a1 = -h*dotprod_(o,n)/dotprod_(d,n)
 *         #print("better estimate", a1)
 *         if a1 < fabs(dxdyz.z):             # <<<<<<<<<<<<<<
 *             #print("self-intersection. bailing.")
 *             return NO_INTERSECTION
 */
  }

  /* "raypier/core/cfaces.pyx":2268
 *             return NO_INTERSECTION
 * 
 *         for i in range(20):             # <<<<<<<<<<<<<<
 *             pt1 = addvv_(p1, multvs_(d,a1/h))
 *             #print("a_error:", a1-a2, i)
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 20; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "raypier/core/cfaces.pyx":2269
 * 
 *         for i in range(20):
 *             pt1 = addvv_(p1, multvs_(d,a1/h))             # <<<<<<<<<<<<<<
 *             #print("a_error:", a1-a2, i)
 *             if fabs(a1 - a2) < tolerance:
 */
    __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_p1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, (__pyx_v_a1 / __pyx_v_h)));

    /* "raypier/core/cfaces.pyx":2271
 *             pt1 = addvv_(p1, multvs_(d,a1/h))
 *             #print("a_error:", a1-a2, i)
 *             if fabs(a1 - a2) < tolerance:             # <<<<<<<<<<<<<<
 *                 break
 *             z_shift = dist.z_offset_c(pt1.x, pt1.y)
 */
    __pyx_t_3 = ((fabs((__pyx_v_a1 - __pyx_v_a2)) < __pyx_v_tolerance) != 0);
    if (__pyx_t_3) {

      /* "raypier/core/cfaces.pyx":2272
 *             #print("a_error:", a1-a2, i)
 *             if fabs(a1 - a2) < tolerance:
 *                 break             # <<<<<<<<<<<<<<
 *             z_shift = dist.z_offset_c(pt1.x, pt1.y)
 * 
 */
      goto __pyx_L8_break;

      /* "raypier/core/cfaces.pyx":2271
 *             pt1 = addvv_(p1, multvs_(d,a1/h))
 *             #print("a_error:", a1-a2, i)
 *             if fabs(a1 - a2) < tolerance:             # <<<<<<<<<<<<<<
 *                 break
 *             z_shift = dist.z_offset_c(pt1.x, pt1.y)
 */
    }

    /* "raypier/core/cfaces.pyx":2273
 *             if fabs(a1 - a2) < tolerance:
 *                 break
 *             z_shift = dist.z_offset_c(pt1.x, pt1.y)             # <<<<<<<<<<<<<<
 * 
 *             q1 = p1
 */
    __pyx_v_z_shift = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *)__pyx_v_dist->__pyx_vtab)->z_offset_c(__pyx_v_dist, __pyx_v_pt1.x, __pyx_v_pt1.y);

    /* "raypier/core/cfaces.pyx":2275
 *             z_shift = dist.z_offset_c(pt1.x, pt1.y)
 * 
 *             q1 = p1             # <<<<<<<<<<<<<<
 *             q2 = p2
 *             q1.z -= z_shift
 */
    __pyx_v_q1 = __pyx_v_p1;

    /* "raypier/core/cfaces.pyx":2276
 * 
 *             q1 = p1
 *             q2 = p2             # <<<<<<<<<<<<<<
 *             q1.z -= z_shift
 *             q2.z -= z_shift
 */
    __pyx_v_q2 = __pyx_v_p2;

    /* "raypier/core/cfaces.pyx":2277
 *             q1 = p1
 *             q2 = p2
 *             q1.z -= z_shift             # <<<<<<<<<<<<<<
 *             q2.z -= z_shift
 *             fout = face.intersect_c(q1, q2, 0)
 */
    __pyx_v_q1.z = (__pyx_v_q1.z - __pyx_v_z_shift);

    /* "raypier/core/cfaces.pyx":2278
 *             q2 = p2
 *             q1.z -= z_shift
 *             q2.z -= z_shift             # <<<<<<<<<<<<<<
 *             fout = face.intersect_c(q1, q2, 0)
 *             a2 = fout.dist
 */
    __pyx_v_q2.z = (__pyx_v_q2.z - __pyx_v_z_shift);

    /* "raypier/core/cfaces.pyx":2279
 *             q1.z -= z_shift
 *             q2.z -= z_shift
 *             fout = face.intersect_c(q1, q2, 0)             # <<<<<<<<<<<<<<
 *             a2 = fout.dist
 * 
 */
    __pyx_v_fout = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_face->__pyx_base.__pyx_vtab)->__pyx_base.intersect_c(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_face), __pyx_v_q1, __pyx_v_q2, 0);

    /* "raypier/core/cfaces.pyx":2280
 *             q2.z -= z_shift
 *             fout = face.intersect_c(q1, q2, 0)
 *             a2 = fout.dist             # <<<<<<<<<<<<<<
 * 
 *             pt1 = addvv_(q1, multvs_(d,a2/h)) #this point on base
 */
    __pyx_t_2 = __pyx_v_fout.dist;
    __pyx_v_a2 = __pyx_t_2;

    /* "raypier/core/cfaces.pyx":2282
 *             a2 = fout.dist
 * 
 *             pt1 = addvv_(q1, multvs_(d,a2/h)) #this point on base             # <<<<<<<<<<<<<<
 *             n = face.compute_normal_c(pt1, fout.piece_idx)
 *             dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)
 */
    __pyx_v_pt1 = __pyx_f_7raypier_4core_7ctracer_addvv_(__pyx_v_q1, __pyx_f_7raypier_4core_7ctracer_multvs_(__pyx_v_d, (__pyx_v_a2 / __pyx_v_h)));

    /* "raypier/core/cfaces.pyx":2283
 * 
 *             pt1 = addvv_(q1, multvs_(d,a2/h)) #this point on base
 *             n = face.compute_normal_c(pt1, fout.piece_idx)             # <<<<<<<<<<<<<<
 *             dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)
 *             pt1.z += dxdyz.z #move to distorted face
 */
    __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_face->__pyx_base.__pyx_vtab)->__pyx_base.compute_normal_c(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_face), __pyx_v_pt1, __pyx_v_fout.piece_idx);

    /* "raypier/core/cfaces.pyx":2284
 *             pt1 = addvv_(q1, multvs_(d,a2/h)) #this point on base
 *             n = face.compute_normal_c(pt1, fout.piece_idx)
 *             dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)             # <<<<<<<<<<<<<<
 *             pt1.z += dxdyz.z #move to distorted face
 * 
 */
    __pyx_v_dxdyz = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *)__pyx_v_dist->__pyx_vtab)->z_offset_and_gradient_c(__pyx_v_dist, __pyx_v_pt1.x, __pyx_v_pt1.y);

    /* "raypier/core/cfaces.pyx":2285
 *             n = face.compute_normal_c(pt1, fout.piece_idx)
 *             dxdyz = dist.z_offset_and_gradient_c(pt1.x, pt1.y)
 *             pt1.z += dxdyz.z #move to distorted face             # <<<<<<<<<<<<<<
 * 
 *             n.x /= n.z
 */
    __pyx_v_pt1.z = (__pyx_v_pt1.z + __pyx_v_dxdyz.z);

    /* "raypier/core/cfaces.pyx":2287
 *             pt1.z += dxdyz.z #move to distorted face
 * 
 *             n.x /= n.z             # <<<<<<<<<<<<<<
 *             n.y /= n.z
 *             n.x -= dxdyz.x
 */
    __pyx_v_n.x = (__pyx_v_n.x / __pyx_v_n.z);

    /* "raypier/core/cfaces.pyx":2288
 * 
 *             n.x /= n.z
 *             n.y /= n.z             # <<<<<<<<<<<<<<
 *             n.x -= dxdyz.x
 *             n.y -= dxdyz.y
 */
    __pyx_v_n.y = (__pyx_v_n.y / __pyx_v_n.z);

    /* "raypier/core/cfaces.pyx":2289
 *             n.x /= n.z
 *             n.y /= n.z
 *             n.x -= dxdyz.x             # <<<<<<<<<<<<<<
 *             n.y -= dxdyz.y
 * 
 */
    __pyx_v_n.x = (__pyx_v_n.x - __pyx_v_dxdyz.x);

    /* "raypier/core/cfaces.pyx":2290
 *             n.y /= n.z
 *             n.x -= dxdyz.x
 *             n.y -= dxdyz.y             # <<<<<<<<<<<<<<
 * 
 *             o=subvv_(p1, pt1)
 */
    __pyx_v_n.y = (__pyx_v_n.y - __pyx_v_dxdyz.y);

    /* "raypier/core/cfaces.pyx":2292
 *             n.y -= dxdyz.y
 * 
 *             o=subvv_(p1, pt1)             # <<<<<<<<<<<<<<
 *             ### Better estimate for a
 *             a2 = a1
 */
    __pyx_v_o = __pyx_f_7raypier_4core_7ctracer_subvv_(__pyx_v_p1, __pyx_v_pt1);

    /* "raypier/core/cfaces.pyx":2294
 *             o=subvv_(p1, pt1)
 *             ### Better estimate for a
 *             a2 = a1             # <<<<<<<<<<<<<<
 *             a1 = -h*dotprod_(o,n)/dotprod_(d,n)
 * 
 */
    __pyx_v_a2 = __pyx_v_a1;

    /* "raypier/core/cfaces.pyx":2295
 *             ### Better estimate for a
 *             a2 = a1
 *             a1 = -h*dotprod_(o,n)/dotprod_(d,n)             # <<<<<<<<<<<<<<
 * 
 *         if not shape.point_inside_c(pt1.x, pt1.y):
 */
    __pyx_v_a1 = (((-__pyx_v_h) * __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_o, __pyx_v_n)) / __pyx_f_7raypier_4core_7ctracer_dotprod_(__pyx_v_d, __pyx_v_n));
  }
  __pyx_L8_break:;

  /* "raypier/core/cfaces.pyx":2297
 *             a1 = -h*dotprod_(o,n)/dotprod_(d,n)
 * 
 *         if not shape.point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         #print("Final a1:", a1)
 */
  __pyx_t_3 = ((!(((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape *)__pyx_v_shape->__pyx_vtab)->point_inside_c(__pyx_v_shape, __pyx_v_pt1.x, __pyx_v_pt1.y) != 0)) != 0);
  if (__pyx_t_3) {

    /* "raypier/core/cfaces.pyx":2298
 * 
 *         if not shape.point_inside_c(pt1.x, pt1.y):
 *             return NO_INTERSECTION             # <<<<<<<<<<<<<<
 *         #print("Final a1:", a1)
 *         fout.dist = a1
 */
    __pyx_r = __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION;
    goto __pyx_L0;

    /* "raypier/core/cfaces.pyx":2297
 *             a1 = -h*dotprod_(o,n)/dotprod_(d,n)
 * 
 *         if not shape.point_inside_c(pt1.x, pt1.y):             # <<<<<<<<<<<<<<
 *             return NO_INTERSECTION
 *         #print("Final a1:", a1)
 */
  }

  /* "raypier/core/cfaces.pyx":2300
 *             return NO_INTERSECTION
 *         #print("Final a1:", a1)
 *         fout.dist = a1             # <<<<<<<<<<<<<<
 *         return fout
 * 
 */
  __pyx_v_fout.dist = __pyx_v_a1;

  /* "raypier/core/cfaces.pyx":2301
 *         #print("Final a1:", a1)
 *         fout.dist = a1
 *         return fout             # <<<<<<<<<<<<<<
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):
 */
  __pyx_r = __pyx_v_fout;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2224
 *         self.accuracy = kwds.get("accuracy", 1e-6)
 * 
 *     cdef intersect_t intersect_c(self, vector_t p1, vector_t p2, int is_base_ray):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ShapedFace face=self.base_face
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_face);
  __Pyx_XDECREF((PyObject *)__pyx_v_dist);
  __Pyx_XDECREF((PyObject *)__pyx_v_shape);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2303
 *         return fout
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t n, p1, dxdyz
 */

static struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_f_7raypier_4core_6cfaces_14DistortionFace_compute_normal_c(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p, int __pyx_v_piece) {
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_n;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_p1;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_v_dxdyz;
  struct __pyx_t_7raypier_4core_7ctracer_vector_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normal_c", 0);

  /* "raypier/core/cfaces.pyx":2307
 *             vector_t n, p1, dxdyz
 * 
 *         dxdyz = self.distortion.z_offset_and_gradient_c(p.x, p.y)             # <<<<<<<<<<<<<<
 *         p1 = p
 *         p1.z -= dxdyz.z
 */
  __pyx_v_dxdyz = ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *)__pyx_v_self->distortion->__pyx_vtab)->z_offset_and_gradient_c(__pyx_v_self->distortion, __pyx_v_p.x, __pyx_v_p.y);

  /* "raypier/core/cfaces.pyx":2308
 * 
 *         dxdyz = self.distortion.z_offset_and_gradient_c(p.x, p.y)
 *         p1 = p             # <<<<<<<<<<<<<<
 *         p1.z -= dxdyz.z
 *         n = self.base_face.compute_normal_c(p1, piece)
 */
  __pyx_v_p1 = __pyx_v_p;

  /* "raypier/core/cfaces.pyx":2309
 *         dxdyz = self.distortion.z_offset_and_gradient_c(p.x, p.y)
 *         p1 = p
 *         p1.z -= dxdyz.z             # <<<<<<<<<<<<<<
 *         n = self.base_face.compute_normal_c(p1, piece)
 *         n.x /= n.z
 */
  __pyx_v_p1.z = (__pyx_v_p1.z - __pyx_v_dxdyz.z);

  /* "raypier/core/cfaces.pyx":2310
 *         p1 = p
 *         p1.z -= dxdyz.z
 *         n = self.base_face.compute_normal_c(p1, piece)             # <<<<<<<<<<<<<<
 *         n.x /= n.z
 *         n.y /= n.z
 */
  __pyx_v_n = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->base_face->__pyx_base.__pyx_vtab)->__pyx_base.compute_normal_c(((struct __pyx_obj_7raypier_4core_7ctracer_Face *)__pyx_v_self->base_face), __pyx_v_p1, __pyx_v_piece);

  /* "raypier/core/cfaces.pyx":2311
 *         p1.z -= dxdyz.z
 *         n = self.base_face.compute_normal_c(p1, piece)
 *         n.x /= n.z             # <<<<<<<<<<<<<<
 *         n.y /= n.z
 *         n.z = 1.0
 */
  __pyx_v_n.x = (__pyx_v_n.x / __pyx_v_n.z);

  /* "raypier/core/cfaces.pyx":2312
 *         n = self.base_face.compute_normal_c(p1, piece)
 *         n.x /= n.z
 *         n.y /= n.z             # <<<<<<<<<<<<<<
 *         n.z = 1.0
 *         n.x -= dxdyz.x
 */
  __pyx_v_n.y = (__pyx_v_n.y / __pyx_v_n.z);

  /* "raypier/core/cfaces.pyx":2313
 *         n.x /= n.z
 *         n.y /= n.z
 *         n.z = 1.0             # <<<<<<<<<<<<<<
 *         n.x -= dxdyz.x
 *         n.y -= dxdyz.y
 */
  __pyx_v_n.z = 1.0;

  /* "raypier/core/cfaces.pyx":2314
 *         n.y /= n.z
 *         n.z = 1.0
 *         n.x -= dxdyz.x             # <<<<<<<<<<<<<<
 *         n.y -= dxdyz.y
 *         return norm_(n)
 */
  __pyx_v_n.x = (__pyx_v_n.x - __pyx_v_dxdyz.x);

  /* "raypier/core/cfaces.pyx":2315
 *         n.z = 1.0
 *         n.x -= dxdyz.x
 *         n.y -= dxdyz.y             # <<<<<<<<<<<<<<
 *         return norm_(n)
 * 
 */
  __pyx_v_n.y = (__pyx_v_n.y - __pyx_v_dxdyz.y);

  /* "raypier/core/cfaces.pyx":2316
 *         n.x -= dxdyz.x
 *         n.y -= dxdyz.y
 *         return norm_(n)             # <<<<<<<<<<<<<<
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:
 */
  __pyx_r = __pyx_f_7raypier_4core_7ctracer_norm_(__pyx_v_n);
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2303
 *         return fout
 * 
 *     cdef vector_t compute_normal_c(self, vector_t p, int piece):             # <<<<<<<<<<<<<<
 *         cdef:
 *             vector_t n, p1, dxdyz
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2318
 *         return norm_(n)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double z
 */

static double __pyx_f_7raypier_4core_6cfaces_14DistortionFace_eval_z_c(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, double __pyx_v_x, double __pyx_v_y) {
  double __pyx_v_z;
  double __pyx_r;

  /* "raypier/core/cfaces.pyx":2321
 *         cdef:
 *             double z
 *         z = self.base_face.eval_z_c(x,y)             # <<<<<<<<<<<<<<
 *         z += self.distortion.z_offset_c(x,y)
 *         return z
 */
  __pyx_v_z = ((struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace *)__pyx_v_self->base_face->__pyx_base.__pyx_vtab)->eval_z_c(__pyx_v_self->base_face, __pyx_v_x, __pyx_v_y);

  /* "raypier/core/cfaces.pyx":2322
 *             double z
 *         z = self.base_face.eval_z_c(x,y)
 *         z += self.distortion.z_offset_c(x,y)             # <<<<<<<<<<<<<<
 *         return z
 * 
 */
  __pyx_v_z = (__pyx_v_z + ((struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion *)__pyx_v_self->distortion->__pyx_vtab)->z_offset_c(__pyx_v_self->distortion, __pyx_v_x, __pyx_v_y));

  /* "raypier/core/cfaces.pyx":2323
 *         z = self.base_face.eval_z_c(x,y)
 *         z += self.distortion.z_offset_c(x,y)
 *         return z             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_r = __pyx_v_z;
  goto __pyx_L0;

  /* "raypier/core/cfaces.pyx":2318
 *         return norm_(n)
 * 
 *     cdef double eval_z_c(self, double x, double y) nogil:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double z
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2213
 *     """
 *     cdef:
 *         public ShapedFace base_face             # <<<<<<<<<<<<<<
 *         public Distortion distortion
 *         public double accuracy
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face___get__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face___get__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->base_face));
  __pyx_r = ((PyObject *)__pyx_v_self->base_face);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7raypier_4core_6cfaces_ShapedFace))))) __PYX_ERR(0, 2213, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->base_face);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->base_face));
  __pyx_v_self->base_face = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.DistortionFace.base_face.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face_4__del__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_9base_face_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->base_face);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->base_face));
  __pyx_v_self->base_face = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2214
 *     cdef:
 *         public ShapedFace base_face
 *         public Distortion distortion             # <<<<<<<<<<<<<<
 *         public double accuracy
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion___get__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion___get__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->distortion));
  __pyx_r = ((PyObject *)__pyx_v_self->distortion);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_7raypier_4core_7ctracer_Distortion))))) __PYX_ERR(0, 2214, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->distortion);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->distortion));
  __pyx_v_self->distortion = ((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.DistortionFace.distortion.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion_4__del__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_10distortion_4__del__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->distortion);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->distortion));
  __pyx_v_self->distortion = ((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "raypier/core/cfaces.pyx":2215
 *         public ShapedFace base_face
 *         public Distortion distortion
 *         public double accuracy             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_8accuracy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_8accuracy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_8accuracy___get__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_8accuracy___get__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->accuracy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.DistortionFace.accuracy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_8accuracy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_8accuracy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_8accuracy_2__set__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_8accuracy_2__set__(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2215, __pyx_L1_error)
  __pyx_v_self->accuracy = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.DistortionFace.accuracy.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_2__reduce_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.DistortionFace.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_14DistortionFace_4__setstate_cython__(((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_14DistortionFace_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("raypier.core.cfaces.DistortionFace.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_ImplicitBoundedFace(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_3__pyx_unpickle_ImplicitBoundedFace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_6cfaces_3__pyx_unpickle_ImplicitBoundedFace = {"__pyx_unpickle_ImplicitBoundedFace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_6cfaces_3__pyx_unpickle_ImplicitBoundedFace, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_6cfaces_3__pyx_unpickle_ImplicitBoundedFace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImplicitBoundedFace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImplicitBoundedFace", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImplicitBoundedFace", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_ImplicitBoundedFace") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_ImplicitBoundedFace", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.__pyx_unpickle_ImplicitBoundedFace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_2__pyx_unpickle_ImplicitBoundedFace(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_2__pyx_unpickle_ImplicitBoundedFace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImplicitBoundedFace", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xddba3da, 0x7ebdf9c, 0xac43be1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__44, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xddba3da, 0x7ebdf9c, 0xac43be1):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))" % __pyx_checksum)
 *     __pyx_result = ImplicitBoundedFace.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xddba3da, 0x7ebdf9c, 0xac43be1):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = ImplicitBoundedFace.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xddba3da, 0x7ebdf9c, 0xac43be1):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))" % __pyx_checksum)
 *     __pyx_result = ImplicitBoundedFace.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedFace), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))" % __pyx_checksum)
 *     __pyx_result = ImplicitBoundedFace.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = ImplicitBoundedFace.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7raypier_4core_6cfaces___pyx_unpickle_ImplicitBoundedFace__set_state(((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xddba3da, 0x7ebdf9c, 0xac43be1) = (boundary, count, idx, invert_normal, material, max_length, name, owner, target, tolerance))" % __pyx_checksum)
 *     __pyx_result = ImplicitBoundedFace.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImplicitBoundedFace(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.cfaces.__pyx_unpickle_ImplicitBoundedFace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7raypier_4core_6cfaces___pyx_unpickle_ImplicitBoundedFace__set_state(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  short __pyx_t_4;
  double __pyx_t_5;
  char *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_ImplicitBoundedFace__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[10])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0), __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 0);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->boundary);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->boundary));
  __pyx_v___pyx_result->boundary = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.count = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.idx = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_As_short(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_4 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.invert_normal = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4), __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 4);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.material);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.material));
  __pyx_v___pyx_result->__pyx_base.material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.max_length = __pyx_t_5;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.name = __pyx_t_6;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 7);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.owner);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.owner);
  __pyx_v___pyx_result->__pyx_base.owner = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 8)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 8), __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_1 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 8);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->target);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->target));
  __pyx_v___pyx_result->target = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 9)); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.tolerance = __pyx_t_5;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[10])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_8 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_8 > 10) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_9 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_10 = (__pyx_t_9 != 0);
  __pyx_t_7 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_7) {

    /* "(tree fragment)":14
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[10])             # <<<<<<<<<<<<<<
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_update); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_1 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, PyTuple_GET_ITEM(__pyx_v___pyx_state, 10)) : __Pyx_PyObject_CallOneArg(__pyx_t_12, PyTuple_GET_ITEM(__pyx_v___pyx_state, 10));
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[10])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("raypier.core.cfaces.__pyx_unpickle_ImplicitBoundedFace__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OffAxisParabolicFace(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_7raypier_4core_6cfaces_5__pyx_unpickle_OffAxisParabolicFace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_7raypier_4core_6cfaces_5__pyx_unpickle_OffAxisParabolicFace = {"__pyx_unpickle_OffAxisParabolicFace", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_6cfaces_5__pyx_unpickle_OffAxisParabolicFace, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7raypier_4core_6cfaces_5__pyx_unpickle_OffAxisParabolicFace(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OffAxisParabolicFace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OffAxisParabolicFace", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OffAxisParabolicFace", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_OffAxisParabolicFace") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OffAxisParabolicFace", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("raypier.core.cfaces.__pyx_unpickle_OffAxisParabolicFace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7raypier_4core_6cfaces_4__pyx_unpickle_OffAxisParabolicFace(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7raypier_4core_6cfaces_4__pyx_unpickle_OffAxisParabolicFace(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OffAxisParabolicFace", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x24be6c8, 0xda530b2, 0x97d3b75):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__45, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x24be6c8, 0xda530b2, 0x97d3b75):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))" % __pyx_checksum)
 *     __pyx_result = OffAxisParabolicFace.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x24be6c8, 0xda530b2, 0x97d3b75):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = OffAxisParabolicFace.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x24be6c8, 0xda530b2, 0x97d3b75):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))" % __pyx_checksum)
 *     __pyx_result = OffAxisParabolicFace.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OffAxisParabolicFace__set_state(<OffAxisParabolicFace> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_OffAxisParabolicFace), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))" % __pyx_checksum)
 *     __pyx_result = OffAxisParabolicFace.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OffAxisParabolicFace__set_state(<OffAxisParabolicFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = OffAxisParabolicFace.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OffAxisParabolicFace__set_state(<OffAxisParabolicFace> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OffAxisParabolicFace__set_state(OffAxisParabolicFace __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_7raypier_4core_6cfaces___pyx_unpickle_OffAxisParabolicFace__set_state(((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x24be6c8, 0xda530b2, 0x97d3b75) = (EFL, count, diameter, height, idx, invert_normal, material, max_length, name, owner, tolerance))" % __pyx_checksum)
 *     __pyx_result = OffAxisParabolicFace.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OffAxisParabolicFace__set_state(<OffAxisParabolicFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OffAxisParabolicFace__set_state(<OffAxisParabolicFace> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OffAxisParabolicFace__set_state(OffAxisParabolicFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.EFL = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.diameter = __pyx_state[2]; __pyx_result.height = __pyx_state[3]; __pyx_result.idx = __pyx_state[4]; __pyx_result.invert_normal = __pyx_state[5]; __pyx_result.material = __pyx_state[6]; __pyx_result.max_length = __pyx_state[7]; __pyx_result.name = __pyx_state[8]; __pyx_result.owner = __pyx_state[9]; __pyx_result.tolerance = __pyx_state[10]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OffAxisParabolicFace(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("raypier.core.cfaces.__pyx_unpickle_OffAxisParabolicFace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OffAxisParabolicFace__set_state(<OffAxisParabolicFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OffAxisParabolicFace__set_state(OffAxisParabolicFace __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.EFL = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.diameter = __pyx_state[2]; __pyx_result.height = __pyx_state[3]; __pyx_result.idx = __pyx_state[4]; __pyx_result.invert_normal = __pyx_state[5]; __pyx_result.material = __pyx_state[6]; __pyx_result.max_length = __pyx_state[7]; __pyx_result.name = __pyx_state[8]; __pyx_result.owner = __pyx_state[9]; __pyx_result.tolerance = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_7raypier_4core_6cfaces___pyx_unpickle_OffAxisParabolicFace__set_state(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  unsigned int __pyx_t_2;
  int __pyx_t_3;
  short __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OffAxisParabolicFace__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OffAxisParabolicFace__set_state(OffAxisParabolicFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.EFL = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.diameter = __pyx_state[2]; __pyx_result.height = __pyx_state[3]; __pyx_result.idx = __pyx_state[4]; __pyx_result.invert_normal = __pyx_state[5]; __pyx_result.material = __pyx_state[6]; __pyx_result.max_length = __pyx_state[7]; __pyx_result.name = __pyx_state[8]; __pyx_result.owner = __pyx_state[9]; __pyx_result.tolerance = __pyx_state[10]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 0)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->EFL = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 1)); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.count = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 2)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->diameter = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 3)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->height = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(__pyx_v___pyx_state, 4)); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.idx = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_As_short(PyTuple_GET_ITEM(__pyx_v___pyx_state, 5)); if (unlikely((__pyx_t_4 == (short)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.invert_normal = __pyx_t_4;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  if (!(likely(((PyTuple_GET_ITEM(__pyx_v___pyx_state, 6)) == Py_None) || likely(__Pyx_TypeTest(PyTuple_GET_ITEM(__pyx_v___pyx_state, 6), __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_5 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 6);
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.material);
  __Pyx_DECREF(((PyObject *)__pyx_v___pyx_result->__pyx_base.material));
  __pyx_v___pyx_result->__pyx_base.material = ((struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial *)__pyx_t_5);
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 7)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.max_length = __pyx_t_1;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyObject_AsWritableString(PyTuple_GET_ITEM(__pyx_v___pyx_state, 8)); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.name = __pyx_t_6;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_ITEM(__pyx_v___pyx_state, 9);
  __Pyx_INCREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v___pyx_result->__pyx_base.owner);
  __Pyx_DECREF(__pyx_v___pyx_result->__pyx_base.owner);
  __pyx_v___pyx_result->__pyx_base.owner = __pyx_t_5;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_v___pyx_state, 10)); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_v___pyx_result->__pyx_base.tolerance = __pyx_t_1;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OffAxisParabolicFace__set_state(OffAxisParabolicFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.EFL = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.diameter = __pyx_state[2]; __pyx_result.height = __pyx_state[3]; __pyx_result.idx = __pyx_state[4]; __pyx_result.invert_normal = __pyx_state[5]; __pyx_result.material = __pyx_state[6]; __pyx_result.max_length = __pyx_state[7]; __pyx_result.name = __pyx_state[8]; __pyx_result.owner = __pyx_state[9]; __pyx_result.tolerance = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_8 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_9 = ((__pyx_t_8 > 11) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_7 = __pyx_t_9;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_9 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_10 = (__pyx_t_9 != 0);
  __pyx_t_7 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_7) {

    /* "(tree fragment)":14
 *     __pyx_result.EFL = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.diameter = __pyx_state[2]; __pyx_result.height = __pyx_state[3]; __pyx_result.idx = __pyx_state[4]; __pyx_result.invert_normal = __pyx_state[5]; __pyx_result.material = __pyx_state[6]; __pyx_result.max_length = __pyx_state[7]; __pyx_result.name = __pyx_state[8]; __pyx_result.owner = __pyx_state[9]; __pyx_result.tolerance = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])             # <<<<<<<<<<<<<<
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_update); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_5 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_11, PyTuple_GET_ITEM(__pyx_v___pyx_state, 11)) : __Pyx_PyObject_CallOneArg(__pyx_t_12, PyTuple_GET_ITEM(__pyx_v___pyx_state, 11));
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OffAxisParabolicFace__set_state(OffAxisParabolicFace __pyx_result, tuple __pyx_state):
 *     __pyx_result.EFL = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.diameter = __pyx_state[2]; __pyx_result.height = __pyx_state[3]; __pyx_result.idx = __pyx_state[4]; __pyx_result.invert_normal = __pyx_state[5]; __pyx_result.material = __pyx_state[6]; __pyx_result.max_length = __pyx_state[7]; __pyx_result.name = __pyx_state[8]; __pyx_result.owner = __pyx_state[9]; __pyx_result.tolerance = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OffAxisParabolicFace__set_state(<OffAxisParabolicFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OffAxisParabolicFace__set_state(OffAxisParabolicFace __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.EFL = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.diameter = __pyx_state[2]; __pyx_result.height = __pyx_state[3]; __pyx_result.idx = __pyx_state[4]; __pyx_result.invert_normal = __pyx_state[5]; __pyx_result.material = __pyx_state[6]; __pyx_result.max_length = __pyx_state[7]; __pyx_result.name = __pyx_state[8]; __pyx_result.owner = __pyx_state[9]; __pyx_result.tolerance = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("raypier.core.cfaces.__pyx_unpickle_OffAxisParabolicFace__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":929
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":930
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":933
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":935
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":936
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":942
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 942, __pyx_L3_error)

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":943
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 943, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 944, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":948
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 948, __pyx_L3_error)

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":949
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 949, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 950, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":954
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 954, __pyx_L3_error)

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":955
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 955, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":956
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 956, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":978
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":993
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1003
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1010
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1017
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "carray.from_py":77
 * 
 * @cname("__Pyx_carray_from_py_double")
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

static int __Pyx_carray_from_py_double(PyObject *__pyx_v_o, double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  char const *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_from_py_double", 0);

  /* "carray.from_py":78
 * @cname("__Pyx_carray_from_py_double")
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length             # <<<<<<<<<<<<<<
 *     try:
 *         i = len(o)
 */
  __pyx_v_i = __pyx_v_length;

  /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "carray.from_py":80
 *     cdef Py_ssize_t i = length
 *     try:
 *         i = len(o)             # <<<<<<<<<<<<<<
 *     except (TypeError, OverflowError):
 *         pass
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 80, __pyx_L3_error)
      __pyx_v_i = __pyx_t_4;

      /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "carray.from_py":81
 *     try:
 *         i = len(o)
 *     except (TypeError, OverflowError):             # <<<<<<<<<<<<<<
 *         pass
 *     if i == length:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
    if (__pyx_t_5) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "carray.from_py":83
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  __pyx_t_6 = ((__pyx_v_i == __pyx_v_length) != 0);
  if (__pyx_t_6) {

    /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
      __pyx_t_7 = __pyx_v_o; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 84, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 84, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_4;
      __pyx_t_4 = (__pyx_t_4 + 1);

      /* "carray.from_py":85
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      __pyx_t_6 = ((__pyx_v_i >= __pyx_v_length) != 0);
      if (__pyx_t_6) {

        /* "carray.from_py":86
 *         for i, item in enumerate(o):
 *             if i >= length:
 *                 break             # <<<<<<<<<<<<<<
 *             v[i] = item
 *         else:
 */
        goto __pyx_L11_break;

        /* "carray.from_py":85
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      }

      /* "carray.from_py":87
 *             if i >= length:
 *                 break
 *             v[i] = item             # <<<<<<<<<<<<<<
 *         else:
 *             i += 1  # convert index to length
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 87, __pyx_L1_error)
      (__pyx_v_v[__pyx_v_i]) = __pyx_t_11;

      /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    }
    /*else*/ {

      /* "carray.from_py":89
 *             v[i] = item
 *         else:
 *             i += 1  # convert index to length             # <<<<<<<<<<<<<<
 *             if i == length:
 *                 return 0
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "carray.from_py":90
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      __pyx_t_6 = ((__pyx_v_i == __pyx_v_length) != 0);
      if (__pyx_t_6) {

        /* "carray.from_py":91
 *             i += 1  # convert index to length
 *             if i == length:
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *     PyErr_Format(
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L0;

        /* "carray.from_py":90
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      }
    }

    /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_L11_break:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "carray.from_py":83
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  }

  /* "carray.from_py":96
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 *          if i >= length else             # <<<<<<<<<<<<<<
 *          "not enough values found during array assignment, expected %zd, got %zd"),
 *         length, i)
 */
  if (((__pyx_v_i >= __pyx_v_length) != 0)) {
    __pyx_t_12 = ((char const *)"too many values found during array assignment, expected %zd");
  } else {
    __pyx_t_12 = ((char const *)"not enough values found during array assignment, expected %zd, got %zd");
  }

  /* "carray.from_py":93
 *                 return 0
 * 
 *     PyErr_Format(             # <<<<<<<<<<<<<<
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 */
  __pyx_t_7 = PyErr_Format(__pyx_builtin_IndexError, __pyx_t_12, __pyx_v_length, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "carray.from_py":77
 * 
 * @cname("__Pyx_carray_from_py_double")
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("carray.from_py.__Pyx_carray_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

static struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots(PyObject *__pyx_v_obj) {
  struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_7raypier_4core_6cfaces_poly_roots __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10[3];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots", 0);

  /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, ((char const *)"Expected %.16s, got %.200s"), ((char *)"a mapping"), Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots(obj) except *:
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['roots']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['roots']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'roots'")
 */
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_roots); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 17, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['roots']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['roots']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'roots'")
 *     result.roots = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 18, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['roots']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'roots'")             # <<<<<<<<<<<<<<
 *     result.roots = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 19, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 19, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['roots']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L9_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'roots'")
 *     result.roots = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['n']
 */
  if (unlikely(__Pyx_carray_from_py_double(__pyx_v_value, __pyx_t_10, 3) < 0)) __PYX_ERR(1, 20, __pyx_L1_error)
  memcpy(&(__pyx_v_result.roots[0]), __pyx_t_10, sizeof(__pyx_v_result.roots[0]) * (3));

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'roots'")
 *     result.roots = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['n']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.roots = value
 *     try:
 *         value = obj['n']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'n'")
 */
      __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_v_obj, __pyx_n_s_n); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 22, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'roots'")
 *     result.roots = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['n']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L17_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['n']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'n'")
 *     result.n = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(1, 23, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['n']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'n'")             # <<<<<<<<<<<<<<
 *     result.n = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 24, __pyx_L14_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(1, 24, __pyx_L14_except_error)
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'roots'")
 *     result.roots = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['n']
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L17_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'n'")
 *     result.n = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 25, __pyx_L1_error)
  __pyx_v_result.n = __pyx_t_6;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'n'")
 *     result.n = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots")
 * cdef struct_type __pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef struct_type result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_7raypier_4core_6cfaces_poly_roots", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_self->len / __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 445, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 446, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 456, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__61, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__64);
            __Pyx_GIVEREF(__pyx_slice__64);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__64);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__64); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__64);
        __Pyx_GIVEREF(__pyx_slice__64);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__64);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 917, __pyx_L1_error)
    }
    __pyx_v_shape = (__pyx_v_view->len / __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = (__pyx_v_ndim / 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1265, __pyx_L1_error)
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1297, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1307, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__68, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedFace __pyx_vtable_7raypier_4core_6cfaces_ShapedFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  p->shape = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace(PyObject *o) {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->shape);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)o;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace)); if (e) return e;
  if (p->shape) {
    e = (*v)(((PyObject *)p->shape), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)o;
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace);
  tmp = ((PyObject*)p->shape);
  p->shape = ((struct __pyx_obj_7raypier_4core_7ctracer_Shape *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_10ShapedFace_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_10ShapedFace_shape(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5shape_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_10ShapedFace_invert_normals(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_10ShapedFace_invert_normals(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_10ShapedFace_14invert_normals_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ShapedFace[] = {
  {"eval_z_extent", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_3eval_z_extent, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7raypier_4core_6cfaces_10ShapedFace_2eval_z_extent},
  {"eval_z_points", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_5eval_z_points, METH_O, 0},
  {"eval_implicit_grid", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_7eval_implicit_grid, METH_VARARGS|METH_KEYWORDS, 0},
  {"eval_implicit_points", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_9eval_implicit_points, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10ShapedFace_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ShapedFace[] = {
  {(char *)"shape", __pyx_getprop_7raypier_4core_6cfaces_10ShapedFace_shape, __pyx_setprop_7raypier_4core_6cfaces_10ShapedFace_shape, (char *)0, 0},
  {(char *)"invert_normals", __pyx_getprop_7raypier_4core_6cfaces_10ShapedFace_invert_normals, __pyx_setprop_7raypier_4core_6cfaces_10ShapedFace_invert_normals, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ShapedFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ShapedFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ShapedFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ShapedFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_CircularFace __pyx_vtable_7raypier_4core_6cfaces_CircularFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_CircularFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_CircularFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_CircularFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_12CircularFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_CircularFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_CircularFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_CircularFace(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_CircularFace)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_CircularFace(PyObject *o) {
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_CircularFace);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12CircularFace_diameter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12CircularFace_8diameter_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12CircularFace_diameter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12CircularFace_8diameter_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12CircularFace_offset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12CircularFace_6offset_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12CircularFace_offset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12CircularFace_6offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12CircularFace_z_plane(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12CircularFace_7z_plane_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12CircularFace_z_plane(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12CircularFace_7z_plane_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_CircularFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_12CircularFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_12CircularFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_CircularFace[] = {
  {(char *)"diameter", __pyx_getprop_7raypier_4core_6cfaces_12CircularFace_diameter, __pyx_setprop_7raypier_4core_6cfaces_12CircularFace_diameter, (char *)0, 0},
  {(char *)"offset", __pyx_getprop_7raypier_4core_6cfaces_12CircularFace_offset, __pyx_setprop_7raypier_4core_6cfaces_12CircularFace_offset, (char *)0, 0},
  {(char *)"z_plane", __pyx_getprop_7raypier_4core_6cfaces_12CircularFace_z_plane, __pyx_setprop_7raypier_4core_6cfaces_12CircularFace_z_plane, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_CircularFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.CircularFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_CircularFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_CircularFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_CircularFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_CircularFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_CircularFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_CircularFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_CircularFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedPlanarFace __pyx_vtable_7raypier_4core_6cfaces_ShapedPlanarFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ShapedPlanarFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ShapedPlanarFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_16ShapedPlanarFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_16ShapedPlanarFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ShapedPlanarFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_16ShapedPlanarFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ShapedPlanarFace[] = {
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_16ShapedPlanarFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_16ShapedPlanarFace_z_height, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ShapedPlanarFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ShapedPlanarFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ShapedPlanarFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ShapedPlanarFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ShapedPlanarFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ImplicitBoundedFace __pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ImplicitBoundedFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedFace;
  p->boundary = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)Py_None); Py_INCREF(Py_None);
  p->target = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_ImplicitBoundedFace(PyObject *o) {
  struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->boundary);
  Py_CLEAR(p->target);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_ImplicitBoundedFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_ImplicitBoundedFace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)o;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_ImplicitBoundedFace)); if (e) return e;
  if (p->boundary) {
    e = (*v)(((PyObject *)p->boundary), a); if (e) return e;
  }
  if (p->target) {
    e = (*v)(((PyObject *)p->target), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_ImplicitBoundedFace(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace *)o;
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_ImplicitBoundedFace);
  tmp = ((PyObject*)p->boundary);
  p->boundary = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->target);
  p->target = ((struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_boundary(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_boundary(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_8boundary_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_target(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_target(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_6target_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ImplicitBoundedFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_19ImplicitBoundedFace_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ImplicitBoundedFace[] = {
  {(char *)"boundary", __pyx_getprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_boundary, __pyx_setprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_boundary, (char *)0, 0},
  {(char *)"target", __pyx_getprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_target, __pyx_setprop_7raypier_4core_6cfaces_19ImplicitBoundedFace_target, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ImplicitBoundedFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace __pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ImplicitBoundedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace[] = {
  {"update", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_3update, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ImplicitBoundedPlanarFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ImplicitBoundedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ElipticalPlaneFace __pyx_vtable_7raypier_4core_6cfaces_ElipticalPlaneFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ElipticalPlaneFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ElipticalPlaneFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_ElipticalPlaneFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_ElipticalPlaneFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_ElipticalPlaneFace(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_ElipticalPlaneFace)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_ElipticalPlaneFace(PyObject *o) {
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_ElipticalPlaneFace);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_x(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_x_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3g_y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_diameter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_diameter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_8diameter_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ElipticalPlaneFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_18ElipticalPlaneFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ElipticalPlaneFace[] = {
  {(char *)"g_x", __pyx_getprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_x, __pyx_setprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_x, (char *)0, 0},
  {(char *)"g_y", __pyx_getprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_y, __pyx_setprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_g_y, (char *)0, 0},
  {(char *)"diameter", __pyx_getprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_diameter, __pyx_setprop_7raypier_4core_6cfaces_18ElipticalPlaneFace_diameter, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ElipticalPlaneFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ElipticalPlaneFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ElipticalPlaneFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ElipticalPlaneFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ElipticalPlaneFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ElipticalPlaneFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ElipticalPlaneFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ElipticalPlaneFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_RectangularFace __pyx_vtable_7raypier_4core_6cfaces_RectangularFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_RectangularFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_RectangularFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_RectangularFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_RectangularFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_RectangularFace(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_RectangularFace)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_RectangularFace(PyObject *o) {
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_RectangularFace);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_length(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6length_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_length(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6length_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5width_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_offset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6offset_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_offset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_6offset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_z_plane(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_7z_plane_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_z_plane(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15RectangularFace_7z_plane_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_RectangularFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_15RectangularFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_RectangularFace[] = {
  {(char *)"length", __pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_length, __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_length, (char *)0, 0},
  {(char *)"width", __pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_width, __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_width, (char *)0, 0},
  {(char *)"offset", __pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_offset, __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_offset, (char *)0, 0},
  {(char *)"z_plane", __pyx_getprop_7raypier_4core_6cfaces_15RectangularFace_z_plane, __pyx_setprop_7raypier_4core_6cfaces_15RectangularFace_z_plane, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_RectangularFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.RectangularFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_RectangularFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_RectangularFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_RectangularFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_RectangularFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_RectangularFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_RectangularFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_RectangularFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_SphericalFace __pyx_vtable_7raypier_4core_6cfaces_SphericalFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_SphericalFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_SphericalFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_SphericalFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_SphericalFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_SphericalFace(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_SphericalFace)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_SphericalFace(PyObject *o) {
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_SphericalFace);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_13SphericalFace_diameter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8diameter_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_13SphericalFace_diameter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8diameter_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_13SphericalFace_curvature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_9curvature_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_13SphericalFace_curvature(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_9curvature_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_13SphericalFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_13SphericalFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_13SphericalFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_SphericalFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_13SphericalFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_SphericalFace[] = {
  {(char *)"diameter", __pyx_getprop_7raypier_4core_6cfaces_13SphericalFace_diameter, __pyx_setprop_7raypier_4core_6cfaces_13SphericalFace_diameter, (char *)0, 0},
  {(char *)"curvature", __pyx_getprop_7raypier_4core_6cfaces_13SphericalFace_curvature, __pyx_setprop_7raypier_4core_6cfaces_13SphericalFace_curvature, (char *)0, 0},
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_13SphericalFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_13SphericalFace_z_height, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_SphericalFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.SphericalFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_SphericalFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_SphericalFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_SphericalFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_SphericalFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_SphericalFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_SphericalFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_SphericalFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ShapedSphericalFace __pyx_vtable_7raypier_4core_6cfaces_ShapedSphericalFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ShapedSphericalFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ShapedSphericalFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_19ShapedSphericalFace_curvature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_19ShapedSphericalFace_curvature(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_9curvature_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_19ShapedSphericalFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_19ShapedSphericalFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ShapedSphericalFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_19ShapedSphericalFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ShapedSphericalFace[] = {
  {(char *)"curvature", __pyx_getprop_7raypier_4core_6cfaces_19ShapedSphericalFace_curvature, __pyx_setprop_7raypier_4core_6cfaces_19ShapedSphericalFace_curvature, (char *)0, 0},
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_19ShapedSphericalFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_19ShapedSphericalFace_z_height, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ShapedSphericalFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ShapedSphericalFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ShapedSphericalFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ShapedSphericalFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ShapedSphericalFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedPlanarFace __pyx_vtable_7raypier_4core_6cfaces_ExtrudedPlanarFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ExtrudedPlanarFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedPlanarFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtrudedPlanarFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtrudedPlanarFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_ExtrudedPlanarFace(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_ExtrudedPlanarFace)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_ExtrudedPlanarFace(PyObject *o) {
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_ExtrudedPlanarFace);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2x2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2y2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_2z2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ExtrudedPlanarFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_18ExtrudedPlanarFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ExtrudedPlanarFace[] = {
  {(char *)"x1", __pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x1, __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x1, (char *)0, 0},
  {(char *)"y1", __pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y1, __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y1, (char *)0, 0},
  {(char *)"x2", __pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x2, __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_x2, (char *)0, 0},
  {(char *)"y2", __pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y2, __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_y2, (char *)0, 0},
  {(char *)"z1", __pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z1, __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z1, (char *)0, 0},
  {(char *)"z2", __pyx_getprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z2, __pyx_setprop_7raypier_4core_6cfaces_18ExtrudedPlanarFace_z2, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ExtrudedPlanarFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtrudedPlanarFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ExtrudedPlanarFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ExtrudedPlanarFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ExtrudedPlanarFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ExtrudedPlanarFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ExtrudedPlanarFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtrudedBezierFace __pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ExtrudedBezierFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedBezierFace;
  p->curves_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtrudedBezierFace(PyObject *o) {
  struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->curves_array);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtrudedBezierFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_ExtrudedBezierFace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *)o;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_ExtrudedBezierFace)); if (e) return e;
  if (p->curves_array) {
    e = (*v)(((PyObject *)p->curves_array), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_ExtrudedBezierFace(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *)o;
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_ExtrudedBezierFace);
  tmp = ((PyObject*)p->curves_array);
  p->curves_array = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ExtrudedBezierFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_18ExtrudedBezierFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ExtrudedBezierFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtrudedBezierFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ExtrudedBezierFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ExtrudedBezierFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ExtrudedBezierFace, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ExtrudedBezierFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_PolygonFace __pyx_vtable_7raypier_4core_6cfaces_PolygonFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_PolygonFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_PolygonFace;
  p->_xy_points = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_PolygonFace(PyObject *o) {
  struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_xy_points);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_PolygonFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_PolygonFace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)o;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_PolygonFace)); if (e) return e;
  if (p->_xy_points) {
    e = (*v)(p->_xy_points, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_PolygonFace(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace *)o;
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_PolygonFace);
  tmp = ((PyObject*)p->_xy_points);
  p->_xy_points = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_11PolygonFace_xy_points(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_9xy_points_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_11PolygonFace_xy_points(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_9xy_points_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_11PolygonFace_z_plane(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_7z_plane_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_11PolygonFace_z_plane(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_11PolygonFace_7z_plane_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_PolygonFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_11PolygonFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_PolygonFace[] = {
  {(char *)"xy_points", __pyx_getprop_7raypier_4core_6cfaces_11PolygonFace_xy_points, __pyx_setprop_7raypier_4core_6cfaces_11PolygonFace_xy_points, (char *)0, 0},
  {(char *)"z_plane", __pyx_getprop_7raypier_4core_6cfaces_11PolygonFace_z_plane, __pyx_setprop_7raypier_4core_6cfaces_11PolygonFace_z_plane, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_PolygonFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.PolygonFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_PolygonFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_PolygonFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_PolygonFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_PolygonFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_PolygonFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_PolygonFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_PolygonFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_OffAxisParabolicFace __pyx_vtable_7raypier_4core_6cfaces_OffAxisParabolicFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_OffAxisParabolicFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_OffAxisParabolicFace;
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_OffAxisParabolicFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_OffAxisParabolicFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_OffAxisParabolicFace(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_OffAxisParabolicFace)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_OffAxisParabolicFace(PyObject *o) {
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_OffAxisParabolicFace);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_EFL(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_EFL(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3EFL_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_diameter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_diameter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_8diameter_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_6height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_OffAxisParabolicFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_20OffAxisParabolicFace_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_OffAxisParabolicFace[] = {
  {(char *)"EFL", __pyx_getprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_EFL, __pyx_setprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_EFL, (char *)0, 0},
  {(char *)"diameter", __pyx_getprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_diameter, __pyx_setprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_diameter, (char *)0, 0},
  {(char *)"height", __pyx_getprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_height, __pyx_setprop_7raypier_4core_6cfaces_20OffAxisParabolicFace_height, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.OffAxisParabolicFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_OffAxisParabolicFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_OffAxisParabolicFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_OffAxisParabolicFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_OffAxisParabolicFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_OffAxisParabolicFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_OffAxisParabolicFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_OffAxisParabolicFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_EllipsoidalFace __pyx_vtable_7raypier_4core_6cfaces_EllipsoidalFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_EllipsoidalFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *p;
  PyObject *o = __pyx_ptype_7raypier_4core_7ctracer_Face->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_EllipsoidalFace;
  return o;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_EllipsoidalFace(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7raypier_4core_6cfaces_EllipsoidalFace);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_EllipsoidalFace(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) ? ((__pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse) ? __pyx_ptype_7raypier_4core_7ctracer_Face->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7raypier_4core_6cfaces_EllipsoidalFace)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_EllipsoidalFace(PyObject *o) {
  if (likely(__pyx_ptype_7raypier_4core_7ctracer_Face)) { if (__pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear) __pyx_ptype_7raypier_4core_7ctracer_Face->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7raypier_4core_6cfaces_EllipsoidalFace);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_transform(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_transform(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_9transform_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_inverse_transform(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_3__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_inverse_transform(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_17inverse_transform_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_major(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5major_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_major(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5major_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_minor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_minor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5minor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_x1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_x1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_x2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_x2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2x2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_y1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_y1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_y2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_y2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2y2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_z1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_z1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_z2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_z2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_2z2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_EllipsoidalFace[] = {
  {"update", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_1update, METH_NOARGS, 0},
  {"sync_transform", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_3sync_transform, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_15EllipsoidalFace_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_EllipsoidalFace[] = {
  {(char *)"transform", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_transform, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_transform, (char *)0, 0},
  {(char *)"inverse_transform", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_inverse_transform, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_inverse_transform, (char *)0, 0},
  {(char *)"major", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_major, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_major, (char *)0, 0},
  {(char *)"minor", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_minor, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_minor, (char *)0, 0},
  {(char *)"x1", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_x1, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_x1, (char *)0, 0},
  {(char *)"x2", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_x2, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_x2, (char *)0, 0},
  {(char *)"y1", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_y1, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_y1, (char *)0, 0},
  {(char *)"y2", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_y2, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_y2, (char *)0, 0},
  {(char *)"z1", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_z1, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_z1, (char *)0, 0},
  {(char *)"z2", __pyx_getprop_7raypier_4core_6cfaces_15EllipsoidalFace_z2, __pyx_setprop_7raypier_4core_6cfaces_15EllipsoidalFace_z2, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_EllipsoidalFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.EllipsoidalFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_EllipsoidalFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_EllipsoidalFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_EllipsoidalFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_EllipsoidalFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_EllipsoidalFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_EllipsoidalFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_EllipsoidalFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_SaddleFace __pyx_vtable_7raypier_4core_6cfaces_SaddleFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_SaddleFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_SaddleFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_10SaddleFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_10SaddleFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_10SaddleFace_curvature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_9curvature_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_10SaddleFace_curvature(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_10SaddleFace_9curvature_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_SaddleFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10SaddleFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_SaddleFace[] = {
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_10SaddleFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_10SaddleFace_z_height, (char *)0, 0},
  {(char *)"curvature", __pyx_getprop_7raypier_4core_6cfaces_10SaddleFace_curvature, __pyx_setprop_7raypier_4core_6cfaces_10SaddleFace_curvature, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_SaddleFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.SaddleFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_SaddleFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_SaddleFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_SaddleFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_SaddleFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_CylindericalFace __pyx_vtable_7raypier_4core_6cfaces_CylindericalFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_CylindericalFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_CylindericalFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_16CylindericalFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_16CylindericalFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_16CylindericalFace_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_6radius_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_16CylindericalFace_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_6radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_CylindericalFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_16CylindericalFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_CylindericalFace[] = {
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_16CylindericalFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_16CylindericalFace_z_height, (char *)0, 0},
  {(char *)"radius", __pyx_getprop_7raypier_4core_6cfaces_16CylindericalFace_radius, __pyx_setprop_7raypier_4core_6cfaces_16CylindericalFace_radius, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_CylindericalFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.CylindericalFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_CylindericalFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_CylindericalFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_CylindericalFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_CylindericalFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_AxiconFace __pyx_vtable_7raypier_4core_6cfaces_AxiconFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_AxiconFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_AxiconFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_10AxiconFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_10AxiconFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_10AxiconFace_gradient(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8gradient_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_10AxiconFace_gradient(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_10AxiconFace_8gradient_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_AxiconFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_10AxiconFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_AxiconFace[] = {
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_10AxiconFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_10AxiconFace_z_height, (char *)0, 0},
  {(char *)"gradient", __pyx_getprop_7raypier_4core_6cfaces_10AxiconFace_gradient, __pyx_setprop_7raypier_4core_6cfaces_10AxiconFace_gradient, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_AxiconFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.AxiconFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_AxiconFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    While technically, we can use the conic surface to generate a cone, it requires setting some parameters to infinity which \n    is often inaccurate to compute.\n    \n    The gradient is the slope of the sides, dz/dr\n    ", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_AxiconFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_AxiconFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_AxiconFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ConicRevolutionFace __pyx_vtable_7raypier_4core_6cfaces_ConicRevolutionFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ConicRevolutionFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ConicRevolutionFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_19ConicRevolutionFace_curvature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_19ConicRevolutionFace_curvature(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_9curvature_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_19ConicRevolutionFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_19ConicRevolutionFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_19ConicRevolutionFace_conic_const(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_19ConicRevolutionFace_conic_const(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_11conic_const_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ConicRevolutionFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_19ConicRevolutionFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ConicRevolutionFace[] = {
  {(char *)"curvature", __pyx_getprop_7raypier_4core_6cfaces_19ConicRevolutionFace_curvature, __pyx_setprop_7raypier_4core_6cfaces_19ConicRevolutionFace_curvature, (char *)0, 0},
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_19ConicRevolutionFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_19ConicRevolutionFace_z_height, (char *)0, 0},
  {(char *)"conic_const", __pyx_getprop_7raypier_4core_6cfaces_19ConicRevolutionFace_conic_const, __pyx_setprop_7raypier_4core_6cfaces_19ConicRevolutionFace_conic_const, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ConicRevolutionFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ConicRevolutionFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "This is surface of revolution formed from a conic section. Spherical and ellipsoidal faces\n    are a special case of this.\n    \n    curvature = radius of curvature\n    ", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ConicRevolutionFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ConicRevolutionFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ConicRevolutionFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_AsphericFace __pyx_vtable_7raypier_4core_6cfaces_AsphericFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_AsphericFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_AsphericFace;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_curvature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_9curvature_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_curvature(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_9curvature_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_conic_const(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_11conic_const_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_conic_const(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_11conic_const_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A4(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A4_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A4(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A4_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A6(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A6_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A6(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A6_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A8(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A8_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A8(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_2A8_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A10(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A10_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A10(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A10_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A12(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A12_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A12(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A12_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A14(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A14_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A14(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A14_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A16(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A16_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A16(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3A16_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_atol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_4atol_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_atol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_12AsphericFace_4atol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_AsphericFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_12AsphericFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_AsphericFace[] = {
  {(char *)"curvature", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_curvature, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_curvature, (char *)0, 0},
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_z_height, (char *)0, 0},
  {(char *)"conic_const", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_conic_const, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_conic_const, (char *)0, 0},
  {(char *)"A4", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A4, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A4, (char *)0, 0},
  {(char *)"A6", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A6, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A6, (char *)0, 0},
  {(char *)"A8", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A8, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A8, (char *)0, 0},
  {(char *)"A10", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A10, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A10, (char *)0, 0},
  {(char *)"A12", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A12, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A12, (char *)0, 0},
  {(char *)"A14", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A14, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A14, (char *)0, 0},
  {(char *)"A16", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_A16, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_A16, (char *)0, 0},
  {(char *)"atol", __pyx_getprop_7raypier_4core_6cfaces_12AsphericFace_atol, __pyx_setprop_7raypier_4core_6cfaces_12AsphericFace_atol, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_AsphericFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.AsphericFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_AsphericFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "This is the general aspheric lens surface formula.\n    \n    curvature = radius of curvature\n    ", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_AsphericFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_AsphericFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_AsphericFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_ExtendedPolynomialFace __pyx_vtable_7raypier_4core_6cfaces_ExtendedPolynomialFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_ExtendedPolynomialFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_ExtendedPolynomialFace;
  p->_coefs.data = NULL;
  p->_coefs.memview = NULL;
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtendedPolynomialFace(PyObject *o) {
  struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __PYX_XDEC_MEMVIEW(&p->_coefs, 1);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace(o);
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_curvature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_curvature(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_9curvature_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_conic_const(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_conic_const(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11conic_const_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_norm_radius(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_norm_radius(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_11norm_radius_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_z_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_z_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_8z_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_coefs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_coefs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5coefs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_ExtendedPolynomialFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_22ExtendedPolynomialFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_ExtendedPolynomialFace[] = {
  {(char *)"curvature", __pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_curvature, __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_curvature, (char *)0, 0},
  {(char *)"conic_const", __pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_conic_const, __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_conic_const, (char *)0, 0},
  {(char *)"norm_radius", __pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_norm_radius, __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_norm_radius, (char *)0, 0},
  {(char *)"z_height", __pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_z_height, __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_z_height, (char *)0, 0},
  {(char *)"coefs", __pyx_getprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_coefs, __pyx_setprop_7raypier_4core_6cfaces_22ExtendedPolynomialFace_coefs, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.ExtendedPolynomialFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_ExtendedPolynomialFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ExtendedPolynomialFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Extended polynomial\n    ", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_ExtendedPolynomialFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_ExtendedPolynomialFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_ExtendedPolynomialFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_7raypier_4core_6cfaces_DistortionFace __pyx_vtable_7raypier_4core_6cfaces_DistortionFace;

static PyObject *__pyx_tp_new_7raypier_4core_6cfaces_DistortionFace(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *p;
  PyObject *o = __pyx_tp_new_7raypier_4core_6cfaces_ShapedFace(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__pyx_vtabptr_7raypier_4core_6cfaces_DistortionFace;
  p->base_face = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)Py_None); Py_INCREF(Py_None);
  p->distortion = ((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7raypier_4core_6cfaces_DistortionFace(PyObject *o) {
  struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->base_face);
  Py_CLEAR(p->distortion);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7raypier_4core_6cfaces_ShapedFace(o);
}

static int __pyx_tp_traverse_7raypier_4core_6cfaces_DistortionFace(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)o;
  e = __pyx_tp_traverse_7raypier_4core_6cfaces_ShapedFace(o, v, a); if (e) return e;
  if (p->base_face) {
    e = (*v)(((PyObject *)p->base_face), a); if (e) return e;
  }
  if (p->distortion) {
    e = (*v)(((PyObject *)p->distortion), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7raypier_4core_6cfaces_DistortionFace(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *p = (struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace *)o;
  __pyx_tp_clear_7raypier_4core_6cfaces_ShapedFace(o);
  tmp = ((PyObject*)p->base_face);
  p->base_face = ((struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->distortion);
  p->distortion = ((struct __pyx_obj_7raypier_4core_7ctracer_Distortion *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_14DistortionFace_base_face(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_14DistortionFace_base_face(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_9base_face_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_14DistortionFace_distortion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_14DistortionFace_distortion(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_3__set__(o, v);
  }
  else {
    return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_10distortion_5__del__(o);
  }
}

static PyObject *__pyx_getprop_7raypier_4core_6cfaces_14DistortionFace_accuracy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_8accuracy_1__get__(o);
}

static int __pyx_setprop_7raypier_4core_6cfaces_14DistortionFace_accuracy(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7raypier_4core_6cfaces_14DistortionFace_8accuracy_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7raypier_4core_6cfaces_DistortionFace[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7raypier_4core_6cfaces_14DistortionFace_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7raypier_4core_6cfaces_DistortionFace[] = {
  {(char *)"base_face", __pyx_getprop_7raypier_4core_6cfaces_14DistortionFace_base_face, __pyx_setprop_7raypier_4core_6cfaces_14DistortionFace_base_face, (char *)0, 0},
  {(char *)"distortion", __pyx_getprop_7raypier_4core_6cfaces_14DistortionFace_distortion, __pyx_setprop_7raypier_4core_6cfaces_14DistortionFace_distortion, (char *)0, 0},
  {(char *)"accuracy", __pyx_getprop_7raypier_4core_6cfaces_14DistortionFace_accuracy, __pyx_setprop_7raypier_4core_6cfaces_14DistortionFace_accuracy, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7raypier_4core_6cfaces_DistortionFace = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.DistortionFace", /*tp_name*/
  sizeof(struct __pyx_obj_7raypier_4core_6cfaces_DistortionFace), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7raypier_4core_6cfaces_DistortionFace, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "This class wraps another ShapedFace object, and applies a small distortion to it's\n    surface geometry. The distortion is given by an instance of a Distortion subclass\n    ", /*tp_doc*/
  __pyx_tp_traverse_7raypier_4core_6cfaces_DistortionFace, /*tp_traverse*/
  __pyx_tp_clear_7raypier_4core_6cfaces_DistortionFace, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7raypier_4core_6cfaces_DistortionFace, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7raypier_4core_6cfaces_DistortionFace, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7raypier_4core_6cfaces_DistortionFace, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "raypier.core.cfaces._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cfaces(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cfaces},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cfaces",
    __pyx_k_Cython_module_for_Face_definiti, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_u_A10, __pyx_k_A10, sizeof(__pyx_k_A10), 0, 1, 0, 1},
  {&__pyx_n_u_A12, __pyx_k_A12, sizeof(__pyx_k_A12), 0, 1, 0, 1},
  {&__pyx_n_u_A14, __pyx_k_A14, sizeof(__pyx_k_A14), 0, 1, 0, 1},
  {&__pyx_n_u_A16, __pyx_k_A16, sizeof(__pyx_k_A16), 0, 1, 0, 1},
  {&__pyx_n_u_A4, __pyx_k_A4, sizeof(__pyx_k_A4), 0, 1, 0, 1},
  {&__pyx_n_u_A6, __pyx_k_A6, sizeof(__pyx_k_A6), 0, 1, 0, 1},
  {&__pyx_n_u_A8, __pyx_k_A8, sizeof(__pyx_k_A8), 0, 1, 0, 1},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_AsphericFace, __pyx_k_AsphericFace, sizeof(__pyx_k_AsphericFace), 0, 0, 1, 1},
  {&__pyx_n_s_AxiconFace, __pyx_k_AxiconFace, sizeof(__pyx_k_AxiconFace), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_CircularFace, __pyx_k_CircularFace, sizeof(__pyx_k_CircularFace), 0, 0, 1, 1},
  {&__pyx_n_s_ConicRevolutionFace, __pyx_k_ConicRevolutionFace, sizeof(__pyx_k_ConicRevolutionFace), 0, 0, 1, 1},
  {&__pyx_n_s_CylindericalFace, __pyx_k_CylindericalFace, sizeof(__pyx_k_CylindericalFace), 0, 0, 1, 1},
  {&__pyx_n_s_DistortionFace, __pyx_k_DistortionFace, sizeof(__pyx_k_DistortionFace), 0, 0, 1, 1},
  {&__pyx_n_s_ElipticalPlaneFace, __pyx_k_ElipticalPlaneFace, sizeof(__pyx_k_ElipticalPlaneFace), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_n_s_EllipsoidalFace, __pyx_k_EllipsoidalFace, sizeof(__pyx_k_EllipsoidalFace), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_ExtendedPolynomialFace, __pyx_k_ExtendedPolynomialFace, sizeof(__pyx_k_ExtendedPolynomialFace), 0, 0, 1, 1},
  {&__pyx_n_s_ExtrudedBezierFace, __pyx_k_ExtrudedBezierFace, sizeof(__pyx_k_ExtrudedBezierFace), 0, 0, 1, 1},
  {&__pyx_n_s_ExtrudedPlanarFace, __pyx_k_ExtrudedPlanarFace, sizeof(__pyx_k_ExtrudedPlanarFace), 0, 0, 1, 1},
  {&__pyx_n_s_ImplicitBoundedFace, __pyx_k_ImplicitBoundedFace, sizeof(__pyx_k_ImplicitBoundedFace), 0, 0, 1, 1},
  {&__pyx_n_s_ImplicitBoundedPlanarFace, __pyx_k_ImplicitBoundedPlanarFace, sizeof(__pyx_k_ImplicitBoundedPlanarFace), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_k_Incompatible_checksums_0x_x_vs_0_3, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_3), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_n_s_NullSurface, __pyx_k_NullSurface, sizeof(__pyx_k_NullSurface), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_n_s_OffAxisParabolicFace, __pyx_k_OffAxisParabolicFace, sizeof(__pyx_k_OffAxisParabolicFace), 0, 0, 1, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_s_Pickling_of_struct_members_such, __pyx_k_Pickling_of_struct_members_such, sizeof(__pyx_k_Pickling_of_struct_members_such), 0, 0, 1, 0},
  {&__pyx_n_s_Plane, __pyx_k_Plane, sizeof(__pyx_k_Plane), 0, 0, 1, 1},
  {&__pyx_n_s_PolygonFace, __pyx_k_PolygonFace, sizeof(__pyx_k_PolygonFace), 0, 0, 1, 1},
  {&__pyx_n_s_RectangularFace, __pyx_k_RectangularFace, sizeof(__pyx_k_RectangularFace), 0, 0, 1, 1},
  {&__pyx_n_s_SaddleFace, __pyx_k_SaddleFace, sizeof(__pyx_k_SaddleFace), 0, 0, 1, 1},
  {&__pyx_n_s_ShapedFace, __pyx_k_ShapedFace, sizeof(__pyx_k_ShapedFace), 0, 0, 1, 1},
  {&__pyx_n_s_ShapedPlanarFace, __pyx_k_ShapedPlanarFace, sizeof(__pyx_k_ShapedPlanarFace), 0, 0, 1, 1},
  {&__pyx_n_s_ShapedSphericalFace, __pyx_k_ShapedSphericalFace, sizeof(__pyx_k_ShapedSphericalFace), 0, 0, 1, 1},
  {&__pyx_n_s_SphericalFace, __pyx_k_SphericalFace, sizeof(__pyx_k_SphericalFace), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_n_s_X_bounds, __pyx_k_X_bounds, sizeof(__pyx_k_X_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
  {&__pyx_n_s_Y_bounds, __pyx_k_Y_bounds, sizeof(__pyx_k_Y_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_Z_bounds, __pyx_k_Z_bounds, sizeof(__pyx_k_Z_bounds), 0, 0, 1, 1},
  {&__pyx_n_u_accuracy, __pyx_k_accuracy, sizeof(__pyx_k_accuracy), 0, 1, 0, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
  {&__pyx_n_u_atol, __pyx_k_atol, sizeof(__pyx_k_atol), 0, 1, 0, 1},
  {&__pyx_n_s_axes, __pyx_k_axes, sizeof(__pyx_k_axes), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_u_base_face, __pyx_k_base_face, sizeof(__pyx_k_base_face), 0, 1, 0, 1},
  {&__pyx_n_s_beziercurves, __pyx_k_beziercurves, sizeof(__pyx_k_beziercurves), 0, 0, 1, 1},
  {&__pyx_n_u_boundary, __pyx_k_boundary, sizeof(__pyx_k_boundary), 0, 1, 0, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_coefs, __pyx_k_coefs, sizeof(__pyx_k_coefs), 0, 0, 1, 1},
  {&__pyx_n_u_coefs, __pyx_k_coefs, sizeof(__pyx_k_coefs), 0, 1, 0, 1},
  {&__pyx_n_s_conic_const, __pyx_k_conic_const, sizeof(__pyx_k_conic_const), 0, 0, 1, 1},
  {&__pyx_n_u_conic_const, __pyx_k_conic_const, sizeof(__pyx_k_conic_const), 0, 1, 0, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_curvature, __pyx_k_curvature, sizeof(__pyx_k_curvature), 0, 0, 1, 1},
  {&__pyx_n_u_curvature, __pyx_k_curvature, sizeof(__pyx_k_curvature), 0, 1, 0, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_u_diameter, __pyx_k_diameter, sizeof(__pyx_k_diameter), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_u_distortion, __pyx_k_distortion, sizeof(__pyx_k_distortion), 0, 1, 0, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_ellipse_trans, __pyx_k_ellipse_trans, sizeof(__pyx_k_ellipse_trans), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_kp_u_error_Bezier_normal_not_found_po, __pyx_k_error_Bezier_normal_not_found_po, sizeof(__pyx_k_error_Bezier_normal_not_found_po), 0, 1, 0, 0},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_u_g_x, __pyx_k_g_x, sizeof(__pyx_k_g_x), 0, 1, 0, 1},
  {&__pyx_n_u_g_y, __pyx_k_g_y, sizeof(__pyx_k_g_y), 0, 1, 0, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_get_element, __pyx_k_get_element, sizeof(__pyx_k_get_element), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_u_gradient, __pyx_k_gradient, sizeof(__pyx_k_gradient), 0, 1, 0, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inverse_transform, __pyx_k_inverse_transform, sizeof(__pyx_k_inverse_transform), 0, 0, 1, 1},
  {&__pyx_n_u_invert_normals, __pyx_k_invert_normals, sizeof(__pyx_k_invert_normals), 0, 1, 0, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_u_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 1, 0, 1},
  {&__pyx_n_s_linear_inverse, __pyx_k_linear_inverse, sizeof(__pyx_k_linear_inverse), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_norm_radius, __pyx_k_norm_radius, sizeof(__pyx_k_norm_radius), 0, 0, 1, 1},
  {&__pyx_n_u_norm_radius, __pyx_k_norm_radius, sizeof(__pyx_k_norm_radius), 0, 1, 0, 1},
  {&__pyx_n_s_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 0, 1, 1},
  {&__pyx_n_u_normal, __pyx_k_normal, sizeof(__pyx_k_normal), 0, 1, 0, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_u_nterms, __pyx_k_nterms, sizeof(__pyx_k_nterms), 0, 1, 0, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_u_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 1, 0, 1},
  {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
  {&__pyx_n_u_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 1, 0, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_point_in_polygon, __pyx_k_point_in_polygon, sizeof(__pyx_k_point_in_polygon), 0, 0, 1, 1},
  {&__pyx_n_s_point_list, __pyx_k_point_list, sizeof(__pyx_k_point_list), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pts, __pyx_k_pts, sizeof(__pyx_k_pts), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_ImplicitBoundedFa, __pyx_k_pyx_unpickle_ImplicitBoundedFa, sizeof(__pyx_k_pyx_unpickle_ImplicitBoundedFa), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_OffAxisParabolicF, __pyx_k_pyx_unpickle_OffAxisParabolicF, sizeof(__pyx_k_pyx_unpickle_OffAxisParabolicF), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_u_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 1, 0, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raypier_core_cfaces, __pyx_k_raypier_core_cfaces, sizeof(__pyx_k_raypier_core_cfaces), 0, 0, 1, 1},
  {&__pyx_kp_s_raypier_core_cfaces_pyx, __pyx_k_raypier_core_cfaces_pyx, sizeof(__pyx_k_raypier_core_cfaces_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_raypier_core_cimplicit_surfs, __pyx_k_raypier_core_cimplicit_surfs, sizeof(__pyx_k_raypier_core_cimplicit_surfs), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_roots, __pyx_k_roots, sizeof(__pyx_k_roots), 0, 0, 1, 1},
  {&__pyx_n_s_rotation, __pyx_k_rotation, sizeof(__pyx_k_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_u_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 1, 0, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_sync_transform, __pyx_k_sync_transform, sizeof(__pyx_k_sync_transform), 0, 0, 1, 1},
  {&__pyx_n_u_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_transform, __pyx_k_transform, sizeof(__pyx_k_transform), 0, 0, 1, 1},
  {&__pyx_n_s_translation, __pyx_k_translation, sizeof(__pyx_k_translation), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_u_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 1, 0, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_u_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 1, 0, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_u_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 1, 0, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_xy_points, __pyx_k_xy_points, sizeof(__pyx_k_xy_points), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_u_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 1, 0, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_u_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 1, 0, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_u_z1, __pyx_k_z1, sizeof(__pyx_k_z1), 0, 1, 0, 1},
  {&__pyx_n_u_z2, __pyx_k_z2, sizeof(__pyx_k_z2), 0, 1, 0, 1},
  {&__pyx_n_s_z_height, __pyx_k_z_height, sizeof(__pyx_k_z_height), 0, 0, 1, 1},
  {&__pyx_n_u_z_height, __pyx_k_z_height, sizeof(__pyx_k_z_height), 0, 1, 0, 1},
  {&__pyx_n_s_z_height_1, __pyx_k_z_height_1, sizeof(__pyx_k_z_height_1), 0, 0, 1, 1},
  {&__pyx_n_s_z_height_2, __pyx_k_z_height_2, sizeof(__pyx_k_z_height_2), 0, 0, 1, 1},
  {&__pyx_n_s_z_plane, __pyx_k_z_plane, sizeof(__pyx_k_z_plane), 0, 0, 1, 1},
  {&__pyx_n_u_z_plane, __pyx_k_z_plane, sizeof(__pyx_k_z_plane), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 263, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 1031, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 1046, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 1046, __pyx_L1_error)
  #endif
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 944, __pyx_L1_error)
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) __PYX_ERR(1, 81, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 84, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 94, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 18, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 19, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 148, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 404, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 613, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "raypier/core/cfaces.pyx":733
 *         long double R2_Q3 = R*R - Q*Q*Q
 *         long double theta
 *         poly_roots x= ((0.0,0.0,0.0),0)             # <<<<<<<<<<<<<<
 *     if fabs(a) <= 0.0000000001:
 *         #^this, precision is less than ideal here
 */
  __pyx_tuple__19 = PyTuple_Pack(3, __pyx_float_0_0, __pyx_float_0_0, __pyx_float_0_0); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_tuple__19, __pyx_int_0); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "raypier/core/cfaces.pyx":1031
 * 
 *         #how did you get here?  p was supposed to be a point on the curve!
 *         print("error: Bezier normal not found, point not actually on curve!")             # <<<<<<<<<<<<<<
 *         p.x=p.y=p.z = 0
 *         return p
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_error_Bezier_normal_not_found_po); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "raypier/core/cfaces.pyx":1078
 * 
 *         def __set__(self, pts):
 *             data = np.ascontiguousarray(pts, dtype=np.float64).reshape(-1,2)             # <<<<<<<<<<<<<<
 *             self._xy_points=data
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_int_neg_1, __pyx_int_2); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("Pickling of struct members such as self.inv_trans,self.trans must be explicitly requested with @auto_pickle(True)")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Pickling_of_struct_members_such); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_tuple__44 = PyTuple_Pack(3, __pyx_int_232498138, __pyx_int_132898716, __pyx_int_180632545); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_int_38528712, __pyx_int_228929714, __pyx_int_159202165); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(2, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "../../../miniconda3/envs/raypier_py38/lib/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(2, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "FromPyStructUtility":19
 *         value = obj['roots']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'roots'")             # <<<<<<<<<<<<<<
 *     result.roots = value
 *     try:
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "FromPyStructUtility":24
 *         value = obj['n']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'n'")             # <<<<<<<<<<<<<<
 *     result.n = value
 *     return result
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__61 = PyTuple_New(1); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__61, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__64 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__64)) __PYX_ERR(1, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__64);
  __Pyx_GIVEREF(__pyx_slice__64);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_tuple__68 = PyTuple_Pack(3, __pyx_int_184977713, __pyx_int_136983863, __pyx_int_112105877); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "raypier/core/cfaces.pyx":1059
 * 
 * 
 * def point_in_polygon(double X, double Y, point_list):             # <<<<<<<<<<<<<<
 *     pts = np.ascontiguousarray(point_list, dtype=np.float64)
 *     assert pts.shape[1]==2
 */
  __pyx_tuple__69 = PyTuple_Pack(4, __pyx_n_s_X, __pyx_n_s_Y, __pyx_n_s_point_list, __pyx_n_s_pts); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_raypier_core_cfaces_pyx, __pyx_n_s_point_in_polygon, 1059, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 1059, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImplicitBoundedFace(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__71 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_ImplicitBoundedFa, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__73 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OffAxisParabolicF, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__80 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_5_0 = PyFloat_FromDouble(5.0); if (unlikely(!__pyx_float_5_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_0 = PyFloat_FromDouble(10.0); if (unlikely(!__pyx_float_10_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_6 = PyFloat_FromDouble(1e-6); if (unlikely(!__pyx_float_1eneg_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_25_0 = PyFloat_FromDouble(25.0); if (unlikely(!__pyx_float_25_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_0 = PyFloat_FromDouble(100.0); if (unlikely(!__pyx_float_100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0eneg_8 = PyFloat_FromDouble(1.0e-8); if (unlikely(!__pyx_float_1_0eneg_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_38528712 = PyInt_FromLong(38528712L); if (unlikely(!__pyx_int_38528712)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_132898716 = PyInt_FromLong(132898716L); if (unlikely(!__pyx_int_132898716)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_159202165 = PyInt_FromLong(159202165L); if (unlikely(!__pyx_int_159202165)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_180632545 = PyInt_FromLong(180632545L); if (unlikely(!__pyx_int_180632545)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228929714 = PyInt_FromLong(228929714L); if (unlikely(!__pyx_int_228929714)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_232498138 = PyInt_FromLong(232498138L); if (unlikely(!__pyx_int_232498138)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("raypier.core.ctracer"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7raypier_4core_7ctracer_Face = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "Face", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Face), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_Face) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_Face = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Face*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_Face->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_Face)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace = &__pyx_vtable_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedFace.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_10ShapedFace_eval_z_c;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedFace.eval_implicit_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double, double))__pyx_f_7raypier_4core_6cfaces_10ShapedFace_eval_implicit_c;
  __pyx_type_7raypier_4core_6cfaces_ShapedFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ShapedFace) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ShapedFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ShapedFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ShapedFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ShapedFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ShapedFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ShapedFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ShapedFace) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ShapedFace) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ShapedFace = &__pyx_type_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_CircularFace = &__pyx_vtable_7raypier_4core_6cfaces_CircularFace;
  __pyx_vtable_7raypier_4core_6cfaces_CircularFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_CircularFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_12CircularFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_CircularFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_12CircularFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_CircularFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_CircularFace) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_CircularFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_CircularFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_CircularFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_CircularFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_CircularFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_CircularFace) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CircularFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_CircularFace) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_CircularFace) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_CircularFace = &__pyx_type_7raypier_4core_6cfaces_CircularFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ShapedPlanarFace = &__pyx_vtable_7raypier_4core_6cfaces_ShapedPlanarFace;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedPlanarFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedPlanarFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedPlanarFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedPlanarFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_eval_z_c;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedPlanarFace.__pyx_base.eval_implicit_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double, double))__pyx_f_7raypier_4core_6cfaces_16ShapedPlanarFace_eval_implicit_c;
  __pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ShapedPlanarFace) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ShapedPlanarFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ShapedPlanarFace = &__pyx_type_7raypier_4core_6cfaces_ShapedPlanarFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedFace = &__pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedFace;
  __pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedFace) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImplicitBoundedFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedFace = &__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace = &__pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace;
  __pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedFace;
  __pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_25ImplicitBoundedPlanarFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ImplicitBoundedPlanarFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace = &__pyx_type_7raypier_4core_6cfaces_ImplicitBoundedPlanarFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ElipticalPlaneFace = &__pyx_vtable_7raypier_4core_6cfaces_ElipticalPlaneFace;
  __pyx_vtable_7raypier_4core_6cfaces_ElipticalPlaneFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_ElipticalPlaneFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_18ElipticalPlaneFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ElipticalPlaneFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_18ElipticalPlaneFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ElipticalPlaneFace) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ElipticalPlaneFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ElipticalPlaneFace = &__pyx_type_7raypier_4core_6cfaces_ElipticalPlaneFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_RectangularFace = &__pyx_vtable_7raypier_4core_6cfaces_RectangularFace;
  __pyx_vtable_7raypier_4core_6cfaces_RectangularFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_RectangularFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_15RectangularFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_RectangularFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_15RectangularFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_RectangularFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_RectangularFace) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_RectangularFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_RectangularFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_RectangularFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_RectangularFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_RectangularFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_RectangularFace) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RectangularFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_RectangularFace) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_RectangularFace) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_RectangularFace = &__pyx_type_7raypier_4core_6cfaces_RectangularFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_SphericalFace = &__pyx_vtable_7raypier_4core_6cfaces_SphericalFace;
  __pyx_vtable_7raypier_4core_6cfaces_SphericalFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_SphericalFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_13SphericalFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_SphericalFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_13SphericalFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_SphericalFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_SphericalFace) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_SphericalFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_SphericalFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_SphericalFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_SphericalFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_SphericalFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_SphericalFace) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SphericalFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_SphericalFace) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_SphericalFace) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_SphericalFace = &__pyx_type_7raypier_4core_6cfaces_SphericalFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ShapedSphericalFace = &__pyx_vtable_7raypier_4core_6cfaces_ShapedSphericalFace;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedSphericalFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedSphericalFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedSphericalFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedSphericalFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_eval_z_c;
  __pyx_vtable_7raypier_4core_6cfaces_ShapedSphericalFace.__pyx_base.eval_implicit_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double, double))__pyx_f_7raypier_4core_6cfaces_19ShapedSphericalFace_eval_implicit_c;
  __pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ShapedSphericalFace) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ShapedSphericalFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ShapedSphericalFace = &__pyx_type_7raypier_4core_6cfaces_ShapedSphericalFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedPlanarFace = &__pyx_vtable_7raypier_4core_6cfaces_ExtrudedPlanarFace;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedPlanarFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedPlanarFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedPlanarFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedPlanarFace.calc_normal = (PyObject *(*)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedPlanarFace *))__pyx_f_7raypier_4core_6cfaces_18ExtrudedPlanarFace_calc_normal;
  __pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedPlanarFace) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtrudedPlanarFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ExtrudedPlanarFace = &__pyx_type_7raypier_4core_6cfaces_ExtrudedPlanarFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedBezierFace = &__pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace.ccw = (int (*)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t))__pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_ccw;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace.line_seg_overlap = (int (*)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t))__pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_line_seg_overlap;
  __pyx_vtable_7raypier_4core_6cfaces_ExtrudedBezierFace.pnt_in_hull = (int (*)(struct __pyx_obj_7raypier_4core_6cfaces_ExtrudedBezierFace *, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t, struct __pyx_t_7raypier_4core_6cfaces_flatvector_t))__pyx_f_7raypier_4core_6cfaces_18ExtrudedBezierFace_pnt_in_hull;
  __pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace) < 0) __PYX_ERR(0, 782, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ExtrudedBezierFace) < 0) __PYX_ERR(0, 782, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtrudedBezierFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace) < 0) __PYX_ERR(0, 782, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace) < 0) __PYX_ERR(0, 782, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ExtrudedBezierFace = &__pyx_type_7raypier_4core_6cfaces_ExtrudedBezierFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_PolygonFace = &__pyx_vtable_7raypier_4core_6cfaces_PolygonFace;
  __pyx_vtable_7raypier_4core_6cfaces_PolygonFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_PolygonFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_11PolygonFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_PolygonFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_11PolygonFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_PolygonFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_PolygonFace) < 0) __PYX_ERR(0, 1065, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_PolygonFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_PolygonFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_PolygonFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_PolygonFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_PolygonFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_PolygonFace) < 0) __PYX_ERR(0, 1065, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PolygonFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_PolygonFace) < 0) __PYX_ERR(0, 1065, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_PolygonFace) < 0) __PYX_ERR(0, 1065, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_PolygonFace = &__pyx_type_7raypier_4core_6cfaces_PolygonFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_OffAxisParabolicFace = &__pyx_vtable_7raypier_4core_6cfaces_OffAxisParabolicFace;
  __pyx_vtable_7raypier_4core_6cfaces_OffAxisParabolicFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_OffAxisParabolicFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_20OffAxisParabolicFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_OffAxisParabolicFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_20OffAxisParabolicFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_OffAxisParabolicFace) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OffAxisParabolicFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace) < 0) __PYX_ERR(0, 1109, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_OffAxisParabolicFace = &__pyx_type_7raypier_4core_6cfaces_OffAxisParabolicFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_EllipsoidalFace = &__pyx_vtable_7raypier_4core_6cfaces_EllipsoidalFace;
  __pyx_vtable_7raypier_4core_6cfaces_EllipsoidalFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_7ctracer_Face;
  __pyx_vtable_7raypier_4core_6cfaces_EllipsoidalFace.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_15EllipsoidalFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_EllipsoidalFace.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_15EllipsoidalFace_compute_normal_c;
  __pyx_type_7raypier_4core_6cfaces_EllipsoidalFace.tp_base = __pyx_ptype_7raypier_4core_7ctracer_Face;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_EllipsoidalFace) < 0) __PYX_ERR(0, 1205, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_EllipsoidalFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_EllipsoidalFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_EllipsoidalFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_EllipsoidalFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_EllipsoidalFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_EllipsoidalFace) < 0) __PYX_ERR(0, 1205, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_EllipsoidalFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_EllipsoidalFace) < 0) __PYX_ERR(0, 1205, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_EllipsoidalFace) < 0) __PYX_ERR(0, 1205, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_EllipsoidalFace = &__pyx_type_7raypier_4core_6cfaces_EllipsoidalFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_SaddleFace = &__pyx_vtable_7raypier_4core_6cfaces_SaddleFace;
  __pyx_vtable_7raypier_4core_6cfaces_SaddleFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_SaddleFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_10SaddleFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_SaddleFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_10SaddleFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_SaddleFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_10SaddleFace_eval_z_c;
  __pyx_type_7raypier_4core_6cfaces_SaddleFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_SaddleFace) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_SaddleFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_SaddleFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_SaddleFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_SaddleFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_SaddleFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_SaddleFace) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SaddleFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_SaddleFace) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_SaddleFace) < 0) __PYX_ERR(0, 1314, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_SaddleFace = &__pyx_type_7raypier_4core_6cfaces_SaddleFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_CylindericalFace = &__pyx_vtable_7raypier_4core_6cfaces_CylindericalFace;
  __pyx_vtable_7raypier_4core_6cfaces_CylindericalFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_CylindericalFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_16CylindericalFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_CylindericalFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_16CylindericalFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_CylindericalFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_16CylindericalFace_eval_z_c;
  __pyx_type_7raypier_4core_6cfaces_CylindericalFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_CylindericalFace) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_CylindericalFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_CylindericalFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_CylindericalFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_CylindericalFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_CylindericalFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_CylindericalFace) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_CylindericalFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_CylindericalFace) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_CylindericalFace) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_CylindericalFace = &__pyx_type_7raypier_4core_6cfaces_CylindericalFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_AxiconFace = &__pyx_vtable_7raypier_4core_6cfaces_AxiconFace;
  __pyx_vtable_7raypier_4core_6cfaces_AxiconFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_AxiconFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_10AxiconFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_AxiconFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_10AxiconFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_AxiconFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_10AxiconFace_eval_z_c;
  __pyx_type_7raypier_4core_6cfaces_AxiconFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_AxiconFace) < 0) __PYX_ERR(0, 1492, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_AxiconFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_AxiconFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_AxiconFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_AxiconFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_AxiconFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_AxiconFace) < 0) __PYX_ERR(0, 1492, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AxiconFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_AxiconFace) < 0) __PYX_ERR(0, 1492, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_AxiconFace) < 0) __PYX_ERR(0, 1492, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_AxiconFace = &__pyx_type_7raypier_4core_6cfaces_AxiconFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ConicRevolutionFace = &__pyx_vtable_7raypier_4core_6cfaces_ConicRevolutionFace;
  __pyx_vtable_7raypier_4core_6cfaces_ConicRevolutionFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_ConicRevolutionFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ConicRevolutionFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_ConicRevolutionFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_eval_z_c;
  __pyx_vtable_7raypier_4core_6cfaces_ConicRevolutionFace.__pyx_base.eval_implicit_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double, double))__pyx_f_7raypier_4core_6cfaces_19ConicRevolutionFace_eval_implicit_c;
  __pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace) < 0) __PYX_ERR(0, 1636, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ConicRevolutionFace) < 0) __PYX_ERR(0, 1636, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ConicRevolutionFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace) < 0) __PYX_ERR(0, 1636, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace) < 0) __PYX_ERR(0, 1636, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ConicRevolutionFace = &__pyx_type_7raypier_4core_6cfaces_ConicRevolutionFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_AsphericFace = &__pyx_vtable_7raypier_4core_6cfaces_AsphericFace;
  __pyx_vtable_7raypier_4core_6cfaces_AsphericFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_AsphericFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_12AsphericFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_AsphericFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_12AsphericFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_AsphericFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_12AsphericFace_eval_z_c;
  __pyx_vtable_7raypier_4core_6cfaces_AsphericFace.__pyx_base.eval_implicit_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double, double))__pyx_f_7raypier_4core_6cfaces_12AsphericFace_eval_implicit_c;
  __pyx_type_7raypier_4core_6cfaces_AsphericFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_AsphericFace) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_AsphericFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_AsphericFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_AsphericFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_AsphericFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_AsphericFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_AsphericFace) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AsphericFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_AsphericFace) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_AsphericFace) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_AsphericFace = &__pyx_type_7raypier_4core_6cfaces_AsphericFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_ExtendedPolynomialFace = &__pyx_vtable_7raypier_4core_6cfaces_ExtendedPolynomialFace;
  __pyx_vtable_7raypier_4core_6cfaces_ExtendedPolynomialFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_ExtendedPolynomialFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_ExtendedPolynomialFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_ExtendedPolynomialFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_eval_z_c;
  __pyx_vtable_7raypier_4core_6cfaces_ExtendedPolynomialFace.__pyx_base.eval_implicit_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double, double))__pyx_f_7raypier_4core_6cfaces_22ExtendedPolynomialFace_eval_implicit_c;
  __pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace) < 0) __PYX_ERR(0, 2015, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_ExtendedPolynomialFace) < 0) __PYX_ERR(0, 2015, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtendedPolynomialFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace) < 0) __PYX_ERR(0, 2015, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace) < 0) __PYX_ERR(0, 2015, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_ExtendedPolynomialFace = &__pyx_type_7raypier_4core_6cfaces_ExtendedPolynomialFace;
  __pyx_vtabptr_7raypier_4core_6cfaces_DistortionFace = &__pyx_vtable_7raypier_4core_6cfaces_DistortionFace;
  __pyx_vtable_7raypier_4core_6cfaces_DistortionFace.__pyx_base = *__pyx_vtabptr_7raypier_4core_6cfaces_ShapedFace;
  __pyx_vtable_7raypier_4core_6cfaces_DistortionFace.__pyx_base.__pyx_base.intersect_c = (struct __pyx_t_7raypier_4core_7ctracer_intersect_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_14DistortionFace_intersect_c;
  __pyx_vtable_7raypier_4core_6cfaces_DistortionFace.__pyx_base.__pyx_base.compute_normal_c = (struct __pyx_t_7raypier_4core_7ctracer_vector_t (*)(struct __pyx_obj_7raypier_4core_7ctracer_Face *, struct __pyx_t_7raypier_4core_7ctracer_vector_t, int))__pyx_f_7raypier_4core_6cfaces_14DistortionFace_compute_normal_c;
  __pyx_vtable_7raypier_4core_6cfaces_DistortionFace.__pyx_base.eval_z_c = (double (*)(struct __pyx_obj_7raypier_4core_6cfaces_ShapedFace *, double, double))__pyx_f_7raypier_4core_6cfaces_14DistortionFace_eval_z_c;
  __pyx_type_7raypier_4core_6cfaces_DistortionFace.tp_base = __pyx_ptype_7raypier_4core_6cfaces_ShapedFace;
  if (PyType_Ready(&__pyx_type_7raypier_4core_6cfaces_DistortionFace) < 0) __PYX_ERR(0, 2208, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_7raypier_4core_6cfaces_DistortionFace.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7raypier_4core_6cfaces_DistortionFace.tp_dictoffset && __pyx_type_7raypier_4core_6cfaces_DistortionFace.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7raypier_4core_6cfaces_DistortionFace.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7raypier_4core_6cfaces_DistortionFace.tp_dict, __pyx_vtabptr_7raypier_4core_6cfaces_DistortionFace) < 0) __PYX_ERR(0, 2208, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_DistortionFace, (PyObject *)&__pyx_type_7raypier_4core_6cfaces_DistortionFace) < 0) __PYX_ERR(0, 2208, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7raypier_4core_6cfaces_DistortionFace) < 0) __PYX_ERR(0, 2208, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_6cfaces_DistortionFace = &__pyx_type_7raypier_4core_6cfaces_DistortionFace;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("raypier.core.ctracer"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7raypier_4core_7ctracer_Transform = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "Transform", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Transform), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_Transform) __PYX_ERR(3, 106, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Ray = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "Ray", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Ray), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_Ray) __PYX_ERR(3, 110, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_ParabasalRay = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "ParabasalRay", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_ParabasalRay), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_ParabasalRay) __PYX_ERR(3, 116, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Gausslet = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "Gausslet", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Gausslet), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_Gausslet) __PYX_ERR(3, 122, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_RayArrayView = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "RayArrayView", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_RayArrayView), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_RayArrayView) __PYX_ERR(3, 126, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayArrayView*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_RayArrayView->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_RayArrayView)) __PYX_ERR(3, 126, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_RayCollection = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "RayCollection", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_RayCollection), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_RayCollection) __PYX_ERR(3, 132, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_RayCollection = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_RayCollection*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_RayCollection->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_RayCollection)) __PYX_ERR(3, 132, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_GaussletCollection = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "GaussletCollection", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollection), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection) __PYX_ERR(3, 150, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_GaussletCollection = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletCollection*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_GaussletCollection->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_GaussletCollection)) __PYX_ERR(3, 150, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_GaussletBaseRayView = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "GaussletBaseRayView", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_GaussletBaseRayView), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_GaussletBaseRayView) __PYX_ERR(3, 162, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_GaussletBaseRayView = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_GaussletBaseRayView*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_GaussletBaseRayView->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_GaussletBaseRayView)) __PYX_ERR(3, 162, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_RayCollectionIterator = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "RayCollectionIterator", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_RayCollectionIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_RayCollectionIterator) __PYX_ERR(3, 167, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_GaussletCollectionIterator = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "GaussletCollectionIterator", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_GaussletCollectionIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_GaussletCollectionIterator) __PYX_ERR(3, 173, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "InterfaceMaterial", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_InterfaceMaterial), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial) __PYX_ERR(3, 179, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_InterfaceMaterial = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_InterfaceMaterial*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_InterfaceMaterial->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_InterfaceMaterial)) __PYX_ERR(3, 179, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Distortion = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "Distortion", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Distortion), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_Distortion) __PYX_ERR(3, 203, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_Distortion = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Distortion*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_Distortion->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_Distortion)) __PYX_ERR(3, 203, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_Shape = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "Shape", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_Shape), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_Shape) __PYX_ERR(3, 208, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_Shape = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_Shape*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_Shape->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_Shape)) __PYX_ERR(3, 208, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "ImplicitSurface", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_ImplicitSurface), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface) __PYX_ERR(3, 212, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_ImplicitSurface = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_ImplicitSurface*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_ImplicitSurface->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_ImplicitSurface)) __PYX_ERR(3, 212, __pyx_L1_error)
  __pyx_ptype_7raypier_4core_7ctracer_FaceList = __Pyx_ImportType(__pyx_t_1, "raypier.core.ctracer", "FaceList", sizeof(struct __pyx_obj_7raypier_4core_7ctracer_FaceList), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7raypier_4core_7ctracer_FaceList) __PYX_ERR(3, 233, __pyx_L1_error)
  __pyx_vtabptr_7raypier_4core_7ctracer_FaceList = (struct __pyx_vtabstruct_7raypier_4core_7ctracer_FaceList*)__Pyx_GetVtable(__pyx_ptype_7raypier_4core_7ctracer_FaceList->tp_dict); if (unlikely(!__pyx_vtabptr_7raypier_4core_7ctracer_FaceList)) __PYX_ERR(3, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 770, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 772, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 774, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 776, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 778, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 780, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 782, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 784, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 786, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 788, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("raypier.core.ctracer"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "INF", (void **)&__pyx_vp_7raypier_4core_7ctracer_INF, "double") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "NPARA", (void **)&__pyx_vp_7raypier_4core_7ctracer_NPARA, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "REFL_RAY", (void **)&__pyx_vp_7raypier_4core_7ctracer_REFL_RAY, "unsigned int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "GAUSSLET", (void **)&__pyx_vp_7raypier_4core_7ctracer_GAUSSLET, "unsigned int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "PARABASAL", (void **)&__pyx_vp_7raypier_4core_7ctracer_PARABASAL, "unsigned int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("raypier.core.ctracer"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "transform_c", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_transform_c, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "rotate_c", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_rotate_c, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_transform_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "sep_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_sep_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "multvs_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_multvs_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "addvv_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_addvv_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "subvv_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_subvv_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "dotprod_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_dotprod_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t, struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "norm_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_norm_, "struct __pyx_t_7raypier_4core_7ctracer_vector_t (struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "mag_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_mag_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "mag_sq_", (void (**)(void))&__pyx_f_7raypier_4core_7ctracer_mag_sq_, "double (struct __pyx_t_7raypier_4core_7ctracer_vector_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcfaces(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcfaces(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cfaces(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cfaces(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cfaces(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyThread_type_lock __pyx_t_3[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cfaces' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cfaces(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cfaces", __pyx_methods, __pyx_k_Cython_module_for_Face_definiti, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_raypier__core__cfaces) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "raypier.core.cfaces")) {
      if (unlikely(PyDict_SetItemString(modules, "raypier.core.cfaces", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "raypier/core/cfaces.pyx":27
 *     double DBL_MAX
 * 
 * cdef double INF=(DBL_MAX+DBL_MAX)             # <<<<<<<<<<<<<<
 * 
 * from .ctracer cimport Face, sep_, \
 */
  __pyx_v_7raypier_4core_6cfaces_INF = (DBL_MAX + DBL_MAX);

  /* "raypier/core/cfaces.pyx":34
 *                 rotate_c, Shape, ImplicitSurface, Distortion, intersect_t
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np_
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":42
 * cdef intersect_t NO_INTERSECTION
 * 
 * NO_INTERSECTION.dist = -1             # <<<<<<<<<<<<<<
 * NO_INTERSECTION.face_idx = -1
 * NO_INTERSECTION.piece_idx = 0
 */
  __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION.dist = -1.0;

  /* "raypier/core/cfaces.pyx":43
 * 
 * NO_INTERSECTION.dist = -1
 * NO_INTERSECTION.face_idx = -1             # <<<<<<<<<<<<<<
 * NO_INTERSECTION.piece_idx = 0
 * 
 */
  __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION.face_idx = -1;

  /* "raypier/core/cfaces.pyx":44
 * NO_INTERSECTION.dist = -1
 * NO_INTERSECTION.face_idx = -1
 * NO_INTERSECTION.piece_idx = 0             # <<<<<<<<<<<<<<
 * 
 * cdef struct flatvector_t:
 */
  __pyx_v_7raypier_4core_6cfaces_NO_INTERSECTION.piece_idx = 0;

  /* "raypier/core/cfaces.pyx":143
 *     cdef public double diameter, offset, z_plane
 * 
 *     params = ['diameter', 'offset']             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_diameter);
  __Pyx_GIVEREF(__pyx_n_u_diameter);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_diameter);
  __Pyx_INCREF(__pyx_n_u_offset);
  __Pyx_GIVEREF(__pyx_n_u_offset);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_offset);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_CircularFace->tp_dict, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_CircularFace);

  /* "raypier/core/cfaces.pyx":310
 *     cdef public double g_x, g_y, diameter
 * 
 *     params = ['diameter']             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_diameter);
  __Pyx_GIVEREF(__pyx_n_u_diameter);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_diameter);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_ElipticalPlaneFace->tp_dict, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_ElipticalPlaneFace);

  /* "raypier/core/cfaces.pyx":351
 *     cdef public double length, width, offset, z_plane
 * 
 *     params = ['length', 'width', 'offset']             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_length);
  __Pyx_GIVEREF(__pyx_n_u_length);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_length);
  __Pyx_INCREF(__pyx_n_u_width);
  __Pyx_GIVEREF(__pyx_n_u_width);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_width);
  __Pyx_INCREF(__pyx_n_u_offset);
  __Pyx_GIVEREF(__pyx_n_u_offset);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_u_offset);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_RectangularFace->tp_dict, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_RectangularFace);

  /* "raypier/core/cfaces.pyx":409
 *     #Don't want curvature in this list in case the owner defines the
 *     #curvature in a different way
 *     params = ['diameter',]             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_diameter);
  __Pyx_GIVEREF(__pyx_n_u_diameter);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_diameter);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_SphericalFace->tp_dict, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_SphericalFace);

  /* "raypier/core/cfaces.pyx":501
 *     #Don't want curvature in this list in case the owner defines the
 *     #curvature in a different way
 *     params = []             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_ShapedSphericalFace->tp_dict, __pyx_n_s_params, __pyx_t_1) < 0) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_ShapedSphericalFace);

  /* "raypier/core/cfaces.pyx":1059
 * 
 * 
 * def point_in_polygon(double X, double Y, point_list):             # <<<<<<<<<<<<<<
 *     pts = np.ascontiguousarray(point_list, dtype=np.float64)
 *     assert pts.shape[1]==2
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_6cfaces_1point_in_polygon, NULL, __pyx_n_s_raypier_core_cfaces); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_point_in_polygon, __pyx_t_1) < 0) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "raypier/core/cfaces.pyx":1069
 *     cdef object _xy_points
 * 
 *     def __cinit__(self, z_plane=0.0, xy_points=[[]], **kwds):             # <<<<<<<<<<<<<<
 *         self.z_plane = z_plane
 *         self.xy_points = xy_points
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_k__24 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "raypier/core/cfaces.pyx":1318
 *         public double z_height, curvature
 * 
 *     params=[]             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_SaddleFace->tp_dict, __pyx_n_s_params, __pyx_t_2) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_SaddleFace);

  /* "raypier/core/cfaces.pyx":1405
 *         public double z_height, radius
 * 
 *     params = []             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_CylindericalFace->tp_dict, __pyx_n_s_params, __pyx_t_2) < 0) __PYX_ERR(0, 1405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_CylindericalFace);

  /* "raypier/core/cfaces.pyx":1645
 *         public double curvature, z_height, conic_const
 * 
 *     params = []             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_ConicRevolutionFace->tp_dict, __pyx_n_s_params, __pyx_t_2) < 0) __PYX_ERR(0, 1645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_ConicRevolutionFace);

  /* "raypier/core/cfaces.pyx":1779
 *         public double atol
 * 
 *     params = []             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, **kwds):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7raypier_4core_6cfaces_AsphericFace->tp_dict, __pyx_n_s_params, __pyx_t_2) < 0) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7raypier_4core_6cfaces_AsphericFace);

  /* "(tree fragment)":1
 * def __pyx_unpickle_ImplicitBoundedFace(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_6cfaces_3__pyx_unpickle_ImplicitBoundedFace, NULL, __pyx_n_s_raypier_core_cfaces); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_ImplicitBoundedFa, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_ImplicitBoundedFace__set_state(<ImplicitBoundedFace> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_ImplicitBoundedFace__set_state(ImplicitBoundedFace __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.boundary = __pyx_state[0]; __pyx_result.count = __pyx_state[1]; __pyx_result.idx = __pyx_state[2]; __pyx_result.invert_normal = __pyx_state[3]; __pyx_result.material = __pyx_state[4]; __pyx_result.max_length = __pyx_state[5]; __pyx_result.name = __pyx_state[6]; __pyx_result.owner = __pyx_state[7]; __pyx_result.target = __pyx_state[8]; __pyx_result.tolerance = __pyx_state[9]
 *     if len(__pyx_state) > 10 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_7raypier_4core_6cfaces_5__pyx_unpickle_OffAxisParabolicFace, NULL, __pyx_n_s_raypier_core_cfaces); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OffAxisParabolicF, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "raypier/core/cfaces.pyx":1
 * #!/usr/bin/env python             # <<<<<<<<<<<<<<
 * 
 * #cython: boundscheck=False
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_3[0] = PyThread_allocate_lock();
  __pyx_t_3[1] = PyThread_allocate_lock();
  __pyx_t_3[2] = PyThread_allocate_lock();
  __pyx_t_3[3] = PyThread_allocate_lock();
  __pyx_t_3[4] = PyThread_allocate_lock();
  __pyx_t_3[5] = PyThread_allocate_lock();
  __pyx_t_3[6] = PyThread_allocate_lock();
  __pyx_t_3[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_3, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init raypier.core.cfaces", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init raypier.core.cfaces");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* SetItemInt */
  static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyObjectCall2Args */
  static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* HasAttr */
  static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* BytesEquals */
  static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
  static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* decode_c_string */
  static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* CallNextTpDealloc */
  static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
  static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
  static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
  static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* SetVTable */
  static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* MemviewSliceIsContig */
  static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
  static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
  static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(double *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj) {
    double value = __pyx_PyFloat_AsDouble(obj);
    if ((value == (double)-1) && PyErr_Occurred())
        return 0;
    *(double *) itemp = value;
    return 1;
}

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const short neg_one = (short) -1, const_zero = (short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case  1: __PYX_VERIFY_RETURN_INT(short, digit, digits[0])
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 2 * PyLong_SHIFT) {
                            return (short) (((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 3 * PyLong_SHIFT) {
                            return (short) (((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) >= 4 * PyLong_SHIFT) {
                            return (short) (((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (short) 0;
                case -1: __PYX_VERIFY_RETURN_INT(short, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(short,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(short) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                            return (short) ((((((short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(short) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                            return (short) ((((((((short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(short) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) (((short)-1)*(((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(short) - 1 > 4 * PyLong_SHIFT) {
                            return (short) ((((((((((short)digits[3]) << PyLong_SHIFT) | (short)digits[2]) << PyLong_SHIFT) | (short)digits[1]) << PyLong_SHIFT) | (short)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(short) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to short");
    return (short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to short");
    return (short) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrImport */
  #ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
