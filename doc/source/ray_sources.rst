Ray Sources
===========

Ray sources generate the input rays for the model. The Ray-source objects also hold the results of the trace, in the 
:py:attr:`traced_rays` attribute, as a list of :py:class:`RayCollection` objects. Each item in this list represents one "generation"
of rays. 

Ray sources have a :py:attr:`sequential` attribute. When set True, the source will be traced sequentially using a pre-defined list of surfaces.
If no list of surfaces exists, the trace will default to the usual non-sequential mode and the surface-sequence obtained by this trace
will be stored for use in subsequent sequential traces. The stored sequence can be cleared by assigning to the :py:attr:`clear_sequence` event-trait.

Ray source classes are subclasses of :py:class:`raypier.sources.BaseRaySource`. Besides generating the :py:attr:`input_rays` (a :py:class:`RayCollection`
instance) attribute as the input to the model, and holding the trace results in the :py:attr:`traced_rays` member, the source
objects also control the visualisation of the rays. The following visualisation-related attributes are available.

.. py:class:: raypier.sources.BaseRaySource

    .. py:attribute:: raypier.sources.BaseRaySource.display
        :type: enum("pipes", "wires", "none")
        
        Indicates how the rays should be drawn.

    .. py:attribute:: raypier.sources.BaseRaySource.opacity
        :type: float
        
        Sets the opacity for the rays where 0.0 is fully transparent and 1.0 is fully opaque.
        
    .. py:attribute:: raypier.sources.BaseRaySource.wavelength_list
        :type:
        
        An numpy.ndarray  listing all the wavelengths used generated by this ray source.
        
    .. py:attribute:: raypier.sources.BaseRaySource.max_ray_len
        :type: float
        
        Sets the maximum length of the rays.
        
    .. py:attribute:: raypier.sources.BaseRaySource.scale_factor
        :type: float
        
        Adjusts the scaling for the rays and related glyphs such as normals-arrows.
            
    .. py:attribute:: raypier.sources.BaseRaySource.show_start
        :type: bool
        
        If True, a sphere glyph is displayed at the source origin.
        
    .. py:attribute:: raypier.sources.BaseRaySource.show_normals
        :type: bool
        
        If True, the normal-vectors at each ray intersection will be drawn.
        
        
.. py:class:: raypier.sources.SingleRaySource(raypier.sources.BaseRaySource)


Ray Field Sources
-----------------

A further sub-catagory of ray-sources are Ray Field Sources, being subclasses of :py:class:`~raypier.sources.RayFieldSource`. 
In addition to generating the input_rays, Ray Field Source objects also generate the :py:attr:`~raypier.sources.RayFieldSource.neighbours`
attribute. This is a (N,6) shaped array of ints which gives the index of each rays immediate neighbour. 

The `neighbours` data for each RayCollection object is derived from it's parent RayCollection. They are evaluated
lazily so if neighbours are not required they don't incure any penatly. Having neighbours present means that a 
RayCollection object can be summed as a set of Gaussian modes to generate the E-field.

Ray Field Sources were a precursor to the Gausslets implementation and are now somewhat redundant. If you want
to include diffraction-effects, your starting point should be a Gausslet Source (see below). Ray Field Sources 
do not include the effects of diffraction in the propagation of their parent rays. Ray Fields can thus give you the
point-spread function. One benefit of Ray Fields over Gausslet Sources would be that performance: without the need
to trace parabasal rays, we expect ray-tracing RayFields to be faster than the full Gausslet implementation.
